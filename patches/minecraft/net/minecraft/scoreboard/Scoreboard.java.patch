--- before/net/minecraft/scoreboard/Scoreboard.java
+++ after/net/minecraft/scoreboard/Scoreboard.java
@@ -13,12 +13,12 @@
 
 public class Scoreboard
 {
-    private final Map<String, ScoreObjective> scoreObjectives = Maps.newHashMap();
-    private final Map<IScoreCriteria, List<ScoreObjective>> scoreObjectiveCriterias = Maps.newHashMap();
-    private final Map<String, Map<ScoreObjective, Score>> entitiesScoreObjectives = Maps.newHashMap();
+    private final Map<String, ScoreObjective> scoreObjectives = Maps.<String, ScoreObjective>newHashMap();
+    private final Map<IScoreCriteria, List<ScoreObjective>> scoreObjectiveCriterias = Maps.<IScoreCriteria, List<ScoreObjective>>newHashMap();
+    private final Map<String, Map<ScoreObjective, Score>> entitiesScoreObjectives = Maps.<String, Map<ScoreObjective, Score>>newHashMap();
     private final ScoreObjective[] objectiveDisplaySlots = new ScoreObjective[19];
-    private final Map<String, ScorePlayerTeam> teams = Maps.newHashMap();
-    private final Map<String, ScorePlayerTeam> teamMemberships = Maps.newHashMap();
+    private final Map<String, ScorePlayerTeam> teams = Maps.<String, ScorePlayerTeam>newHashMap();
+    private final Map<String, ScorePlayerTeam> teamMemberships = Maps.<String, ScorePlayerTeam>newHashMap();
     private static String[] displaySlots;
 
     @Nullable
@@ -44,11 +44,11 @@
             else
             {
                 scoreobjective = new ScoreObjective(this, name, criteria);
-                List<ScoreObjective> list = this.scoreObjectiveCriterias.get(criteria);
+                List<ScoreObjective> list = (List)this.scoreObjectiveCriterias.get(criteria);
 
                 if (list == null)
                 {
-                    list = Lists.newArrayList();
+                    list = Lists.<ScoreObjective>newArrayList();
                     this.scoreObjectiveCriterias.put(criteria, list);
                 }
 
@@ -62,13 +62,13 @@
 
     public Collection<ScoreObjective> getObjectivesFromCriteria(IScoreCriteria criteria)
     {
-        Collection<ScoreObjective> collection = this.scoreObjectiveCriterias.get(criteria);
+        Collection<ScoreObjective> collection = (Collection)this.scoreObjectiveCriterias.get(criteria);
         return collection == null ? Lists.newArrayList() : Lists.newArrayList(collection);
     }
 
     public boolean entityHasObjective(String name, ScoreObjective objective)
     {
-        Map<ScoreObjective, Score> map = this.entitiesScoreObjectives.get(name);
+        Map<ScoreObjective, Score> map = (Map)this.entitiesScoreObjectives.get(name);
 
         if (map == null)
         {
@@ -89,11 +89,11 @@
         }
         else
         {
-            Map<ScoreObjective, Score> map = this.entitiesScoreObjectives.get(username);
+            Map<ScoreObjective, Score> map = (Map)this.entitiesScoreObjectives.get(username);
 
             if (map == null)
             {
-                map = Maps.newHashMap();
+                map = Maps.<ScoreObjective, Score>newHashMap();
                 this.entitiesScoreObjectives.put(username, map);
             }
 
@@ -111,7 +111,7 @@
 
     public Collection<Score> getSortedScores(ScoreObjective objective)
     {
-        List<Score> list = Lists.newArrayList();
+        List<Score> list = Lists.<Score>newArrayList();
 
         for (Map<ScoreObjective, Score> map : this.entitiesScoreObjectives.values())
         {
@@ -141,7 +141,7 @@
     {
         if (objective == null)
         {
-            Map<ScoreObjective, Score> map = this.entitiesScoreObjectives.remove(name);
+            Map<ScoreObjective, Score> map = (Map)this.entitiesScoreObjectives.remove(name);
 
             if (map != null)
             {
@@ -150,7 +150,7 @@
         }
         else
         {
-            Map<ScoreObjective, Score> map2 = this.entitiesScoreObjectives.get(name);
+            Map<ScoreObjective, Score> map2 = (Map)this.entitiesScoreObjectives.get(name);
 
             if (map2 != null)
             {
@@ -158,7 +158,7 @@
 
                 if (map2.size() < 1)
                 {
-                    Map<ScoreObjective, Score> map1 = this.entitiesScoreObjectives.remove(name);
+                    Map<ScoreObjective, Score> map1 = (Map)this.entitiesScoreObjectives.remove(name);
 
                     if (map1 != null)
                     {
@@ -176,7 +176,7 @@
     public Collection<Score> getScores()
     {
         Collection<Map<ScoreObjective, Score>> collection = this.entitiesScoreObjectives.values();
-        List<Score> list = Lists.newArrayList();
+        List<Score> list = Lists.<Score>newArrayList();
 
         for (Map<ScoreObjective, Score> map : collection)
         {
@@ -188,11 +188,11 @@
 
     public Map<ScoreObjective, Score> getObjectivesForEntity(String name)
     {
-        Map<ScoreObjective, Score> map = this.entitiesScoreObjectives.get(name);
+        Map<ScoreObjective, Score> map = (Map)this.entitiesScoreObjectives.get(name);
 
         if (map == null)
         {
-            map = Maps.newHashMap();
+            map = Maps.<ScoreObjective, Score>newHashMap();
         }
 
         return map;
@@ -202,15 +202,15 @@
     {
         this.scoreObjectives.remove(objective.getName());
 
-        for (int i = 0; i < 19; i++)
+        for (int i = 0; i < 19; ++i)
         {
             if (this.getObjectiveInDisplaySlot(i) == objective)
             {
-                this.setObjectiveInDisplaySlot(i, null);
+                this.setObjectiveInDisplaySlot(i, (ScoreObjective)null);
             }
         }
 
-        List<ScoreObjective> list = this.scoreObjectiveCriterias.get(objective.getCriteria());
+        List<ScoreObjective> list = (List)this.scoreObjectiveCriterias.get(objective.getCriteria());
 
         if (list != null)
         {
@@ -445,7 +445,7 @@
         {
             displaySlots = new String[19];
 
-            for (int i = 0; i < 19; i++)
+            for (int i = 0; i < 19; ++i)
             {
                 displaySlots[i] = getObjectiveDisplaySlot(i);
             }
@@ -459,7 +459,7 @@
         if (entityIn != null && !(entityIn instanceof EntityPlayer) && !entityIn.isEntityAlive())
         {
             String s = entityIn.getCachedUniqueIdString();
-            this.removeObjectiveFromEntity(s, null);
+            this.removeObjectiveFromEntity(s, (ScoreObjective)null);
             this.removePlayerFromTeams(s);
         }
     }
