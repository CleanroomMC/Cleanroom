--- before/net/minecraft/realms/RealmsConnect.java
+++ after/net/minecraft/realms/RealmsConnect.java
@@ -32,13 +32,13 @@
         Realms.setConnectedToRealms(true);
         (new Thread("Realms-connect-task")
         {
-            @Override
             public void run()
             {
                 InetAddress inetaddress = null;
 
                 try
                 {
+                    net.minecraftforge.fml.client.FMLClientHandler.instance().connectToRealmsServer(p_connect_1_, p_connect_2_);
                     inetaddress = InetAddress.getByName(p_connect_1_);
 
                     if (RealmsConnect.this.aborted)
@@ -46,26 +46,21 @@
                         return;
                     }
 
-                    RealmsConnect.this.connection = NetworkManager.createNetworkManagerAndConnect(
-                                                        inetaddress, p_connect_2_, Minecraft.getMinecraft().gameSettings.isUsingNativeTransport()
-                                                    );
-
-                    if (RealmsConnect.this.aborted)
-                    {
-                        return;
-                    }
-
-                    RealmsConnect.this.connection
-                    .setNetHandler(
-                        new NetHandlerLoginClient(RealmsConnect.this.connection, Minecraft.getMinecraft(), RealmsConnect.this.onlineScreen.getProxy())
-                    );
-
-                    if (RealmsConnect.this.aborted)
-                    {
-                        return;
-                    }
-
-                    RealmsConnect.this.connection.sendPacket(new C00Handshake(p_connect_1_, p_connect_2_, EnumConnectionState.LOGIN));
+                    RealmsConnect.this.connection = NetworkManager.createNetworkManagerAndConnect(inetaddress, p_connect_2_, Minecraft.getMinecraft().gameSettings.isUsingNativeTransport());
+
+                    if (RealmsConnect.this.aborted)
+                    {
+                        return;
+                    }
+
+                    RealmsConnect.this.connection.setNetHandler(new NetHandlerLoginClient(RealmsConnect.this.connection, Minecraft.getMinecraft(), RealmsConnect.this.onlineScreen.getProxy()));
+
+                    if (RealmsConnect.this.aborted)
+                    {
+                        return;
+                    }
+
+                    RealmsConnect.this.connection.sendPacket(new C00Handshake(p_connect_1_, p_connect_2_, EnumConnectionState.LOGIN, true));
 
                     if (RealmsConnect.this.aborted)
                     {
@@ -84,13 +79,7 @@
                     }
 
                     RealmsConnect.LOGGER.error("Couldn't connect to world", (Throwable)unknownhostexception);
-                    Realms.setScreen(
-                        new DisconnectedRealmsScreen(
-                            RealmsConnect.this.onlineScreen,
-                            "connect.failed",
-                            new TextComponentTranslation("disconnect.genericReason", "Unknown host '" + p_connect_1_ + "'")
-                        )
-                    );
+                    Realms.setScreen(new DisconnectedRealmsScreen(RealmsConnect.this.onlineScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[] {"Unknown host '" + p_connect_1_ + "'"})));
                 }
                 catch (Exception exception)
                 {
@@ -110,15 +99,10 @@
                         s = s.replaceAll(s1, "");
                     }
 
-                    Realms.setScreen(
-                        new DisconnectedRealmsScreen(
-                            RealmsConnect.this.onlineScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", s)
-                        )
-                    );
+                    Realms.setScreen(new DisconnectedRealmsScreen(RealmsConnect.this.onlineScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[] {s})));
                 }
             }
-        })
-        .start();
+        }).start();
     }
 
     public void abort()
@@ -127,7 +111,7 @@
 
         if (this.connection != null && this.connection.isChannelOpen())
         {
-            this.connection.closeChannel(new TextComponentTranslation("disconnect.genericReason"));
+            this.connection.closeChannel(new TextComponentTranslation("disconnect.genericReason", new Object[0]));
             this.connection.handleDisconnection();
         }
     }
