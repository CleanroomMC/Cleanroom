--- before/net/minecraft/server/management/PlayerInteractionManager.java
+++ after/net/minecraft/server/management/PlayerInteractionManager.java
@@ -50,10 +50,7 @@
         this.gameType = type;
         type.configurePlayerCapabilities(this.player.capabilities);
         this.player.sendPlayerAbilities();
-        this.player
-        .server
-        .getPlayerList()
-        .sendPacketToAllPlayers(new SPacketPlayerListItem(SPacketPlayerListItem.Action.UPDATE_GAME_MODE, this.player));
+        this.player.server.getPlayerList().sendPacketToAllPlayers(new SPacketPlayerListItem(SPacketPlayerListItem.Action.UPDATE_GAME_MODE, new EntityPlayerMP[] {this.player}));
         this.world.updateAllPlayersSleepingFlag();
     }
 
@@ -84,14 +81,14 @@
 
     public void updateBlockRemoving()
     {
-        this.curblockDamage++;
+        ++this.curblockDamage;
 
         if (this.receivedFinishDiggingPacket)
         {
             int i = this.curblockDamage - this.initialBlockDamage;
             IBlockState iblockstate = this.world.getBlockState(this.delayedDestroyPos);
 
-            if (iblockstate.getMaterial() == Material.AIR)
+            if (iblockstate.getBlock().isAir(iblockstate, world, delayedDestroyPos))
             {
                 this.receivedFinishDiggingPacket = false;
             }
@@ -117,7 +114,7 @@
         {
             IBlockState iblockstate1 = this.world.getBlockState(this.destroyPos);
 
-            if (iblockstate1.getMaterial() == Material.AIR)
+            if (iblockstate1.getBlock().isAir(iblockstate1, world, destroyPos))
             {
                 this.world.sendBlockBreakProgress(this.player.getEntityId(), this.destroyPos, -1);
                 this.durabilityRemainingOnBlock = -1;
@@ -126,7 +123,7 @@
             else
             {
                 int k = this.curblockDamage - this.initialDamage;
-                float f1 = iblockstate1.getPlayerRelativeBlockHardness(this.player, this.player.world, this.delayedDestroyPos) * (float)(k + 1);
+                float f1 = iblockstate1.getPlayerRelativeBlockHardness(this.player, this.player.world, this.destroyPos) * (float)(k + 1); // Forge: Fix network break progress using wrong position
                 int l = (int)(f1 * 10.0F);
 
                 if (l != this.durabilityRemainingOnBlock)
@@ -140,9 +137,19 @@
 
     public void onBlockClicked(BlockPos pos, EnumFacing side)
     {
+        double reachDist = player.getEntityAttribute(EntityPlayer.REACH_DISTANCE).getAttributeValue();
+        net.minecraftforge.event.entity.player.PlayerInteractEvent.LeftClickBlock event = net.minecraftforge.common.ForgeHooks.onLeftClickBlock(player, pos, side, net.minecraftforge.common.ForgeHooks.rayTraceEyeHitVec(player, reachDist + 1));
+        if (event.isCanceled())
+        {
+            // Restore block and te data
+            player.connection.sendPacket(new SPacketBlockChange(world, pos));
+            world.notifyBlockUpdate(pos, world.getBlockState(pos), world.getBlockState(pos), 3);
+            return;
+        }
+
         if (this.isCreative())
         {
-            if (!this.world.extinguishFire(null, pos, side))
+            if (!this.world.extinguishFire((EntityPlayer)null, pos, side))
             {
                 this.tryHarvestBlock(pos);
             }
@@ -175,17 +182,36 @@
                 }
             }
 
-            this.world.extinguishFire(null, pos, side);
             this.initialDamage = this.curblockDamage;
             float f = 1.0F;
 
-            if (iblockstate.getMaterial() != Material.AIR)
+            if (!iblockstate.getBlock().isAir(iblockstate, world, pos))
             {
-                block.onBlockClicked(this.world, pos, this.player);
+                if (event.getUseBlock() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
+                {
+                    block.onBlockClicked(this.world, pos, this.player);
+                    this.world.extinguishFire((EntityPlayer)null, pos, side);
+                }
+                else
+                {
+                    // Restore block and te data
+                    player.connection.sendPacket(new SPacketBlockChange(world, pos));
+                    world.notifyBlockUpdate(pos, world.getBlockState(pos), world.getBlockState(pos), 3);
+                }
                 f = iblockstate.getPlayerRelativeBlockHardness(this.player, this.player.world, pos);
             }
+            if (event.getUseItem() == net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
+            {
+                if (f >= 1.0F)
+                {
+                    // Restore block and te data
+                    player.connection.sendPacket(new SPacketBlockChange(world, pos));
+                    world.notifyBlockUpdate(pos, world.getBlockState(pos), world.getBlockState(pos), 3);
+                }
+                return;
+            }
 
-            if (iblockstate.getMaterial() != Material.AIR && f >= 1.0F)
+            if (!iblockstate.getBlock().isAir(iblockstate, world, pos) && f >= 1.0F)
             {
                 this.tryHarvestBlock(pos);
             }
@@ -207,7 +233,7 @@
             int i = this.curblockDamage - this.initialDamage;
             IBlockState iblockstate = this.world.getBlockState(pos);
 
-            if (iblockstate.getMaterial() != Material.AIR)
+            if (!iblockstate.getBlock().isAir(iblockstate, world, pos))
             {
                 float f = iblockstate.getPlayerRelativeBlockHardness(this.player, this.player.world, pos) * (float)(i + 1);
 
@@ -236,9 +262,13 @@
 
     private boolean removeBlock(BlockPos pos)
     {
+        return removeBlock(pos, false);
+    }
+
+    private boolean removeBlock(BlockPos pos, boolean canHarvest)
+    {
         IBlockState iblockstate = this.world.getBlockState(pos);
-        iblockstate.getBlock().onBlockHarvested(this.world, pos, iblockstate, this.player);
-        boolean flag = this.world.setBlockToAir(pos);
+        boolean flag = iblockstate.getBlock().removedByPlayer(iblockstate, world, pos, player, canHarvest);
 
         if (flag)
         {
@@ -250,9 +280,8 @@
 
     public boolean tryHarvestBlock(BlockPos pos)
     {
-        if (this.gameType.isCreative()
-                && !this.player.getHeldItemMainhand().isEmpty()
-                && this.player.getHeldItemMainhand().getItem() instanceof ItemSword)
+        int exp = net.minecraftforge.common.ForgeHooks.onBlockBreakEvent(world, gameType, player, pos);
+        if (exp == -1)
         {
             return false;
         }
@@ -269,53 +298,41 @@
             }
             else
             {
-                if (this.gameType.hasLimitedInteractions())
-                {
-                    if (this.gameType == GameType.SPECTATOR)
-                    {
-                        return false;
-                    }
-
-                    if (!this.player.isAllowEdit())
-                    {
-                        ItemStack itemstack = this.player.getHeldItemMainhand();
-
-                        if (itemstack.isEmpty())
-                        {
-                            return false;
-                        }
-
-                        if (!itemstack.canDestroy(block))
-                        {
-                            return false;
-                        }
-                    }
-                }
+                ItemStack stack = player.getHeldItemMainhand();
+                if (!stack.isEmpty() && stack.getItem().onBlockStartBreak(stack, pos, player)) return false;
 
                 this.world.playEvent(this.player, 2001, pos, Block.getStateId(iblockstate));
-                boolean flag1 = this.removeBlock(pos);
+                boolean flag1 = false;
 
                 if (this.isCreative())
                 {
+                    flag1 = this.removeBlock(pos);
                     this.player.connection.sendPacket(new SPacketBlockChange(this.world, pos));
                 }
                 else
                 {
                     ItemStack itemstack1 = this.player.getHeldItemMainhand();
                     ItemStack itemstack2 = itemstack1.isEmpty() ? ItemStack.EMPTY : itemstack1.copy();
-                    boolean flag = this.player.canHarvestBlock(iblockstate);
+                    boolean flag = iblockstate.getBlock().canHarvestBlock(world, pos, player);
 
                     if (!itemstack1.isEmpty())
                     {
                         itemstack1.onBlockDestroyed(this.world, iblockstate, pos, this.player);
+                        if (itemstack1.isEmpty()) net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this.player, itemstack2, EnumHand.MAIN_HAND);
                     }
 
+                    flag1 = this.removeBlock(pos, flag);
                     if (flag1 && flag)
                     {
                         iblockstate.getBlock().harvestBlock(this.world, this.player, pos, iblockstate, tileentity, itemstack2);
                     }
                 }
 
+                // Drop experience
+                if (!this.isCreative() && flag1 && exp > 0)
+                {
+                    iblockstate.getBlock().dropXpOnBlockBreak(world, pos, exp);
+                }
                 return flag1;
             }
         }
@@ -333,8 +350,11 @@
         }
         else
         {
+            EnumActionResult cancelResult = net.minecraftforge.common.ForgeHooks.onItemRightClick(player, hand);
+            if (cancelResult != null) return cancelResult;
             int i = stack.getCount();
             int j = stack.getMetadata();
+            ItemStack copyBeforeUse = stack.copy();
             ActionResult<ItemStack> actionresult = stack.useItemRightClick(worldIn, player, hand);
             ItemStack itemstack = actionresult.getResult();
 
@@ -362,6 +382,7 @@
 
                 if (itemstack.isEmpty())
                 {
+                    net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(player, copyBeforeUse, hand);
                     player.setHeldItem(hand, ItemStack.EMPTY);
                 }
 
@@ -375,17 +396,7 @@
         }
     }
 
-    public EnumActionResult processRightClickBlock(
-        EntityPlayer player,
-        World worldIn,
-        ItemStack stack,
-        EnumHand hand,
-        BlockPos pos,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public EnumActionResult processRightClickBlock(EntityPlayer player, World worldIn, ItemStack stack, EnumHand hand, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         if (this.gameType == GameType.SPECTATOR)
         {
@@ -417,14 +428,27 @@
         }
         else
         {
-            if (!player.isSneaking() || player.getHeldItemMainhand().isEmpty() && player.getHeldItemOffhand().isEmpty())
+            double reachDist = player.getEntityAttribute(EntityPlayer.REACH_DISTANCE).getAttributeValue();
+            net.minecraftforge.event.entity.player.PlayerInteractEvent.RightClickBlock event = net.minecraftforge.common.ForgeHooks
+                    .onRightClickBlock(player, hand, pos, facing, net.minecraftforge.common.ForgeHooks.rayTraceEyeHitVec(player, reachDist + 1));
+            if (event.isCanceled()) return event.getCancellationResult();
+
+            EnumActionResult result = EnumActionResult.PASS;
+            if (event.getUseItem() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
+            {
+                result = stack.onItemUseFirst(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
+                if (result != EnumActionResult.PASS) return result ;
+            }
+
+            boolean bypass = player.getHeldItemMainhand().doesSneakBypassUse(worldIn, pos, player) && player.getHeldItemOffhand().doesSneakBypassUse(worldIn, pos, player);
+
+            if (!player.isSneaking() || bypass || event.getUseBlock() == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW)
             {
                 IBlockState iblockstate = worldIn.getBlockState(pos);
-
-                if (iblockstate.getBlock()
-                        .onBlockActivated(worldIn, pos, iblockstate, player, hand, facing, hitX, hitY, hitZ))
+                if(event.getUseBlock() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
+                if (iblockstate.getBlock().onBlockActivated(worldIn, pos, iblockstate, player, hand, facing, hitX, hitY, hitZ))
                 {
-                    return EnumActionResult.SUCCESS;
+                    result = EnumActionResult.SUCCESS;
                 }
             }
 
@@ -452,16 +476,22 @@
                 {
                     int j = stack.getMetadata();
                     int i = stack.getCount();
-                    EnumActionResult enumactionresult = stack.onItemUse(
-                                                            player, worldIn, pos, hand, facing, hitX, hitY, hitZ
-                                                        );
+                    if (result != EnumActionResult.SUCCESS && event.getUseItem() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY
+                            || result == EnumActionResult.SUCCESS && event.getUseItem() == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW) {
+                    EnumActionResult enumactionresult = stack.onItemUse(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
                     stack.setItemDamage(j);
                     stack.setCount(i);
                     return enumactionresult;
+                    } else return result;
                 }
                 else
                 {
-                    return stack.onItemUse(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
+                    if (result != EnumActionResult.SUCCESS && event.getUseItem() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY
+                            || result == EnumActionResult.SUCCESS && event.getUseItem() == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW) {
+                        ItemStack copyBeforeUse = stack.copy();
+                        result = stack.onItemUse(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
+                        if (stack.isEmpty()) net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(player, copyBeforeUse, hand);
+                    } return result;
                 }
             }
         }
@@ -470,5 +500,17 @@
     public void setWorld(WorldServer serverWorld)
     {
         this.world = serverWorld;
+    }
+
+    @Deprecated // use the attribute directly
+    public double getBlockReachDistance()
+    {
+        return player.getEntityAttribute(EntityPlayer.REACH_DISTANCE).getAttributeValue();
+    }
+
+    @Deprecated // use an attribute modifier
+    public void setBlockReachDistance(double distance)
+    {
+        player.getEntityAttribute(EntityPlayer.REACH_DISTANCE).setBaseValue(distance);
     }
 }
