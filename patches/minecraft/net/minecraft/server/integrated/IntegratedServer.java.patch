--- before/net/minecraft/server/integrated/IntegratedServer.java
+++ after/net/minecraft/server/integrated/IntegratedServer.java
@@ -7,6 +7,7 @@
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import java.io.File;
 import java.io.IOException;
+import java.net.InetAddress;
 import net.minecraft.client.ClientBrandRetriever;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.multiplayer.ThreadLanServerPing;
@@ -45,26 +46,9 @@
     private boolean isPublic;
     private ThreadLanServerPing lanServerPing;
 
-    public IntegratedServer(
-        Minecraft clientIn,
-        String folderNameIn,
-        String worldNameIn,
-        WorldSettings worldSettingsIn,
-        YggdrasilAuthenticationService authServiceIn,
-        MinecraftSessionService sessionServiceIn,
-        GameProfileRepository profileRepoIn,
-        PlayerProfileCache profileCacheIn
-    )
+    public IntegratedServer(Minecraft clientIn, String folderNameIn, String worldNameIn, WorldSettings worldSettingsIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
-        super(
-            new File(clientIn.gameDir, "saves"),
-            clientIn.getProxy(),
-            clientIn.getDataFixer(),
-            authServiceIn,
-            sessionServiceIn,
-            profileRepoIn,
-            profileCacheIn
-        );
+        super(new File(clientIn.gameDir, "saves"), clientIn.getProxy(), clientIn.getDataFixer(), authServiceIn, sessionServiceIn, profileRepoIn, profileCacheIn);
         this.setServerOwner(clientIn.getSession().getUsername());
         this.setFolderName(folderNameIn);
         this.setWorldName(worldNameIn);
@@ -76,18 +60,14 @@
         this.worldSettings = this.isDemo() ? WorldServerDemo.DEMO_WORLD_SETTINGS : worldSettingsIn;
     }
 
-    @Override
     public ServerCommandManager createCommandManager()
     {
         return new IntegratedServerCommandManager(this);
     }
 
-    @Override
     public void loadAllWorlds(String saveName, String worldNameIn, long seed, WorldType type, String generatorOptions)
     {
         this.convertMapIfNeeded(saveName);
-        this.worlds = new WorldServer[3];
-        this.timeOfLastDimensionTick = new long[this.worlds.length][100];
         ISaveHandler isavehandler = this.getActiveAnvilConverter().getSaveLoader(saveName, true);
         this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
         WorldInfo worldinfo = isavehandler.loadWorldInfo();
@@ -101,7 +81,8 @@
             worldinfo.setWorldName(worldNameIn);
         }
 
-        for (int i = 0; i < this.worlds.length; i++)
+        if (false) { //Forge: Dead Code, implement below.
+        for (int i = 0; i < this.worlds.length; ++i)
         {
             int j = 0;
 
@@ -119,26 +100,41 @@
             {
                 if (this.isDemo())
                 {
-                    this.worlds[i] = (WorldServer)new WorldServerDemo(this, isavehandler, worldinfo, j, this.profiler).init();
+                    this.worlds[i] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, j, this.profiler)).init();
                 }
                 else
                 {
-                    this.worlds[i] = (WorldServer)new WorldServer(this, isavehandler, worldinfo, j, this.profiler).init();
+                    this.worlds[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.profiler)).init();
                 }
 
                 this.worlds[i].initialize(this.worldSettings);
             }
             else
             {
-                this.worlds[i] = (WorldServer)new WorldServerMulti(this, isavehandler, j, this.worlds[0], this.profiler).init();
+                this.worlds[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.worlds[0], this.profiler)).init();
             }
 
             this.worlds[i].addEventListener(new ServerWorldEventHandler(this, this.worlds[i]));
         }
-
-        this.getPlayerList().setPlayerManager(this.worlds);
-
-        if (this.worlds[0].getWorldInfo().getDifficulty() == null)
+        }// Forge: End Dead Code
+
+        WorldServer overWorld = (isDemo() ? (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, 0, this.profiler)).init() :
+                                            (WorldServer)(new WorldServer(this, isavehandler, worldinfo, 0, this.profiler)).init());
+        overWorld.initialize(this.worldSettings);
+        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs())
+        {
+            WorldServer world = (dim == 0 ? overWorld : (WorldServer)(new WorldServerMulti(this, isavehandler, dim, overWorld, this.profiler)).init());
+            world.addEventListener(new ServerWorldEventHandler(this, world));
+            if (!this.isSinglePlayer())
+            {
+                world.getWorldInfo().setGameType(getGameType());
+            }
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
+        }
+
+        this.getPlayerList().setPlayerManager(new WorldServer[]{ overWorld });
+
+        if (overWorld.getWorldInfo().getDifficulty() == null)
         {
             this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
         }
@@ -146,7 +142,6 @@
         this.initialWorldChunkLoad();
     }
 
-    @Override
     public boolean init() throws IOException
     {
         LOGGER.info("Starting integrated minecraft server version 1.12.2");
@@ -157,14 +152,12 @@
         this.setAllowFlight(true);
         LOGGER.info("Generating keypair");
         this.setKeyPair(CryptManager.generateKeyPair());
-        this.loadAllWorlds(
-            this.getFolderName(), this.getWorldName(), this.worldSettings.getSeed(), this.worldSettings.getTerrainType(), this.worldSettings.getGeneratorOptions()
-        );
+        if (!net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerAboutToStart(this)) return false;
+        this.loadAllWorlds(this.getFolderName(), this.getWorldName(), this.worldSettings.getSeed(), this.worldSettings.getTerrainType(), this.worldSettings.getGeneratorOptions());
         this.setMOTD(this.getServerOwner() + " - " + this.worlds[0].getWorldInfo().getWorldName());
-        return true;
+        return net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStarting(this);
     }
 
-    @Override
     public void tick()
     {
         boolean flag = this.isGamePaused;
@@ -193,7 +186,7 @@
 
             if (this.mc.gameSettings.renderDistanceChunks != this.getPlayerList().getViewDistance())
             {
-                LOGGER.info("Changing view distance to {}, from {}", this.mc.gameSettings.renderDistanceChunks, this.getPlayerList().getViewDistance());
+                LOGGER.info("Changing view distance to {}, from {}", Integer.valueOf(this.mc.gameSettings.renderDistanceChunks), Integer.valueOf(this.getPlayerList().getViewDistance()));
                 this.getPlayerList().setViewDistance(this.mc.gameSettings.renderDistanceChunks);
             }
 
@@ -209,7 +202,7 @@
                 }
                 else if (worldinfo.isDifficultyLocked() && !worldinfo1.isDifficultyLocked())
                 {
-                    LOGGER.info("Locking difficulty to {}", worldinfo.getDifficulty());
+                    LOGGER.info("Locking difficulty to {}", (Object)worldinfo.getDifficulty());
 
                     for (WorldServer worldserver : this.worlds)
                     {
@@ -223,73 +216,62 @@
         }
     }
 
-    @Override
     public boolean canStructuresSpawn()
     {
         return false;
     }
 
-    @Override
     public GameType getGameType()
     {
         return this.worldSettings.getGameType();
     }
 
-    @Override
     public EnumDifficulty getDifficulty()
     {
+        if (this.mc.world == null) return this.mc.gameSettings.difficulty; // Fix NPE just in case.
         return this.mc.world.getWorldInfo().getDifficulty();
     }
 
-    @Override
     public boolean isHardcore()
     {
         return this.worldSettings.getHardcoreEnabled();
     }
 
-    @Override
     public boolean shouldBroadcastRconToOps()
     {
         return true;
     }
 
-    @Override
     public boolean shouldBroadcastConsoleToOps()
     {
         return true;
     }
 
-    @Override
     public void saveAllWorlds(boolean isSilent)
     {
         super.saveAllWorlds(isSilent);
     }
 
-    @Override
     public File getDataDirectory()
     {
         return this.mc.gameDir;
     }
 
-    @Override
     public boolean isDedicatedServer()
     {
         return false;
     }
 
-    @Override
     public boolean shouldUseNativeTransport()
     {
         return false;
     }
 
-    @Override
     public void finalTick(CrashReport report)
     {
         this.mc.crashed(report);
     }
 
-    @Override
     public CrashReport addServerInfoToCrashReport(CrashReport report)
     {
         report = super.addServerInfoToCrashReport(report);
@@ -300,10 +282,7 @@
                 return "Integrated Server (map_client.txt)";
             }
         });
-        report.getCategory()
-        .addDetail(
-            "Is Modded",
-            new ICrashReportDetail<String>()
+        report.getCategory().addDetail("Is Modded", new ICrashReportDetail<String>()
         {
             public String call() throws Exception
             {
@@ -323,18 +302,14 @@
                     }
                     else
                     {
-                        return Minecraft.class.getSigners() == null
-                               ? "Very likely; Jar signature invalidated"
-                               : "Probably not. Jar signature remains and both client + server brands are untouched.";
+                        return Minecraft.class.getSigners() == null ? "Very likely; Jar signature invalidated" : "Probably not. Jar signature remains and both client + server brands are untouched.";
                     }
                 }
             }
-        }
-        );
+        });
         return report;
     }
 
-    @Override
     public void setDifficultyForAllWorlds(EnumDifficulty difficulty)
     {
         super.setDifficultyForAllWorlds(difficulty);
@@ -345,20 +320,17 @@
         }
     }
 
-    @Override
     public void addServerStatsToSnooper(Snooper playerSnooper)
     {
         super.addServerStatsToSnooper(playerSnooper);
         playerSnooper.addClientStat("snooper_partner", this.mc.getPlayerUsageSnooper().getUniqueID());
     }
 
-    @Override
     public boolean isSnooperEnabled()
     {
         return Minecraft.getMinecraft().isSnooperEnabled();
     }
 
-    @Override
     public String shareToLAN(GameType type, boolean allowCheats)
     {
         try
@@ -369,8 +341,9 @@
             {
                 i = HttpUtil.getSuitableLanPort();
             }
-            catch (IOException ioexception)
+            catch (IOException var5)
             {
+                ;
             }
 
             if (i <= 0)
@@ -378,8 +351,8 @@
                 i = 25564;
             }
 
-            this.getNetworkSystem().addEndpoint(null, i);
-            LOGGER.info("Started on {}", i);
+            this.getNetworkSystem().addEndpoint((InetAddress)null, i);
+            LOGGER.info("Started on {}", (int)i);
             this.isPublic = true;
             this.lanServerPing = new ThreadLanServerPing(this.getMOTD(), i + "");
             this.lanServerPing.start();
@@ -388,13 +361,12 @@
             this.mc.player.setPermissionLevel(allowCheats ? 4 : 0);
             return i + "";
         }
-        catch (IOException ioexception1)
+        catch (IOException var6)
         {
             return null;
         }
     }
 
-    @Override
     public void stopServer()
     {
         super.stopServer();
@@ -406,12 +378,11 @@
         }
     }
 
-    @Override
     public void initiateShutdown()
     {
+        if (isServerRunning())
         Futures.getUnchecked(this.addScheduledTask(new Runnable()
         {
-            @Override
             public void run()
             {
                 for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getPlayerList().getPlayers()))
@@ -437,20 +408,17 @@
         return this.isPublic;
     }
 
-    @Override
     public void setGameType(GameType gameMode)
     {
         super.setGameType(gameMode);
         this.getPlayerList().setGameType(gameMode);
     }
 
-    @Override
     public boolean isCommandBlockEnabled()
     {
         return true;
     }
 
-    @Override
     public int getOpPermissionLevel()
     {
         return 4;
