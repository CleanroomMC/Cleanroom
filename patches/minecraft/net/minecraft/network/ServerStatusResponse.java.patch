--- before/net/minecraft/network/ServerStatusResponse.java
+++ after/net/minecraft/network/ServerStatusResponse.java
@@ -29,6 +29,7 @@
     public void setServerDescription(ITextComponent descriptionIn)
     {
         this.description = descriptionIn;
+        invalidateJson();
     }
 
     public ServerStatusResponse.Players getPlayers()
@@ -39,6 +40,7 @@
     public void setPlayers(ServerStatusResponse.Players playersIn)
     {
         this.players = playersIn;
+        invalidateJson();
     }
 
     public ServerStatusResponse.Version getVersion()
@@ -49,11 +51,13 @@
     public void setVersion(ServerStatusResponse.Version versionIn)
     {
         this.version = versionIn;
+        invalidateJson();
     }
 
     public void setFavicon(String faviconBlob)
     {
         this.favicon = faviconBlob;
+        invalidateJson();
     }
 
     public String getFavicon()
@@ -98,9 +102,7 @@
                     public ServerStatusResponse.Players deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException
                     {
                         JsonObject jsonobject = JsonUtils.getJsonObject(p_deserialize_1_, "players");
-                        ServerStatusResponse.Players serverstatusresponse$players = new ServerStatusResponse.Players(
-                            JsonUtils.getInt(jsonobject, "max"), JsonUtils.getInt(jsonobject, "online")
-                        );
+                        ServerStatusResponse.Players serverstatusresponse$players = new ServerStatusResponse.Players(JsonUtils.getInt(jsonobject, "max"), JsonUtils.getInt(jsonobject, "online"));
 
                         if (JsonUtils.isJsonArray(jsonobject, "sample"))
                         {
@@ -110,7 +112,7 @@
                             {
                                 GameProfile[] agameprofile = new GameProfile[jsonarray.size()];
 
-                                for (int i = 0; i < agameprofile.length; i++)
+                                for (int i = 0; i < agameprofile.length; ++i)
                                 {
                                     JsonObject jsonobject1 = JsonUtils.getJsonObject(jsonarray.get(i), "player[" + i + "]");
                                     String s = JsonUtils.getString(jsonobject1, "id");
@@ -127,14 +129,14 @@
                     public JsonElement serialize(ServerStatusResponse.Players p_serialize_1_, Type p_serialize_2_, JsonSerializationContext p_serialize_3_)
                     {
                         JsonObject jsonobject = new JsonObject();
-                        jsonobject.addProperty("max", p_serialize_1_.getMaxPlayers());
-                        jsonobject.addProperty("online", p_serialize_1_.getOnlinePlayerCount());
+                        jsonobject.addProperty("max", Integer.valueOf(p_serialize_1_.getMaxPlayers()));
+                        jsonobject.addProperty("online", Integer.valueOf(p_serialize_1_.getOnlinePlayerCount()));
 
                         if (p_serialize_1_.getPlayers() != null && p_serialize_1_.getPlayers().length > 0)
                         {
                             JsonArray jsonarray = new JsonArray();
 
-                            for (int i = 0; i < p_serialize_1_.getPlayers().length; i++)
+                            for (int i = 0; i < p_serialize_1_.getPlayers().length; ++i)
                             {
                                 JsonObject jsonobject1 = new JsonObject();
                                 UUID uuid = p_serialize_1_.getPlayers()[i].getId();
@@ -160,17 +162,17 @@
 
                 if (jsonobject.has("description"))
                 {
-                    serverstatusresponse.setServerDescription(p_deserialize_3_.deserialize(jsonobject.get("description"), ITextComponent.class));
+                    serverstatusresponse.setServerDescription((ITextComponent)p_deserialize_3_.deserialize(jsonobject.get("description"), ITextComponent.class));
                 }
 
                 if (jsonobject.has("players"))
                 {
-                    serverstatusresponse.setPlayers(p_deserialize_3_.deserialize(jsonobject.get("players"), ServerStatusResponse.Players.class));
+                    serverstatusresponse.setPlayers((ServerStatusResponse.Players)p_deserialize_3_.deserialize(jsonobject.get("players"), ServerStatusResponse.Players.class));
                 }
 
                 if (jsonobject.has("version"))
                 {
-                    serverstatusresponse.setVersion(p_deserialize_3_.deserialize(jsonobject.get("version"), ServerStatusResponse.Version.class));
+                    serverstatusresponse.setVersion((ServerStatusResponse.Version)p_deserialize_3_.deserialize(jsonobject.get("version"), ServerStatusResponse.Version.class));
                 }
 
                 if (jsonobject.has("favicon"))
@@ -178,6 +180,7 @@
                     serverstatusresponse.setFavicon(JsonUtils.getString(jsonobject, "favicon"));
                 }
 
+                net.minecraftforge.fml.client.FMLClientHandler.instance().captureAdditionalData(serverstatusresponse, jsonobject);
                 return serverstatusresponse;
             }
 
@@ -205,10 +208,50 @@
                     jsonobject.addProperty("favicon", p_serialize_1_.getFavicon());
                 }
 
+                net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.enhanceStatusQuery(jsonobject);
                 return jsonobject;
             }
         }
 
+    private java.util.concurrent.Semaphore mutex = new java.util.concurrent.Semaphore(1);
+    private String json = null;
+    /**
+     * Returns this object as a Json string.
+     * Converting to JSON if a cached version is not available.
+     *
+     * Also to prevent potentially large memory allocations on the server
+     * this is moved from the S00PacketServerInfo writePacket function
+     *
+     * As this method is called from the network threads thread safety is important!
+     *
+     * @return
+     */
+    public String getJson()
+    {
+        String ret = this.json;
+        if (ret == null)
+        {
+            mutex.acquireUninterruptibly();
+            ret = this.json;
+            if (ret == null)
+            {
+                ret = net.minecraft.network.status.server.SPacketServerInfo.GSON.toJson(this);
+                this.json = ret;
+            }
+            mutex.release();
+        }
+        return ret;
+    }
+
+    /**
+     * Invalidates the cached json, causing the next call to getJson to rebuild it.
+     * This is needed externally because PlayerCountData.setPlayer's is public.
+     */
+    public void invalidateJson()
+    {
+        this.json = null;
+    }
+
     public static class Version
         {
             private final String name;
@@ -242,7 +285,7 @@
                     {
                         JsonObject jsonobject = new JsonObject();
                         jsonobject.addProperty("name", p_serialize_1_.getName());
-                        jsonobject.addProperty("protocol", p_serialize_1_.getProtocol());
+                        jsonobject.addProperty("protocol", Integer.valueOf(p_serialize_1_.getProtocol()));
                         return jsonobject;
                     }
                 }
