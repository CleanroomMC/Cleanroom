--- before/net/minecraft/network/datasync/DataSerializers.java
+++ after/net/minecraft/network/datasync/DataSerializers.java
@@ -17,21 +17,20 @@
 
 public class DataSerializers
 {
-    private static final IntIdentityHashBiMap < DataSerializer<? >> REGISTRY = new IntIdentityHashBiMap<>(16);
+    private static final IntIdentityHashBiMap < DataSerializer<? >> REGISTRY = new IntIdentityHashBiMap < DataSerializer<? >> (16);
     public static final DataSerializer<Byte> BYTE = new DataSerializer<Byte>()
     {
         public void write(PacketBuffer buf, Byte value)
         {
-            buf.writeByte(value);
+            buf.writeByte(value.byteValue());
         }
         public Byte read(PacketBuffer buf) throws IOException
         {
             return buf.readByte();
         }
-        @Override
         public DataParameter<Byte> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Byte>(id, this);
         }
         public Byte copyValue(Byte value)
         {
@@ -42,16 +41,15 @@
     {
         public void write(PacketBuffer buf, Integer value)
         {
-            buf.writeVarInt(value);
+            buf.writeVarInt(value.intValue());
         }
         public Integer read(PacketBuffer buf) throws IOException
         {
             return buf.readVarInt();
         }
-        @Override
         public DataParameter<Integer> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Integer>(id, this);
         }
         public Integer copyValue(Integer value)
         {
@@ -62,16 +60,15 @@
     {
         public void write(PacketBuffer buf, Float value)
         {
-            buf.writeFloat(value);
+            buf.writeFloat(value.floatValue());
         }
         public Float read(PacketBuffer buf) throws IOException
         {
             return buf.readFloat();
         }
-        @Override
         public DataParameter<Float> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Float>(id, this);
         }
         public Float copyValue(Float value)
         {
@@ -88,10 +85,9 @@
         {
             return buf.readString(32767);
         }
-        @Override
         public DataParameter<String> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<String>(id, this);
         }
         public String copyValue(String value)
         {
@@ -108,10 +104,9 @@
         {
             return buf.readTextComponent();
         }
-        @Override
         public DataParameter<ITextComponent> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<ITextComponent>(id, this);
         }
         public ITextComponent copyValue(ITextComponent value)
         {
@@ -128,10 +123,9 @@
         {
             return buf.readItemStack();
         }
-        @Override
         public DataParameter<ItemStack> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<ItemStack>(id, this);
         }
         public ItemStack copyValue(ItemStack value)
         {
@@ -156,10 +150,9 @@
             int i = buf.readVarInt();
             return i == 0 ? Optional.absent() : Optional.of(Block.getStateById(i));
         }
-        @Override
         public DataParameter<Optional<IBlockState>> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Optional<IBlockState>>(id, this);
         }
         public Optional<IBlockState> copyValue(Optional<IBlockState> value)
         {
@@ -170,16 +163,15 @@
     {
         public void write(PacketBuffer buf, Boolean value)
         {
-            buf.writeBoolean(value);
+            buf.writeBoolean(value.booleanValue());
         }
         public Boolean read(PacketBuffer buf) throws IOException
         {
             return buf.readBoolean();
         }
-        @Override
         public DataParameter<Boolean> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Boolean>(id, this);
         }
         public Boolean copyValue(Boolean value)
         {
@@ -198,10 +190,9 @@
         {
             return new Rotations(buf.readFloat(), buf.readFloat(), buf.readFloat());
         }
-        @Override
         public DataParameter<Rotations> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Rotations>(id, this);
         }
         public Rotations copyValue(Rotations value)
         {
@@ -218,10 +209,9 @@
         {
             return buf.readBlockPos();
         }
-        @Override
         public DataParameter<BlockPos> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<BlockPos>(id, this);
         }
         public BlockPos copyValue(BlockPos value)
         {
@@ -243,10 +233,9 @@
         {
             return !buf.readBoolean() ? Optional.absent() : Optional.of(buf.readBlockPos());
         }
-        @Override
         public DataParameter<Optional<BlockPos>> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Optional<BlockPos>>(id, this);
         }
         public Optional<BlockPos> copyValue(Optional<BlockPos> value)
         {
@@ -261,12 +250,11 @@
         }
         public EnumFacing read(PacketBuffer buf) throws IOException
         {
-            return buf.readEnumValue(EnumFacing.class);
+            return (EnumFacing)buf.readEnumValue(EnumFacing.class);
         }
-        @Override
         public DataParameter<EnumFacing> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<EnumFacing>(id, this);
         }
         public EnumFacing copyValue(EnumFacing value)
         {
@@ -288,10 +276,9 @@
         {
             return !buf.readBoolean() ? Optional.absent() : Optional.of(buf.readUniqueId());
         }
-        @Override
         public DataParameter<Optional<UUID>> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<Optional<UUID>>(id, this);
         }
         public Optional<UUID> copyValue(Optional<UUID> value)
         {
@@ -308,10 +295,9 @@
         {
             return buf.readCompoundTag();
         }
-        @Override
         public DataParameter<NBTTagCompound> createKey(int id)
         {
-            return new DataParameter<>(id, this);
+            return new DataParameter<NBTTagCompound>(id, this);
         }
         public NBTTagCompound copyValue(NBTTagCompound value)
         {
@@ -319,20 +305,21 @@
         }
     };
 
+    @Deprecated // Forge: ONLY FOR VANILLA - mods should use the Forge registry
     public static void registerSerializer(DataSerializer<?> serializer)
     {
-        REGISTRY.add(serializer);
+        if (REGISTRY.add(serializer) >= 256) throw new RuntimeException("Vanilla DataSerializer ID limit exceeded");
     }
 
     @Nullable
     public static DataSerializer<?> getSerializer(int id)
     {
-        return REGISTRY.get(id);
+        return net.minecraftforge.common.ForgeHooks.getSerializer(id, REGISTRY);
     }
 
     public static int getSerializerId(DataSerializer<?> serializer)
     {
-        return REGISTRY.getId(serializer);
+        return net.minecraftforge.common.ForgeHooks.getSerializerId(serializer, REGISTRY);
     }
 
     static
