--- before/net/minecraft/block/BlockPane.java
+++ after/net/minecraft/block/BlockPane.java
@@ -4,6 +4,7 @@
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.BlockStateContainer;
@@ -30,52 +31,18 @@
     public static final PropertyBool EAST = PropertyBool.create("east");
     public static final PropertyBool SOUTH = PropertyBool.create("south");
     public static final PropertyBool WEST = PropertyBool.create("west");
-    protected static final AxisAlignedBB[] AABB_BY_INDEX = new AxisAlignedBB[]
-        {
-            new AxisAlignedBB(0.4375, 0.0, 0.4375, 0.5625, 1.0, 0.5625),
-            new AxisAlignedBB(0.4375, 0.0, 0.4375, 0.5625, 1.0, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.4375, 0.5625, 1.0, 0.5625),
-            new AxisAlignedBB(0.0, 0.0, 0.4375, 0.5625, 1.0, 1.0),
-            new AxisAlignedBB(0.4375, 0.0, 0.0, 0.5625, 1.0, 0.5625),
-            new AxisAlignedBB(0.4375, 0.0, 0.0, 0.5625, 1.0, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 0.5625, 1.0, 0.5625),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 0.5625, 1.0, 1.0),
-            new AxisAlignedBB(0.4375, 0.0, 0.4375, 1.0, 1.0, 0.5625),
-            new AxisAlignedBB(0.4375, 0.0, 0.4375, 1.0, 1.0, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.4375, 1.0, 1.0, 0.5625),
-            new AxisAlignedBB(0.0, 0.0, 0.4375, 1.0, 1.0, 1.0),
-            new AxisAlignedBB(0.4375, 0.0, 0.0, 1.0, 1.0, 0.5625),
-            new AxisAlignedBB(0.4375, 0.0, 0.0, 1.0, 1.0, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 1.0, 0.5625),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 1.0, 1.0)
-        };
+    protected static final AxisAlignedBB[] AABB_BY_INDEX = new AxisAlignedBB[] {new AxisAlignedBB(0.4375D, 0.0D, 0.4375D, 0.5625D, 1.0D, 0.5625D), new AxisAlignedBB(0.4375D, 0.0D, 0.4375D, 0.5625D, 1.0D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.4375D, 0.5625D, 1.0D, 0.5625D), new AxisAlignedBB(0.0D, 0.0D, 0.4375D, 0.5625D, 1.0D, 1.0D), new AxisAlignedBB(0.4375D, 0.0D, 0.0D, 0.5625D, 1.0D, 0.5625D), new AxisAlignedBB(0.4375D, 0.0D, 0.0D, 0.5625D, 1.0D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.5625D, 1.0D, 0.5625D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.5625D, 1.0D, 1.0D), new AxisAlignedBB(0.4375D, 0.0D, 0.4375D, 1.0D, 1.0D, 0.5625D), new AxisAlignedBB(0.4375D, 0.0D, 0.4375D, 1.0D, 1.0D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.4375D, 1.0D, 1.0D, 0.5625D), new AxisAlignedBB(0.0D, 0.0D, 0.4375D, 1.0D, 1.0D, 1.0D), new AxisAlignedBB(0.4375D, 0.0D, 0.0D, 1.0D, 1.0D, 0.5625D), new AxisAlignedBB(0.4375D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.5625D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D)};
     private final boolean canDrop;
 
     protected BlockPane(Material materialIn, boolean canDrop)
     {
         super(materialIn);
-        this.setDefaultState(
-            this.blockState
-            .getBaseState()
-            .withProperty(NORTH, false)
-            .withProperty(EAST, false)
-            .withProperty(SOUTH, false)
-            .withProperty(WEST, false)
-        );
+        this.setDefaultState(this.blockState.getBaseState().withProperty(NORTH, Boolean.valueOf(false)).withProperty(EAST, Boolean.valueOf(false)).withProperty(SOUTH, Boolean.valueOf(false)).withProperty(WEST, Boolean.valueOf(false)));
         this.canDrop = canDrop;
         this.setCreativeTab(CreativeTabs.DECORATIONS);
     }
 
-    @Override
-    public void addCollisionBoxToList(
-        IBlockState state,
-        World worldIn,
-        BlockPos pos,
-        AxisAlignedBB entityBox,
-        List<AxisAlignedBB> collidingBoxes,
-        @Nullable Entity entityIn,
-        boolean isActualState
-    )
+    public void addCollisionBoxToList(IBlockState state, World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn, boolean isActualState)
     {
         if (!isActualState)
         {
@@ -84,22 +51,22 @@
 
         addCollisionBoxToList(pos, entityBox, collidingBoxes, AABB_BY_INDEX[0]);
 
-        if (state.getValue(NORTH))
+        if (((Boolean)state.getValue(NORTH)).booleanValue())
         {
             addCollisionBoxToList(pos, entityBox, collidingBoxes, AABB_BY_INDEX[getBoundingBoxIndex(EnumFacing.NORTH)]);
         }
 
-        if (state.getValue(SOUTH))
+        if (((Boolean)state.getValue(SOUTH)).booleanValue())
         {
             addCollisionBoxToList(pos, entityBox, collidingBoxes, AABB_BY_INDEX[getBoundingBoxIndex(EnumFacing.SOUTH)]);
         }
 
-        if (state.getValue(EAST))
+        if (((Boolean)state.getValue(EAST)).booleanValue())
         {
             addCollisionBoxToList(pos, entityBox, collidingBoxes, AABB_BY_INDEX[getBoundingBoxIndex(EnumFacing.EAST)]);
         }
 
-        if (state.getValue(WEST))
+        if (((Boolean)state.getValue(WEST)).booleanValue())
         {
             addCollisionBoxToList(pos, entityBox, collidingBoxes, AABB_BY_INDEX[getBoundingBoxIndex(EnumFacing.WEST)]);
         }
@@ -110,7 +77,6 @@
         return 1 << p_185729_0_.getHorizontalIndex();
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         state = this.getActualState(state, source, pos);
@@ -121,22 +87,22 @@
     {
         int i = 0;
 
-        if (state.getValue(NORTH))
+        if (((Boolean)state.getValue(NORTH)).booleanValue())
         {
             i |= getBoundingBoxIndex(EnumFacing.NORTH);
         }
 
-        if (state.getValue(EAST))
+        if (((Boolean)state.getValue(EAST)).booleanValue())
         {
             i |= getBoundingBoxIndex(EnumFacing.EAST);
         }
 
-        if (state.getValue(SOUTH))
+        if (((Boolean)state.getValue(SOUTH)).booleanValue())
         {
             i |= getBoundingBoxIndex(EnumFacing.SOUTH);
         }
 
-        if (state.getValue(WEST))
+        if (((Boolean)state.getValue(WEST)).booleanValue())
         {
             i |= getBoundingBoxIndex(EnumFacing.WEST);
         }
@@ -144,52 +110,33 @@
         return i;
     }
 
-    @Override
     public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
-        return state.withProperty(
-                   NORTH,
-                   this.attachesTo(worldIn, worldIn.getBlockState(pos.north()), pos.north(), EnumFacing.SOUTH)
-               )
-               .withProperty(
-                   SOUTH,
-                   this.attachesTo(worldIn, worldIn.getBlockState(pos.south()), pos.south(), EnumFacing.NORTH)
-               )
-               .withProperty(
-                   WEST,
-                   this.attachesTo(worldIn, worldIn.getBlockState(pos.west()), pos.west(), EnumFacing.EAST)
-               )
-               .withProperty(
-                   EAST,
-                   this.attachesTo(worldIn, worldIn.getBlockState(pos.east()), pos.east(), EnumFacing.WEST)
-               );
+        return state.withProperty(NORTH, canPaneConnectTo(worldIn, pos, EnumFacing.NORTH))
+                    .withProperty(SOUTH, canPaneConnectTo(worldIn, pos, EnumFacing.SOUTH))
+                    .withProperty(WEST,  canPaneConnectTo(worldIn, pos, EnumFacing.WEST))
+                    .withProperty(EAST,  canPaneConnectTo(worldIn, pos, EnumFacing.EAST));
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return !this.canDrop ? Items.AIR : super.getItemDropped(state, rand, fortune);
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
-        return blockAccess.getBlockState(pos.offset(side)).getBlock() == this
-               ? false
-               : super.shouldSideBeRendered(blockState, blockAccess, pos, side);
+        return blockAccess.getBlockState(pos.offset(side)).getBlock() == this ? false : super.shouldSideBeRendered(blockState, blockAccess, pos, side);
     }
 
     public final boolean attachesTo(IBlockAccess p_193393_1_, IBlockState state, BlockPos pos, EnumFacing facing)
@@ -201,89 +148,76 @@
 
     protected static boolean isExcepBlockForAttachWithPiston(Block p_193394_0_)
     {
-        return p_193394_0_ instanceof BlockShulkerBox
-               || p_193394_0_ instanceof BlockLeaves
-               || p_193394_0_ == Blocks.BEACON
-               || p_193394_0_ == Blocks.CAULDRON
-               || p_193394_0_ == Blocks.GLOWSTONE
-               || p_193394_0_ == Blocks.ICE
-               || p_193394_0_ == Blocks.SEA_LANTERN
-               || p_193394_0_ == Blocks.PISTON
-               || p_193394_0_ == Blocks.STICKY_PISTON
-               || p_193394_0_ == Blocks.PISTON_HEAD
-               || p_193394_0_ == Blocks.MELON_BLOCK
-               || p_193394_0_ == Blocks.PUMPKIN
-               || p_193394_0_ == Blocks.LIT_PUMPKIN
-               || p_193394_0_ == Blocks.BARRIER;
+        return p_193394_0_ instanceof BlockShulkerBox || p_193394_0_ instanceof BlockLeaves || p_193394_0_ == Blocks.BEACON || p_193394_0_ == Blocks.CAULDRON || p_193394_0_ == Blocks.GLOWSTONE || p_193394_0_ == Blocks.ICE || p_193394_0_ == Blocks.SEA_LANTERN || p_193394_0_ == Blocks.PISTON || p_193394_0_ == Blocks.STICKY_PISTON || p_193394_0_ == Blocks.PISTON_HEAD || p_193394_0_ == Blocks.MELON_BLOCK || p_193394_0_ == Blocks.PUMPKIN || p_193394_0_ == Blocks.LIT_PUMPKIN || p_193394_0_ == Blocks.BARRIER;
     }
 
-    @Override
     protected boolean canSilkHarvest()
     {
         return true;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public BlockRenderLayer getRenderLayer()
     {
         return BlockRenderLayer.CUTOUT_MIPPED;
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         return 0;
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
         switch (rot)
         {
             case CLOCKWISE_180:
-                return state.withProperty(NORTH, state.getValue(SOUTH))
-                       .withProperty(EAST, state.getValue(WEST))
-                       .withProperty(SOUTH, state.getValue(NORTH))
-                       .withProperty(WEST, state.getValue(EAST));
+                return state.withProperty(NORTH, state.getValue(SOUTH)).withProperty(EAST, state.getValue(WEST)).withProperty(SOUTH, state.getValue(NORTH)).withProperty(WEST, state.getValue(EAST));
             case COUNTERCLOCKWISE_90:
-                return state.withProperty(NORTH, state.getValue(EAST))
-                       .withProperty(EAST, state.getValue(SOUTH))
-                       .withProperty(SOUTH, state.getValue(WEST))
-                       .withProperty(WEST, state.getValue(NORTH));
+                return state.withProperty(NORTH, state.getValue(EAST)).withProperty(EAST, state.getValue(SOUTH)).withProperty(SOUTH, state.getValue(WEST)).withProperty(WEST, state.getValue(NORTH));
             case CLOCKWISE_90:
-                return state.withProperty(NORTH, state.getValue(WEST))
-                       .withProperty(EAST, state.getValue(NORTH))
-                       .withProperty(SOUTH, state.getValue(EAST))
-                       .withProperty(WEST, state.getValue(SOUTH));
+                return state.withProperty(NORTH, state.getValue(WEST)).withProperty(EAST, state.getValue(NORTH)).withProperty(SOUTH, state.getValue(EAST)).withProperty(WEST, state.getValue(SOUTH));
             default:
                 return state;
         }
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
         switch (mirrorIn)
         {
             case LEFT_RIGHT:
-                return state.withProperty(NORTH, state.getValue(SOUTH))
-                       .withProperty(SOUTH, state.getValue(NORTH));
+                return state.withProperty(NORTH, state.getValue(SOUTH)).withProperty(SOUTH, state.getValue(NORTH));
             case FRONT_BACK:
-                return state.withProperty(EAST, state.getValue(WEST))
-                       .withProperty(WEST, state.getValue(EAST));
+                return state.withProperty(EAST, state.getValue(WEST)).withProperty(WEST, state.getValue(EAST));
             default:
                 return super.withMirror(state, mirrorIn);
         }
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, NORTH, EAST, WEST, SOUTH);
+        return new BlockStateContainer(this, new IProperty[] {NORTH, EAST, WEST, SOUTH});
     }
+
+    /* ======================================== FORGE START ======================================== */
 
     @Override
+    public boolean canBeConnectedTo(IBlockAccess world, BlockPos pos, EnumFacing facing)
+    {
+        BlockPos offset = pos.offset(facing);
+        return attachesTo(world, world.getBlockState(offset), offset, facing.getOpposite());
+    }
+
+    public boolean canPaneConnectTo(IBlockAccess world, BlockPos pos, EnumFacing dir)
+    {
+        BlockPos other = pos.offset(dir);
+        IBlockState state = world.getBlockState(other);
+        return state.getBlock().canBeConnectedTo(world, other, dir.getOpposite()) || attachesTo(world, state, other, dir.getOpposite());
+    }
+
+    /* ======================================== FORGE END ======================================== */
+
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return face != EnumFacing.UP && face != EnumFacing.DOWN ? BlockFaceShape.MIDDLE_POLE_THIN : BlockFaceShape.CENTER_SMALL;
