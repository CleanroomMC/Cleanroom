--- before/net/minecraft/block/BlockSapling.java
+++ after/net/minecraft/block/BlockSapling.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
 import java.util.Random;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockStateContainer;
@@ -26,35 +27,33 @@
 
 public class BlockSapling extends BlockBush implements IGrowable
 {
-    public static final PropertyEnum<BlockPlanks.EnumType> TYPE = PropertyEnum.create("type", BlockPlanks.EnumType.class);
+    public static final PropertyEnum<BlockPlanks.EnumType> TYPE = PropertyEnum.<BlockPlanks.EnumType>create("type", BlockPlanks.EnumType.class);
     public static final PropertyInteger STAGE = PropertyInteger.create("stage", 0, 1);
-    protected static final AxisAlignedBB SAPLING_AABB = new AxisAlignedBB(0.099999994F, 0.0, 0.099999994F, 0.9F, 0.8F, 0.9F);
+    protected static final AxisAlignedBB SAPLING_AABB = new AxisAlignedBB(0.09999999403953552D, 0.0D, 0.09999999403953552D, 0.8999999761581421D, 0.800000011920929D, 0.8999999761581421D);
 
     protected BlockSapling()
     {
-        this.setDefaultState(this.blockState.getBaseState().withProperty(TYPE, BlockPlanks.EnumType.OAK).withProperty(STAGE, 0));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(TYPE, BlockPlanks.EnumType.OAK).withProperty(STAGE, Integer.valueOf(0)));
         this.setCreativeTab(CreativeTabs.DECORATIONS);
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         return SAPLING_AABB;
     }
 
-    @Override
     public String getLocalizedName()
     {
         return I18n.translateToLocal(this.getTranslationKey() + "." + BlockPlanks.EnumType.OAK.getTranslationKey() + ".name");
     }
 
-    @Override
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
         if (!worldIn.isRemote)
         {
             super.updateTick(worldIn, pos, state, rand);
 
+            if (!worldIn.isAreaLoaded(pos, 1)) return; // Forge: prevent loading unloaded chunks when checking neighbor's light
             if (worldIn.getLightFromNeighbors(pos.up()) >= 9 && rand.nextInt(7) == 0)
             {
                 this.grow(worldIn, pos, state, rand);
@@ -64,7 +63,7 @@
 
     public void grow(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
-        if (state.getValue(STAGE) == 0)
+        if (((Integer)state.getValue(STAGE)).intValue() == 0)
         {
             worldIn.setBlockState(pos, state.cycleProperty(STAGE), 4);
         }
@@ -76,6 +75,7 @@
 
     public void generateTree(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
+        if (!net.minecraftforge.event.terraingen.TerrainGen.saplingGrowTree(worldIn, rand, pos)) return;
         WorldGenerator worldgenerator = (WorldGenerator)(rand.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true));
         int i = 0;
         int j = 0;
@@ -86,9 +86,9 @@
             case SPRUCE:
                 label68:
 
-                for (i = 0; i >= -1; i--)
+                for (i = 0; i >= -1; --i)
                 {
-                    for (j = 0; j >= -1; j--)
+                    for (j = 0; j >= -1; --j)
                     {
                         if (this.isTwoByTwoOfType(worldIn, pos, i, j, BlockPlanks.EnumType.SPRUCE))
                         {
@@ -112,15 +112,12 @@
                 break;
             case JUNGLE:
                 IBlockState iblockstate = Blocks.LOG.getDefaultState().withProperty(BlockOldLog.VARIANT, BlockPlanks.EnumType.JUNGLE);
-                IBlockState iblockstate1 = Blocks.LEAVES
-                                           .getDefaultState()
-                                           .withProperty(BlockOldLeaf.VARIANT, BlockPlanks.EnumType.JUNGLE)
-                                           .withProperty(BlockLeaves.CHECK_DECAY, false);
+                IBlockState iblockstate1 = Blocks.LEAVES.getDefaultState().withProperty(BlockOldLeaf.VARIANT, BlockPlanks.EnumType.JUNGLE).withProperty(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false));
                 label82:
 
-                for (i = 0; i >= -1; i--)
+                for (i = 0; i >= -1; --i)
                 {
-                    for (j = 0; j >= -1; j--)
+                    for (j = 0; j >= -1; --j)
                     {
                         if (this.isTwoByTwoOfType(worldIn, pos, i, j, BlockPlanks.EnumType.JUNGLE))
                         {
@@ -145,9 +142,9 @@
             case DARK_OAK:
                 label96:
 
-                for (i = 0; i >= -1; i--)
+                for (i = 0; i >= -1; --i)
                 {
-                    for (j = 0; j >= -1; j--)
+                    for (j = 0; j >= -1; --j)
                     {
                         if (this.isTwoByTwoOfType(worldIn, pos, i, j, BlockPlanks.EnumType.DARK_OAK))
                         {
@@ -198,10 +195,7 @@
 
     private boolean isTwoByTwoOfType(World worldIn, BlockPos pos, int p_181624_3_, int p_181624_4_, BlockPlanks.EnumType type)
     {
-        return this.isTypeAt(worldIn, pos.add(p_181624_3_, 0, p_181624_4_), type)
-               && this.isTypeAt(worldIn, pos.add(p_181624_3_ + 1, 0, p_181624_4_), type)
-               && this.isTypeAt(worldIn, pos.add(p_181624_3_, 0, p_181624_4_ + 1), type)
-               && this.isTypeAt(worldIn, pos.add(p_181624_3_ + 1, 0, p_181624_4_ + 1), type);
+        return this.isTypeAt(worldIn, pos.add(p_181624_3_, 0, p_181624_4_), type) && this.isTypeAt(worldIn, pos.add(p_181624_3_ + 1, 0, p_181624_4_), type) && this.isTypeAt(worldIn, pos.add(p_181624_3_, 0, p_181624_4_ + 1), type) && this.isTypeAt(worldIn, pos.add(p_181624_3_ + 1, 0, p_181624_4_ + 1), type);
     }
 
     public boolean isTypeAt(World worldIn, BlockPos pos, BlockPlanks.EnumType type)
@@ -210,13 +204,11 @@
         return iblockstate.getBlock() == this && iblockstate.getValue(TYPE) == type;
     }
 
-    @Override
     public int damageDropped(IBlockState state)
     {
-        return state.getValue(TYPE).getMetadata();
+        return ((BlockPlanks.EnumType)state.getValue(TYPE)).getMetadata();
     }
 
-    @Override
     public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
     {
         for (BlockPlanks.EnumType blockplanks$enumtype : BlockPlanks.EnumType.values())
@@ -225,43 +217,36 @@
         }
     }
 
-    @Override
     public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
     {
         return true;
     }
 
-    @Override
     public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
     {
-        return (double)worldIn.rand.nextFloat() < 0.45;
+        return (double)worldIn.rand.nextFloat() < 0.45D;
     }
 
-    @Override
     public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
     {
         this.grow(worldIn, pos, state, rand);
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState()
-               .withProperty(TYPE, BlockPlanks.EnumType.byMetadata(meta & 7))
-               .withProperty(STAGE, (meta & 8) >> 3);
+        return this.getDefaultState().withProperty(TYPE, BlockPlanks.EnumType.byMetadata(meta & 7)).withProperty(STAGE, Integer.valueOf((meta & 8) >> 3));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i |= state.getValue(TYPE).getMetadata();
-        return i | state.getValue(STAGE) << 3;
+        i = i | ((BlockPlanks.EnumType)state.getValue(TYPE)).getMetadata();
+        i = i | ((Integer)state.getValue(STAGE)).intValue() << 3;
+        return i;
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, TYPE, STAGE);
+        return new BlockStateContainer(this, new IProperty[] {TYPE, STAGE});
     }
 }
