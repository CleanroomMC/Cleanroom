--- before/net/minecraft/block/BlockMushroom.java
+++ after/net/minecraft/block/BlockMushroom.java
@@ -12,20 +12,18 @@
 
 public class BlockMushroom extends BlockBush implements IGrowable
 {
-    protected static final AxisAlignedBB MUSHROOM_AABB = new AxisAlignedBB(0.3F, 0.0, 0.3F, 0.7F, 0.4F, 0.7F);
+    protected static final AxisAlignedBB MUSHROOM_AABB = new AxisAlignedBB(0.30000001192092896D, 0.0D, 0.30000001192092896D, 0.699999988079071D, 0.4000000059604645D, 0.699999988079071D);
 
     protected BlockMushroom()
     {
         this.setTickRandomly(true);
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         return MUSHROOM_AABB;
     }
 
-    @Override
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
         if (rand.nextInt(25) == 0)
@@ -37,7 +35,9 @@
             {
                 if (worldIn.getBlockState(blockpos).getBlock() == this)
                 {
-                    if (--i <= 0)
+                    --i;
+
+                    if (i <= 0)
                     {
                         return;
                     }
@@ -46,7 +46,7 @@
 
             BlockPos blockpos1 = pos.add(rand.nextInt(3) - 1, rand.nextInt(2) - rand.nextInt(2), rand.nextInt(3) - 1);
 
-            for (int k = 0; k < 4; k++)
+            for (int k = 0; k < 4; ++k)
             {
                 if (worldIn.isAirBlock(blockpos1) && this.canBlockStay(worldIn, blockpos1, this.getDefaultState()))
                 {
@@ -63,19 +63,16 @@
         }
     }
 
-    @Override
     public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
     {
         return super.canPlaceBlockAt(worldIn, pos) && this.canBlockStay(worldIn, pos, this.getDefaultState());
     }
 
-    @Override
     protected boolean canSustainBush(IBlockState state)
     {
         return state.isFullBlock();
     }
 
-    @Override
     public boolean canBlockStay(World worldIn, BlockPos pos, IBlockState state)
     {
         if (pos.getY() >= 0 && pos.getY() < 256)
@@ -86,11 +83,13 @@
             {
                 return true;
             }
+            else if (iblockstate.getBlock() == Blocks.DIRT && iblockstate.getValue(BlockDirt.VARIANT) == BlockDirt.DirtType.PODZOL)
+            {
+                return true;
+            }
             else
             {
-                return iblockstate.getBlock() == Blocks.DIRT && iblockstate.getValue(BlockDirt.VARIANT) == BlockDirt.DirtType.PODZOL
-                       ? true
-                       : worldIn.getLight(pos) < 13 && this.canSustainBush(iblockstate);
+                return worldIn.getLight(pos) < 13 && iblockstate.getBlock().canSustainPlant(iblockstate, worldIn, pos.down(), net.minecraft.util.EnumFacing.UP, this);
             }
         }
         else
@@ -124,19 +123,16 @@
         }
     }
 
-    @Override
     public boolean canGrow(World worldIn, BlockPos pos, IBlockState state, boolean isClient)
     {
         return true;
     }
 
-    @Override
     public boolean canUseBonemeal(World worldIn, Random rand, BlockPos pos, IBlockState state)
     {
-        return (double)rand.nextFloat() < 0.4;
+        return (double)rand.nextFloat() < 0.4D;
     }
 
-    @Override
     public void grow(World worldIn, Random rand, BlockPos pos, IBlockState state)
     {
         this.generateBigMushroom(worldIn, pos, state, rand);
