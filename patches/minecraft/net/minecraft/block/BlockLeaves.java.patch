--- before/net/minecraft/block/BlockLeaves.java
+++ after/net/minecraft/block/BlockLeaves.java
@@ -17,7 +17,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class BlockLeaves extends Block
+public abstract class BlockLeaves extends Block implements net.minecraftforge.common.IShearable
 {
     public static final PropertyBool DECAYABLE = PropertyBool.create("decayable");
     public static final PropertyBool CHECK_DECAY = PropertyBool.create("check_decay");
@@ -34,7 +34,6 @@
         this.setSoundType(SoundType.PLANT);
     }
 
-    @Override
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         int i = 1;
@@ -45,18 +44,18 @@
 
         if (worldIn.isAreaLoaded(new BlockPos(k - 2, l - 2, i1 - 2), new BlockPos(k + 2, l + 2, i1 + 2)))
         {
-            for (int j1 = -1; j1 <= 1; j1++)
+            for (int j1 = -1; j1 <= 1; ++j1)
             {
-                for (int k1 = -1; k1 <= 1; k1++)
+                for (int k1 = -1; k1 <= 1; ++k1)
                 {
-                    for (int l1 = -1; l1 <= 1; l1++)
+                    for (int l1 = -1; l1 <= 1; ++l1)
                     {
                         BlockPos blockpos = pos.add(j1, k1, l1);
                         IBlockState iblockstate = worldIn.getBlockState(blockpos);
 
-                        if (iblockstate.getMaterial() == Material.LEAVES && !iblockstate.getValue(CHECK_DECAY))
+                        if (iblockstate.getBlock().isLeaves(iblockstate, worldIn, blockpos))
                         {
-                            worldIn.setBlockState(blockpos, iblockstate.withProperty(CHECK_DECAY, true), 4);
+                            iblockstate.getBlock().beginLeavesDecay(iblockstate, worldIn, blockpos);
                         }
                     }
                 }
@@ -64,12 +63,11 @@
         }
     }
 
-    @Override
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
         if (!worldIn.isRemote)
         {
-            if (state.getValue(CHECK_DECAY) && state.getValue(DECAYABLE))
+            if (((Boolean)state.getValue(CHECK_DECAY)).booleanValue() && ((Boolean)state.getValue(DECAYABLE)).booleanValue())
             {
                 int i = 4;
                 int j = 5;
@@ -85,22 +83,23 @@
                     this.surroundings = new int[32768];
                 }
 
-                if (worldIn.isAreaLoaded(new BlockPos(k - 5, l - 5, i1 - 5), new BlockPos(k + 5, l + 5, i1 + 5)))
+                if (!worldIn.isAreaLoaded(pos, 1)) return; // Forge: prevent decaying leaves from updating neighbors and loading unloaded chunks
+                if (worldIn.isAreaLoaded(pos, 6)) // Forge: extend range from 5 to 6 to account for neighbor checks in world.markAndNotifyBlock -> world.updateObservingBlocksAt
                 {
                     BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-                    for (int i2 = -4; i2 <= 4; i2++)
+                    for (int i2 = -4; i2 <= 4; ++i2)
                     {
-                        for (int j2 = -4; j2 <= 4; j2++)
+                        for (int j2 = -4; j2 <= 4; ++j2)
                         {
-                            for (int k2 = -4; k2 <= 4; k2++)
+                            for (int k2 = -4; k2 <= 4; ++k2)
                             {
                                 IBlockState iblockstate = worldIn.getBlockState(blockpos$mutableblockpos.setPos(k + i2, l + j2, i1 + k2));
                                 Block block = iblockstate.getBlock();
 
-                                if (block != Blocks.LOG && block != Blocks.LOG2)
+                                if (!block.canSustainLeaves(iblockstate, worldIn, blockpos$mutableblockpos.setPos(k + i2, l + j2, i1 + k2)))
                                 {
-                                    if (iblockstate.getMaterial() == Material.LEAVES)
+                                    if (block.isLeaves(iblockstate, worldIn, blockpos$mutableblockpos.setPos(k + i2, l + j2, i1 + k2)))
                                     {
                                         this.surroundings[(i2 + 16) * 1024 + (j2 + 16) * 32 + k2 + 16] = -2;
                                     }
@@ -117,13 +116,13 @@
                         }
                     }
 
-                    for (int i3 = 1; i3 <= 4; i3++)
+                    for (int i3 = 1; i3 <= 4; ++i3)
                     {
-                        for (int j3 = -4; j3 <= 4; j3++)
+                        for (int j3 = -4; j3 <= 4; ++j3)
                         {
-                            for (int k3 = -4; k3 <= 4; k3++)
+                            for (int k3 = -4; k3 <= 4; ++k3)
                             {
-                                for (int l3 = -4; l3 <= 4; l3++)
+                                for (int l3 = -4; l3 <= 4; ++l3)
                                 {
                                     if (this.surroundings[(j3 + 16) * 1024 + (k3 + 16) * 32 + l3 + 16] == i3 - 1)
                                     {
@@ -167,7 +166,7 @@
 
                 if (l2 >= 0)
                 {
-                    worldIn.setBlockState(pos, state.withProperty(CHECK_DECAY, false), 4);
+                    worldIn.setBlockState(pos, state.withProperty(CHECK_DECAY, Boolean.valueOf(false)), 4);
                 }
                 else
                 {
@@ -178,17 +177,14 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
     {
-        if (worldIn.isRainingAt(pos.up())
-                && !worldIn.getBlockState(pos.down()).isTopSolid()
-                && rand.nextInt(15) == 1)
+        if (worldIn.isRainingAt(pos.up()) && !worldIn.getBlockState(pos.down()).isTopSolid() && rand.nextInt(15) == 1)
         {
             double d0 = (double)((float)pos.getX() + rand.nextFloat());
-            double d1 = (double)pos.getY() - 0.05;
+            double d1 = (double)pos.getY() - 0.05D;
             double d2 = (double)((float)pos.getZ() + rand.nextFloat());
-            worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d0, d1, d2, 0.0, 0.0, 0.0);
+            worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d0, d1, d2, 0.0D, 0.0D, 0.0D);
         }
     }
 
@@ -198,55 +194,19 @@
         worldIn.setBlockToAir(pos);
     }
 
-    @Override
     public int quantityDropped(Random random)
     {
         return random.nextInt(20) == 0 ? 1 : 0;
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return Item.getItemFromBlock(Blocks.SAPLING);
     }
 
-    @Override
     public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
     {
-        if (!worldIn.isRemote)
-        {
-            int i = this.getSaplingDropChance(state);
-
-            if (fortune > 0)
-            {
-                i -= 2 << fortune;
-
-                if (i < 10)
-                {
-                    i = 10;
-                }
-            }
-
-            if (worldIn.rand.nextInt(i) == 0)
-            {
-                Item item = this.getItemDropped(state, worldIn.rand, fortune);
-                spawnAsEntity(worldIn, pos, new ItemStack(item, 1, this.damageDropped(state)));
-            }
-
-            i = 200;
-
-            if (fortune > 0)
-            {
-                i -= 10 << fortune;
-
-                if (i < 40)
-                {
-                    i = 40;
-                }
-            }
-
-            this.dropApple(worldIn, pos, state, i);
-        }
+        super.dropBlockAsItemWithChance(worldIn, pos, state, chance, fortune);
     }
 
     protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance)
@@ -258,7 +218,6 @@
         return 20;
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return !this.leavesFancy;
@@ -271,13 +230,11 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public BlockRenderLayer getRenderLayer()
     {
         return this.leavesFancy ? BlockRenderLayer.CUTOUT_MIPPED : BlockRenderLayer.SOLID;
     }
 
-    @Override
     public boolean causesSuffocation(IBlockState state)
     {
         return false;
@@ -285,12 +242,54 @@
 
     public abstract BlockPlanks.EnumType getWoodType(int meta);
 
+    @Override public boolean isShearable(ItemStack item, IBlockAccess world, BlockPos pos){ return true; }
+    @Override public boolean isLeaves(IBlockState state, IBlockAccess world, BlockPos pos){ return true; }
+
+    @Override
+    public void beginLeavesDecay(IBlockState state, World world, BlockPos pos)
+    {
+        if (!(Boolean)state.getValue(CHECK_DECAY))
+        {
+            world.setBlockState(pos, state.withProperty(CHECK_DECAY, true), 4);
+        }
+    }
+
+    @Override
+    public void getDrops(net.minecraft.util.NonNullList<ItemStack> drops, IBlockAccess world, BlockPos pos, IBlockState state, int fortune)
+    {
+        Random rand = world instanceof World ? ((World)world).rand : new Random();
+        int chance = this.getSaplingDropChance(state);
+
+        if (fortune > 0)
+        {
+            chance -= 2 << fortune;
+            if (chance < 10) chance = 10;
+        }
+
+        if (rand.nextInt(chance) == 0)
+        {
+            ItemStack drop = new ItemStack(getItemDropped(state, rand, fortune), 1, damageDropped(state));
+            if (!drop.isEmpty())
+                drops.add(drop);
+        }
+
+        chance = 200;
+        if (fortune > 0)
+        {
+            chance -= 10 << fortune;
+            if (chance < 40) chance = 40;
+        }
+
+        this.captureDrops(true);
+        if (world instanceof World)
+            this.dropApple((World)world, pos, state, chance); // Dammet mojang
+        drops.addAll(this.captureDrops(false));
+    }
+
+
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
-        return !this.leavesFancy && blockAccess.getBlockState(pos.offset(side)).getBlock() == this
-               ? false
-               : super.shouldSideBeRendered(blockState, blockAccess, pos, side);
+        return !this.leavesFancy && blockAccess.getBlockState(pos.offset(side)).getBlock() == this ? false : super.shouldSideBeRendered(blockState, blockAccess, pos, side);
     }
 }
