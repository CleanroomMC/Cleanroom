--- before/net/minecraft/block/BlockObserver.java
+++ after/net/minecraft/block/BlockObserver.java
@@ -2,6 +2,7 @@
 
 import java.util.Random;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
@@ -21,52 +22,47 @@
     public BlockObserver()
     {
         super(Material.ROCK);
-        this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.SOUTH).withProperty(POWERED, false));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.SOUTH).withProperty(POWERED, Boolean.valueOf(false)));
         this.setCreativeTab(CreativeTabs.REDSTONE);
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, FACING, POWERED);
+        return new BlockStateContainer(this, new IProperty[] {FACING, POWERED});
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return state.withRotation(mirrorIn.toRotation(state.getValue(FACING)));
+        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
-        if (state.getValue(POWERED))
+        if (((Boolean)state.getValue(POWERED)).booleanValue())
         {
-            worldIn.setBlockState(pos, state.withProperty(POWERED, false), 2);
+            worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(false)), 2);
         }
         else
         {
-            worldIn.setBlockState(pos, state.withProperty(POWERED, true), 2);
+            worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)), 2);
             worldIn.scheduleUpdate(pos, this, 2);
         }
 
         this.updateNeighborsInFront(worldIn, pos, state);
     }
 
-    @Override
     public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
     }
 
     public void observedNeighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
-        if (!worldIn.isRemote && pos.offset(state.getValue(FACING)).equals(fromPos))
+        if (!worldIn.isRemote && pos.offset((EnumFacing)state.getValue(FACING)).equals(fromPos))
         {
             this.startSignal(state, worldIn, pos);
         }
@@ -74,7 +70,7 @@
 
     private void startSignal(IBlockState p_190960_1_, World p_190960_2_, BlockPos pos)
     {
-        if (!p_190960_1_.getValue(POWERED))
+        if (!((Boolean)p_190960_1_.getValue(POWERED)).booleanValue())
         {
             if (!p_190960_2_.isUpdateScheduled(pos, this))
             {
@@ -85,36 +81,32 @@
 
     protected void updateNeighborsInFront(World worldIn, BlockPos pos, IBlockState state)
     {
-        EnumFacing enumfacing = state.getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
         BlockPos blockpos = pos.offset(enumfacing.getOpposite());
         worldIn.neighborChanged(blockpos, this, pos);
         worldIn.notifyNeighborsOfStateExcept(blockpos, this, enumfacing);
     }
 
-    @Override
     public boolean canProvidePower(IBlockState state)
     {
         return true;
     }
 
-    @Override
     public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         return blockState.getWeakPower(blockAccess, pos, side);
     }
 
-    @Override
     public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
-        return blockState.getValue(POWERED) && blockState.getValue(FACING) == side ? 15 : 0;
+        return ((Boolean)blockState.getValue(POWERED)).booleanValue() && blockState.getValue(FACING) == side ? 15 : 0;
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         if (!worldIn.isRemote)
         {
-            if (state.getValue(POWERED))
+            if (((Boolean)state.getValue(POWERED)).booleanValue())
             {
                 this.updateTick(worldIn, pos, state, worldIn.rand);
             }
@@ -123,37 +115,25 @@
         }
     }
 
-    @Override
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
-        if (state.getValue(POWERED) && worldIn.isUpdateScheduled(pos, this))
+        if (((Boolean)state.getValue(POWERED)).booleanValue() && worldIn.isUpdateScheduled(pos, this))
         {
-            this.updateNeighborsInFront(worldIn, pos, state.withProperty(POWERED, false));
+            this.updateNeighborsInFront(worldIn, pos, state.withProperty(POWERED, Boolean.valueOf(false)));
         }
     }
 
-    @Override
-    public IBlockState getStateForPlacement(
-        World worldIn,
-        BlockPos pos,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ,
-        int meta,
-        EntityLivingBase placer
-    )
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
     {
         return this.getDefaultState().withProperty(FACING, EnumFacing.getDirectionFromEntityLiving(pos, placer).getOpposite());
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i |= state.getValue(FACING).getIndex();
+        i = i | ((EnumFacing)state.getValue(FACING)).getIndex();
 
-        if (state.getValue(POWERED))
+        if (((Boolean)state.getValue(POWERED)).booleanValue())
         {
             i |= 8;
         }
@@ -161,9 +141,16 @@
         return i;
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
         return this.getDefaultState().withProperty(FACING, EnumFacing.byIndex(meta & 7));
     }
+
+    /* ======================================== FORGE START =====================================*/
+    @Override
+    public void observedNeighborChange(IBlockState observerState, World world, BlockPos observerPos, Block changedBlock, BlockPos changedBlockPos)
+    {
+        observedNeighborChanged(observerState, world, observerPos, changedBlock, changedBlockPos);
+    }
+    /* ========================================= FORGE END ======================================*/
 }
