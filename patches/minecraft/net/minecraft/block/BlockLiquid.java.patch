--- before/net/minecraft/block/BlockLiquid.java
+++ after/net/minecraft/block/BlockLiquid.java
@@ -3,11 +3,13 @@
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.init.SoundEvents;
@@ -33,24 +35,21 @@
     protected BlockLiquid(Material materialIn)
     {
         super(materialIn);
-        this.setDefaultState(this.blockState.getBaseState().withProperty(LEVEL, 0));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(LEVEL, Integer.valueOf(0)));
         this.setTickRandomly(true);
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         return FULL_BLOCK_AABB;
     }
 
     @Nullable
-    @Override
     public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
     {
         return NULL_AABB;
     }
 
-    @Override
     public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
     {
         return this.material != Material.LAVA;
@@ -68,7 +67,7 @@
 
     protected int getDepth(IBlockState state)
     {
-        return state.getMaterial() == this.material ? state.getValue(LEVEL) : -1;
+        return state.getMaterial() == this.material ? ((Integer)state.getValue(LEVEL)).intValue() : -1;
     }
 
     protected int getRenderedDepth(IBlockState state)
@@ -77,22 +76,19 @@
         return i >= 8 ? 0 : i;
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean canCollideCheck(IBlockState state, boolean hitIfLiquid)
     {
-        return hitIfLiquid && state.getValue(LEVEL) == 0;
+        return hitIfLiquid && ((Integer)state.getValue(LEVEL)).intValue() == 0;
     }
 
     private boolean causesDownwardCurrent(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
@@ -121,7 +117,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         if (blockAccess.getBlockState(pos.offset(side)).getMaterial() == this.material)
@@ -134,38 +129,16 @@
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean shouldRenderSides(IBlockAccess blockAccess, BlockPos pos)
-    {
-        for (int i = -1; i <= 1; i++)
-        {
-            for (int j = -1; j <= 1; j++)
-            {
-                IBlockState iblockstate = blockAccess.getBlockState(pos.add(i, 0, j));
-
-                if (iblockstate.getMaterial() != this.material && !iblockstate.isFullBlock())
-                {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-
-    @Override
     public EnumBlockRenderType getRenderType(IBlockState state)
     {
         return EnumBlockRenderType.LIQUID;
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return Items.AIR;
     }
 
-    @Override
     public int quantityDropped(Random random)
     {
         return 0;
@@ -173,9 +146,9 @@
 
     protected Vec3d getFlow(IBlockAccess worldIn, BlockPos pos, IBlockState state)
     {
-        double d0 = 0.0;
-        double d1 = 0.0;
-        double d2 = 0.0;
+        double d0 = 0.0D;
+        double d1 = 0.0D;
+        double d2 = 0.0D;
         int i = this.getRenderedDepth(state);
         BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
 
@@ -210,16 +183,15 @@
 
         Vec3d vec3d = new Vec3d(d0, d1, d2);
 
-        if (state.getValue(LEVEL) >= 8)
+        if (((Integer)state.getValue(LEVEL)).intValue() >= 8)
         {
             for (EnumFacing enumfacing1 : EnumFacing.Plane.HORIZONTAL)
             {
                 blockpos$pooledmutableblockpos.setPos(pos).move(enumfacing1);
 
-                if (this.causesDownwardCurrent(worldIn, blockpos$pooledmutableblockpos, enumfacing1)
-                        || this.causesDownwardCurrent(worldIn, blockpos$pooledmutableblockpos.up(), enumfacing1))
+                if (this.causesDownwardCurrent(worldIn, blockpos$pooledmutableblockpos, enumfacing1) || this.causesDownwardCurrent(worldIn, blockpos$pooledmutableblockpos.up(), enumfacing1))
                 {
-                    vec3d = vec3d.normalize().add(0.0, -6.0, 0.0);
+                    vec3d = vec3d.normalize().add(0.0D, -6.0D, 0.0D);
                     break;
                 }
             }
@@ -229,13 +201,11 @@
         return vec3d.normalize();
     }
 
-    @Override
     public Vec3d modifyAcceleration(World worldIn, BlockPos pos, Entity entityIn, Vec3d motion)
     {
         return motion.add(this.getFlow(worldIn, pos, worldIn.getBlockState(pos)));
     }
 
-    @Override
     public int tickRate(World worldIn)
     {
         if (this.material == Material.WATER)
@@ -253,27 +223,91 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
+    public boolean shouldRenderSides(IBlockAccess blockAccess, BlockPos pos)
+    {
+        for (int i = -1; i <= 1; ++i)
+        {
+            for (int j = -1; j <= 1; ++j)
+            {
+                IBlockState iblockstate = blockAccess.getBlockState(pos.add(i, 0, j));
+
+                if (iblockstate.getMaterial() != this.material && !iblockstate.isFullBlock())
+                {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
+    {
+        this.checkForMixing(worldIn, pos, state);
+    }
+
+    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
+    {
+        this.checkForMixing(worldIn, pos, state);
+    }
+
+    @SideOnly(Side.CLIENT)
     public int getPackedLightmapCoords(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         int i = source.getCombinedLight(pos, 0);
         int j = source.getCombinedLight(pos.up(), 0);
-        int k = i & 0xFF;
-        int l = j & 0xFF;
-        int i1 = i >> 16 & 0xFF;
-        int j1 = j >> 16 & 0xFF;
+        int k = i & 255;
+        int l = j & 255;
+        int i1 = i >> 16 & 255;
+        int j1 = j >> 16 & 255;
         return (k > l ? k : l) | (i1 > j1 ? i1 : j1) << 16;
     }
 
+    public boolean checkForMixing(World worldIn, BlockPos pos, IBlockState state)
+    {
+        if (this.material == Material.LAVA)
+        {
+            boolean flag = false;
+
+            for (EnumFacing enumfacing : EnumFacing.values())
+            {
+                if (enumfacing != EnumFacing.DOWN && worldIn.getBlockState(pos.offset(enumfacing)).getMaterial() == Material.WATER)
+                {
+                    flag = true;
+                    break;
+                }
+            }
+
+            if (flag)
+            {
+                Integer integer = (Integer)state.getValue(LEVEL);
+
+                if (integer.intValue() == 0)
+                {
+                    worldIn.setBlockState(pos, net.minecraftforge.event.ForgeEventFactory.fireFluidPlaceBlockEvent(worldIn, pos, pos, Blocks.OBSIDIAN.getDefaultState()));
+                    this.triggerMixEffects(worldIn, pos);
+                    return true;
+                }
+
+                if (integer.intValue() <= 4)
+                {
+                    worldIn.setBlockState(pos, net.minecraftforge.event.ForgeEventFactory.fireFluidPlaceBlockEvent(worldIn, pos, pos, Blocks.COBBLESTONE.getDefaultState()));
+                    this.triggerMixEffects(worldIn, pos);
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
     @SideOnly(Side.CLIENT)
-    @Override
     public BlockRenderLayer getRenderLayer()
     {
         return this.material == Material.WATER ? BlockRenderLayer.TRANSLUCENT : BlockRenderLayer.SOLID;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
     {
         double d0 = (double)pos.getX();
@@ -282,72 +316,35 @@
 
         if (this.material == Material.WATER)
         {
-            int i = stateIn.getValue(LEVEL);
+            int i = ((Integer)stateIn.getValue(LEVEL)).intValue();
 
             if (i > 0 && i < 8)
             {
                 if (rand.nextInt(64) == 0)
                 {
-                    worldIn.playSound(
-                        d0 + 0.5,
-                        d1 + 0.5,
-                        d2 + 0.5,
-                        SoundEvents.BLOCK_WATER_AMBIENT,
-                        SoundCategory.BLOCKS,
-                        rand.nextFloat() * 0.25F + 0.75F,
-                        rand.nextFloat() + 0.5F,
-                        false
-                    );
+                    worldIn.playSound(d0 + 0.5D, d1 + 0.5D, d2 + 0.5D, SoundEvents.BLOCK_WATER_AMBIENT, SoundCategory.BLOCKS, rand.nextFloat() * 0.25F + 0.75F, rand.nextFloat() + 0.5F, false);
                 }
             }
             else if (rand.nextInt(10) == 0)
             {
-                worldIn.spawnParticle(
-                    EnumParticleTypes.SUSPENDED,
-                    d0 + (double)rand.nextFloat(),
-                    d1 + (double)rand.nextFloat(),
-                    d2 + (double)rand.nextFloat(),
-                    0.0,
-                    0.0,
-                    0.0
-                );
+                worldIn.spawnParticle(EnumParticleTypes.SUSPENDED, d0 + (double)rand.nextFloat(), d1 + (double)rand.nextFloat(), d2 + (double)rand.nextFloat(), 0.0D, 0.0D, 0.0D);
             }
         }
 
-        if (this.material == Material.LAVA
-                && worldIn.getBlockState(pos.up()).getMaterial() == Material.AIR
-                && !worldIn.getBlockState(pos.up()).isOpaqueCube())
+        if (this.material == Material.LAVA && worldIn.getBlockState(pos.up()).getMaterial() == Material.AIR && !worldIn.getBlockState(pos.up()).isOpaqueCube())
         {
             if (rand.nextInt(100) == 0)
             {
                 double d8 = d0 + (double)rand.nextFloat();
                 double d4 = d1 + stateIn.getBoundingBox(worldIn, pos).maxY;
                 double d6 = d2 + (double)rand.nextFloat();
-                worldIn.spawnParticle(EnumParticleTypes.LAVA, d8, d4, d6, 0.0, 0.0, 0.0);
-                worldIn.playSound(
-                    d8,
-                    d4,
-                    d6,
-                    SoundEvents.BLOCK_LAVA_POP,
-                    SoundCategory.BLOCKS,
-                    0.2F + rand.nextFloat() * 0.2F,
-                    0.9F + rand.nextFloat() * 0.15F,
-                    false
-                );
+                worldIn.spawnParticle(EnumParticleTypes.LAVA, d8, d4, d6, 0.0D, 0.0D, 0.0D);
+                worldIn.playSound(d8, d4, d6, SoundEvents.BLOCK_LAVA_POP, SoundCategory.BLOCKS, 0.2F + rand.nextFloat() * 0.2F, 0.9F + rand.nextFloat() * 0.15F, false);
             }
 
             if (rand.nextInt(200) == 0)
             {
-                worldIn.playSound(
-                    d0,
-                    d1,
-                    d2,
-                    SoundEvents.BLOCK_LAVA_AMBIENT,
-                    SoundCategory.BLOCKS,
-                    0.2F + rand.nextFloat() * 0.2F,
-                    0.9F + rand.nextFloat() * 0.15F,
-                    false
-                );
+                worldIn.playSound(d0, d1, d2, SoundEvents.BLOCK_LAVA_AMBIENT, SoundCategory.BLOCKS, 0.2F + rand.nextFloat() * 0.2F, 0.9F + rand.nextFloat() * 0.15F, false);
             }
         }
 
@@ -358,16 +355,16 @@
             if (!material.blocksMovement() && !material.isLiquid())
             {
                 double d3 = d0 + (double)rand.nextFloat();
-                double d5 = d1 - 1.05;
+                double d5 = d1 - 1.05D;
                 double d7 = d2 + (double)rand.nextFloat();
 
                 if (this.material == Material.WATER)
                 {
-                    worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d3, d5, d7, 0.0, 0.0, 0.0);
+                    worldIn.spawnParticle(EnumParticleTypes.DRIP_WATER, d3, d5, d7, 0.0D, 0.0D, 0.0D);
                 }
                 else
                 {
-                    worldIn.spawnParticle(EnumParticleTypes.DRIP_LAVA, d3, d5, d7, 0.0, 0.0, 0.0);
+                    worldIn.spawnParticle(EnumParticleTypes.DRIP_LAVA, d3, d5, d7, 0.0D, 0.0D, 0.0D);
                 }
             }
         }
@@ -377,59 +374,7 @@
     public static float getSlopeAngle(IBlockAccess worldIn, BlockPos pos, Material materialIn, IBlockState state)
     {
         Vec3d vec3d = getFlowingBlock(materialIn).getFlow(worldIn, pos, state);
-        return vec3d.x == 0.0 && vec3d.z == 0.0
-               ? -1000.0F
-               : (float)MathHelper.atan2(vec3d.z, vec3d.x) - (float)(Math.PI / 2);
-    }
-
-    @Override
-    public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
-    {
-        this.checkForMixing(worldIn, pos, state);
-    }
-
-    @Override
-    public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
-    {
-        this.checkForMixing(worldIn, pos, state);
-    }
-
-    public boolean checkForMixing(World worldIn, BlockPos pos, IBlockState state)
-    {
-        if (this.material == Material.LAVA)
-        {
-            boolean flag = false;
-
-            for (EnumFacing enumfacing : EnumFacing.values())
-            {
-                if (enumfacing != EnumFacing.DOWN && worldIn.getBlockState(pos.offset(enumfacing)).getMaterial() == Material.WATER)
-                {
-                    flag = true;
-                    break;
-                }
-            }
-
-            if (flag)
-            {
-                Integer integer = state.getValue(LEVEL);
-
-                if (integer == 0)
-                {
-                    worldIn.setBlockState(pos, Blocks.OBSIDIAN.getDefaultState());
-                    this.triggerMixEffects(worldIn, pos);
-                    return true;
-                }
-
-                if (integer <= 4)
-                {
-                    worldIn.setBlockState(pos, Blocks.COBBLESTONE.getDefaultState());
-                    this.triggerMixEffects(worldIn, pos);
-                    return true;
-                }
-            }
-        }
-
-        return false;
+        return vec3d.x == 0.0D && vec3d.z == 0.0D ? -1000.0F : (float)MathHelper.atan2(vec3d.z, vec3d.x) - ((float)Math.PI / 2F);
     }
 
     protected void triggerMixEffects(World worldIn, BlockPos pos)
@@ -437,37 +382,27 @@
         double d0 = (double)pos.getX();
         double d1 = (double)pos.getY();
         double d2 = (double)pos.getZ();
-        worldIn.playSound(
-            null,
-            pos,
-            SoundEvents.BLOCK_LAVA_EXTINGUISH,
-            SoundCategory.BLOCKS,
-            0.5F,
-            2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F
-        );
+        worldIn.playSound((EntityPlayer)null, pos, SoundEvents.BLOCK_LAVA_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F);
 
-        for (int i = 0; i < 8; i++)
+        for (int i = 0; i < 8; ++i)
         {
-            worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2, d2 + Math.random(), 0.0, 0.0, 0.0);
+            worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D);
         }
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState().withProperty(LEVEL, meta);
+        return this.getDefaultState().withProperty(LEVEL, Integer.valueOf(meta));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
-        return state.getValue(LEVEL);
+        return ((Integer)state.getValue(LEVEL)).intValue();
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, LEVEL);
+        return new BlockStateContainer(this, new IProperty[] {LEVEL});
     }
 
     public static BlockDynamicLiquid getFlowingBlock(Material materialIn)
@@ -504,7 +439,7 @@
 
     public static float getBlockLiquidHeight(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
-        int i = state.getValue(LEVEL);
+        int i = ((Integer)state.getValue(LEVEL)).intValue();
         return (i & 7) == 0 && worldIn.getBlockState(pos.up()).getMaterial() == Material.WATER ? 1.0F : 1.0F - getLiquidHeightPercent(i);
     }
 
@@ -514,8 +449,38 @@
     }
 
     @Override
+    public float getBlockLiquidHeight(World world, BlockPos pos, IBlockState state, Material material)
+    {
+        return BlockLiquid.getBlockLiquidHeight(state, world, pos);
+    }
+
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return BlockFaceShape.UNDEFINED;
+    }
+
+    @Override
+    @SideOnly (Side.CLIENT)
+    public Vec3d getFogColor(World world, BlockPos pos, IBlockState state, Entity entity, Vec3d originalColor, float partialTicks)
+    {
+        Vec3d viewport = net.minecraft.client.renderer.ActiveRenderInfo.projectViewFromEntity(entity, partialTicks);
+
+        if (state.getMaterial().isLiquid())
+        {
+            float height = 0.0F;
+            if (state.getBlock() instanceof BlockLiquid)
+            {
+                height = getLiquidHeightPercent(state.getValue(LEVEL)) - 0.11111111F;
+            }
+            float f1 = (float) (pos.getY() + 1) - height;
+            if (viewport.y > (double)f1)
+            {
+                BlockPos upPos = pos.up();
+                IBlockState upState = world.getBlockState(upPos);
+                return upState.getBlock().getFogColor(world, upPos, upState, entity, originalColor, partialTicks);
+            }
+        }
+
+        return super.getFogColor(world, pos, state, entity, originalColor, partialTicks);
     }
 }
