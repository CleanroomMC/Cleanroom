--- before/net/minecraft/block/BlockEnderChest.java
+++ after/net/minecraft/block/BlockEnderChest.java
@@ -2,6 +2,7 @@
 
 import java.util.Random;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.BlockStateContainer;
@@ -32,7 +33,7 @@
 public class BlockEnderChest extends BlockContainer
 {
     public static final PropertyDirection FACING = BlockHorizontal.FACING;
-    protected static final AxisAlignedBB ENDER_CHEST_AABB = new AxisAlignedBB(0.0625, 0.0, 0.0625, 0.9375, 0.875, 0.9375);
+    protected static final AxisAlignedBB ENDER_CHEST_AABB = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 0.9375D, 0.875D, 0.9375D);
 
     protected BlockEnderChest()
     {
@@ -41,138 +42,108 @@
         this.setCreativeTab(CreativeTabs.DECORATIONS);
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         return ENDER_CHEST_AABB;
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean hasCustomBreakingProgress(IBlockState state)
     {
         return true;
     }
 
-    @Override
     public EnumBlockRenderType getRenderType(IBlockState state)
     {
         return EnumBlockRenderType.ENTITYBLOCK_ANIMATED;
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return Item.getItemFromBlock(Blocks.OBSIDIAN);
     }
 
-    @Override
     public int quantityDropped(Random random)
     {
         return 8;
     }
 
-    @Override
     protected boolean canSilkHarvest()
     {
         return true;
     }
 
-    @Override
-    public IBlockState getStateForPlacement(
-        World worldIn,
-        BlockPos pos,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ,
-        int meta,
-        EntityLivingBase placer
-    )
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
     {
         return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing().getOpposite());
     }
 
-    @Override
     public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
     {
         worldIn.setBlockState(pos, state.withProperty(FACING, placer.getHorizontalFacing().getOpposite()), 2);
     }
 
-    @Override
-    public boolean onBlockActivated(
-        World worldIn,
-        BlockPos pos,
-        IBlockState state,
-        EntityPlayer playerIn,
-        EnumHand hand,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         InventoryEnderChest inventoryenderchest = playerIn.getInventoryEnderChest();
         TileEntity tileentity = worldIn.getTileEntity(pos);
 
-        if (inventoryenderchest == null || !(tileentity instanceof TileEntityEnderChest))
-        {
-            return true;
-        }
-        else if (worldIn.getBlockState(pos.up()).isNormalCube())
-        {
-            return true;
-        }
-        else if (worldIn.isRemote)
-        {
-            return true;
+        if (inventoryenderchest != null && tileentity instanceof TileEntityEnderChest)
+        {
+            if (worldIn.getBlockState(pos.up()).doesSideBlockChestOpening(worldIn, pos.up(), EnumFacing.DOWN))
+            {
+                return true;
+            }
+            else if (worldIn.isRemote)
+            {
+                return true;
+            }
+            else
+            {
+                inventoryenderchest.setChestTileEntity((TileEntityEnderChest)tileentity);
+                playerIn.displayGUIChest(inventoryenderchest);
+                playerIn.addStat(StatList.ENDERCHEST_OPENED);
+                return true;
+            }
         }
         else
         {
-            inventoryenderchest.setChestTileEntity((TileEntityEnderChest)tileentity);
-            playerIn.displayGUIChest(inventoryenderchest);
-            playerIn.addStat(StatList.ENDERCHEST_OPENED);
             return true;
         }
     }
 
-    @Override
     public TileEntity createNewTileEntity(World worldIn, int meta)
     {
         return new TileEntityEnderChest();
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
     {
-        for (int i = 0; i < 3; i++)
+        for (int i = 0; i < 3; ++i)
         {
             int j = rand.nextInt(2) * 2 - 1;
             int k = rand.nextInt(2) * 2 - 1;
-            double d0 = (double)pos.getX() + 0.5 + 0.25 * (double)j;
+            double d0 = (double)pos.getX() + 0.5D + 0.25D * (double)j;
             double d1 = (double)((float)pos.getY() + rand.nextFloat());
-            double d2 = (double)pos.getZ() + 0.5 + 0.25 * (double)k;
+            double d2 = (double)pos.getZ() + 0.5D + 0.25D * (double)k;
             double d3 = (double)(rand.nextFloat() * (float)j);
-            double d4 = ((double)rand.nextFloat() - 0.5) * 0.125;
+            double d4 = ((double)rand.nextFloat() - 0.5D) * 0.125D;
             double d5 = (double)(rand.nextFloat() * (float)k);
             worldIn.spawnParticle(EnumParticleTypes.PORTAL, d0, d1, d2, d3, d4, d5);
         }
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
         EnumFacing enumfacing = EnumFacing.byIndex(meta);
@@ -185,31 +156,26 @@
         return this.getDefaultState().withProperty(FACING, enumfacing);
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
-        return state.getValue(FACING).getIndex();
+        return ((EnumFacing)state.getValue(FACING)).getIndex();
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return state.withRotation(mirrorIn.toRotation(state.getValue(FACING)));
+        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, FACING);
+        return new BlockStateContainer(this, new IProperty[] {FACING});
     }
 
-    @Override
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return BlockFaceShape.UNDEFINED;
