--- before/net/minecraft/block/BlockNewLeaf.java
+++ after/net/minecraft/block/BlockNewLeaf.java
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Predicate;
 import javax.annotation.Nullable;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
@@ -18,28 +19,19 @@
 
 public class BlockNewLeaf extends BlockLeaves
 {
-    public static final PropertyEnum<BlockPlanks.EnumType> VARIANT = PropertyEnum.create(
-                    "variant", BlockPlanks.EnumType.class, new Predicate<BlockPlanks.EnumType>()
+    public static final PropertyEnum<BlockPlanks.EnumType> VARIANT = PropertyEnum.<BlockPlanks.EnumType>create("variant", BlockPlanks.EnumType.class, new Predicate<BlockPlanks.EnumType>()
     {
         public boolean apply(@Nullable BlockPlanks.EnumType p_apply_1_)
         {
             return p_apply_1_.getMetadata() >= 4;
         }
-    }
-            );
+    });
 
     public BlockNewLeaf()
     {
-        this.setDefaultState(
-            this.blockState
-            .getBaseState()
-            .withProperty(VARIANT, BlockPlanks.EnumType.ACACIA)
-            .withProperty(CHECK_DECAY, true)
-            .withProperty(DECAYABLE, true)
-        );
+        this.setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, BlockPlanks.EnumType.ACACIA).withProperty(CHECK_DECAY, Boolean.valueOf(true)).withProperty(DECAYABLE, Boolean.valueOf(true)));
     }
 
-    @Override
     protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance)
     {
         if (state.getValue(VARIANT) == BlockPlanks.EnumType.DARK_OAK && worldIn.rand.nextInt(chance) == 0)
@@ -48,52 +40,43 @@
         }
     }
 
-    @Override
     public int damageDropped(IBlockState state)
     {
-        return state.getValue(VARIANT).getMetadata();
+        return ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata();
     }
 
-    @Override
     public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
     {
         return new ItemStack(this, 1, state.getBlock().getMetaFromState(state) & 3);
     }
 
-    @Override
     public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
     {
         items.add(new ItemStack(this, 1, 0));
         items.add(new ItemStack(this, 1, 1));
     }
 
-    @Override
     protected ItemStack getSilkTouchDrop(IBlockState state)
     {
-        return new ItemStack(Item.getItemFromBlock(this), 1, state.getValue(VARIANT).getMetadata() - 4);
+        return new ItemStack(Item.getItemFromBlock(this), 1, ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata() - 4);
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState()
-               .withProperty(VARIANT, this.getWoodType(meta))
-               .withProperty(DECAYABLE, (meta & 4) == 0)
-               .withProperty(CHECK_DECAY, (meta & 8) > 0);
+        return this.getDefaultState().withProperty(VARIANT, this.getWoodType(meta)).withProperty(DECAYABLE, Boolean.valueOf((meta & 4) == 0)).withProperty(CHECK_DECAY, Boolean.valueOf((meta & 8) > 0));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i |= state.getValue(VARIANT).getMetadata() - 4;
+        i = i | ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata() - 4;
 
-        if (!state.getValue(DECAYABLE))
+        if (!((Boolean)state.getValue(DECAYABLE)).booleanValue())
         {
             i |= 4;
         }
 
-        if (state.getValue(CHECK_DECAY))
+        if (((Boolean)state.getValue(CHECK_DECAY)).booleanValue())
         {
             i |= 8;
         }
@@ -101,31 +84,32 @@
         return i;
     }
 
-    @Override
     public BlockPlanks.EnumType getWoodType(int meta)
     {
         return BlockPlanks.EnumType.byMetadata((meta & 3) + 4);
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, VARIANT, CHECK_DECAY, DECAYABLE);
+        return new BlockStateContainer(this, new IProperty[] {VARIANT, CHECK_DECAY, DECAYABLE});
     }
 
-    @Override
-    public void harvestBlock(
-        World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, @Nullable TileEntity te, ItemStack stack
-    )
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, @Nullable TileEntity te, ItemStack stack)
     {
         if (!worldIn.isRemote && stack.getItem() == Items.SHEARS)
         {
             player.addStat(StatList.getBlockStats(this));
-            spawnAsEntity(worldIn, pos, new ItemStack(Item.getItemFromBlock(this), 1, state.getValue(VARIANT).getMetadata() - 4));
+            spawnAsEntity(worldIn, pos, new ItemStack(Item.getItemFromBlock(this), 1, ((BlockPlanks.EnumType)state.getValue(VARIANT)).getMetadata() - 4));
         }
         else
         {
             super.harvestBlock(worldIn, player, pos, state, te, stack);
         }
+    }
+
+    @Override
+    public NonNullList<ItemStack> onSheared(ItemStack item, net.minecraft.world.IBlockAccess world, BlockPos pos, int fortune)
+    {
+        return NonNullList.withSize(1, new ItemStack(this, 1, world.getBlockState(pos).getValue(VARIANT).getMetadata() - 4));
     }
 }
