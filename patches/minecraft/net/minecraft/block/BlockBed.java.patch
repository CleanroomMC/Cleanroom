--- before/net/minecraft/block/BlockBed.java
+++ after/net/minecraft/block/BlockBed.java
@@ -5,6 +5,7 @@
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockFaceShape;
@@ -37,18 +38,17 @@
 
 public class BlockBed extends BlockHorizontal implements ITileEntityProvider
 {
-    public static final PropertyEnum<BlockBed.EnumPartType> PART = PropertyEnum.create("part", BlockBed.EnumPartType.class);
+    public static final PropertyEnum<BlockBed.EnumPartType> PART = PropertyEnum.<BlockBed.EnumPartType>create("part", BlockBed.EnumPartType.class);
     public static final PropertyBool OCCUPIED = PropertyBool.create("occupied");
-    protected static final AxisAlignedBB BED_AABB = new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 0.5625, 1.0);
+    protected static final AxisAlignedBB BED_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.5625D, 1.0D);
 
     public BlockBed()
     {
         super(Material.CLOTH);
-        this.setDefaultState(this.blockState.getBaseState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(OCCUPIED, false));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(OCCUPIED, Boolean.valueOf(false)));
         this.hasTileEntity = true;
     }
 
-    @Override
     public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
         if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
@@ -65,18 +65,7 @@
         return MapColor.CLOTH;
     }
 
-    @Override
-    public boolean onBlockActivated(
-        World worldIn,
-        BlockPos pos,
-        IBlockState state,
-        EntityPlayer playerIn,
-        EnumHand hand,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         if (worldIn.isRemote)
         {
@@ -86,7 +75,7 @@
         {
             if (state.getValue(PART) != BlockBed.EnumPartType.HEAD)
             {
-                pos = pos.offset(state.getValue(FACING));
+                pos = pos.offset((EnumFacing)state.getValue(FACING));
                 state = worldIn.getBlockState(pos);
 
                 if (state.getBlock() != this)
@@ -95,19 +84,21 @@
                 }
             }
 
-            if (worldIn.provider.canRespawnHere() && worldIn.getBiome(pos) != Biomes.HELL)
+            net.minecraft.world.WorldProvider.WorldSleepResult sleepResult = worldIn.provider.canSleepAt(playerIn, pos);
+            if (sleepResult != net.minecraft.world.WorldProvider.WorldSleepResult.BED_EXPLODES)
             {
-                if (state.getValue(OCCUPIED))
+                if (sleepResult == net.minecraft.world.WorldProvider.WorldSleepResult.DENY) return true;
+                if (((Boolean)state.getValue(OCCUPIED)).booleanValue())
                 {
                     EntityPlayer entityplayer = this.getPlayerInBed(worldIn, pos);
 
                     if (entityplayer != null)
                     {
-                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.occupied"), true);
+                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.occupied", new Object[0]), true);
                         return true;
                     }
 
-                    state = state.withProperty(OCCUPIED, false);
+                    state = state.withProperty(OCCUPIED, Boolean.valueOf(false));
                     worldIn.setBlockState(pos, state, 4);
                 }
 
@@ -115,7 +106,7 @@
 
                 if (entityplayer$sleepresult == EntityPlayer.SleepResult.OK)
                 {
-                    state = state.withProperty(OCCUPIED, true);
+                    state = state.withProperty(OCCUPIED, Boolean.valueOf(true));
                     worldIn.setBlockState(pos, state, 4);
                     return true;
                 }
@@ -123,15 +114,15 @@
                 {
                     if (entityplayer$sleepresult == EntityPlayer.SleepResult.NOT_POSSIBLE_NOW)
                     {
-                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.noSleep"), true);
+                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.noSleep", new Object[0]), true);
                     }
                     else if (entityplayer$sleepresult == EntityPlayer.SleepResult.NOT_SAFE)
                     {
-                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.notSafe"), true);
+                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.notSafe", new Object[0]), true);
                     }
                     else if (entityplayer$sleepresult == EntityPlayer.SleepResult.TOO_FAR_AWAY)
                     {
-                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.tooFarAway"), true);
+                        playerIn.sendStatusMessage(new TextComponentTranslation("tile.bed.tooFarAway", new Object[0]), true);
                     }
 
                     return true;
@@ -140,22 +131,14 @@
             else
             {
                 worldIn.setBlockToAir(pos);
-                BlockPos blockpos = pos.offset(state.getValue(FACING).getOpposite());
+                BlockPos blockpos = pos.offset(((EnumFacing)state.getValue(FACING)).getOpposite());
 
                 if (worldIn.getBlockState(blockpos).getBlock() == this)
                 {
                     worldIn.setBlockToAir(blockpos);
                 }
 
-                worldIn.newExplosion(
-                    null,
-                    (double)pos.getX() + 0.5,
-                    (double)pos.getY() + 0.5,
-                    (double)pos.getZ() + 0.5,
-                    5.0F,
-                    true,
-                    true
-                );
+                worldIn.newExplosion((Entity)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, 5.0F, true, true);
                 return true;
             }
         }
@@ -175,46 +158,41 @@
         return null;
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public void onFallenUpon(World worldIn, BlockPos pos, Entity entityIn, float fallDistance)
     {
         super.onFallenUpon(worldIn, pos, entityIn, fallDistance * 0.5F);
     }
 
-    @Override
     public void onLanded(World worldIn, Entity entityIn)
     {
         if (entityIn.isSneaking())
         {
             super.onLanded(worldIn, entityIn);
         }
-        else if (entityIn.motionY < 0.0)
+        else if (entityIn.motionY < 0.0D)
         {
-            entityIn.motionY = -entityIn.motionY * 0.66F;
+            entityIn.motionY = -entityIn.motionY * 0.6600000262260437D;
 
             if (!(entityIn instanceof EntityLivingBase))
             {
-                entityIn.motionY *= 0.8;
+                entityIn.motionY *= 0.8D;
             }
         }
     }
 
-    @Override
     public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
-        EnumFacing enumfacing = state.getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
 
         if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
         {
@@ -234,20 +212,17 @@
         }
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return state.getValue(PART) == BlockBed.EnumPartType.FOOT ? Items.AIR : Items.BED;
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         return BED_AABB;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean hasCustomBreakingProgress(IBlockState state)
     {
         return true;
@@ -256,21 +231,21 @@
     @Nullable
     public static BlockPos getSafeExitLocation(World worldIn, BlockPos pos, int tries)
     {
-        EnumFacing enumfacing = worldIn.getBlockState(pos).getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing)worldIn.getBlockState(pos).getValue(FACING);
         int i = pos.getX();
         int j = pos.getY();
         int k = pos.getZ();
 
-        for (int l = 0; l <= 1; l++)
+        for (int l = 0; l <= 1; ++l)
         {
             int i1 = i - enumfacing.getXOffset() * l - 1;
             int j1 = k - enumfacing.getZOffset() * l - 1;
             int k1 = i1 + 2;
             int l1 = j1 + 2;
 
-            for (int i2 = i1; i2 <= k1; i2++)
+            for (int i2 = i1; i2 <= k1; ++i2)
             {
-                for (int j2 = j1; j2 <= l1; j2++)
+                for (int j2 = j1; j2 <= l1; ++j2)
                 {
                     BlockPos blockpos = new BlockPos(i2, j, j2);
 
@@ -281,7 +256,7 @@
                             return blockpos;
                         }
 
-                        tries--;
+                        --tries;
                     }
                 }
             }
@@ -292,12 +267,9 @@
 
     protected static boolean hasRoomForPlayer(World worldIn, BlockPos pos)
     {
-        return worldIn.getBlockState(pos.down()).isTopSolid()
-               && !worldIn.getBlockState(pos).getMaterial().isSolid()
-               && !worldIn.getBlockState(pos.up()).getMaterial().isSolid();
+        return worldIn.getBlockState(pos.down()).isTopSolid() && !worldIn.getBlockState(pos).getMaterial().isSolid() && !worldIn.getBlockState(pos.up()).getMaterial().isSolid();
     }
 
-    @Override
     public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
     {
         if (state.getValue(PART) == BlockBed.EnumPartType.HEAD)
@@ -308,33 +280,29 @@
         }
     }
 
-    @Override
     public EnumPushReaction getPushReaction(IBlockState state)
     {
         return EnumPushReaction.DESTROY;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public BlockRenderLayer getRenderLayer()
     {
         return BlockRenderLayer.CUTOUT;
     }
 
-    @Override
     public EnumBlockRenderType getRenderType(IBlockState state)
     {
         return EnumBlockRenderType.ENTITYBLOCK_ANIMATED;
     }
 
-    @Override
     public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
     {
         BlockPos blockpos = pos;
 
         if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
         {
-            blockpos = pos.offset(state.getValue(FACING));
+            blockpos = pos.offset((EnumFacing)state.getValue(FACING));
         }
 
         TileEntity tileentity = worldIn.getTileEntity(blockpos);
@@ -342,12 +310,11 @@
         return new ItemStack(Items.BED, 1, enumdyecolor.getMetadata());
     }
 
-    @Override
     public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
     {
         if (player.capabilities.isCreativeMode && state.getValue(PART) == BlockBed.EnumPartType.FOOT)
         {
-            BlockPos blockpos = pos.offset(state.getValue(FACING));
+            BlockPos blockpos = pos.offset((EnumFacing)state.getValue(FACING));
 
             if (worldIn.getBlockState(blockpos).getBlock() == this)
             {
@@ -356,10 +323,7 @@
         }
     }
 
-    @Override
-    public void harvestBlock(
-        World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te, ItemStack stack
-    )
+    public void harvestBlock(World worldIn, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity te, ItemStack stack)
     {
         if (state.getValue(PART) == BlockBed.EnumPartType.HEAD && te instanceof TileEntityBed)
         {
@@ -369,35 +333,27 @@
         }
         else
         {
-            super.harvestBlock(worldIn, player, pos, state, null, stack);
+            super.harvestBlock(worldIn, player, pos, state, (TileEntity)null, stack);
         }
     }
 
-    @Override
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         super.breakBlock(worldIn, pos, state);
         worldIn.removeTileEntity(pos);
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
         EnumFacing enumfacing = EnumFacing.byHorizontalIndex(meta);
-        return (meta & 8) > 0
-               ? this.getDefaultState()
-               .withProperty(PART, BlockBed.EnumPartType.HEAD)
-               .withProperty(FACING, enumfacing)
-               .withProperty(OCCUPIED, (meta & 4) > 0)
-               : this.getDefaultState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(FACING, enumfacing);
+        return (meta & 8) > 0 ? this.getDefaultState().withProperty(PART, BlockBed.EnumPartType.HEAD).withProperty(FACING, enumfacing).withProperty(OCCUPIED, Boolean.valueOf((meta & 4) > 0)) : this.getDefaultState().withProperty(PART, BlockBed.EnumPartType.FOOT).withProperty(FACING, enumfacing);
     }
 
-    @Override
     public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
         if (state.getValue(PART) == BlockBed.EnumPartType.FOOT)
         {
-            IBlockState iblockstate = worldIn.getBlockState(pos.offset(state.getValue(FACING)));
+            IBlockState iblockstate = worldIn.getBlockState(pos.offset((EnumFacing)state.getValue(FACING)));
 
             if (iblockstate.getBlock() == this)
             {
@@ -408,29 +364,26 @@
         return state;
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return state.withRotation(mirrorIn.toRotation(state.getValue(FACING)));
+        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i |= state.getValue(FACING).getHorizontalIndex();
+        i = i | ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
 
         if (state.getValue(PART) == BlockBed.EnumPartType.HEAD)
         {
             i |= 8;
 
-            if (state.getValue(OCCUPIED))
+            if (((Boolean)state.getValue(OCCUPIED)).booleanValue())
             {
                 i |= 4;
             }
@@ -439,19 +392,16 @@
         return i;
     }
 
-    @Override
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return BlockFaceShape.UNDEFINED;
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, FACING, PART, OCCUPIED);
+        return new BlockStateContainer(this, new IProperty[] {FACING, PART, OCCUPIED});
     }
 
-    @Override
     public TileEntity createNewTileEntity(World worldIn, int meta)
     {
         return new TileEntityBed();
@@ -475,13 +425,11 @@
             this.name = name;
         }
 
-        @Override
         public String toString()
         {
             return this.name;
         }
 
-        @Override
         public String getName()
         {
             return this.name;
