--- before/net/minecraft/block/BlockRedstoneWire.java
+++ after/net/minecraft/block/BlockRedstoneWire.java
@@ -8,6 +8,7 @@
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.properties.PropertyInteger;
 import net.minecraft.block.state.BlockFaceShape;
@@ -33,56 +34,21 @@
 
 public class BlockRedstoneWire extends Block
 {
-    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> NORTH = PropertyEnum.create(
-                    "north", BlockRedstoneWire.EnumAttachPosition.class
-                );
-    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> EAST = PropertyEnum.create(
-                    "east", BlockRedstoneWire.EnumAttachPosition.class
-                );
-    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> SOUTH = PropertyEnum.create(
-                    "south", BlockRedstoneWire.EnumAttachPosition.class
-                );
-    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> WEST = PropertyEnum.create(
-                    "west", BlockRedstoneWire.EnumAttachPosition.class
-                );
+    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> NORTH = PropertyEnum.<BlockRedstoneWire.EnumAttachPosition>create("north", BlockRedstoneWire.EnumAttachPosition.class);
+    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> EAST = PropertyEnum.<BlockRedstoneWire.EnumAttachPosition>create("east", BlockRedstoneWire.EnumAttachPosition.class);
+    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> SOUTH = PropertyEnum.<BlockRedstoneWire.EnumAttachPosition>create("south", BlockRedstoneWire.EnumAttachPosition.class);
+    public static final PropertyEnum<BlockRedstoneWire.EnumAttachPosition> WEST = PropertyEnum.<BlockRedstoneWire.EnumAttachPosition>create("west", BlockRedstoneWire.EnumAttachPosition.class);
     public static final PropertyInteger POWER = PropertyInteger.create("power", 0, 15);
-    protected static final AxisAlignedBB[] REDSTONE_WIRE_AABB = new AxisAlignedBB[]
-        {
-            new AxisAlignedBB(0.1875, 0.0, 0.1875, 0.8125, 0.0625, 0.8125),
-            new AxisAlignedBB(0.1875, 0.0, 0.1875, 0.8125, 0.0625, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.1875, 0.8125, 0.0625, 0.8125),
-            new AxisAlignedBB(0.0, 0.0, 0.1875, 0.8125, 0.0625, 1.0),
-            new AxisAlignedBB(0.1875, 0.0, 0.0, 0.8125, 0.0625, 0.8125),
-            new AxisAlignedBB(0.1875, 0.0, 0.0, 0.8125, 0.0625, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 0.8125, 0.0625, 0.8125),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 0.8125, 0.0625, 1.0),
-            new AxisAlignedBB(0.1875, 0.0, 0.1875, 1.0, 0.0625, 0.8125),
-            new AxisAlignedBB(0.1875, 0.0, 0.1875, 1.0, 0.0625, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.1875, 1.0, 0.0625, 0.8125),
-            new AxisAlignedBB(0.0, 0.0, 0.1875, 1.0, 0.0625, 1.0),
-            new AxisAlignedBB(0.1875, 0.0, 0.0, 1.0, 0.0625, 0.8125),
-            new AxisAlignedBB(0.1875, 0.0, 0.0, 1.0, 0.0625, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 0.0625, 0.8125),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 0.0625, 1.0)
-        };
+    protected static final AxisAlignedBB[] REDSTONE_WIRE_AABB = new AxisAlignedBB[] {new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D)};
     private boolean canProvidePower = true;
-    private final Set<BlockPos> blocksNeedingUpdate = Sets.newHashSet();
+    private final Set<BlockPos> blocksNeedingUpdate = Sets.<BlockPos>newHashSet();
 
     public BlockRedstoneWire()
     {
         super(Material.CIRCUITS);
-        this.setDefaultState(
-            this.blockState
-            .getBaseState()
-            .withProperty(NORTH, BlockRedstoneWire.EnumAttachPosition.NONE)
-            .withProperty(EAST, BlockRedstoneWire.EnumAttachPosition.NONE)
-            .withProperty(SOUTH, BlockRedstoneWire.EnumAttachPosition.NONE)
-            .withProperty(WEST, BlockRedstoneWire.EnumAttachPosition.NONE)
-            .withProperty(POWER, 0)
-        );
+        this.setDefaultState(this.blockState.getBaseState().withProperty(NORTH, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(EAST, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(SOUTH, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(WEST, BlockRedstoneWire.EnumAttachPosition.NONE).withProperty(POWER, Integer.valueOf(0)));
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         return REDSTONE_WIRE_AABB[getAABBIndex(state.getActualState(source, pos))];
@@ -119,13 +85,13 @@
         return i;
     }
 
-    @Override
     public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
         state = state.withProperty(WEST, this.getAttachPosition(worldIn, pos, EnumFacing.WEST));
         state = state.withProperty(EAST, this.getAttachPosition(worldIn, pos, EnumFacing.EAST));
         state = state.withProperty(NORTH, this.getAttachPosition(worldIn, pos, EnumFacing.NORTH));
-        return state.withProperty(SOUTH, this.getAttachPosition(worldIn, pos, EnumFacing.SOUTH));
+        state = state.withProperty(SOUTH, this.getAttachPosition(worldIn, pos, EnumFacing.SOUTH));
+        return state;
     }
 
     private BlockRedstoneWire.EnumAttachPosition getAttachPosition(IBlockAccess worldIn, BlockPos pos, EnumFacing direction)
@@ -133,16 +99,15 @@
         BlockPos blockpos = pos.offset(direction);
         IBlockState iblockstate = worldIn.getBlockState(pos.offset(direction));
 
-        if (!canConnectTo(worldIn.getBlockState(blockpos), direction)
-                && (iblockstate.isNormalCube() || !canConnectUpwardsTo(worldIn.getBlockState(blockpos.down()))))
+        if (!canConnectTo(worldIn.getBlockState(blockpos), direction, worldIn, blockpos) && (iblockstate.isNormalCube() || !canConnectUpwardsTo(worldIn, blockpos.down())))
         {
             IBlockState iblockstate1 = worldIn.getBlockState(pos.up());
 
             if (!iblockstate1.isNormalCube())
             {
-                boolean flag = worldIn.getBlockState(blockpos).isTopSolid() || worldIn.getBlockState(blockpos).getBlock() == Blocks.GLOWSTONE;
+                boolean flag = worldIn.getBlockState(blockpos).isSideSolid(worldIn, blockpos, EnumFacing.UP) || worldIn.getBlockState(blockpos).getBlock() == Blocks.GLOWSTONE;
 
-                if (flag && canConnectUpwardsTo(worldIn.getBlockState(blockpos.up())))
+                if (flag && canConnectUpwardsTo(worldIn, blockpos.up()))
                 {
                     if (iblockstate.isBlockNormalCube())
                     {
@@ -162,29 +127,25 @@
     }
 
     @Nullable
-    @Override
     public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
     {
         return NULL_AABB;
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
     {
-        return worldIn.getBlockState(pos.down()).isTopSolid()
-               || worldIn.getBlockState(pos.down()).getBlock() == Blocks.GLOWSTONE;
+        IBlockState downState = worldIn.getBlockState(pos.down());
+        return downState.isTopSolid() || downState.getBlockFaceShape(worldIn, pos.down(), EnumFacing.UP) == BlockFaceShape.SOLID || worldIn.getBlockState(pos.down()).getBlock() == Blocks.GLOWSTONE;
     }
 
     private IBlockState updateSurroundingRedstone(World worldIn, BlockPos pos, IBlockState state)
@@ -204,7 +165,7 @@
     private IBlockState calculateCurrentChanges(World worldIn, BlockPos pos1, BlockPos pos2, IBlockState state)
     {
         IBlockState iblockstate = state;
-        int i = state.getValue(POWER);
+        int i = ((Integer)state.getValue(POWER)).intValue();
         int j = 0;
         j = this.getMaxCurrentStrength(worldIn, pos2, j);
         this.canProvidePower = false;
@@ -247,7 +208,7 @@
         }
         else if (j > 0)
         {
-            j--;
+            --j;
         }
         else
         {
@@ -261,7 +222,7 @@
 
         if (i != j)
         {
-            state = state.withProperty(POWER, j);
+            state = state.withProperty(POWER, Integer.valueOf(j));
 
             if (worldIn.getBlockState(pos1) == iblockstate)
             {
@@ -292,7 +253,6 @@
         }
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         if (!worldIn.isRemote)
@@ -325,7 +285,6 @@
         }
     }
 
-    @Override
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         super.breakBlock(worldIn, pos, state);
@@ -368,12 +327,11 @@
         }
         else
         {
-            int i = worldIn.getBlockState(pos).getValue(POWER);
+            int i = ((Integer)worldIn.getBlockState(pos).getValue(POWER)).intValue();
             return i > strength ? i : strength;
         }
     }
 
-    @Override
     public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
         if (!worldIn.isRemote)
@@ -390,19 +348,16 @@
         }
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return Items.REDSTONE;
     }
 
-    @Override
     public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         return !this.canProvidePower ? 0 : blockState.getWeakPower(blockAccess, pos, side);
     }
 
-    @Override
     public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         if (!this.canProvidePower)
@@ -411,7 +366,7 @@
         }
         else
         {
-            int i = blockState.getValue(POWER);
+            int i = ((Integer)blockState.getValue(POWER)).intValue();
 
             if (i == 0)
             {
@@ -423,7 +378,7 @@
             }
             else
             {
-                EnumSet<EnumFacing> enumset = EnumSet.noneOf(EnumFacing.class);
+                EnumSet<EnumFacing> enumset = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
 
                 for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                 {
@@ -437,9 +392,13 @@
                 {
                     return i;
                 }
+                else if (enumset.contains(side) && !enumset.contains(side.rotateYCCW()) && !enumset.contains(side.rotateY()))
+                {
+                    return i;
+                }
                 else
                 {
-                    return enumset.contains(side) && !enumset.contains(side.rotateYCCW()) && !enumset.contains(side.rotateY()) ? i : 0;
+                    return 0;
                 }
             }
         }
@@ -456,29 +415,26 @@
         {
             return true;
         }
-        else if (canConnectTo(iblockstate, side))
+        else if (canConnectTo(iblockstate, side, worldIn, pos))
+        {
+            return true;
+        }
+        else if (iblockstate.getBlock() == Blocks.POWERED_REPEATER && iblockstate.getValue(BlockRedstoneDiode.FACING) == side)
         {
             return true;
         }
         else
         {
-            return iblockstate.getBlock() == Blocks.POWERED_REPEATER && iblockstate.getValue(BlockRedstoneDiode.FACING) == side
-                   ? true
-                   : !flag && canConnectUpwardsTo(worldIn, blockpos.down());
+            return !flag && canConnectUpwardsTo(worldIn, blockpos.down());
         }
     }
 
     protected static boolean canConnectUpwardsTo(IBlockAccess worldIn, BlockPos pos)
     {
-        return canConnectUpwardsTo(worldIn.getBlockState(pos));
-    }
-
-    protected static boolean canConnectUpwardsTo(IBlockState state)
-    {
-        return canConnectTo(state, null);
-    }
-
-    protected static boolean canConnectTo(IBlockState blockState, @Nullable EnumFacing side)
+        return canConnectTo(worldIn.getBlockState(pos), null, worldIn, pos);
+    }
+
+    protected static boolean canConnectTo(IBlockState blockState, @Nullable EnumFacing side, IBlockAccess world, BlockPos pos)
     {
         Block block = blockState.getBlock();
 
@@ -488,18 +444,19 @@
         }
         else if (Blocks.UNPOWERED_REPEATER.isSameDiode(blockState))
         {
-            EnumFacing enumfacing = blockState.getValue(BlockRedstoneRepeater.FACING);
+            EnumFacing enumfacing = (EnumFacing)blockState.getValue(BlockRedstoneRepeater.FACING);
             return enumfacing == side || enumfacing.getOpposite() == side;
         }
+        else if (Blocks.OBSERVER == blockState.getBlock())
+        {
+            return side == blockState.getValue(BlockObserver.FACING);
+        }
         else
         {
-            return Blocks.OBSERVER == blockState.getBlock()
-                   ? side == blockState.getValue(BlockObserver.FACING)
-                   : blockState.canProvidePower() && side != null;
+            return blockState.getBlock().canConnectRedstone(blockState, world, pos, side);
         }
     }
 
-    @Override
     public boolean canProvidePower(IBlockState state)
     {
         return this.canProvidePower;
@@ -532,20 +489,19 @@
         int i = MathHelper.clamp((int)(f1 * 255.0F), 0, 255);
         int j = MathHelper.clamp((int)(f2 * 255.0F), 0, 255);
         int k = MathHelper.clamp((int)(f3 * 255.0F), 0, 255);
-        return 0xFF000000 | i << 16 | j << 8 | k;
+        return -16777216 | i << 16 | j << 8 | k;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
     {
-        int i = stateIn.getValue(POWER);
+        int i = ((Integer)stateIn.getValue(POWER)).intValue();
 
         if (i != 0)
         {
-            double d0 = (double)pos.getX() + 0.5 + ((double)rand.nextFloat() - 0.5) * 0.2;
+            double d0 = (double)pos.getX() + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
             double d1 = (double)((float)pos.getY() + 0.0625F);
-            double d2 = (double)pos.getZ() + 0.5 + ((double)rand.nextFloat() - 0.5) * 0.2;
+            double d2 = (double)pos.getZ() + 0.5D + ((double)rand.nextFloat() - 0.5D) * 0.2D;
             float f = (float)i / 15.0F;
             float f1 = f * 0.6F + 0.4F;
             float f2 = Math.max(0.0F, f * f * 0.7F - 0.5F);
@@ -554,79 +510,60 @@
         }
     }
 
-    @Override
     public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
     {
         return new ItemStack(Items.REDSTONE);
     }
 
+    public IBlockState getStateFromMeta(int meta)
+    {
+        return this.getDefaultState().withProperty(POWER, Integer.valueOf(meta));
+    }
+
     @SideOnly(Side.CLIENT)
-    @Override
     public BlockRenderLayer getRenderLayer()
     {
         return BlockRenderLayer.CUTOUT;
     }
 
-    @Override
-    public IBlockState getStateFromMeta(int meta)
-    {
-        return this.getDefaultState().withProperty(POWER, meta);
-    }
-
-    @Override
     public int getMetaFromState(IBlockState state)
     {
-        return state.getValue(POWER);
+        return ((Integer)state.getValue(POWER)).intValue();
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
         switch (rot)
         {
             case CLOCKWISE_180:
-                return state.withProperty(NORTH, state.getValue(SOUTH))
-                       .withProperty(EAST, state.getValue(WEST))
-                       .withProperty(SOUTH, state.getValue(NORTH))
-                       .withProperty(WEST, state.getValue(EAST));
+                return state.withProperty(NORTH, state.getValue(SOUTH)).withProperty(EAST, state.getValue(WEST)).withProperty(SOUTH, state.getValue(NORTH)).withProperty(WEST, state.getValue(EAST));
             case COUNTERCLOCKWISE_90:
-                return state.withProperty(NORTH, state.getValue(EAST))
-                       .withProperty(EAST, state.getValue(SOUTH))
-                       .withProperty(SOUTH, state.getValue(WEST))
-                       .withProperty(WEST, state.getValue(NORTH));
+                return state.withProperty(NORTH, state.getValue(EAST)).withProperty(EAST, state.getValue(SOUTH)).withProperty(SOUTH, state.getValue(WEST)).withProperty(WEST, state.getValue(NORTH));
             case CLOCKWISE_90:
-                return state.withProperty(NORTH, state.getValue(WEST))
-                       .withProperty(EAST, state.getValue(NORTH))
-                       .withProperty(SOUTH, state.getValue(EAST))
-                       .withProperty(WEST, state.getValue(SOUTH));
+                return state.withProperty(NORTH, state.getValue(WEST)).withProperty(EAST, state.getValue(NORTH)).withProperty(SOUTH, state.getValue(EAST)).withProperty(WEST, state.getValue(SOUTH));
             default:
                 return state;
         }
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
         switch (mirrorIn)
         {
             case LEFT_RIGHT:
-                return state.withProperty(NORTH, state.getValue(SOUTH))
-                       .withProperty(SOUTH, state.getValue(NORTH));
+                return state.withProperty(NORTH, state.getValue(SOUTH)).withProperty(SOUTH, state.getValue(NORTH));
             case FRONT_BACK:
-                return state.withProperty(EAST, state.getValue(WEST))
-                       .withProperty(WEST, state.getValue(EAST));
+                return state.withProperty(EAST, state.getValue(WEST)).withProperty(WEST, state.getValue(EAST));
             default:
                 return super.withMirror(state, mirrorIn);
         }
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, NORTH, EAST, SOUTH, WEST, POWER);
+        return new BlockStateContainer(this, new IProperty[] {NORTH, EAST, SOUTH, WEST, POWER});
     }
 
-    @Override
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return BlockFaceShape.UNDEFINED;
@@ -645,13 +582,11 @@
             this.name = name;
         }
 
-        @Override
         public String toString()
         {
             return this.getName();
         }
 
-        @Override
         public String getName()
         {
             return this.name;
