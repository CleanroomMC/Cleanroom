--- before/net/minecraft/block/BlockRedstoneTorch.java
+++ after/net/minecraft/block/BlockRedstoneTorch.java
@@ -6,6 +6,8 @@
 import java.util.Map;
 import java.util.Random;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.creativetab.CreativeTabs;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.item.Item;
@@ -21,7 +23,7 @@
 
 public class BlockRedstoneTorch extends BlockTorch
 {
-    private static final Map<World, List<BlockRedstoneTorch.Toggle>> toggles = Maps.newHashMap();
+    private static final Map<World, List<BlockRedstoneTorch.Toggle>> toggles = new java.util.WeakHashMap<World, List<Toggle>>(); // FORGE - fix vanilla MC-101233
     private final boolean isOn;
 
     private boolean isBurnedOut(World worldIn, BlockPos pos, boolean turnOff)
@@ -31,7 +33,7 @@
             toggles.put(worldIn, Lists.newArrayList());
         }
 
-        List<BlockRedstoneTorch.Toggle> list = toggles.get(worldIn);
+        List<BlockRedstoneTorch.Toggle> list = (List)toggles.get(worldIn);
 
         if (turnOff)
         {
@@ -40,13 +42,15 @@
 
         int i = 0;
 
-        for (int j = 0; j < list.size(); j++)
+        for (int j = 0; j < list.size(); ++j)
         {
             BlockRedstoneTorch.Toggle blockredstonetorch$toggle = list.get(j);
 
             if (blockredstonetorch$toggle.pos.equals(pos))
             {
-                if (++i >= 8)
+                ++i;
+
+                if (i >= 8)
                 {
                     return true;
                 }
@@ -60,16 +64,14 @@
     {
         this.isOn = isOn;
         this.setTickRandomly(true);
-        this.setCreativeTab(null);
+        this.setCreativeTab((CreativeTabs)null);
     }
 
-    @Override
     public int tickRate(World worldIn)
     {
         return 2;
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         if (this.isOn)
@@ -81,7 +83,6 @@
         }
     }
 
-    @Override
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         if (this.isOn)
@@ -93,7 +94,6 @@
         }
     }
 
-    @Override
     public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         return this.isOn && blockState.getValue(FACING) != side ? 15 : 0;
@@ -101,22 +101,20 @@
 
     private boolean shouldBeOff(World worldIn, BlockPos pos, IBlockState state)
     {
-        EnumFacing enumfacing = state.getValue(FACING).getOpposite();
+        EnumFacing enumfacing = ((EnumFacing)state.getValue(FACING)).getOpposite();
         return worldIn.isSidePowered(pos.offset(enumfacing), enumfacing);
     }
 
-    @Override
     public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random)
     {
     }
 
-    @Override
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
         boolean flag = this.shouldBeOff(worldIn, pos, state);
-        List<BlockRedstoneTorch.Toggle> list = toggles.get(worldIn);
+        List<BlockRedstoneTorch.Toggle> list = (List)toggles.get(worldIn);
 
-        while (list != null && !list.isEmpty() && worldIn.getTotalWorldTime() - list.get(0).time > 60L)
+        while (list != null && !list.isEmpty() && worldIn.getTotalWorldTime() - (list.get(0)).time > 60L)
         {
             list.remove(0);
         }
@@ -125,27 +123,18 @@
         {
             if (flag)
             {
-                worldIn.setBlockState(
-                    pos, Blocks.UNLIT_REDSTONE_TORCH.getDefaultState().withProperty(FACING, state.getValue(FACING)), 3
-                );
+                worldIn.setBlockState(pos, Blocks.UNLIT_REDSTONE_TORCH.getDefaultState().withProperty(FACING, state.getValue(FACING)), 3);
 
                 if (this.isBurnedOut(worldIn, pos, true))
                 {
-                    worldIn.playSound(
-                        null,
-                        pos,
-                        SoundEvents.BLOCK_REDSTONE_TORCH_BURNOUT,
-                        SoundCategory.BLOCKS,
-                        0.5F,
-                        2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F
-                    );
+                    worldIn.playSound((EntityPlayer)null, pos, SoundEvents.BLOCK_REDSTONE_TORCH_BURNOUT, SoundCategory.BLOCKS, 0.5F, 2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F);
 
-                    for (int i = 0; i < 5; i++)
+                    for (int i = 0; i < 5; ++i)
                     {
-                        double d0 = (double)pos.getX() + rand.nextDouble() * 0.6 + 0.2;
-                        double d1 = (double)pos.getY() + rand.nextDouble() * 0.6 + 0.2;
-                        double d2 = (double)pos.getZ() + rand.nextDouble() * 0.6 + 0.2;
-                        worldIn.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0, d1, d2, 0.0, 0.0, 0.0);
+                        double d0 = (double)pos.getX() + rand.nextDouble() * 0.6D + 0.2D;
+                        double d1 = (double)pos.getY() + rand.nextDouble() * 0.6D + 0.2D;
+                        double d2 = (double)pos.getZ() + rand.nextDouble() * 0.6D + 0.2D;
+                        worldIn.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D);
                     }
 
                     worldIn.scheduleUpdate(pos, worldIn.getBlockState(pos).getBlock(), 160);
@@ -154,13 +143,10 @@
         }
         else if (!flag && !this.isBurnedOut(worldIn, pos, false))
         {
-            worldIn.setBlockState(
-                pos, Blocks.REDSTONE_TORCH.getDefaultState().withProperty(FACING, state.getValue(FACING)), 3
-            );
+            worldIn.setBlockState(pos, Blocks.REDSTONE_TORCH.getDefaultState().withProperty(FACING, state.getValue(FACING)), 3);
         }
     }
 
-    @Override
     public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
         if (!this.onNeighborChangeInternal(worldIn, pos, state))
@@ -172,55 +158,49 @@
         }
     }
 
-    @Override
     public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         return side == EnumFacing.DOWN ? blockState.getWeakPower(blockAccess, pos, side) : 0;
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return Item.getItemFromBlock(Blocks.REDSTONE_TORCH);
     }
 
-    @Override
     public boolean canProvidePower(IBlockState state)
     {
         return true;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
     {
         if (this.isOn)
         {
-            double d0 = (double)pos.getX() + 0.5 + (rand.nextDouble() - 0.5) * 0.2;
-            double d1 = (double)pos.getY() + 0.7 + (rand.nextDouble() - 0.5) * 0.2;
-            double d2 = (double)pos.getZ() + 0.5 + (rand.nextDouble() - 0.5) * 0.2;
-            EnumFacing enumfacing = stateIn.getValue(FACING);
+            double d0 = (double)pos.getX() + 0.5D + (rand.nextDouble() - 0.5D) * 0.2D;
+            double d1 = (double)pos.getY() + 0.7D + (rand.nextDouble() - 0.5D) * 0.2D;
+            double d2 = (double)pos.getZ() + 0.5D + (rand.nextDouble() - 0.5D) * 0.2D;
+            EnumFacing enumfacing = (EnumFacing)stateIn.getValue(FACING);
 
             if (enumfacing.getAxis().isHorizontal())
             {
                 EnumFacing enumfacing1 = enumfacing.getOpposite();
-                double d3 = 0.27;
-                d0 += 0.27 * (double)enumfacing1.getXOffset();
-                d1 += 0.22;
-                d2 += 0.27 * (double)enumfacing1.getZOffset();
+                double d3 = 0.27D;
+                d0 += 0.27D * (double)enumfacing1.getXOffset();
+                d1 += 0.22D;
+                d2 += 0.27D * (double)enumfacing1.getZOffset();
             }
 
-            worldIn.spawnParticle(EnumParticleTypes.REDSTONE, d0, d1, d2, 0.0, 0.0, 0.0);
+            worldIn.spawnParticle(EnumParticleTypes.REDSTONE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
         }
     }
 
-    @Override
     public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
     {
         return new ItemStack(Blocks.REDSTONE_TORCH);
     }
 
-    @Override
     public boolean isAssociatedBlock(Block other)
     {
         return other == Blocks.UNLIT_REDSTONE_TORCH || other == Blocks.REDSTONE_TORCH;
