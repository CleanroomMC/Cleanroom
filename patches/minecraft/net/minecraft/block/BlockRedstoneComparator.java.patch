--- before/net/minecraft/block/BlockRedstoneComparator.java
+++ after/net/minecraft/block/BlockRedstoneComparator.java
@@ -5,6 +5,7 @@
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockStateContainer;
@@ -35,78 +36,56 @@
 public class BlockRedstoneComparator extends BlockRedstoneDiode implements ITileEntityProvider
 {
     public static final PropertyBool POWERED = PropertyBool.create("powered");
-    public static final PropertyEnum<BlockRedstoneComparator.Mode> MODE = PropertyEnum.create("mode", BlockRedstoneComparator.Mode.class);
+    public static final PropertyEnum<BlockRedstoneComparator.Mode> MODE = PropertyEnum.<BlockRedstoneComparator.Mode>create("mode", BlockRedstoneComparator.Mode.class);
 
     public BlockRedstoneComparator(boolean powered)
     {
         super(powered);
-        this.setDefaultState(
-            this.blockState
-            .getBaseState()
-            .withProperty(FACING, EnumFacing.NORTH)
-            .withProperty(POWERED, false)
-            .withProperty(MODE, BlockRedstoneComparator.Mode.COMPARE)
-        );
+        this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(POWERED, Boolean.valueOf(false)).withProperty(MODE, BlockRedstoneComparator.Mode.COMPARE));
         this.hasTileEntity = true;
     }
 
-    @Override
     public String getLocalizedName()
     {
         return I18n.translateToLocal("item.comparator.name");
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return Items.COMPARATOR;
     }
 
-    @Override
     public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
     {
         return new ItemStack(Items.COMPARATOR);
     }
 
-    @Override
     protected int getDelay(IBlockState state)
     {
         return 2;
     }
 
-    @Override
     protected IBlockState getPoweredState(IBlockState unpoweredState)
     {
-        Boolean obool = unpoweredState.getValue(POWERED);
-        BlockRedstoneComparator.Mode blockredstonecomparator$mode = unpoweredState.getValue(MODE);
-        EnumFacing enumfacing = unpoweredState.getValue(FACING);
-        return Blocks.POWERED_COMPARATOR
-               .getDefaultState()
-               .withProperty(FACING, enumfacing)
-               .withProperty(POWERED, obool)
-               .withProperty(MODE, blockredstonecomparator$mode);
+        Boolean obool = (Boolean)unpoweredState.getValue(POWERED);
+        BlockRedstoneComparator.Mode blockredstonecomparator$mode = (BlockRedstoneComparator.Mode)unpoweredState.getValue(MODE);
+        EnumFacing enumfacing = (EnumFacing)unpoweredState.getValue(FACING);
+        return Blocks.POWERED_COMPARATOR.getDefaultState().withProperty(FACING, enumfacing).withProperty(POWERED, obool).withProperty(MODE, blockredstonecomparator$mode);
     }
 
-    @Override
     protected IBlockState getUnpoweredState(IBlockState poweredState)
     {
-        Boolean obool = poweredState.getValue(POWERED);
-        BlockRedstoneComparator.Mode blockredstonecomparator$mode = poweredState.getValue(MODE);
-        EnumFacing enumfacing = poweredState.getValue(FACING);
-        return Blocks.UNPOWERED_COMPARATOR
-               .getDefaultState()
-               .withProperty(FACING, enumfacing)
-               .withProperty(POWERED, obool)
-               .withProperty(MODE, blockredstonecomparator$mode);
+        Boolean obool = (Boolean)poweredState.getValue(POWERED);
+        BlockRedstoneComparator.Mode blockredstonecomparator$mode = (BlockRedstoneComparator.Mode)poweredState.getValue(MODE);
+        EnumFacing enumfacing = (EnumFacing)poweredState.getValue(FACING);
+        return Blocks.UNPOWERED_COMPARATOR.getDefaultState().withProperty(FACING, enumfacing).withProperty(POWERED, obool).withProperty(MODE, blockredstonecomparator$mode);
     }
 
-    @Override
     protected boolean isPowered(IBlockState state)
     {
-        return this.isRepeaterPowered || state.getValue(POWERED);
+        return this.isRepeaterPowered || ((Boolean)state.getValue(POWERED)).booleanValue();
     }
 
-    @Override
     protected int getActiveSignal(IBlockAccess worldIn, BlockPos pos, IBlockState state)
     {
         TileEntity tileentity = worldIn.getTileEntity(pos);
@@ -115,12 +94,9 @@
 
     private int calculateOutput(World worldIn, BlockPos pos, IBlockState state)
     {
-        return state.getValue(MODE) == BlockRedstoneComparator.Mode.SUBTRACT
-               ? Math.max(this.calculateInputStrength(worldIn, pos, state) - this.getPowerOnSides(worldIn, pos, state), 0)
-               : this.calculateInputStrength(worldIn, pos, state);
+        return state.getValue(MODE) == BlockRedstoneComparator.Mode.SUBTRACT ? Math.max(this.calculateInputStrength(worldIn, pos, state) - this.getPowerOnSides(worldIn, pos, state), 0) : this.calculateInputStrength(worldIn, pos, state);
     }
 
-    @Override
     protected boolean shouldBePowered(World worldIn, BlockPos pos, IBlockState state)
     {
         int i = this.calculateInputStrength(worldIn, pos, state);
@@ -136,15 +112,22 @@
         else
         {
             int j = this.getPowerOnSides(worldIn, pos, state);
-            return j == 0 ? true : i >= j;
+
+            if (j == 0)
+            {
+                return true;
+            }
+            else
+            {
+                return i >= j;
+            }
         }
     }
 
-    @Override
     protected int calculateInputStrength(World worldIn, BlockPos pos, IBlockState state)
     {
         int i = super.calculateInputStrength(worldIn, pos, state);
-        EnumFacing enumfacing = state.getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
         BlockPos blockpos = pos.offset(enumfacing);
         IBlockState iblockstate = worldIn.getBlockState(blockpos);
 
@@ -178,39 +161,17 @@
     @Nullable
     private EntityItemFrame findItemFrame(World worldIn, final EnumFacing facing, BlockPos pos)
     {
-        List<EntityItemFrame> list = worldIn.getEntitiesWithinAABB(
-                                         EntityItemFrame.class,
-                                         new AxisAlignedBB(
-                                             (double)pos.getX(),
-                                             (double)pos.getY(),
-                                             (double)pos.getZ(),
-                                             (double)(pos.getX() + 1),
-                                             (double)(pos.getY() + 1),
-                                             (double)(pos.getZ() + 1)
-                                         ),
-                                         new Predicate<Entity>()
+        List<EntityItemFrame> list = worldIn.<EntityItemFrame>getEntitiesWithinAABB(EntityItemFrame.class, new AxisAlignedBB((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 1), (double)(pos.getZ() + 1)), new Predicate<Entity>()
         {
             public boolean apply(@Nullable Entity p_apply_1_)
             {
                 return p_apply_1_ != null && p_apply_1_.getHorizontalFacing() == facing;
             }
-        }
-                                     );
-        return list.size() == 1 ? list.get(0) : null;
+        });
+        return list.size() == 1 ? (EntityItemFrame)list.get(0) : null;
     }
 
-    @Override
-    public boolean onBlockActivated(
-        World worldIn,
-        BlockPos pos,
-        IBlockState state,
-        EntityPlayer playerIn,
-        EnumHand hand,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         if (!playerIn.capabilities.allowEdit)
         {
@@ -227,7 +188,6 @@
         }
     }
 
-    @Override
     protected void updateState(World worldIn, BlockPos pos, IBlockState state)
     {
         if (!worldIn.isBlockTickPending(pos, this))
@@ -270,36 +230,33 @@
 
             if (flag && !flag1)
             {
-                worldIn.setBlockState(pos, state.withProperty(POWERED, false), 2);
+                worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(false)), 2);
             }
             else if (!flag && flag1)
             {
-                worldIn.setBlockState(pos, state.withProperty(POWERED, true), 2);
+                worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)), 2);
             }
 
             this.notifyNeighbors(worldIn, pos, state);
         }
     }
 
-    @Override
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
         if (this.isRepeaterPowered)
         {
-            worldIn.setBlockState(pos, this.getUnpoweredState(state).withProperty(POWERED, true), 4);
+            worldIn.setBlockState(pos, this.getUnpoweredState(state).withProperty(POWERED, Boolean.valueOf(true)), 4);
         }
 
         this.onStateChange(worldIn, pos, state);
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         super.onBlockAdded(worldIn, pos, state);
         worldIn.setTileEntity(pos, this.createNewTileEntity(worldIn, 0));
     }
 
-    @Override
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         super.breakBlock(worldIn, pos, state);
@@ -307,7 +264,6 @@
         this.notifyNeighbors(worldIn, pos, state);
     }
 
-    @Override
     public boolean eventReceived(IBlockState state, World worldIn, BlockPos pos, int id, int param)
     {
         super.eventReceived(state, worldIn, pos, id, param);
@@ -315,28 +271,22 @@
         return tileentity == null ? false : tileentity.receiveClientEvent(id, param);
     }
 
-    @Override
     public TileEntity createNewTileEntity(World worldIn, int meta)
     {
         return new TileEntityComparator();
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState()
-               .withProperty(FACING, EnumFacing.byHorizontalIndex(meta))
-               .withProperty(POWERED, (meta & 8) > 0)
-               .withProperty(MODE, (meta & 4) > 0 ? BlockRedstoneComparator.Mode.SUBTRACT : BlockRedstoneComparator.Mode.COMPARE);
+        return this.getDefaultState().withProperty(FACING, EnumFacing.byHorizontalIndex(meta)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0)).withProperty(MODE, (meta & 4) > 0 ? BlockRedstoneComparator.Mode.SUBTRACT : BlockRedstoneComparator.Mode.COMPARE);
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i |= state.getValue(FACING).getHorizontalIndex();
+        i = i | ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
 
-        if (state.getValue(POWERED))
+        if (((Boolean)state.getValue(POWERED)).booleanValue())
         {
             i |= 8;
         }
@@ -349,40 +299,39 @@
         return i;
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return state.withRotation(mirrorIn.toRotation(state.getValue(FACING)));
+        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, FACING, MODE, POWERED);
-    }
-
-    @Override
-    public IBlockState getStateForPlacement(
-        World worldIn,
-        BlockPos pos,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ,
-        int meta,
-        EntityLivingBase placer
-    )
-    {
-        return this.getDefaultState()
-               .withProperty(FACING, placer.getHorizontalFacing().getOpposite())
-               .withProperty(POWERED, false)
-               .withProperty(MODE, BlockRedstoneComparator.Mode.COMPARE);
+        return new BlockStateContainer(this, new IProperty[] {FACING, MODE, POWERED});
+    }
+
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
+    {
+        return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing().getOpposite()).withProperty(POWERED, Boolean.valueOf(false)).withProperty(MODE, BlockRedstoneComparator.Mode.COMPARE);
+    }
+
+    @Override
+    public void onNeighborChange(IBlockAccess world, BlockPos pos, BlockPos neighbor)
+    {
+        if (pos.getY() == neighbor.getY() && world instanceof World && !((World) world).isRemote)
+        {
+            neighborChanged(world.getBlockState(pos), (World)world, pos, world.getBlockState(neighbor).getBlock(), neighbor);
+        }
+    }
+
+    @Override
+    public boolean getWeakChanges(IBlockAccess world, BlockPos pos)
+    {
+        return true;
     }
 
     public static enum Mode implements IStringSerializable
@@ -397,13 +346,11 @@
             this.name = name;
         }
 
-        @Override
         public String toString()
         {
             return this.name;
         }
 
-        @Override
         public String getName()
         {
             return this.name;
