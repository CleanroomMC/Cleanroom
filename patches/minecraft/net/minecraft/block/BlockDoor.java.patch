--- before/net/minecraft/block/BlockDoor.java
+++ after/net/minecraft/block/BlockDoor.java
@@ -4,6 +4,7 @@
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.properties.PropertyEnum;
@@ -33,34 +34,25 @@
 {
     public static final PropertyDirection FACING = BlockHorizontal.FACING;
     public static final PropertyBool OPEN = PropertyBool.create("open");
-    public static final PropertyEnum<BlockDoor.EnumHingePosition> HINGE = PropertyEnum.create("hinge", BlockDoor.EnumHingePosition.class);
+    public static final PropertyEnum<BlockDoor.EnumHingePosition> HINGE = PropertyEnum.<BlockDoor.EnumHingePosition>create("hinge", BlockDoor.EnumHingePosition.class);
     public static final PropertyBool POWERED = PropertyBool.create("powered");
-    public static final PropertyEnum<BlockDoor.EnumDoorHalf> HALF = PropertyEnum.create("half", BlockDoor.EnumDoorHalf.class);
-    protected static final AxisAlignedBB SOUTH_AABB = new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 1.0, 0.1875);
-    protected static final AxisAlignedBB NORTH_AABB = new AxisAlignedBB(0.0, 0.0, 0.8125, 1.0, 1.0, 1.0);
-    protected static final AxisAlignedBB WEST_AABB = new AxisAlignedBB(0.8125, 0.0, 0.0, 1.0, 1.0, 1.0);
-    protected static final AxisAlignedBB EAST_AABB = new AxisAlignedBB(0.0, 0.0, 0.0, 0.1875, 1.0, 1.0);
+    public static final PropertyEnum<BlockDoor.EnumDoorHalf> HALF = PropertyEnum.<BlockDoor.EnumDoorHalf>create("half", BlockDoor.EnumDoorHalf.class);
+    protected static final AxisAlignedBB SOUTH_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.1875D);
+    protected static final AxisAlignedBB NORTH_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.8125D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB WEST_AABB = new AxisAlignedBB(0.8125D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB EAST_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.1875D, 1.0D, 1.0D);
 
     protected BlockDoor(Material materialIn)
     {
         super(materialIn);
-        this.setDefaultState(
-            this.blockState
-            .getBaseState()
-            .withProperty(FACING, EnumFacing.NORTH)
-            .withProperty(OPEN, false)
-            .withProperty(HINGE, BlockDoor.EnumHingePosition.LEFT)
-            .withProperty(POWERED, false)
-            .withProperty(HALF, BlockDoor.EnumDoorHalf.LOWER)
-        );
+        this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(OPEN, Boolean.valueOf(false)).withProperty(HINGE, BlockDoor.EnumHingePosition.LEFT).withProperty(POWERED, Boolean.valueOf(false)).withProperty(HALF, BlockDoor.EnumDoorHalf.LOWER));
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         state = state.getActualState(source, pos);
-        EnumFacing enumfacing = state.getValue(FACING);
-        boolean flag = !state.getValue(OPEN);
+        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
+        boolean flag = !((Boolean)state.getValue(OPEN)).booleanValue();
         boolean flag1 = state.getValue(HINGE) == BlockDoor.EnumHingePosition.RIGHT;
 
         switch (enumfacing)
@@ -77,25 +69,21 @@
         }
     }
 
-    @Override
     public String getLocalizedName()
     {
         return I18n.translateToLocal((this.getTranslationKey() + ".name").replaceAll("tile", "item"));
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
     {
         return isOpen(combineMetadata(worldIn, pos));
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
@@ -111,7 +99,6 @@
         return this.material == Material.IRON ? 1005 : 1006;
     }
 
-    @Override
     public MapColor getMapColor(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
         if (state.getBlock() == Blocks.IRON_DOOR)
@@ -140,24 +127,11 @@
         }
         else
         {
-            return state.getBlock() == Blocks.DARK_OAK_DOOR
-                   ? BlockPlanks.EnumType.DARK_OAK.getMapColor()
-                   : super.getMapColor(state, worldIn, pos);
+            return state.getBlock() == Blocks.DARK_OAK_DOOR ? BlockPlanks.EnumType.DARK_OAK.getMapColor() : super.getMapColor(state, worldIn, pos);
         }
     }
 
-    @Override
-    public boolean onBlockActivated(
-        World worldIn,
-        BlockPos pos,
-        IBlockState state,
-        EntityPlayer playerIn,
-        EnumHand hand,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         if (this.material == Material.IRON)
         {
@@ -177,7 +151,7 @@
                 state = iblockstate.cycleProperty(OPEN);
                 worldIn.setBlockState(blockpos, state, 10);
                 worldIn.markBlockRangeForRenderUpdate(blockpos, pos);
-                worldIn.playEvent(playerIn, state.getValue(OPEN) ? this.getOpenSound() : this.getCloseSound(), pos, 0);
+                worldIn.playEvent(playerIn, ((Boolean)state.getValue(OPEN)).booleanValue() ? this.getOpenSound() : this.getCloseSound(), pos, 0);
                 return true;
             }
         }
@@ -192,16 +166,15 @@
             BlockPos blockpos = iblockstate.getValue(HALF) == BlockDoor.EnumDoorHalf.LOWER ? pos : pos.down();
             IBlockState iblockstate1 = pos == blockpos ? iblockstate : worldIn.getBlockState(blockpos);
 
-            if (iblockstate1.getBlock() == this && iblockstate1.getValue(OPEN) != open)
+            if (iblockstate1.getBlock() == this && ((Boolean)iblockstate1.getValue(OPEN)).booleanValue() != open)
             {
-                worldIn.setBlockState(blockpos, iblockstate1.withProperty(OPEN, open), 10);
+                worldIn.setBlockState(blockpos, iblockstate1.withProperty(OPEN, Boolean.valueOf(open)), 10);
                 worldIn.markBlockRangeForRenderUpdate(blockpos, pos);
-                worldIn.playEvent(null, open ? this.getOpenSound() : this.getCloseSound(), pos, 0);
+                worldIn.playEvent((EntityPlayer)null, open ? this.getOpenSound() : this.getCloseSound(), pos, 0);
             }
         }
     }
 
-    @Override
     public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
         if (state.getValue(HALF) == BlockDoor.EnumDoorHalf.UPPER)
@@ -230,7 +203,7 @@
                 flag1 = true;
             }
 
-            if (!worldIn.getBlockState(pos.down()).isTopSolid())
+            if (!worldIn.getBlockState(pos.down()).isSideSolid(worldIn,  pos.down(), EnumFacing.UP))
             {
                 worldIn.setBlockToAir(pos);
                 flag1 = true;
@@ -252,38 +225,39 @@
             {
                 boolean flag = worldIn.isBlockPowered(pos) || worldIn.isBlockPowered(blockpos1);
 
-                if (blockIn != this && (flag || blockIn.getDefaultState().canProvidePower()) && flag != iblockstate1.getValue(POWERED))
+                if (blockIn != this && (flag || blockIn.getDefaultState().canProvidePower()) && flag != ((Boolean)iblockstate1.getValue(POWERED)).booleanValue())
                 {
-                    worldIn.setBlockState(blockpos1, iblockstate1.withProperty(POWERED, flag), 2);
+                    worldIn.setBlockState(blockpos1, iblockstate1.withProperty(POWERED, Boolean.valueOf(flag)), 2);
 
-                    if (flag != state.getValue(OPEN))
+                    if (flag != ((Boolean)state.getValue(OPEN)).booleanValue())
                     {
-                        worldIn.setBlockState(pos, state.withProperty(OPEN, flag), 2);
+                        worldIn.setBlockState(pos, state.withProperty(OPEN, Boolean.valueOf(flag)), 2);
                         worldIn.markBlockRangeForRenderUpdate(pos, pos);
-                        worldIn.playEvent(null, flag ? this.getOpenSound() : this.getCloseSound(), pos, 0);
+                        worldIn.playEvent((EntityPlayer)null, flag ? this.getOpenSound() : this.getCloseSound(), pos, 0);
                     }
                 }
             }
         }
     }
 
-    @Override
     public Item getItemDropped(IBlockState state, Random rand, int fortune)
     {
         return state.getValue(HALF) == BlockDoor.EnumDoorHalf.UPPER ? Items.AIR : this.getItem();
     }
 
-    @Override
     public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
     {
-        return pos.getY() >= 255
-               ? false
-               : worldIn.getBlockState(pos.down()).isTopSolid()
-               && super.canPlaceBlockAt(worldIn, pos)
-               && super.canPlaceBlockAt(worldIn, pos.up());
+        if (pos.getY() >= worldIn.getHeight() - 1)
+        {
+            return false;
+        }
+        else
+        {
+            IBlockState state = worldIn.getBlockState(pos.down());
+            return (state.isTopSolid() || state.getBlockFaceShape(worldIn, pos.down(), EnumFacing.UP) == BlockFaceShape.SOLID) && super.canPlaceBlockAt(worldIn, pos) && super.canPlaceBlockAt(worldIn, pos.up());
+        }
     }
 
-    @Override
     public EnumPushReaction getPushReaction(IBlockState state)
     {
         return EnumPushReaction.DESTROY;
@@ -305,7 +279,6 @@
         return removeHalfBit(k) | (flag ? 8 : 0) | (flag1 ? 16 : 0) | (flag2 ? 32 : 0);
     }
 
-    @Override
     public ItemStack getItem(World worldIn, BlockPos pos, IBlockState state)
     {
         return new ItemStack(this.getItem());
@@ -339,15 +312,12 @@
         }
     }
 
-    @Override
     public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
     {
         BlockPos blockpos = pos.down();
         BlockPos blockpos1 = pos.up();
 
-        if (player.capabilities.isCreativeMode
-                && state.getValue(HALF) == BlockDoor.EnumDoorHalf.UPPER
-                && worldIn.getBlockState(blockpos).getBlock() == this)
+        if (player.capabilities.isCreativeMode && state.getValue(HALF) == BlockDoor.EnumDoorHalf.UPPER && worldIn.getBlockState(blockpos).getBlock() == this)
         {
             worldIn.setBlockToAir(blockpos);
         }
@@ -364,13 +334,11 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public BlockRenderLayer getRenderLayer()
     {
         return BlockRenderLayer.CUTOUT;
     }
 
-    @Override
     public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
         if (state.getValue(HALF) == BlockDoor.EnumDoorHalf.LOWER)
@@ -379,8 +347,7 @@
 
             if (iblockstate.getBlock() == this)
             {
-                state = state.withProperty(HINGE, iblockstate.getValue(HINGE))
-                              .withProperty(POWERED, iblockstate.getValue(POWERED));
+                state = state.withProperty(HINGE, iblockstate.getValue(HINGE)).withProperty(POWERED, iblockstate.getValue(POWERED));
             }
         }
         else
@@ -389,68 +356,51 @@
 
             if (iblockstate1.getBlock() == this)
             {
-                state = state.withProperty(FACING, iblockstate1.getValue(FACING))
-                              .withProperty(OPEN, iblockstate1.getValue(OPEN));
+                state = state.withProperty(FACING, iblockstate1.getValue(FACING)).withProperty(OPEN, iblockstate1.getValue(OPEN));
             }
         }
 
         return state;
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.getValue(HALF) != BlockDoor.EnumDoorHalf.LOWER
-               ? state
-               : state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.getValue(HALF) != BlockDoor.EnumDoorHalf.LOWER ? state : state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return mirrorIn == Mirror.NONE
-               ? state
-               : state.withRotation(mirrorIn.toRotation(state.getValue(FACING))).cycleProperty(HINGE);
+        return mirrorIn == Mirror.NONE ? state : state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING))).cycleProperty(HINGE);
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
-        return (meta & 8) > 0
-               ? this.getDefaultState()
-               .withProperty(HALF, BlockDoor.EnumDoorHalf.UPPER)
-               .withProperty(HINGE, (meta & 1) > 0 ? BlockDoor.EnumHingePosition.RIGHT : BlockDoor.EnumHingePosition.LEFT)
-               .withProperty(POWERED, (meta & 2) > 0)
-               : this.getDefaultState()
-               .withProperty(HALF, BlockDoor.EnumDoorHalf.LOWER)
-               .withProperty(FACING, EnumFacing.byHorizontalIndex(meta & 3).rotateYCCW())
-               .withProperty(OPEN, (meta & 4) > 0);
+        return (meta & 8) > 0 ? this.getDefaultState().withProperty(HALF, BlockDoor.EnumDoorHalf.UPPER).withProperty(HINGE, (meta & 1) > 0 ? BlockDoor.EnumHingePosition.RIGHT : BlockDoor.EnumHingePosition.LEFT).withProperty(POWERED, Boolean.valueOf((meta & 2) > 0)) : this.getDefaultState().withProperty(HALF, BlockDoor.EnumDoorHalf.LOWER).withProperty(FACING, EnumFacing.byHorizontalIndex(meta & 3).rotateYCCW()).withProperty(OPEN, Boolean.valueOf((meta & 4) > 0));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
 
         if (state.getValue(HALF) == BlockDoor.EnumDoorHalf.UPPER)
         {
-            i |= 8;
+            i = i | 8;
 
             if (state.getValue(HINGE) == BlockDoor.EnumHingePosition.RIGHT)
             {
                 i |= 1;
             }
 
-            if (state.getValue(POWERED))
+            if (((Boolean)state.getValue(POWERED)).booleanValue())
             {
                 i |= 2;
             }
         }
         else
         {
-            i |= state.getValue(FACING).rotateY().getHorizontalIndex();
+            i = i | ((EnumFacing)state.getValue(FACING)).rotateY().getHorizontalIndex();
 
-            if (state.getValue(OPEN))
+            if (((Boolean)state.getValue(OPEN)).booleanValue())
             {
                 i |= 4;
             }
@@ -489,13 +439,11 @@
         return (meta & 8) != 0;
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, HALF, FACING, OPEN, HINGE, POWERED);
+        return new BlockStateContainer(this, new IProperty[] {HALF, FACING, OPEN, HINGE, POWERED});
     }
 
-    @Override
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return BlockFaceShape.UNDEFINED;
@@ -506,13 +454,11 @@
         UPPER,
         LOWER;
 
-        @Override
         public String toString()
         {
             return this.getName();
         }
 
-        @Override
         public String getName()
         {
             return this == UPPER ? "upper" : "lower";
@@ -524,13 +470,11 @@
         LEFT,
         RIGHT;
 
-        @Override
         public String toString()
         {
             return this.getName();
         }
 
-        @Override
         public String getName()
         {
             return this == LEFT ? "left" : "right";
