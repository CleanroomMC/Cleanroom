--- before/net/minecraft/block/BlockPistonBase.java
+++ after/net/minecraft/block/BlockPistonBase.java
@@ -5,6 +5,7 @@
 import javax.annotation.Nullable;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.BlockPistonStructureHelper;
@@ -13,6 +14,7 @@
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.item.ItemStack;
@@ -30,34 +32,32 @@
 public class BlockPistonBase extends BlockDirectional
 {
     public static final PropertyBool EXTENDED = PropertyBool.create("extended");
-    protected static final AxisAlignedBB PISTON_BASE_EAST_AABB = new AxisAlignedBB(0.0, 0.0, 0.0, 0.75, 1.0, 1.0);
-    protected static final AxisAlignedBB PISTON_BASE_WEST_AABB = new AxisAlignedBB(0.25, 0.0, 0.0, 1.0, 1.0, 1.0);
-    protected static final AxisAlignedBB PISTON_BASE_SOUTH_AABB = new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 1.0, 0.75);
-    protected static final AxisAlignedBB PISTON_BASE_NORTH_AABB = new AxisAlignedBB(0.0, 0.0, 0.25, 1.0, 1.0, 1.0);
-    protected static final AxisAlignedBB PISTON_BASE_UP_AABB = new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 0.75, 1.0);
-    protected static final AxisAlignedBB PISTON_BASE_DOWN_AABB = new AxisAlignedBB(0.0, 0.25, 0.0, 1.0, 1.0, 1.0);
+    protected static final AxisAlignedBB PISTON_BASE_EAST_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.75D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB PISTON_BASE_WEST_AABB = new AxisAlignedBB(0.25D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB PISTON_BASE_SOUTH_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.75D);
+    protected static final AxisAlignedBB PISTON_BASE_NORTH_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.25D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB PISTON_BASE_UP_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.75D, 1.0D);
+    protected static final AxisAlignedBB PISTON_BASE_DOWN_AABB = new AxisAlignedBB(0.0D, 0.25D, 0.0D, 1.0D, 1.0D, 1.0D);
     private final boolean isSticky;
 
     public BlockPistonBase(boolean isSticky)
     {
         super(Material.PISTON);
-        this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(EXTENDED, false));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH).withProperty(EXTENDED, Boolean.valueOf(false)));
         this.isSticky = isSticky;
         this.setSoundType(SoundType.STONE);
         this.setHardness(0.5F);
         this.setCreativeTab(CreativeTabs.REDSTONE);
     }
 
-    @Override
     public boolean causesSuffocation(IBlockState state)
     {
-        return !state.getValue(EXTENDED);
+        return !((Boolean)state.getValue(EXTENDED)).booleanValue();
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
-        if (state.getValue(EXTENDED))
+        if (((Boolean)state.getValue(EXTENDED)).booleanValue())
         {
             switch ((EnumFacing)state.getValue(FACING))
             {
@@ -82,33 +82,21 @@
         }
     }
 
-    @Override
     public boolean isTopSolid(IBlockState state)
     {
-        return !state.getValue(EXTENDED) || state.getValue(FACING) == EnumFacing.DOWN;
+        return !((Boolean)state.getValue(EXTENDED)).booleanValue() || state.getValue(FACING) == EnumFacing.DOWN;
     }
 
-    @Override
-    public void addCollisionBoxToList(
-        IBlockState state,
-        World worldIn,
-        BlockPos pos,
-        AxisAlignedBB entityBox,
-        List<AxisAlignedBB> collidingBoxes,
-        @Nullable Entity entityIn,
-        boolean isActualState
-    )
+    public void addCollisionBoxToList(IBlockState state, World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn, boolean isActualState)
     {
         addCollisionBoxToList(pos, entityBox, collidingBoxes, state.getBoundingBox(worldIn, pos));
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
     {
         worldIn.setBlockState(pos, state.withProperty(FACING, EnumFacing.getDirectionFromEntityLiving(pos, placer)), 2);
@@ -119,7 +107,6 @@
         }
     }
 
-    @Override
     public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
         if (!worldIn.isRemote)
@@ -128,7 +115,6 @@
         }
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         if (!worldIn.isRemote && worldIn.getTileEntity(pos) == null)
@@ -137,34 +123,24 @@
         }
     }
 
-    @Override
-    public IBlockState getStateForPlacement(
-        World worldIn,
-        BlockPos pos,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ,
-        int meta,
-        EntityLivingBase placer
-    )
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
     {
-        return this.getDefaultState().withProperty(FACING, EnumFacing.getDirectionFromEntityLiving(pos, placer)).withProperty(EXTENDED, false);
+        return this.getDefaultState().withProperty(FACING, EnumFacing.getDirectionFromEntityLiving(pos, placer)).withProperty(EXTENDED, Boolean.valueOf(false));
     }
 
     private void checkForMove(World worldIn, BlockPos pos, IBlockState state)
     {
-        EnumFacing enumfacing = state.getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
         boolean flag = this.shouldBeExtended(worldIn, pos, enumfacing);
 
-        if (flag && !state.getValue(EXTENDED))
+        if (flag && !((Boolean)state.getValue(EXTENDED)).booleanValue())
         {
-            if (new BlockPistonStructureHelper(worldIn, pos, enumfacing, true).canMove())
+            if ((new BlockPistonStructureHelper(worldIn, pos, enumfacing, true)).canMove())
             {
                 worldIn.addBlockEvent(pos, this, 0, enumfacing.getIndex());
             }
         }
-        else if (!flag && state.getValue(EXTENDED))
+        else if (!flag && ((Boolean)state.getValue(EXTENDED)).booleanValue())
         {
             worldIn.addBlockEvent(pos, this, 1, enumfacing.getIndex());
         }
@@ -200,10 +176,9 @@
         }
     }
 
-    @Override
     public boolean eventReceived(IBlockState state, World worldIn, BlockPos pos, int id, int param)
     {
-        EnumFacing enumfacing = state.getValue(FACING);
+        EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
 
         if (!worldIn.isRemote)
         {
@@ -211,7 +186,7 @@
 
             if (flag && id == 1)
             {
-                worldIn.setBlockState(pos, state.withProperty(EXTENDED, true), 2);
+                worldIn.setBlockState(pos, state.withProperty(EXTENDED, Boolean.valueOf(true)), 2);
                 return false;
             }
 
@@ -228,10 +203,8 @@
                 return false;
             }
 
-            worldIn.setBlockState(pos, state.withProperty(EXTENDED, true), 3);
-            worldIn.playSound(
-                null, pos, SoundEvents.BLOCK_PISTON_EXTEND, SoundCategory.BLOCKS, 0.5F, worldIn.rand.nextFloat() * 0.25F + 0.6F
-            );
+            worldIn.setBlockState(pos, state.withProperty(EXTENDED, Boolean.valueOf(true)), 3);
+            worldIn.playSound((EntityPlayer)null, pos, SoundEvents.BLOCK_PISTON_EXTEND, SoundCategory.BLOCKS, 0.5F, worldIn.rand.nextFloat() * 0.25F + 0.6F);
         }
         else if (id == 1)
         {
@@ -242,17 +215,7 @@
                 ((TileEntityPiston)tileentity1).clearPistonTileEntity();
             }
 
-            worldIn.setBlockState(
-                pos,
-                Blocks.PISTON_EXTENSION
-                .getDefaultState()
-                .withProperty(BlockPistonMoving.FACING, enumfacing)
-                .withProperty(
-                    BlockPistonMoving.TYPE,
-                    this.isSticky ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT
-                ),
-                3
-            );
+            worldIn.setBlockState(pos, Blocks.PISTON_EXTENSION.getDefaultState().withProperty(BlockPistonMoving.FACING, enumfacing).withProperty(BlockPistonMoving.TYPE, this.isSticky ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT), 3);
             worldIn.setTileEntity(pos, BlockPistonMoving.createTilePiston(this.getStateFromMeta(param), enumfacing, false, true));
 
             if (this.isSticky)
@@ -278,10 +241,7 @@
                     }
                 }
 
-                if (!flag1
-                        && iblockstate.getMaterial() != Material.AIR
-                        && canPush(iblockstate, worldIn, blockpos, enumfacing.getOpposite(), false, enumfacing)
-                        && (iblockstate.getPushReaction() == EnumPushReaction.NORMAL || block == Blocks.PISTON || block == Blocks.STICKY_PISTON))
+                if (!flag1 && !iblockstate.getBlock().isAir(iblockstate, worldIn, blockpos) && canPush(iblockstate, worldIn, blockpos, enumfacing.getOpposite(), false, enumfacing) && (iblockstate.getPushReaction() == EnumPushReaction.NORMAL || block == Blocks.PISTON || block == Blocks.STICKY_PISTON))
                 {
                     this.doMove(worldIn, pos, enumfacing, false);
                 }
@@ -291,15 +251,12 @@
                 worldIn.setBlockToAir(pos.offset(enumfacing));
             }
 
-            worldIn.playSound(
-                null, pos, SoundEvents.BLOCK_PISTON_CONTRACT, SoundCategory.BLOCKS, 0.5F, worldIn.rand.nextFloat() * 0.15F + 0.6F
-            );
+            worldIn.playSound((EntityPlayer)null, pos, SoundEvents.BLOCK_PISTON_CONTRACT, SoundCategory.BLOCKS, 0.5F, worldIn.rand.nextFloat() * 0.15F + 0.6F);
         }
 
         return true;
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
@@ -312,9 +269,7 @@
         return i > 5 ? null : EnumFacing.byIndex(i);
     }
 
-    public static boolean canPush(
-            IBlockState blockStateIn, World worldIn, BlockPos pos, EnumFacing facing, boolean destroyBlocks, EnumFacing p_185646_5_
-        )
+    public static boolean canPush(IBlockState blockStateIn, World worldIn, BlockPos pos, EnumFacing facing, boolean destroyBlocks, EnumFacing p_185646_5_)
     {
         Block block = blockStateIn.getBlock();
 
@@ -328,8 +283,7 @@
         }
         else if (pos.getY() >= 0 && (facing != EnumFacing.DOWN || pos.getY() != 0))
         {
-            if (pos.getY() <= worldIn.getHeight() - 1
-                    && (facing != EnumFacing.UP || pos.getY() != worldIn.getHeight() - 1))
+            if (pos.getY() <= worldIn.getHeight() - 1 && (facing != EnumFacing.UP || pos.getY() != worldIn.getHeight() - 1))
             {
                 if (block != Blocks.PISTON && block != Blocks.STICKY_PISTON)
                 {
@@ -348,12 +302,12 @@
                             return facing == p_185646_5_;
                     }
                 }
-                else if (blockStateIn.getValue(EXTENDED))
+                else if (((Boolean)blockStateIn.getValue(EXTENDED)).booleanValue())
                 {
                     return false;
                 }
 
-                return !block.hasTileEntity();
+                return !block.hasTileEntity(blockStateIn);
             }
             else
             {
@@ -382,9 +336,9 @@
         else
         {
             List<BlockPos> list = blockpistonstructurehelper.getBlocksToMove();
-            List<IBlockState> list1 = Lists.newArrayList();
+            List<IBlockState> list1 = Lists.<IBlockState>newArrayList();
 
-            for (int i = 0; i < list.size(); i++)
+            for (int i = 0; i < list.size(); ++i)
             {
                 BlockPos blockpos = list.get(i);
                 list1.add(worldIn.getBlockState(blockpos).getActualState(worldIn, blockpos));
@@ -395,17 +349,19 @@
             IBlockState[] aiblockstate = new IBlockState[k];
             EnumFacing enumfacing = extending ? direction : direction.getOpposite();
 
-            for (int j = list2.size() - 1; j >= 0; j--)
+            for (int j = list2.size() - 1; j >= 0; --j)
             {
                 BlockPos blockpos1 = list2.get(j);
                 IBlockState iblockstate = worldIn.getBlockState(blockpos1);
-                iblockstate.getBlock().dropBlockAsItem(worldIn, blockpos1, iblockstate, 0);
+                // Forge: With our change to how snowballs are dropped this needs to disallow to mimic vanilla behavior.
+                float chance = iblockstate.getBlock() instanceof BlockSnow ? -1.0f : 1.0f;
+                iblockstate.getBlock().dropBlockAsItemWithChance(worldIn, blockpos1, iblockstate, chance, 0);
                 worldIn.setBlockState(blockpos1, Blocks.AIR.getDefaultState(), 4);
-                k--;
+                --k;
                 aiblockstate[k] = iblockstate;
             }
 
-            for (int l = list.size() - 1; l >= 0; l--)
+            for (int l = list.size() - 1; l >= 0; --l)
             {
                 BlockPos blockpos3 = list.get(l);
                 IBlockState iblockstate2 = worldIn.getBlockState(blockpos3);
@@ -413,7 +369,7 @@
                 blockpos3 = blockpos3.offset(enumfacing);
                 worldIn.setBlockState(blockpos3, Blocks.PISTON_EXTENSION.getDefaultState().withProperty(FACING, direction), 4);
                 worldIn.setTileEntity(blockpos3, BlockPistonMoving.createTilePiston(list1.get(l), direction, extending, false));
-                k--;
+                --k;
                 aiblockstate[k] = iblockstate2;
             }
 
@@ -421,30 +377,19 @@
 
             if (extending)
             {
-                BlockPistonExtension.EnumPistonType blockpistonextension$enumpistontype = this.isSticky
-                        ? BlockPistonExtension.EnumPistonType.STICKY
-                        : BlockPistonExtension.EnumPistonType.DEFAULT;
-                IBlockState iblockstate3 = Blocks.PISTON_HEAD
-                                           .getDefaultState()
-                                           .withProperty(BlockPistonExtension.FACING, direction)
-                                           .withProperty(BlockPistonExtension.TYPE, blockpistonextension$enumpistontype);
-                IBlockState iblockstate1 = Blocks.PISTON_EXTENSION
-                                           .getDefaultState()
-                                           .withProperty(BlockPistonMoving.FACING, direction)
-                                           .withProperty(
-                                               BlockPistonMoving.TYPE,
-                                               this.isSticky ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT
-                                           );
+                BlockPistonExtension.EnumPistonType blockpistonextension$enumpistontype = this.isSticky ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT;
+                IBlockState iblockstate3 = Blocks.PISTON_HEAD.getDefaultState().withProperty(BlockPistonExtension.FACING, direction).withProperty(BlockPistonExtension.TYPE, blockpistonextension$enumpistontype);
+                IBlockState iblockstate1 = Blocks.PISTON_EXTENSION.getDefaultState().withProperty(BlockPistonMoving.FACING, direction).withProperty(BlockPistonMoving.TYPE, this.isSticky ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT);
                 worldIn.setBlockState(blockpos2, iblockstate1, 4);
                 worldIn.setTileEntity(blockpos2, BlockPistonMoving.createTilePiston(iblockstate3, direction, true, true));
             }
 
-            for (int i1 = list2.size() - 1; i1 >= 0; i1--)
+            for (int i1 = list2.size() - 1; i1 >= 0; --i1)
             {
                 worldIn.notifyNeighborsOfStateChange(list2.get(i1), aiblockstate[k++].getBlock(), false);
             }
 
-            for (int j1 = list.size() - 1; j1 >= 0; j1--)
+            for (int j1 = list.size() - 1; j1 >= 0; --j1)
             {
                 worldIn.notifyNeighborsOfStateChange(list.get(j1), aiblockstate[k++].getBlock(), false);
             }
@@ -458,19 +403,17 @@
         }
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState().withProperty(FACING, getFacing(meta)).withProperty(EXTENDED, (meta & 8) > 0);
+        return this.getDefaultState().withProperty(FACING, getFacing(meta)).withProperty(EXTENDED, Boolean.valueOf((meta & 8) > 0));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i |= state.getValue(FACING).getIndex();
+        i = i | ((EnumFacing)state.getValue(FACING)).getIndex();
 
-        if (state.getValue(EXTENDED))
+        if (((Boolean)state.getValue(EXTENDED)).booleanValue())
         {
             i |= 8;
         }
@@ -478,30 +421,31 @@
         return i;
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return state.withRotation(mirrorIn.toRotation(state.getValue(FACING)));
+        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, FACING, EXTENDED);
-    }
-
-    @Override
+        return new BlockStateContainer(this, new IProperty[] {FACING, EXTENDED});
+    }
+
+    /* ======================================== FORGE START =====================================*/
+    public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis)
+    {
+        IBlockState state = world.getBlockState(pos);
+        return !state.getValue(EXTENDED) && super.rotateBlock(world, pos, axis);
+    }
+
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         state = this.getActualState(state, worldIn, pos);
-        return state.getValue(FACING) != face.getOpposite() && state.getValue(EXTENDED)
-               ? BlockFaceShape.UNDEFINED
-               : BlockFaceShape.SOLID;
+        return state.getValue(FACING) != face.getOpposite() && ((Boolean)state.getValue(EXTENDED)).booleanValue() ? BlockFaceShape.UNDEFINED : BlockFaceShape.SOLID;
     }
 }
