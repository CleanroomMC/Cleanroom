--- before/net/minecraft/block/BlockRailDetector.java
+++ after/net/minecraft/block/BlockRailDetector.java
@@ -25,79 +25,63 @@
 
 public class BlockRailDetector extends BlockRailBase
 {
-    public static final PropertyEnum<BlockRailBase.EnumRailDirection> SHAPE = PropertyEnum.create(
-                    "shape",
-                    BlockRailBase.EnumRailDirection.class,
-                    new Predicate<BlockRailBase.EnumRailDirection>()
+    public static final PropertyEnum<BlockRailBase.EnumRailDirection> SHAPE = PropertyEnum.<BlockRailBase.EnumRailDirection>create("shape", BlockRailBase.EnumRailDirection.class, new Predicate<BlockRailBase.EnumRailDirection>()
     {
         public boolean apply(@Nullable BlockRailBase.EnumRailDirection p_apply_1_)
         {
-            return p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_EAST
-                   && p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_WEST
-                   && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_EAST
-                   && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_WEST;
+            return p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_WEST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_WEST;
         }
-    }
-            );
+    });
     public static final PropertyBool POWERED = PropertyBool.create("powered");
 
     public BlockRailDetector()
     {
         super(true);
-        this.setDefaultState(
-            this.blockState.getBaseState().withProperty(POWERED, false).withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH)
-        );
+        this.setDefaultState(this.blockState.getBaseState().withProperty(POWERED, Boolean.valueOf(false)).withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH));
         this.setTickRandomly(true);
     }
 
-    @Override
     public int tickRate(World worldIn)
     {
         return 20;
     }
 
-    @Override
     public boolean canProvidePower(IBlockState state)
     {
         return true;
     }
 
-    @Override
     public void onEntityCollision(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
     {
         if (!worldIn.isRemote)
         {
-            if (!state.getValue(POWERED))
+            if (!((Boolean)state.getValue(POWERED)).booleanValue())
             {
                 this.updatePoweredState(worldIn, pos, state);
             }
         }
     }
 
-    @Override
     public void randomTick(World worldIn, BlockPos pos, IBlockState state, Random random)
     {
     }
 
-    @Override
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
-        if (!worldIn.isRemote && state.getValue(POWERED))
+        if (!worldIn.isRemote && ((Boolean)state.getValue(POWERED)).booleanValue())
         {
             this.updatePoweredState(worldIn, pos, state);
         }
     }
 
-    @Override
     public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
-        return blockState.getValue(POWERED) ? 15 : 0;
+        return ((Boolean)blockState.getValue(POWERED)).booleanValue() ? 15 : 0;
     }
 
-    @Override
     public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
-        if (!blockState.getValue(POWERED))
+        if (!((Boolean)blockState.getValue(POWERED)).booleanValue())
         {
             return 0;
         }
@@ -109,9 +93,9 @@
 
     private void updatePoweredState(World worldIn, BlockPos pos, IBlockState state)
     {
-        boolean flag = state.getValue(POWERED);
+        boolean flag = ((Boolean)state.getValue(POWERED)).booleanValue();
         boolean flag1 = false;
-        List<EntityMinecart> list = this.findMinecarts(worldIn, pos, EntityMinecart.class);
+        List<EntityMinecart> list = this.<EntityMinecart>findMinecarts(worldIn, pos, EntityMinecart.class);
 
         if (!list.isEmpty())
         {
@@ -120,7 +104,7 @@
 
         if (flag1 && !flag)
         {
-            worldIn.setBlockState(pos, state.withProperty(POWERED, true), 3);
+            worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)), 3);
             this.updateConnectedRails(worldIn, pos, state, true);
             worldIn.notifyNeighborsOfStateChange(pos, this, false);
             worldIn.notifyNeighborsOfStateChange(pos.down(), this, false);
@@ -129,7 +113,7 @@
 
         if (!flag1 && flag)
         {
-            worldIn.setBlockState(pos, state.withProperty(POWERED, false), 3);
+            worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(false)), 3);
             this.updateConnectedRails(worldIn, pos, state, false);
             worldIn.notifyNeighborsOfStateChange(pos, this, false);
             worldIn.notifyNeighborsOfStateChange(pos.down(), this, false);
@@ -159,38 +143,36 @@
         }
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         super.onBlockAdded(worldIn, pos, state);
         this.updatePoweredState(worldIn, pos, state);
     }
 
-    @Override
     public IProperty<BlockRailBase.EnumRailDirection> getShapeProperty()
     {
         return SHAPE;
     }
 
-    @Override
     public boolean hasComparatorInputOverride(IBlockState state)
     {
         return true;
     }
 
-    @Override
     public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos)
     {
-        if (blockState.getValue(POWERED))
+        if (((Boolean)blockState.getValue(POWERED)).booleanValue())
         {
-            List<EntityMinecartCommandBlock> list = this.findMinecarts(worldIn, pos, EntityMinecartCommandBlock.class);
+            List<EntityMinecart> carts = this.findMinecarts(worldIn, pos, EntityMinecart.class);
+            if (!carts.isEmpty() && carts.get(0).getComparatorLevel() > -1) return carts.get(0).getComparatorLevel();
+            List<EntityMinecartCommandBlock> list = this.<EntityMinecartCommandBlock>findMinecarts(worldIn, pos, EntityMinecartCommandBlock.class);
 
             if (!list.isEmpty())
             {
-                return list.get(0).getCommandBlockLogic().getSuccessCount();
+                return ((EntityMinecartCommandBlock)list.get(0)).getCommandBlockLogic().getSuccessCount();
             }
 
-            List<EntityMinecart> list1 = this.findMinecarts(worldIn, pos, EntityMinecart.class, EntitySelectors.HAS_INVENTORY);
+            List<EntityMinecart> list1 = this.<EntityMinecart>findMinecarts(worldIn, pos, EntityMinecart.class, EntitySelectors.HAS_INVENTORY);
 
             if (!list1.isEmpty())
             {
@@ -204,39 +186,26 @@
     protected <T extends EntityMinecart> List<T> findMinecarts(World worldIn, BlockPos pos, Class<T> clazz, Predicate<Entity>... filter)
     {
         AxisAlignedBB axisalignedbb = this.getDectectionBox(pos);
-        return filter.length != 1
-               ? worldIn.getEntitiesWithinAABB(clazz, axisalignedbb)
-               : worldIn.getEntitiesWithinAABB(clazz, axisalignedbb, filter[0]);
+        return filter.length != 1 ? worldIn.getEntitiesWithinAABB(clazz, axisalignedbb) : worldIn.getEntitiesWithinAABB(clazz, axisalignedbb, filter[0]);
     }
 
     private AxisAlignedBB getDectectionBox(BlockPos pos)
     {
         float f = 0.2F;
-        return new AxisAlignedBB(
-                   (double)((float)pos.getX() + 0.2F),
-                   (double)pos.getY(),
-                   (double)((float)pos.getZ() + 0.2F),
-                   (double)((float)(pos.getX() + 1) - 0.2F),
-                   (double)((float)(pos.getY() + 1) - 0.2F),
-                   (double)((float)(pos.getZ() + 1) - 0.2F)
-               );
+        return new AxisAlignedBB((double)((float)pos.getX() + 0.2F), (double)pos.getY(), (double)((float)pos.getZ() + 0.2F), (double)((float)(pos.getX() + 1) - 0.2F), (double)((float)(pos.getY() + 1) - 0.2F), (double)((float)(pos.getZ() + 1) - 0.2F));
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState()
-               .withProperty(SHAPE, BlockRailBase.EnumRailDirection.byMetadata(meta & 7))
-               .withProperty(POWERED, (meta & 8) > 0);
+        return this.getDefaultState().withProperty(SHAPE, BlockRailBase.EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i |= state.getValue(SHAPE).getMetadata();
+        i = i | ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE)).getMetadata();
 
-        if (state.getValue(POWERED))
+        if (((Boolean)state.getValue(POWERED)).booleanValue())
         {
             i |= 8;
         }
@@ -244,7 +213,7 @@
         return i;
     }
 
-    @Override
+    @SuppressWarnings("incomplete-switch")
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
         switch (rot)
@@ -328,10 +297,10 @@
         }
     }
 
-    @Override
+    @SuppressWarnings("incomplete-switch")
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = state.getValue(SHAPE);
+        BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)state.getValue(SHAPE);
 
         switch (mirrorIn)
         {
@@ -381,9 +350,8 @@
         return super.withMirror(state, mirrorIn);
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, SHAPE, POWERED);
+        return new BlockStateContainer(this, new IProperty[] {SHAPE, POWERED});
     }
 }
