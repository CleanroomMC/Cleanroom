--- before/net/minecraft/block/BlockChest.java
+++ after/net/minecraft/block/BlockChest.java
@@ -2,6 +2,7 @@
 
 import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyDirection;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.BlockStateContainer;
@@ -36,11 +37,11 @@
 public class BlockChest extends BlockContainer
 {
     public static final PropertyDirection FACING = BlockHorizontal.FACING;
-    protected static final AxisAlignedBB NORTH_CHEST_AABB = new AxisAlignedBB(0.0625, 0.0, 0.0, 0.9375, 0.875, 0.9375);
-    protected static final AxisAlignedBB SOUTH_CHEST_AABB = new AxisAlignedBB(0.0625, 0.0, 0.0625, 0.9375, 0.875, 1.0);
-    protected static final AxisAlignedBB WEST_CHEST_AABB = new AxisAlignedBB(0.0, 0.0, 0.0625, 0.9375, 0.875, 0.9375);
-    protected static final AxisAlignedBB EAST_CHEST_AABB = new AxisAlignedBB(0.0625, 0.0, 0.0625, 1.0, 0.875, 0.9375);
-    protected static final AxisAlignedBB NOT_CONNECTED_AABB = new AxisAlignedBB(0.0625, 0.0, 0.0625, 0.9375, 0.875, 0.9375);
+    protected static final AxisAlignedBB NORTH_CHEST_AABB = new AxisAlignedBB(0.0625D, 0.0D, 0.0D, 0.9375D, 0.875D, 0.9375D);
+    protected static final AxisAlignedBB SOUTH_CHEST_AABB = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 0.9375D, 0.875D, 1.0D);
+    protected static final AxisAlignedBB WEST_CHEST_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0625D, 0.9375D, 0.875D, 0.9375D);
+    protected static final AxisAlignedBB EAST_CHEST_AABB = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 1.0D, 0.875D, 0.9375D);
+    protected static final AxisAlignedBB NOT_CONNECTED_AABB = new AxisAlignedBB(0.0625D, 0.0D, 0.0625D, 0.9375D, 0.875D, 0.9375D);
     public final BlockChest.Type chestType;
 
     protected BlockChest(BlockChest.Type chestTypeIn)
@@ -51,32 +52,27 @@
         this.setCreativeTab(chestTypeIn == BlockChest.Type.TRAP ? CreativeTabs.REDSTONE : CreativeTabs.DECORATIONS);
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean hasCustomBreakingProgress(IBlockState state)
     {
         return true;
     }
 
-    @Override
     public EnumBlockRenderType getRenderType(IBlockState state)
     {
         return EnumBlockRenderType.ENTITYBLOCK_ANIMATED;
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         if (source.getBlockState(pos.north()).getBlock() == this)
@@ -97,7 +93,6 @@
         }
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         this.checkForSurroundingChests(worldIn, pos, state);
@@ -114,25 +109,14 @@
         }
     }
 
-    @Override
-    public IBlockState getStateForPlacement(
-        World worldIn,
-        BlockPos pos,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ,
-        int meta,
-        EntityLivingBase placer
-    )
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
     {
         return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing());
     }
 
-    @Override
     public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
     {
-        EnumFacing enumfacing = EnumFacing.byHorizontalIndex(MathHelper.floor((double)(placer.rotationYaw * 4.0F / 360.0F) + 0.5) & 3).getOpposite();
+        EnumFacing enumfacing = EnumFacing.byHorizontalIndex(MathHelper.floor((double)(placer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3).getOpposite();
         state = state.withProperty(FACING, enumfacing);
         BlockPos blockpos = pos.north();
         BlockPos blockpos1 = pos.south();
@@ -200,7 +184,7 @@
             IBlockState iblockstate1 = worldIn.getBlockState(pos.south());
             IBlockState iblockstate2 = worldIn.getBlockState(pos.west());
             IBlockState iblockstate3 = worldIn.getBlockState(pos.east());
-            EnumFacing enumfacing = state.getValue(FACING);
+            EnumFacing enumfacing = (EnumFacing)state.getValue(FACING);
 
             if (iblockstate.getBlock() != this && iblockstate1.getBlock() != this)
             {
@@ -217,11 +201,11 @@
 
                     if (iblockstate2.getBlock() == this)
                     {
-                        enumfacing2 = iblockstate2.getValue(FACING);
+                        enumfacing2 = (EnumFacing)iblockstate2.getValue(FACING);
                     }
                     else
                     {
-                        enumfacing2 = iblockstate3.getValue(FACING);
+                        enumfacing2 = (EnumFacing)iblockstate3.getValue(FACING);
                     }
 
                     if (enumfacing2 == EnumFacing.NORTH)
@@ -250,11 +234,11 @@
 
                 if (iblockstate.getBlock() == this)
                 {
-                    enumfacing1 = iblockstate.getValue(FACING);
+                    enumfacing1 = (EnumFacing)iblockstate.getValue(FACING);
                 }
                 else
                 {
-                    enumfacing1 = iblockstate1.getValue(FACING);
+                    enumfacing1 = (EnumFacing)iblockstate1.getValue(FACING);
                 }
 
                 if (enumfacing1 == EnumFacing.WEST)
@@ -310,7 +294,7 @@
         }
         else
         {
-            EnumFacing enumfacing2 = state.getValue(FACING);
+            EnumFacing enumfacing2 = (EnumFacing)state.getValue(FACING);
 
             if (worldIn.getBlockState(pos.offset(enumfacing2)).isFullBlock())
             {
@@ -331,7 +315,6 @@
         }
     }
 
-    @Override
     public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
     {
         int i = 0;
@@ -347,7 +330,7 @@
                 return false;
             }
 
-            i++;
+            ++i;
         }
 
         if (worldIn.getBlockState(blockpos1).getBlock() == this)
@@ -357,7 +340,7 @@
                 return false;
             }
 
-            i++;
+            ++i;
         }
 
         if (worldIn.getBlockState(blockpos2).getBlock() == this)
@@ -367,7 +350,7 @@
                 return false;
             }
 
-            i++;
+            ++i;
         }
 
         if (worldIn.getBlockState(blockpos3).getBlock() == this)
@@ -377,7 +360,7 @@
                 return false;
             }
 
-            i++;
+            ++i;
         }
 
         return i <= 1;
@@ -403,7 +386,6 @@
         }
     }
 
-    @Override
     public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos)
     {
         super.neighborChanged(state, worldIn, pos, blockIn, fromPos);
@@ -415,7 +397,6 @@
         }
     }
 
-    @Override
     public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
     {
         TileEntity tileentity = worldIn.getTileEntity(pos);
@@ -429,18 +410,7 @@
         super.breakBlock(worldIn, pos, state);
     }
 
-    @Override
-    public boolean onBlockActivated(
-        World worldIn,
-        BlockPos pos,
-        IBlockState state,
-        EntityPlayer playerIn,
-        EnumHand hand,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         if (worldIn.isRemote)
         {
@@ -500,7 +470,7 @@
 
                     if (block == this)
                     {
-                        if (this.isBlocked(worldIn, blockpos))
+                        if (!allowBlocking && this.isBlocked(worldIn, blockpos)) // Forge: fix MC-99321
                         {
                             return null;
                         }
@@ -526,19 +496,16 @@
         }
     }
 
-    @Override
     public TileEntity createNewTileEntity(World worldIn, int meta)
     {
         return new TileEntityChest();
     }
 
-    @Override
     public boolean canProvidePower(IBlockState state)
     {
         return this.chestType == BlockChest.Type.TRAP;
     }
 
-    @Override
     public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         if (!blockState.canProvidePower())
@@ -559,7 +526,6 @@
         }
     }
 
-    @Override
     public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         return side == EnumFacing.UP ? blockState.getWeakPower(blockAccess, pos, side) : 0;
@@ -572,22 +538,12 @@
 
     private boolean isBelowSolidBlock(World worldIn, BlockPos pos)
     {
-        return worldIn.getBlockState(pos.up()).isNormalCube();
+        return worldIn.getBlockState(pos.up()).doesSideBlockChestOpening(worldIn, pos.up(), EnumFacing.DOWN);
     }
 
     private boolean isOcelotSittingOnChest(World worldIn, BlockPos pos)
     {
-        for (Entity entity : worldIn.getEntitiesWithinAABB(
-                    EntityOcelot.class,
-                    new AxisAlignedBB(
-                        (double)pos.getX(),
-                        (double)(pos.getY() + 1),
-                        (double)pos.getZ(),
-                        (double)(pos.getX() + 1),
-                        (double)(pos.getY() + 2),
-                        (double)(pos.getZ() + 1)
-                    )
-                ))
+        for (Entity entity : worldIn.getEntitiesWithinAABB(EntityOcelot.class, new AxisAlignedBB((double)pos.getX(), (double)(pos.getY() + 1), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 2), (double)(pos.getZ() + 1))))
         {
             EntityOcelot entityocelot = (EntityOcelot)entity;
 
@@ -600,19 +556,16 @@
         return false;
     }
 
-    @Override
     public boolean hasComparatorInputOverride(IBlockState state)
     {
         return true;
     }
 
-    @Override
     public int getComparatorInputOverride(IBlockState blockState, World worldIn, BlockPos pos)
     {
         return Container.calcRedstoneFromInventory(this.getLockableContainer(worldIn, pos));
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
         EnumFacing enumfacing = EnumFacing.byIndex(meta);
@@ -625,31 +578,26 @@
         return this.getDefaultState().withProperty(FACING, enumfacing);
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
-        return state.getValue(FACING).getIndex();
+        return ((EnumFacing)state.getValue(FACING)).getIndex();
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return state.withRotation(mirrorIn.toRotation(state.getValue(FACING)));
+        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, FACING);
+        return new BlockStateContainer(this, new IProperty[] {FACING});
     }
 
-    @Override
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return BlockFaceShape.UNDEFINED;
@@ -659,5 +607,11 @@
     {
         BASIC,
         TRAP;
+    }
+
+    /* ======================================== FORGE START =====================================*/
+    public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis)
+    {
+        return !isDoubleChest(world, pos) && super.rotateBlock(world, pos, axis);
     }
 }
