--- before/net/minecraft/block/BlockWall.java
+++ after/net/minecraft/block/BlockWall.java
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import javax.annotation.Nullable;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyEnum;
 import net.minecraft.block.state.BlockFaceShape;
@@ -29,82 +30,27 @@
     public static final PropertyBool EAST = PropertyBool.create("east");
     public static final PropertyBool SOUTH = PropertyBool.create("south");
     public static final PropertyBool WEST = PropertyBool.create("west");
-    public static final PropertyEnum<BlockWall.EnumType> VARIANT = PropertyEnum.create("variant", BlockWall.EnumType.class);
-    protected static final AxisAlignedBB[] AABB_BY_INDEX = new AxisAlignedBB[]
-        {
-            new AxisAlignedBB(0.25, 0.0, 0.25, 0.75, 1.0, 0.75),
-            new AxisAlignedBB(0.25, 0.0, 0.25, 0.75, 1.0, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.25, 0.75, 1.0, 0.75),
-            new AxisAlignedBB(0.0, 0.0, 0.25, 0.75, 1.0, 1.0),
-            new AxisAlignedBB(0.25, 0.0, 0.0, 0.75, 1.0, 0.75),
-            new AxisAlignedBB(0.3125, 0.0, 0.0, 0.6875, 0.875, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 0.75, 1.0, 0.75),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 0.75, 1.0, 1.0),
-            new AxisAlignedBB(0.25, 0.0, 0.25, 1.0, 1.0, 0.75),
-            new AxisAlignedBB(0.25, 0.0, 0.25, 1.0, 1.0, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.3125, 1.0, 0.875, 0.6875),
-            new AxisAlignedBB(0.0, 0.0, 0.25, 1.0, 1.0, 1.0),
-            new AxisAlignedBB(0.25, 0.0, 0.0, 1.0, 1.0, 0.75),
-            new AxisAlignedBB(0.25, 0.0, 0.0, 1.0, 1.0, 1.0),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 1.0, 0.75),
-            new AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 1.0, 1.0)
-        };
-    protected static final AxisAlignedBB[] CLIP_AABB_BY_INDEX = new AxisAlignedBB[]
-        {
-            AABB_BY_INDEX[0].setMaxY(1.5),
-            AABB_BY_INDEX[1].setMaxY(1.5),
-            AABB_BY_INDEX[2].setMaxY(1.5),
-            AABB_BY_INDEX[3].setMaxY(1.5),
-            AABB_BY_INDEX[4].setMaxY(1.5),
-            AABB_BY_INDEX[5].setMaxY(1.5),
-            AABB_BY_INDEX[6].setMaxY(1.5),
-            AABB_BY_INDEX[7].setMaxY(1.5),
-            AABB_BY_INDEX[8].setMaxY(1.5),
-            AABB_BY_INDEX[9].setMaxY(1.5),
-            AABB_BY_INDEX[10].setMaxY(1.5),
-            AABB_BY_INDEX[11].setMaxY(1.5),
-            AABB_BY_INDEX[12].setMaxY(1.5),
-            AABB_BY_INDEX[13].setMaxY(1.5),
-            AABB_BY_INDEX[14].setMaxY(1.5),
-            AABB_BY_INDEX[15].setMaxY(1.5)
-        };
+    public static final PropertyEnum<BlockWall.EnumType> VARIANT = PropertyEnum.<BlockWall.EnumType>create("variant", BlockWall.EnumType.class);
+    protected static final AxisAlignedBB[] AABB_BY_INDEX = new AxisAlignedBB[] {new AxisAlignedBB(0.25D, 0.0D, 0.25D, 0.75D, 1.0D, 0.75D), new AxisAlignedBB(0.25D, 0.0D, 0.25D, 0.75D, 1.0D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.25D, 0.75D, 1.0D, 0.75D), new AxisAlignedBB(0.0D, 0.0D, 0.25D, 0.75D, 1.0D, 1.0D), new AxisAlignedBB(0.25D, 0.0D, 0.0D, 0.75D, 1.0D, 0.75D), new AxisAlignedBB(0.3125D, 0.0D, 0.0D, 0.6875D, 0.875D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.75D, 1.0D, 0.75D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.75D, 1.0D, 1.0D), new AxisAlignedBB(0.25D, 0.0D, 0.25D, 1.0D, 1.0D, 0.75D), new AxisAlignedBB(0.25D, 0.0D, 0.25D, 1.0D, 1.0D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.3125D, 1.0D, 0.875D, 0.6875D), new AxisAlignedBB(0.0D, 0.0D, 0.25D, 1.0D, 1.0D, 1.0D), new AxisAlignedBB(0.25D, 0.0D, 0.0D, 1.0D, 1.0D, 0.75D), new AxisAlignedBB(0.25D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.75D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D)};
+    protected static final AxisAlignedBB[] CLIP_AABB_BY_INDEX = new AxisAlignedBB[] {AABB_BY_INDEX[0].setMaxY(1.5D), AABB_BY_INDEX[1].setMaxY(1.5D), AABB_BY_INDEX[2].setMaxY(1.5D), AABB_BY_INDEX[3].setMaxY(1.5D), AABB_BY_INDEX[4].setMaxY(1.5D), AABB_BY_INDEX[5].setMaxY(1.5D), AABB_BY_INDEX[6].setMaxY(1.5D), AABB_BY_INDEX[7].setMaxY(1.5D), AABB_BY_INDEX[8].setMaxY(1.5D), AABB_BY_INDEX[9].setMaxY(1.5D), AABB_BY_INDEX[10].setMaxY(1.5D), AABB_BY_INDEX[11].setMaxY(1.5D), AABB_BY_INDEX[12].setMaxY(1.5D), AABB_BY_INDEX[13].setMaxY(1.5D), AABB_BY_INDEX[14].setMaxY(1.5D), AABB_BY_INDEX[15].setMaxY(1.5D)};
 
     public BlockWall(Block modelBlock)
     {
         super(modelBlock.material);
-        this.setDefaultState(
-            this.blockState
-            .getBaseState()
-            .withProperty(UP, false)
-            .withProperty(NORTH, false)
-            .withProperty(EAST, false)
-            .withProperty(SOUTH, false)
-            .withProperty(WEST, false)
-            .withProperty(VARIANT, BlockWall.EnumType.NORMAL)
-        );
+        this.setDefaultState(this.blockState.getBaseState().withProperty(UP, Boolean.valueOf(false)).withProperty(NORTH, Boolean.valueOf(false)).withProperty(EAST, Boolean.valueOf(false)).withProperty(SOUTH, Boolean.valueOf(false)).withProperty(WEST, Boolean.valueOf(false)).withProperty(VARIANT, BlockWall.EnumType.NORMAL));
         this.setHardness(modelBlock.blockHardness);
         this.setResistance(modelBlock.blockResistance / 3.0F);
         this.setSoundType(modelBlock.blockSoundType);
         this.setCreativeTab(CreativeTabs.DECORATIONS);
     }
 
-    @Override
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos)
     {
         state = this.getActualState(state, source, pos);
         return AABB_BY_INDEX[getAABBIndex(state)];
     }
 
-    @Override
-    public void addCollisionBoxToList(
-        IBlockState state,
-        World worldIn,
-        BlockPos pos,
-        AxisAlignedBB entityBox,
-        List<AxisAlignedBB> collidingBoxes,
-        @Nullable Entity entityIn,
-        boolean isActualState
-    )
+    public void addCollisionBoxToList(IBlockState state, World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn, boolean isActualState)
     {
         if (!isActualState)
         {
@@ -115,7 +61,6 @@
     }
 
     @Nullable
-    @Override
     public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
     {
         blockState = this.getActualState(blockState, worldIn, pos);
@@ -126,22 +71,22 @@
     {
         int i = 0;
 
-        if (state.getValue(NORTH))
+        if (((Boolean)state.getValue(NORTH)).booleanValue())
         {
             i |= 1 << EnumFacing.NORTH.getHorizontalIndex();
         }
 
-        if (state.getValue(EAST))
+        if (((Boolean)state.getValue(EAST)).booleanValue())
         {
             i |= 1 << EnumFacing.EAST.getHorizontalIndex();
         }
 
-        if (state.getValue(SOUTH))
+        if (((Boolean)state.getValue(SOUTH)).booleanValue())
         {
             i |= 1 << EnumFacing.SOUTH.getHorizontalIndex();
         }
 
-        if (state.getValue(WEST))
+        if (((Boolean)state.getValue(WEST)).booleanValue())
         {
             i |= 1 << EnumFacing.WEST.getHorizontalIndex();
         }
@@ -149,25 +94,21 @@
         return i;
     }
 
-    @Override
     public String getLocalizedName()
     {
         return I18n.translateToLocal(this.getTranslationKey() + "." + BlockWall.EnumType.NORMAL.getTranslationKey() + ".name");
     }
 
-    @Override
     public boolean isFullCube(IBlockState state)
     {
         return false;
     }
 
-    @Override
     public boolean isPassable(IBlockAccess worldIn, BlockPos pos)
     {
         return false;
     }
 
-    @Override
     public boolean isOpaqueCube(IBlockState state)
     {
         return false;
@@ -184,14 +125,9 @@
 
     protected static boolean isExcepBlockForAttachWithPiston(Block p_194143_0_)
     {
-        return Block.isExceptBlockForAttachWithPiston(p_194143_0_)
-               || p_194143_0_ == Blocks.BARRIER
-               || p_194143_0_ == Blocks.MELON_BLOCK
-               || p_194143_0_ == Blocks.PUMPKIN
-               || p_194143_0_ == Blocks.LIT_PUMPKIN;
+        return Block.isExceptBlockForAttachWithPiston(p_194143_0_) || p_194143_0_ == Blocks.BARRIER || p_194143_0_ == Blocks.MELON_BLOCK || p_194143_0_ == Blocks.PUMPKIN || p_194143_0_ == Blocks.LIT_PUMPKIN;
     }
 
-    @Override
     public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
     {
         for (BlockWall.EnumType blockwall$enumtype : BlockWall.EnumType.values())
@@ -200,58 +136,64 @@
         }
     }
 
-    @Override
     public int damageDropped(IBlockState state)
     {
-        return state.getValue(VARIANT).getMetadata();
+        return ((BlockWall.EnumType)state.getValue(VARIANT)).getMetadata();
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side)
     {
         return side == EnumFacing.DOWN ? super.shouldSideBeRendered(blockState, blockAccess, pos, side) : true;
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
         return this.getDefaultState().withProperty(VARIANT, BlockWall.EnumType.byMetadata(meta));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
-        return state.getValue(VARIANT).getMetadata();
+        return ((BlockWall.EnumType)state.getValue(VARIANT)).getMetadata();
     }
 
-    @Override
     public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
-        boolean flag = this.canConnectTo(worldIn, pos.north(), EnumFacing.SOUTH);
-        boolean flag1 = this.canConnectTo(worldIn, pos.east(), EnumFacing.WEST);
-        boolean flag2 = this.canConnectTo(worldIn, pos.south(), EnumFacing.NORTH);
-        boolean flag3 = this.canConnectTo(worldIn, pos.west(), EnumFacing.EAST);
+        boolean flag =  canWallConnectTo(worldIn, pos, EnumFacing.NORTH);
+        boolean flag1 = canWallConnectTo(worldIn, pos, EnumFacing.EAST);
+        boolean flag2 = canWallConnectTo(worldIn, pos, EnumFacing.SOUTH);
+        boolean flag3 = canWallConnectTo(worldIn, pos, EnumFacing.WEST);
         boolean flag4 = flag && !flag1 && flag2 && !flag3 || !flag && flag1 && !flag2 && flag3;
-        return state.withProperty(UP, !flag4 || !worldIn.isAirBlock(pos.up()))
-               .withProperty(NORTH, flag)
-               .withProperty(EAST, flag1)
-               .withProperty(SOUTH, flag2)
-               .withProperty(WEST, flag3);
+        return state.withProperty(UP, Boolean.valueOf(!flag4 || !worldIn.isAirBlock(pos.up()))).withProperty(NORTH, Boolean.valueOf(flag)).withProperty(EAST, Boolean.valueOf(flag1)).withProperty(SOUTH, Boolean.valueOf(flag2)).withProperty(WEST, Boolean.valueOf(flag3));
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, UP, NORTH, EAST, WEST, SOUTH, VARIANT);
+        return new BlockStateContainer(this, new IProperty[] {UP, NORTH, EAST, WEST, SOUTH, VARIANT});
     }
 
-    @Override
     public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
     {
         return face != EnumFacing.UP && face != EnumFacing.DOWN ? BlockFaceShape.MIDDLE_POLE_THICK : BlockFaceShape.CENTER_BIG;
     }
 
+    /* ======================================== FORGE START ======================================== */
+
+    @Override
+    public boolean canBeConnectedTo(IBlockAccess world, BlockPos pos, EnumFacing facing)
+    {
+        return canConnectTo(world, pos.offset(facing), facing.getOpposite());
+    }
+
+    private boolean canWallConnectTo(IBlockAccess world, BlockPos pos, EnumFacing facing)
+    {
+        BlockPos other = pos.offset(facing);
+        Block block = world.getBlockState(other).getBlock();
+        return block.canBeConnectedTo(world, other, facing.getOpposite()) || canConnectTo(world, other, facing.getOpposite());
+    }
+
+    /* ======================================== FORGE END ======================================== */
+
     public static enum EnumType implements IStringSerializable
     {
         NORMAL(0, "cobblestone", "normal"),
@@ -274,7 +216,6 @@
             return this.meta;
         }
 
-        @Override
         public String toString()
         {
             return this.name;
@@ -290,7 +231,6 @@
             return META_LOOKUP[meta];
         }
 
-        @Override
         public String getName()
         {
             return this.name;
