--- before/net/minecraft/block/BlockPumpkin.java
+++ after/net/minecraft/block/BlockPumpkin.java
@@ -5,6 +5,7 @@
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.BlockWorldState;
 import net.minecraft.block.state.IBlockState;
@@ -47,7 +48,6 @@
         this.setCreativeTab(CreativeTabs.BUILDING_BLOCKS);
     }
 
-    @Override
     public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
     {
         super.onBlockAdded(worldIn, pos, state);
@@ -65,7 +65,7 @@
 
         if (blockpattern$patternhelper != null)
         {
-            for (int i = 0; i < this.getSnowmanPattern().getThumbLength(); i++)
+            for (int i = 0; i < this.getSnowmanPattern().getThumbLength(); ++i)
             {
                 BlockWorldState blockworldstate = blockpattern$patternhelper.translateOffset(0, i, 0);
                 worldIn.setBlockState(blockworldstate.getPos(), Blocks.AIR.getDefaultState(), 2);
@@ -73,30 +73,20 @@
 
             EntitySnowman entitysnowman = new EntitySnowman(worldIn);
             BlockPos blockpos1 = blockpattern$patternhelper.translateOffset(0, 2, 0).getPos();
-            entitysnowman.setLocationAndAngles(
-                (double)blockpos1.getX() + 0.5, (double)blockpos1.getY() + 0.05, (double)blockpos1.getZ() + 0.5, 0.0F, 0.0F
-            );
+            entitysnowman.setLocationAndAngles((double)blockpos1.getX() + 0.5D, (double)blockpos1.getY() + 0.05D, (double)blockpos1.getZ() + 0.5D, 0.0F, 0.0F);
             worldIn.spawnEntity(entitysnowman);
 
-            for (EntityPlayerMP entityplayermp : worldIn.getEntitiesWithinAABB(EntityPlayerMP.class, entitysnowman.getEntityBoundingBox().grow(5.0)))
+            for (EntityPlayerMP entityplayermp : worldIn.getEntitiesWithinAABB(EntityPlayerMP.class, entitysnowman.getEntityBoundingBox().grow(5.0D)))
             {
                 CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayermp, entitysnowman);
             }
 
-            for (int l = 0; l < 120; l++)
+            for (int l = 0; l < 120; ++l)
             {
-                worldIn.spawnParticle(
-                    EnumParticleTypes.SNOW_SHOVEL,
-                    (double)blockpos1.getX() + worldIn.rand.nextDouble(),
-                    (double)blockpos1.getY() + worldIn.rand.nextDouble() * 2.5,
-                    (double)blockpos1.getZ() + worldIn.rand.nextDouble(),
-                    0.0,
-                    0.0,
-                    0.0
-                );
+                worldIn.spawnParticle(EnumParticleTypes.SNOW_SHOVEL, (double)blockpos1.getX() + worldIn.rand.nextDouble(), (double)blockpos1.getY() + worldIn.rand.nextDouble() * 2.5D, (double)blockpos1.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
             }
 
-            for (int i1 = 0; i1 < this.getSnowmanPattern().getThumbLength(); i1++)
+            for (int i1 = 0; i1 < this.getSnowmanPattern().getThumbLength(); ++i1)
             {
                 BlockWorldState blockworldstate2 = blockpattern$patternhelper.translateOffset(0, i1, 0);
                 worldIn.notifyNeighborsRespectDebug(blockworldstate2.getPos(), Blocks.AIR, false);
@@ -108,9 +98,9 @@
 
             if (blockpattern$patternhelper != null)
             {
-                for (int j = 0; j < this.getGolemPattern().getPalmLength(); j++)
+                for (int j = 0; j < this.getGolemPattern().getPalmLength(); ++j)
                 {
-                    for (int k = 0; k < this.getGolemPattern().getThumbLength(); k++)
+                    for (int k = 0; k < this.getGolemPattern().getThumbLength(); ++k)
                     {
                         worldIn.setBlockState(blockpattern$patternhelper.translateOffset(j, k, 0).getPos(), Blocks.AIR.getDefaultState(), 2);
                     }
@@ -119,32 +109,22 @@
                 BlockPos blockpos = blockpattern$patternhelper.translateOffset(1, 2, 0).getPos();
                 EntityIronGolem entityirongolem = new EntityIronGolem(worldIn);
                 entityirongolem.setPlayerCreated(true);
-                entityirongolem.setLocationAndAngles(
-                    (double)blockpos.getX() + 0.5, (double)blockpos.getY() + 0.05, (double)blockpos.getZ() + 0.5, 0.0F, 0.0F
-                );
+                entityirongolem.setLocationAndAngles((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.05D, (double)blockpos.getZ() + 0.5D, 0.0F, 0.0F);
                 worldIn.spawnEntity(entityirongolem);
 
-                for (EntityPlayerMP entityplayermp1 : worldIn.getEntitiesWithinAABB(EntityPlayerMP.class, entityirongolem.getEntityBoundingBox().grow(5.0)))
+                for (EntityPlayerMP entityplayermp1 : worldIn.getEntitiesWithinAABB(EntityPlayerMP.class, entityirongolem.getEntityBoundingBox().grow(5.0D)))
                 {
                     CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayermp1, entityirongolem);
                 }
 
-                for (int j1 = 0; j1 < 120; j1++)
+                for (int j1 = 0; j1 < 120; ++j1)
                 {
-                    worldIn.spawnParticle(
-                        EnumParticleTypes.SNOWBALL,
-                        (double)blockpos.getX() + worldIn.rand.nextDouble(),
-                        (double)blockpos.getY() + worldIn.rand.nextDouble() * 3.9,
-                        (double)blockpos.getZ() + worldIn.rand.nextDouble(),
-                        0.0,
-                        0.0,
-                        0.0
-                    );
+                    worldIn.spawnParticle(EnumParticleTypes.SNOWBALL, (double)blockpos.getX() + worldIn.rand.nextDouble(), (double)blockpos.getY() + worldIn.rand.nextDouble() * 3.9D, (double)blockpos.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
                 }
 
-                for (int k1 = 0; k1 < this.getGolemPattern().getPalmLength(); k1++)
+                for (int k1 = 0; k1 < this.getGolemPattern().getPalmLength(); ++k1)
                 {
-                    for (int l1 = 0; l1 < this.getGolemPattern().getThumbLength(); l1++)
+                    for (int l1 = 0; l1 < this.getGolemPattern().getThumbLength(); ++l1)
                     {
                         BlockWorldState blockworldstate1 = blockpattern$patternhelper.translateOffset(k1, l1, 0);
                         worldIn.notifyNeighborsRespectDebug(blockworldstate1.getPos(), Blocks.AIR, false);
@@ -154,66 +134,46 @@
         }
     }
 
-    @Override
     public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
     {
-        return worldIn.getBlockState(pos).getBlock().material.isReplaceable()
-               && worldIn.getBlockState(pos.down()).isTopSolid();
+        return worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos) && worldIn.isSideSolid(pos.down(), EnumFacing.UP);
     }
 
-    @Override
     public IBlockState withRotation(IBlockState state, Rotation rot)
     {
-        return state.withProperty(FACING, rot.rotate(state.getValue(FACING)));
+        return state.withProperty(FACING, rot.rotate((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        return state.withRotation(mirrorIn.toRotation(state.getValue(FACING)));
+        return state.withRotation(mirrorIn.toRotation((EnumFacing)state.getValue(FACING)));
     }
 
-    @Override
-    public IBlockState getStateForPlacement(
-        World worldIn,
-        BlockPos pos,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ,
-        int meta,
-        EntityLivingBase placer
-    )
+    public IBlockState getStateForPlacement(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
     {
         return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing().getOpposite());
     }
 
-    @Override
     public IBlockState getStateFromMeta(int meta)
     {
         return this.getDefaultState().withProperty(FACING, EnumFacing.byHorizontalIndex(meta));
     }
 
-    @Override
     public int getMetaFromState(IBlockState state)
     {
-        return state.getValue(FACING).getHorizontalIndex();
+        return ((EnumFacing)state.getValue(FACING)).getHorizontalIndex();
     }
 
-    @Override
     protected BlockStateContainer createBlockState()
     {
-        return new BlockStateContainer(this, FACING);
+        return new BlockStateContainer(this, new IProperty[] {FACING});
     }
 
     protected BlockPattern getSnowmanBasePattern()
     {
         if (this.snowmanBasePattern == null)
         {
-            this.snowmanBasePattern = FactoryBlockPattern.start()
-                                  .aisle(" ", "#", "#")
-                                  .where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.SNOW)))
-                                  .build();
+            this.snowmanBasePattern = FactoryBlockPattern.start().aisle(" ", "#", "#").where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.SNOW))).build();
         }
 
         return this.snowmanBasePattern;
@@ -223,11 +183,7 @@
     {
         if (this.snowmanPattern == null)
         {
-            this.snowmanPattern = FactoryBlockPattern.start()
-                                  .aisle("^", "#", "#")
-                                  .where('^', BlockWorldState.hasState(IS_PUMPKIN))
-                                  .where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.SNOW)))
-                                  .build();
+            this.snowmanPattern = FactoryBlockPattern.start().aisle("^", "#", "#").where('^', BlockWorldState.hasState(IS_PUMPKIN)).where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.SNOW))).build();
         }
 
         return this.snowmanPattern;
@@ -237,11 +193,7 @@
     {
         if (this.golemBasePattern == null)
         {
-            this.golemBasePattern = FactoryBlockPattern.start()
-                                  .aisle("~ ~", "###", "~#~")
-                                  .where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.IRON_BLOCK)))
-                                  .where('~', BlockWorldState.hasState(BlockMaterialMatcher.forMaterial(Material.AIR)))
-                                  .build();
+            this.golemBasePattern = FactoryBlockPattern.start().aisle("~ ~", "###", "~#~").where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.IRON_BLOCK))).where('~', BlockWorldState.hasState(BlockMaterialMatcher.forMaterial(Material.AIR))).build();
         }
 
         return this.golemBasePattern;
@@ -251,12 +203,7 @@
     {
         if (this.golemPattern == null)
         {
-            this.golemPattern = FactoryBlockPattern.start()
-                                  .aisle("~^~", "###", "~#~")
-                                  .where('^', BlockWorldState.hasState(IS_PUMPKIN))
-                                  .where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.IRON_BLOCK)))
-                                  .where('~', BlockWorldState.hasState(BlockMaterialMatcher.forMaterial(Material.AIR)))
-                                  .build();
+            this.golemPattern = FactoryBlockPattern.start().aisle("~^~", "###", "~#~").where('^', BlockWorldState.hasState(IS_PUMPKIN)).where('#', BlockWorldState.hasState(BlockStateMatcher.forBlock(Blocks.IRON_BLOCK))).where('~', BlockWorldState.hasState(BlockMaterialMatcher.forMaterial(Material.AIR))).build();
         }
 
         return this.golemPattern;
