--- before/net/minecraft/nbt/NBTTagCompound.java
+++ after/net/minecraft/nbt/NBTTagCompound.java
@@ -25,9 +25,8 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Pattern SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
-    private final Map<String, NBTBase> tagMap = Maps.newHashMap();
+    private final Map<String, NBTBase> tagMap = Maps.<String, NBTBase>newHashMap();
 
-    @Override
     void write(DataOutput output) throws IOException
     {
         for (String s : this.tagMap.keySet())
@@ -39,7 +38,6 @@
         output.writeByte(0);
     }
 
-    @Override
     void read(DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException
     {
         sizeTracker.read(384L);
@@ -72,7 +70,6 @@
         return this.tagMap.keySet();
     }
 
-    @Override
     public byte getId()
     {
         return 10;
@@ -85,6 +82,7 @@
 
     public void setTag(String key, NBTBase value)
     {
+        if (value == null) throw new IllegalArgumentException("Invalid null NBT value with key " + key);
         this.tagMap.put(key, value);
     }
 
@@ -179,9 +177,13 @@
         {
             return true;
         }
+        else if (type != 99)
+        {
+            return false;
+        }
         else
         {
-            return type != 99 ? false : i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6;
+            return i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6;
         }
     }
 
@@ -194,8 +196,9 @@
                 return ((NBTPrimitive)this.tagMap.get(key)).getByte();
             }
         }
-        catch (ClassCastException classcastexception)
+        catch (ClassCastException var3)
         {
+            ;
         }
 
         return 0;
@@ -210,8 +213,9 @@
                 return ((NBTPrimitive)this.tagMap.get(key)).getShort();
             }
         }
-        catch (ClassCastException classcastexception)
+        catch (ClassCastException var3)
         {
+            ;
         }
 
         return 0;
@@ -226,8 +230,9 @@
                 return ((NBTPrimitive)this.tagMap.get(key)).getInt();
             }
         }
-        catch (ClassCastException classcastexception)
+        catch (ClassCastException var3)
         {
+            ;
         }
 
         return 0;
@@ -242,8 +247,9 @@
                 return ((NBTPrimitive)this.tagMap.get(key)).getLong();
             }
         }
-        catch (ClassCastException classcastexception)
+        catch (ClassCastException var3)
         {
+            ;
         }
 
         return 0L;
@@ -258,8 +264,9 @@
                 return ((NBTPrimitive)this.tagMap.get(key)).getFloat();
             }
         }
-        catch (ClassCastException classcastexception)
+        catch (ClassCastException var3)
         {
+            ;
         }
 
         return 0.0F;
@@ -274,11 +281,12 @@
                 return ((NBTPrimitive)this.tagMap.get(key)).getDouble();
             }
         }
-        catch (ClassCastException classcastexception)
+        catch (ClassCastException var3)
         {
+            ;
         }
 
-        return 0.0;
+        return 0.0D;
     }
 
     public String getString(String key)
@@ -287,11 +295,12 @@
         {
             if (this.hasKey(key, 8))
             {
-                return this.tagMap.get(key).getString();
+                return ((NBTBase)this.tagMap.get(key)).getString();
             }
         }
-        catch (ClassCastException classcastexception)
+        catch (ClassCastException var3)
         {
+            ;
         }
 
         return "";
@@ -382,7 +391,6 @@
         this.tagMap.remove(key);
     }
 
-    @Override
     public String toString()
     {
         StringBuilder stringbuilder = new StringBuilder("{");
@@ -408,7 +416,6 @@
         return stringbuilder.append('}').toString();
     }
 
-    @Override
     public boolean isEmpty()
     {
         return this.tagMap.isEmpty();
@@ -422,7 +429,7 @@
         {
             public String call() throws Exception
             {
-                return NBTBase.NBT_TYPES[NBTTagCompound.this.tagMap.get(key).getId()];
+                return NBTBase.NBT_TYPES[((NBTBase)NBTTagCompound.this.tagMap.get(key)).getId()];
             }
         });
         crashreportcategory.addDetail("Tag type expected", new ICrashReportDetail<String>()
@@ -442,19 +449,17 @@
 
         for (String s : this.tagMap.keySet())
         {
-            nbttagcompound.setTag(s, this.tagMap.get(s).copy());
+            nbttagcompound.setTag(s, ((NBTBase)this.tagMap.get(s)).copy());
         }
 
         return nbttagcompound;
     }
 
-    @Override
     public boolean equals(Object p_equals_1_)
     {
         return super.equals(p_equals_1_) && Objects.equals(this.tagMap.entrySet(), ((NBTTagCompound)p_equals_1_).tagMap.entrySet());
     }
 
-    @Override
     public int hashCode()
     {
         return super.hashCode() ^ this.tagMap.hashCode();
@@ -473,6 +478,7 @@
 
     private static byte readType(DataInput input, NBTSizeTracker sizeTracker) throws IOException
     {
+        sizeTracker.read(8);
         return input.readByte();
     }
 
@@ -483,6 +489,7 @@
 
     static NBTBase readNBT(byte id, String key, DataInput input, int depth, NBTSizeTracker sizeTracker) throws IOException
     {
+        sizeTracker.read(32); //Forge: 4 extra bytes for the object allocation.
         NBTBase nbtbase = NBTBase.create(id);
 
         try
@@ -495,7 +502,7 @@
             CrashReport crashreport = CrashReport.makeCrashReport(ioexception, "Loading NBT data");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("NBT Tag");
             crashreportcategory.addCrashSection("Tag name", key);
-            crashreportcategory.addCrashSection("Tag type", id);
+            crashreportcategory.addCrashSection("Tag type", Byte.valueOf(id));
             throw new ReportedException(crashreport);
         }
     }
