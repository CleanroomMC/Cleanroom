--- before/net/minecraft/potion/Potion.java
+++ after/net/minecraft/potion/Potion.java
@@ -22,10 +22,10 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class Potion
+public class Potion extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<Potion>
 {
-    public static final RegistryNamespaced<ResourceLocation, Potion> REGISTRY = new RegistryNamespaced<>();
-    private final Map<IAttribute, AttributeModifier> attributeModifierMap = Maps.newHashMap();
+    public static final RegistryNamespaced<ResourceLocation, Potion> REGISTRY = net.minecraftforge.registries.GameData.getWrapper(Potion.class);
+    private final Map<IAttribute, AttributeModifier> attributeModifierMap = Maps.<IAttribute, AttributeModifier>newHashMap();
     private final boolean isBadEffect;
     private final int liquidColor;
     private String name = "";
@@ -56,11 +56,11 @@
 
         if (isBadEffectIn)
         {
-            this.effectiveness = 0.5;
+            this.effectiveness = 0.5D;
         }
         else
         {
-            this.effectiveness = 1.0;
+            this.effectiveness = 1.0D;
         }
 
         this.liquidColor = liquidColorIn;
@@ -122,7 +122,7 @@
         {
             if (this == MobEffects.INSTANT_DAMAGE && !entityLivingBaseIn.isEntityUndead() || this == MobEffects.INSTANT_HEALTH && entityLivingBaseIn.isEntityUndead())
             {
-                int j = (int)(health * (double)(6 << amplifier) + 0.5);
+                int j = (int)(health * (double)(6 << amplifier) + 0.5D);
 
                 if (source == null)
                 {
@@ -136,7 +136,7 @@
         }
         else
         {
-            int i = (int)(health * (double)(4 << amplifier) + 0.5);
+            int i = (int)(health * (double)(4 << amplifier) + 0.5D);
             entityLivingBaseIn.heal((float)i);
         }
     }
@@ -146,17 +146,41 @@
         if (this == MobEffects.REGENERATION)
         {
             int k = 50 >> amplifier;
-            return k > 0 ? duration % k == 0 : true;
+
+            if (k > 0)
+            {
+                return duration % k == 0;
+            }
+            else
+            {
+                return true;
+            }
         }
         else if (this == MobEffects.POISON)
         {
             int j = 25 >> amplifier;
-            return j > 0 ? duration % j == 0 : true;
+
+            if (j > 0)
+            {
+                return duration % j == 0;
+            }
+            else
+            {
+                return true;
+            }
         }
         else if (this == MobEffects.WITHER)
         {
             int i = 40 >> amplifier;
-            return i > 0 ? duration % i == 0 : true;
+
+            if (i > 0)
+            {
+                return duration % i == 0;
+            }
+            else
+            {
+                return true;
+            }
         }
         else
         {
@@ -180,6 +204,12 @@
         return this.name;
     }
 
+    protected Potion setEffectiveness(double effectivenessIn)
+    {
+        this.effectiveness = effectivenessIn;
+        return this;
+    }
+
     @SideOnly(Side.CLIENT)
     public boolean hasStatusIcon()
     {
@@ -192,7 +222,6 @@
         return this.statusIconIndex;
     }
 
-    @SideOnly(Side.CLIENT)
     public boolean isBadEffect()
     {
         return this.isBadEffect;
@@ -212,12 +241,6 @@
         }
     }
 
-    protected Potion setEffectiveness(double effectivenessIn)
-    {
-        this.effectiveness = effectivenessIn;
-        return this;
-    }
-
     public int getLiquidColor()
     {
         return this.liquidColor;
@@ -230,12 +253,6 @@
         return this;
     }
 
-    @SideOnly(Side.CLIENT)
-    public Map<IAttribute, AttributeModifier> getAttributeModifierMap()
-    {
-        return this.attributeModifierMap;
-    }
-
     public void removeAttributesModifiersFromEntity(EntityLivingBase entityLivingBaseIn, AbstractAttributeMap attributeMapIn, int amplifier)
     {
         for (Entry<IAttribute, AttributeModifier> entry : this.attributeModifierMap.entrySet())
@@ -249,6 +266,12 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public Map<IAttribute, AttributeModifier> getAttributeModifierMap()
+    {
+        return this.attributeModifierMap;
+    }
+
     public void applyAttributesModifiersToEntity(EntityLivingBase entityLivingBaseIn, AbstractAttributeMap attributeMapIn, int amplifier)
     {
         for (Entry<IAttribute, AttributeModifier> entry : this.attributeModifierMap.entrySet())
@@ -259,14 +282,7 @@
             {
                 AttributeModifier attributemodifier = entry.getValue();
                 iattributeinstance.removeModifier(attributemodifier);
-                iattributeinstance.applyModifier(
-                    new AttributeModifier(
-                        attributemodifier.getID(),
-                        this.getName() + " " + amplifier,
-                        this.getAttributeModifierAmount(amplifier, attributemodifier),
-                        attributemodifier.getOperation()
-                    )
-                );
+                iattributeinstance.applyModifier(new AttributeModifier(attributemodifier.getID(), this.getName() + " " + amplifier, this.getAttributeModifierAmount(amplifier, attributemodifier), attributemodifier.getOperation()));
             }
         }
     }
@@ -276,6 +292,121 @@
         return modifier.getAmount() * (double)(amplifier + 1);
     }
 
+    /* ======================================== FORGE START =====================================*/
+
+    /**
+     * If the Potion effect should be displayed in the players inventory
+     * @param effect the active PotionEffect
+     * @return true to display it (default), false to hide it.
+     */
+    public boolean shouldRender(PotionEffect effect) { return true; }
+
+    /**
+     * If the standard PotionEffect text (name and duration) should be drawn when this potion is active.
+     * @param effect the active PotionEffect
+     * @return true to draw the standard text
+     */
+    public boolean shouldRenderInvText(PotionEffect effect)
+    {
+        return true;
+    }
+
+    /**
+     * If the Potion effect should be displayed in the player's ingame HUD
+     * @param effect the active PotionEffect
+     * @return true to display it (default), false to hide it.
+     */
+    public boolean shouldRenderHUD(PotionEffect effect)
+    {
+        return true;
+    }
+
+    /**
+     * Called to draw the this Potion onto the player's inventory when it's active.
+     * This can be used to e.g. render Potion icons from your own texture.
+     * @param x the x coordinate
+     * @param y the y coordinate
+     * @param effect the active PotionEffect
+     * @param mc the Minecraft instance, for convenience
+     * @deprecated use {@link #renderInventoryEffect(PotionEffect, net.minecraft.client.gui.Gui, int, int, float)}
+     */
+    @SideOnly(Side.CLIENT)
+    @Deprecated // TODO: remove
+    public void renderInventoryEffect(int x, int y, PotionEffect effect, net.minecraft.client.Minecraft mc) { }
+
+    /**
+     * Called to draw the this Potion onto the player's inventory when it's active.
+     * This can be used to e.g. render Potion icons from your own texture.
+     *
+     * @param effect the active PotionEffect
+     * @param gui the gui instance
+     * @param x the x coordinate
+     * @param y the y coordinate
+     * @param z the z level
+     */
+    @SideOnly(Side.CLIENT)
+    public void renderInventoryEffect(PotionEffect effect, net.minecraft.client.gui.Gui gui, int x, int y, float z)
+    {
+        renderInventoryEffect(x, y, effect, net.minecraft.client.Minecraft.getMinecraft());
+    }
+
+    /**
+     * Called to draw the this Potion onto the player's ingame HUD when it's active.
+     * This can be used to e.g. render Potion icons from your own texture.
+     * @param x the x coordinate
+     * @param y the y coordinate
+     * @param effect the active PotionEffect
+     * @param mc the Minecraft instance, for convenience
+     * @param alpha the alpha value, blinks when the potion is about to run out
+     * @deprecated use {@link #renderHUDEffect(PotionEffect, net.minecraft.client.gui.Gui, int, int, float, float)}
+     */
+    @SideOnly(Side.CLIENT)
+    @Deprecated // TODO: remove
+    public void renderHUDEffect(int x, int y, PotionEffect effect, net.minecraft.client.Minecraft mc, float alpha) { }
+
+    /**
+     * Called to draw the this Potion onto the player's ingame HUD when it's active.
+     * This can be used to e.g. render Potion icons from your own texture.
+     *
+     * @param effect the active PotionEffect
+     * @param gui the gui instance
+     * @param x the x coordinate
+     * @param y the y coordinate
+     * @param z the z level
+     * @param alpha the alpha value, blinks when the potion is about to run out
+     */
+    @SideOnly(Side.CLIENT)
+    public void renderHUDEffect(PotionEffect effect, net.minecraft.client.gui.Gui gui, int x, int y, float z, float alpha)
+    {
+        renderHUDEffect(x, y, effect, net.minecraft.client.Minecraft.getMinecraft(), alpha);
+    }
+
+    /**
+     * Get a fresh list of items that can cure this Potion.
+     * All new PotionEffects created from this Potion will call this to initialize the default curative items
+     * @see PotionEffect#getCurativeItems
+     * @return A list of items that can cure this Potion
+     */
+    public java.util.List<net.minecraft.item.ItemStack> getCurativeItems()
+    {
+        java.util.ArrayList<net.minecraft.item.ItemStack> ret = new java.util.ArrayList<net.minecraft.item.ItemStack>();
+        ret.add(new net.minecraft.item.ItemStack(net.minecraft.init.Items.MILK_BUCKET));
+        return ret;
+    }
+    
+    /**
+     * Used for determining {@code PotionEffect} sort order in GUIs.
+     * Defaults to the {@code PotionEffect}'s liquid color.
+     * @param potionEffect the {@code PotionEffect} instance containing the potion
+     * @return a value used to sort {@code PotionEffect}s in GUIs 
+     */
+    public int getGuiSortColor(PotionEffect potionEffect)
+    {
+        return this.getLiquidColor();
+    }
+
+    /* ======================================== FORGE END =====================================*/
+
     @SideOnly(Side.CLIENT)
     public boolean isBeneficial()
     {
@@ -290,127 +421,32 @@
 
     public static void registerPotions()
     {
-        REGISTRY.register(
-            1,
-            new ResourceLocation("speed"),
-            new Potion(false, 8171462)
-            .setPotionName("effect.moveSpeed")
-            .setIconIndex(0, 0)
-            .registerPotionAttributeModifier(SharedMonsterAttributes.MOVEMENT_SPEED, "91AEAA56-376B-4498-935B-2F7F68070635", 0.2F, 2)
-            .setBeneficial()
-        );
-        REGISTRY.register(
-            2,
-            new ResourceLocation("slowness"),
-            new Potion(true, 5926017)
-            .setPotionName("effect.moveSlowdown")
-            .setIconIndex(1, 0)
-            .registerPotionAttributeModifier(SharedMonsterAttributes.MOVEMENT_SPEED, "7107DE5E-7CE8-4030-940E-514C1F160890", -0.15F, 2)
-        );
-        REGISTRY.register(
-            3,
-            new ResourceLocation("haste"),
-            new Potion(false, 14270531)
-            .setPotionName("effect.digSpeed")
-            .setIconIndex(2, 0)
-            .setEffectiveness(1.5)
-            .setBeneficial()
-            .registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_SPEED, "AF8B6E3F-3328-4C0A-AA36-5BA2BB9DBEF3", 0.1F, 2)
-        );
-        REGISTRY.register(
-            4,
-            new ResourceLocation("mining_fatigue"),
-            new Potion(true, 4866583)
-            .setPotionName("effect.digSlowDown")
-            .setIconIndex(3, 0)
-            .registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_SPEED, "55FCED67-E92A-486E-9800-B47F202C4386", -0.1F, 2)
-        );
-        REGISTRY.register(
-            5,
-            new ResourceLocation("strength"),
-            new PotionAttackDamage(false, 9643043, 3.0)
-            .setPotionName("effect.damageBoost")
-            .setIconIndex(4, 0)
-            .registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_DAMAGE, "648D7064-6A60-4F59-8ABE-C2C23A6DD7A9", 0.0, 0)
-            .setBeneficial()
-        );
-        REGISTRY.register(6, new ResourceLocation("instant_health"), new PotionHealth(false, 16262179).setPotionName("effect.heal").setBeneficial());
-        REGISTRY.register(7, new ResourceLocation("instant_damage"), new PotionHealth(true, 4393481).setPotionName("effect.harm").setBeneficial());
-        REGISTRY.register(
-            8, new ResourceLocation("jump_boost"), new Potion(false, 2293580).setPotionName("effect.jump").setIconIndex(2, 1).setBeneficial()
-        );
-        REGISTRY.register(
-            9, new ResourceLocation("nausea"), new Potion(true, 5578058).setPotionName("effect.confusion").setIconIndex(3, 1).setEffectiveness(0.25)
-        );
-        REGISTRY.register(
-            10,
-            new ResourceLocation("regeneration"),
-            new Potion(false, 13458603).setPotionName("effect.regeneration").setIconIndex(7, 0).setEffectiveness(0.25).setBeneficial()
-        );
-        REGISTRY.register(
-            11, new ResourceLocation("resistance"), new Potion(false, 10044730).setPotionName("effect.resistance").setIconIndex(6, 1).setBeneficial()
-        );
-        REGISTRY.register(
-            12, new ResourceLocation("fire_resistance"), new Potion(false, 14981690).setPotionName("effect.fireResistance").setIconIndex(7, 1).setBeneficial()
-        );
-        REGISTRY.register(
-            13, new ResourceLocation("water_breathing"), new Potion(false, 3035801).setPotionName("effect.waterBreathing").setIconIndex(0, 2).setBeneficial()
-        );
-        REGISTRY.register(
-            14, new ResourceLocation("invisibility"), new Potion(false, 8356754).setPotionName("effect.invisibility").setIconIndex(0, 1).setBeneficial()
-        );
-        REGISTRY.register(
-            15, new ResourceLocation("blindness"), new Potion(true, 2039587).setPotionName("effect.blindness").setIconIndex(5, 1).setEffectiveness(0.25)
-        );
-        REGISTRY.register(
-            16, new ResourceLocation("night_vision"), new Potion(false, 2039713).setPotionName("effect.nightVision").setIconIndex(4, 1).setBeneficial()
-        );
-        REGISTRY.register(17, new ResourceLocation("hunger"), new Potion(true, 5797459).setPotionName("effect.hunger").setIconIndex(1, 1));
-        REGISTRY.register(
-            18,
-            new ResourceLocation("weakness"),
-            new PotionAttackDamage(true, 4738376, -4.0)
-            .setPotionName("effect.weakness")
-            .setIconIndex(5, 0)
-            .registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_DAMAGE, "22653B89-116E-49DC-9B6B-9971489B5BE5", 0.0, 0)
-        );
-        REGISTRY.register(
-            19, new ResourceLocation("poison"), new Potion(true, 5149489).setPotionName("effect.poison").setIconIndex(6, 0).setEffectiveness(0.25)
-        );
-        REGISTRY.register(
-            20, new ResourceLocation("wither"), new Potion(true, 3484199).setPotionName("effect.wither").setIconIndex(1, 2).setEffectiveness(0.25)
-        );
-        REGISTRY.register(
-            21,
-            new ResourceLocation("health_boost"),
-            new PotionHealthBoost(false, 16284963)
-            .setPotionName("effect.healthBoost")
-            .setIconIndex(7, 2)
-            .registerPotionAttributeModifier(SharedMonsterAttributes.MAX_HEALTH, "5D6F0BA2-1186-46AC-B896-C61C5CEE99CC", 4.0, 0)
-            .setBeneficial()
-        );
-        REGISTRY.register(
-            22, new ResourceLocation("absorption"), new PotionAbsorption(false, 2445989).setPotionName("effect.absorption").setIconIndex(2, 2).setBeneficial()
-        );
-        REGISTRY.register(23, new ResourceLocation("saturation"), new PotionHealth(false, 16262179).setPotionName("effect.saturation").setBeneficial());
-        REGISTRY.register(24, new ResourceLocation("glowing"), new Potion(false, 9740385).setPotionName("effect.glowing").setIconIndex(4, 2));
-        REGISTRY.register(25, new ResourceLocation("levitation"), new Potion(true, 13565951).setPotionName("effect.levitation").setIconIndex(3, 2));
-        REGISTRY.register(
-            26,
-            new ResourceLocation("luck"),
-            new Potion(false, 3381504)
-            .setPotionName("effect.luck")
-            .setIconIndex(5, 2)
-            .setBeneficial()
-            .registerPotionAttributeModifier(SharedMonsterAttributes.LUCK, "03C3C89D-7037-4B42-869F-B146BCB64D2E", 1.0, 0)
-        );
-        REGISTRY.register(
-            27,
-            new ResourceLocation("unluck"),
-            new Potion(true, 12624973)
-            .setPotionName("effect.unluck")
-            .setIconIndex(6, 2)
-            .registerPotionAttributeModifier(SharedMonsterAttributes.LUCK, "CC5AF142-2BD2-4215-B636-2605AED11727", -1.0, 0)
-        );
+        REGISTRY.register(1, new ResourceLocation("speed"), (new Potion(false, 8171462)).setPotionName("effect.moveSpeed").setIconIndex(0, 0).registerPotionAttributeModifier(SharedMonsterAttributes.MOVEMENT_SPEED, "91AEAA56-376B-4498-935B-2F7F68070635", 0.20000000298023224D, 2).setBeneficial());
+        REGISTRY.register(2, new ResourceLocation("slowness"), (new Potion(true, 5926017)).setPotionName("effect.moveSlowdown").setIconIndex(1, 0).registerPotionAttributeModifier(SharedMonsterAttributes.MOVEMENT_SPEED, "7107DE5E-7CE8-4030-940E-514C1F160890", -0.15000000596046448D, 2));
+        REGISTRY.register(3, new ResourceLocation("haste"), (new Potion(false, 14270531)).setPotionName("effect.digSpeed").setIconIndex(2, 0).setEffectiveness(1.5D).setBeneficial().registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_SPEED, "AF8B6E3F-3328-4C0A-AA36-5BA2BB9DBEF3", 0.10000000149011612D, 2));
+        REGISTRY.register(4, new ResourceLocation("mining_fatigue"), (new Potion(true, 4866583)).setPotionName("effect.digSlowDown").setIconIndex(3, 0).registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_SPEED, "55FCED67-E92A-486E-9800-B47F202C4386", -0.10000000149011612D, 2));
+        REGISTRY.register(5, new ResourceLocation("strength"), (new PotionAttackDamage(false, 9643043, 3.0D)).setPotionName("effect.damageBoost").setIconIndex(4, 0).registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_DAMAGE, "648D7064-6A60-4F59-8ABE-C2C23A6DD7A9", 0.0D, 0).setBeneficial());
+        REGISTRY.register(6, new ResourceLocation("instant_health"), (new PotionHealth(false, 16262179)).setPotionName("effect.heal").setBeneficial());
+        REGISTRY.register(7, new ResourceLocation("instant_damage"), (new PotionHealth(true, 4393481)).setPotionName("effect.harm").setBeneficial());
+        REGISTRY.register(8, new ResourceLocation("jump_boost"), (new Potion(false, 2293580)).setPotionName("effect.jump").setIconIndex(2, 1).setBeneficial());
+        REGISTRY.register(9, new ResourceLocation("nausea"), (new Potion(true, 5578058)).setPotionName("effect.confusion").setIconIndex(3, 1).setEffectiveness(0.25D));
+        REGISTRY.register(10, new ResourceLocation("regeneration"), (new Potion(false, 13458603)).setPotionName("effect.regeneration").setIconIndex(7, 0).setEffectiveness(0.25D).setBeneficial());
+        REGISTRY.register(11, new ResourceLocation("resistance"), (new Potion(false, 10044730)).setPotionName("effect.resistance").setIconIndex(6, 1).setBeneficial());
+        REGISTRY.register(12, new ResourceLocation("fire_resistance"), (new Potion(false, 14981690)).setPotionName("effect.fireResistance").setIconIndex(7, 1).setBeneficial());
+        REGISTRY.register(13, new ResourceLocation("water_breathing"), (new Potion(false, 3035801)).setPotionName("effect.waterBreathing").setIconIndex(0, 2).setBeneficial());
+        REGISTRY.register(14, new ResourceLocation("invisibility"), (new Potion(false, 8356754)).setPotionName("effect.invisibility").setIconIndex(0, 1).setBeneficial());
+        REGISTRY.register(15, new ResourceLocation("blindness"), (new Potion(true, 2039587)).setPotionName("effect.blindness").setIconIndex(5, 1).setEffectiveness(0.25D));
+        REGISTRY.register(16, new ResourceLocation("night_vision"), (new Potion(false, 2039713)).setPotionName("effect.nightVision").setIconIndex(4, 1).setBeneficial());
+        REGISTRY.register(17, new ResourceLocation("hunger"), (new Potion(true, 5797459)).setPotionName("effect.hunger").setIconIndex(1, 1));
+        REGISTRY.register(18, new ResourceLocation("weakness"), (new PotionAttackDamage(true, 4738376, -4.0D)).setPotionName("effect.weakness").setIconIndex(5, 0).registerPotionAttributeModifier(SharedMonsterAttributes.ATTACK_DAMAGE, "22653B89-116E-49DC-9B6B-9971489B5BE5", 0.0D, 0));
+        REGISTRY.register(19, new ResourceLocation("poison"), (new Potion(true, 5149489)).setPotionName("effect.poison").setIconIndex(6, 0).setEffectiveness(0.25D));
+        REGISTRY.register(20, new ResourceLocation("wither"), (new Potion(true, 3484199)).setPotionName("effect.wither").setIconIndex(1, 2).setEffectiveness(0.25D));
+        REGISTRY.register(21, new ResourceLocation("health_boost"), (new PotionHealthBoost(false, 16284963)).setPotionName("effect.healthBoost").setIconIndex(7, 2).registerPotionAttributeModifier(SharedMonsterAttributes.MAX_HEALTH, "5D6F0BA2-1186-46AC-B896-C61C5CEE99CC", 4.0D, 0).setBeneficial());
+        REGISTRY.register(22, new ResourceLocation("absorption"), (new PotionAbsorption(false, 2445989)).setPotionName("effect.absorption").setIconIndex(2, 2).setBeneficial());
+        REGISTRY.register(23, new ResourceLocation("saturation"), (new PotionHealth(false, 16262179)).setPotionName("effect.saturation").setBeneficial());
+        REGISTRY.register(24, new ResourceLocation("glowing"), (new Potion(false, 9740385)).setPotionName("effect.glowing").setIconIndex(4, 2));
+        REGISTRY.register(25, new ResourceLocation("levitation"), (new Potion(true, 13565951)).setPotionName("effect.levitation").setIconIndex(3, 2));
+        REGISTRY.register(26, new ResourceLocation("luck"), (new Potion(false, 3381504)).setPotionName("effect.luck").setIconIndex(5, 2).setBeneficial().registerPotionAttributeModifier(SharedMonsterAttributes.LUCK, "03C3C89D-7037-4B42-869F-B146BCB64D2E", 1.0D, 0));
+        REGISTRY.register(27, new ResourceLocation("unluck"), (new Potion(true, 12624973)).setPotionName("effect.unluck").setIconIndex(6, 2).registerPotionAttributeModifier(SharedMonsterAttributes.LUCK, "CC5AF142-2BD2-4215-B636-2605AED11727", -1.0D, 0));
     }
 }
