--- before/net/minecraft/crash/CrashReport.java
+++ after/net/minecraft/crash/CrashReport.java
@@ -13,6 +13,9 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
+import java.util.Set;
+
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import net.minecraft.util.ReportedException;
 import net.minecraft.world.gen.layer.IntCache;
 import net.minecraftforge.fml.relauncher.Side;
@@ -21,6 +24,9 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spongepowered.asm.mixin.extensibility.IMixinInfo;
+import org.spongepowered.asm.mixin.transformer.ClassInfo;
+import org.spongepowered.asm.mixin.transformer.MixinInfo;
 
 public class CrashReport
 {
@@ -28,7 +34,7 @@
     private final String field_71513_a;
     private final Throwable field_71511_b;
     private final CrashReportCategory field_85061_c = new CrashReportCategory(this, "System Details");
-    private final List<CrashReportCategory> field_71512_c = Lists.newArrayList();
+    private final List<CrashReportCategory> field_71512_c = Lists.<CrashReportCategory>newArrayList();
     private File field_71510_d;
     private boolean field_85059_f = true;
     private StackTraceElement[] field_85060_g = new StackTraceElement[0];
@@ -49,6 +55,13 @@
                 return "1.12.2";
             }
         });
+        this.field_85061_c.func_189529_a("Cleanroom Version", new ICrashReportDetail<String>()
+        {
+            public String call() throws Exception
+            {
+                return com.cleanroommc.common.CleanroomVersion.BUILD_VERSION;
+            }
+        });
         this.field_85061_c.func_189529_a("Operating System", new ICrashReportDetail<String>()
         {
             public String call()
@@ -116,6 +129,7 @@
                 return IntCache.func_85144_b();
             }
         });
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().enhanceCrashReport(this, this.field_85061_c);
     }
 
     public String func_71501_a()
@@ -132,7 +146,7 @@
     {
         if ((this.field_85060_g == null || this.field_85060_g.length <= 0) && !this.field_71512_c.isEmpty())
         {
-            this.field_85060_g = ArrayUtils.subarray(this.field_71512_c.get(0).func_147152_a(), 0, 1);
+            this.field_85060_g = (StackTraceElement[])ArrayUtils.subarray(((CrashReportCategory)this.field_71512_c.get(0)).func_147152_a(), 0, 1);
         }
 
         if (this.field_85060_g != null && this.field_85060_g.length > 0)
@@ -143,7 +157,7 @@
 
             for (StackTraceElement stacktraceelement : this.field_85060_g)
             {
-                p_71506_1_.append("\t").append("at ").append(stacktraceelement);
+                p_71506_1_.append("\t").append("at ").append((Object)stacktraceelement);
                 p_71506_1_.append("\n");
             }
 
@@ -198,6 +212,46 @@
             IOUtils.closeQuietly((Writer)printwriter);
         }
 
+        StackTraceElement[] stacktrace = throwable.getStackTrace();
+        if (stacktrace.length > 0) {
+            try {
+                StringBuilder mixinMetadataBuilder = null;
+                Set<String> classes = new ObjectOpenHashSet<>();
+                for (StackTraceElement stackTraceElement : stacktrace) {
+                    classes.add(stackTraceElement.getClassName());
+                }
+                for (String className : classes) {
+                    ClassInfo classInfo = ClassInfo.fromCache(className);
+                    if (classInfo != null) {
+                        @SuppressWarnings("unchecked")
+                        Set<MixinInfo> mixinInfos = classInfo.getMixins();
+                        if (!mixinInfos.isEmpty()) {
+                            if (mixinMetadataBuilder == null) {
+                                mixinMetadataBuilder = new StringBuilder("\n(MixinBooter) Mixins in Stacktrace:");
+                            }
+                            mixinMetadataBuilder.append("\n\t");
+                            mixinMetadataBuilder.append(className);
+                            mixinMetadataBuilder.append(":");
+                            for (IMixinInfo mixinInfo : mixinInfos) {
+                                mixinMetadataBuilder.append("\n\t\t");
+                                mixinMetadataBuilder.append(mixinInfo.getClassName());
+                                mixinMetadataBuilder.append(" (");
+                                mixinMetadataBuilder.append(mixinInfo.getConfig().getName());
+                                mixinMetadataBuilder.append(")");
+                            }
+                        }
+                    }
+                }
+
+                if (mixinMetadataBuilder == null) {
+                    return s + "\nNo Mixin Metadata is found in the Stacktrace.\n";
+                } else {
+                    return s + mixinMetadataBuilder;
+                }
+            } catch (Throwable t) {
+                return s + "\nFailed to find Mixin Metadata in Stacktrace:\n" + t;
+            }
+        }
         return s;
     }
 
@@ -205,11 +259,12 @@
     {
         StringBuilder stringbuilder = new StringBuilder();
         stringbuilder.append("---- Minecraft Crash Report ----\n");
+        net.minecraftforge.fml.relauncher.CoreModManager.onCrash(stringbuilder);
         stringbuilder.append("// ");
         stringbuilder.append(func_71503_h());
         stringbuilder.append("\n\n");
         stringbuilder.append("Time: ");
-        stringbuilder.append(new SimpleDateFormat().format(new Date()));
+        stringbuilder.append((new SimpleDateFormat()).format(new Date()));
         stringbuilder.append("\n");
         stringbuilder.append("Description: ");
         stringbuilder.append(this.field_71513_a);
@@ -247,26 +302,27 @@
             }
 
             Writer writer = null;
-            boolean flag;
+            boolean flag1;
 
             try
             {
                 writer = new OutputStreamWriter(new FileOutputStream(p_147149_1_), StandardCharsets.UTF_8);
                 writer.write(this.func_71502_e());
                 this.field_71510_d = p_147149_1_;
-                return true;
+                boolean lvt_3_1_ = true;
+                return lvt_3_1_;
             }
             catch (Throwable throwable)
             {
                 field_147150_a.error("Could not save crash report to {}", p_147149_1_, throwable);
-                flag = false;
+                flag1 = false;
             }
             finally
             {
                 IOUtils.closeQuietly(writer);
             }
 
-            return flag;
+            return flag1;
         }
     }
 
@@ -331,49 +387,13 @@
 
     private static String func_71503_h()
     {
-        String[] astring = new String[]
-        {
-            "Who set us up the TNT?",
-            "Everything's going to plan. No, really, that was supposed to happen.",
-            "Uh... Did I do that?",
-            "Oops.",
-            "Why did you do that?",
-            "I feel sad now :(",
-            "My bad.",
-            "I'm sorry, Dave.",
-            "I let you down. Sorry :(",
-            "On the bright side, I bought you a teddy bear!",
-            "Daisy, daisy...",
-            "Oh - I know what I did wrong!",
-            "Hey, that tickles! Hehehe!",
-            "I blame Dinnerbone.",
-            "You should try our sister game, Minceraft!",
-            "Don't be sad. I'll do better next time, I promise!",
-            "Don't be sad, have a hug! <3",
-            "I just don't know what went wrong :(",
-            "Shall we play a game?",
-            "Quite honestly, I wouldn't worry myself about that.",
-            "I bet Cylons wouldn't have this problem.",
-            "Sorry :(",
-            "Surprise! Haha. Well, this is awkward.",
-            "Would you like a cupcake?",
-            "Hi. I'm Minecraft, and I'm a crashaholic.",
-            "Ooh. Shiny.",
-            "This doesn't make any sense!",
-            "Why is it breaking :(",
-            "Don't do that.",
-            "Ouch. That hurt :(",
-            "You're mean.",
-            "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]",
-            "There are four lights!",
-            "But it works on my machine."
-        };
+        String[] astring = new String[] {"Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."};
 
         try
         {
             return astring[(int)(System.nanoTime() % (long)astring.length)];
         }
-        catch (Throwable throwable)
+        catch (Throwable var2)
         {
             return "Witty comment unavailable :(";
         }
