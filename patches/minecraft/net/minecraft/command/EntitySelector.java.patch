--- before/net/minecraft/command/EntitySelector.java
+++ after/net/minecraft/command/EntitySelector.java
@@ -43,7 +43,7 @@
     private static final Pattern TOKEN_PATTERN = Pattern.compile("^@([pares])(?:\\[([^ ]*)\\])?$");
     private static final Splitter COMMA_SPLITTER = Splitter.on(',').omitEmptyStrings();
     private static final Splitter EQUAL_SPLITTER = Splitter.on('=').limit(2);
-    private static final Set<String> VALID_ARGUMENTS = Sets.newHashSet();
+    private static final Set<String> VALID_ARGUMENTS = Sets.<String>newHashSet();
     private static final String ARGUMENT_RANGE_MAX = addArgument("r");
     private static final String ARGUMENT_RANGE_MIN = addArgument("rm");
     private static final String ARGUMENT_LEVEL_MAX = addArgument("l");
@@ -68,13 +68,10 @@
     {
         public boolean apply(@Nullable String p_apply_1_)
         {
-            return p_apply_1_ != null
-                   && (EntitySelector.VALID_ARGUMENTS.contains(p_apply_1_) || p_apply_1_.length() > "score_".length() && p_apply_1_.startsWith("score_"));
+            return p_apply_1_ != null && (EntitySelector.VALID_ARGUMENTS.contains(p_apply_1_) || p_apply_1_.length() > "score_".length() && p_apply_1_.startsWith("score_"));
         }
     };
-    private static final Set<String> WORLD_BINDING_ARGS = Sets.newHashSet(
-                    ARGUMENT_COORDINATE_X, ARGUMENT_COORDINATE_Y, ARGUMENT_COORDINATE_Z, ARGUMENT_DELTA_X, ARGUMENT_DELTA_Y, ARGUMENT_DELTA_Z, ARGUMENT_RANGE_MIN, ARGUMENT_RANGE_MAX
-                );
+    private static final Set<String> WORLD_BINDING_ARGS = Sets.newHashSet(ARGUMENT_COORDINATE_X, ARGUMENT_COORDINATE_Y, ARGUMENT_COORDINATE_Z, ARGUMENT_DELTA_X, ARGUMENT_DELTA_Y, ARGUMENT_DELTA_Z, ARGUMENT_RANGE_MIN, ARGUMENT_RANGE_MAX);
 
     public static String addArgument(String argument)
     {
@@ -85,7 +82,7 @@
     @Nullable
     public static EntityPlayerMP matchOnePlayer(ICommandSender sender, String token) throws CommandException
     {
-        return matchOneEntity(sender, token, EntityPlayerMP.class);
+        return (EntityPlayerMP)matchOneEntity(sender, token, EntityPlayerMP.class);
     }
 
     public static List<EntityPlayerMP> getPlayers(ICommandSender sender, String token) throws CommandException
@@ -97,7 +94,7 @@
     public static <T extends Entity> T matchOneEntity(ICommandSender sender, String token, Class <? extends T > targetClass) throws CommandException
     {
         List<T> list = matchEntities(sender, token, targetClass);
-        return list.size() == 1 ? list.get(0) : null;
+        return (T)(list.size() == 1 ? (Entity)list.get(0) : null);
     }
 
     @Nullable
@@ -111,7 +108,7 @@
         }
         else
         {
-            List<ITextComponent> list1 = Lists.newArrayList();
+            List<ITextComponent> list1 = Lists.<ITextComponent>newArrayList();
 
             for (Entity entity : list)
             {
@@ -124,6 +121,11 @@
 
     public static <T extends Entity> List<T> matchEntities(ICommandSender sender, String token, Class <? extends T > targetClass) throws CommandException
     {
+        return net.minecraftforge.common.command.SelectorHandlerManager.matchEntities(sender, token, targetClass);
+    }
+
+    public static <T extends Entity> List<T> matchEntitiesDefault(ICommandSender sender, String token, Class <? extends T > targetClass) throws CommandException
+    {
         Matcher matcher = TOKEN_PATTERN.matcher(token);
 
         if (matcher.matches() && sender.canUseCommand(1, "@"))
@@ -132,7 +134,7 @@
 
             if (!isEntityTypeValid(sender, map))
             {
-                return Collections.emptyList();
+                return Collections.<T>emptyList();
             }
             else
             {
@@ -140,13 +142,13 @@
                 BlockPos blockpos = getBlockPosFromArguments(map, sender.getPosition());
                 Vec3d vec3d = getPosFromArguments(map, sender.getPositionVector());
                 List<World> list = getWorlds(sender, map);
-                List<T> list1 = Lists.newArrayList();
+                List<T> list1 = Lists.<T>newArrayList();
 
                 for (World world : list)
                 {
                     if (world != null)
                     {
-                        List<Predicate<Entity>> list2 = Lists.newArrayList();
+                        List<Predicate<Entity>> list2 = Lists.<Predicate<Entity>>newArrayList();
                         list2.addAll(getTypePredicates(map, s));
                         list2.addAll(getXpLevelPredicates(map));
                         list2.addAll(getGamemodePredicates(map));
@@ -156,6 +158,7 @@
                         list2.addAll(getTagPredicates(map));
                         list2.addAll(getRadiusPredicates(map, vec3d));
                         list2.addAll(getRotationsPredicates(map));
+                        list2.addAll(net.minecraftforge.fml.common.registry.GameRegistry.createEntitySelectors(map, s, sender, vec3d));
 
                         if ("s".equalsIgnoreCase(s))
                         {
@@ -172,7 +175,7 @@
 
                                     if (!axisalignedbb.intersects(entity.getEntityBoundingBox()))
                                     {
-                                        return Collections.emptyList();
+                                        return Collections.<T>emptyList();
                                     }
                                 }
 
@@ -180,14 +183,14 @@
                                 {
                                     if (!predicate.apply(entity))
                                     {
-                                        return Collections.emptyList();
+                                        return Collections.<T>emptyList();
                                     }
                                 }
 
-                                return Lists.newArrayList((T)(entity));
+                                return Lists.newArrayList((T)entity);
                             }
 
-                            return Collections.emptyList();
+                            return Collections.<T>emptyList();
                         }
 
                         list1.addAll(filterResults(map, targetClass, list2, s, world, blockpos));
@@ -199,13 +202,13 @@
         }
         else
         {
-            return Collections.emptyList();
+            return Collections.<T>emptyList();
         }
     }
 
     private static List<World> getWorlds(ICommandSender sender, Map<String, String> argumentMap)
     {
-        List<World> list = Lists.newArrayList();
+        List<World> list = Lists.<World>newArrayList();
 
         if (hasArgument(argumentMap))
         {
@@ -237,7 +240,7 @@
             }
             else
             {
-                TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("commands.generic.entity.invalidType", resourcelocation);
+                TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("commands.generic.entity.invalidType", new Object[] {resourcelocation});
                 textcomponenttranslation.getStyle().setColor(TextFormatting.RED);
                 commandSender.sendMessage(textcomponenttranslation);
                 return false;
@@ -275,7 +278,7 @@
 
     private static List<Predicate<Entity>> getXpLevelPredicates(Map<String, String> params)
     {
-        List<Predicate<Entity>> list = Lists.newArrayList();
+        List<Predicate<Entity>> list = Lists.<Predicate<Entity>>newArrayList();
         final int i = getInt(params, ARGUMENT_LEVEL_MIN, -1);
         final int j = getInt(params, ARGUMENT_LEVEL_MAX, -1);
 
@@ -303,7 +306,7 @@
 
     private static List<Predicate<Entity>> getGamemodePredicates(Map<String, String> params)
     {
-        List<Predicate<Entity>> list = Lists.newArrayList();
+        List<Predicate<Entity>> list = Lists.<Predicate<Entity>>newArrayList();
         String s = getArgument(params, ARGUMENT_MODE);
 
         if (s == null)
@@ -326,12 +329,12 @@
                 int i = Integer.parseInt(s);
                 gametype = GameType.parseGameTypeWithDefault(i, GameType.NOT_SET);
             }
-            catch (Throwable throwable)
+            catch (Throwable var6)
             {
                 gametype = GameType.parseGameTypeWithDefault(s, GameType.NOT_SET);
             }
 
-            final GameType gametype1 = gametype;
+            final GameType type = gametype;
             list.add(new Predicate<Entity>()
             {
                 public boolean apply(@Nullable Entity p_apply_1_)
@@ -343,8 +346,8 @@
                     else
                     {
                         EntityPlayerMP entityplayermp = (EntityPlayerMP)p_apply_1_;
-                        GameType gametype2 = entityplayermp.interactionManager.getGameType();
-                        return flag ? gametype2 != gametype1 : gametype2 == gametype1;
+                        GameType gametype1 = entityplayermp.interactionManager.getGameType();
+                        return flag ? gametype1 != type : gametype1 == type;
                     }
                 }
             });
@@ -354,7 +357,7 @@
 
     private static List<Predicate<Entity>> getTeamPredicates(Map<String, String> params)
     {
-        List<Predicate<Entity>> list = Lists.newArrayList();
+        List<Predicate<Entity>> list = Lists.<Predicate<Entity>>newArrayList();
         String s = getArgument(params, ARGUMENT_TEAM_NAME);
         final boolean flag = s != null && s.startsWith("!");
 
@@ -365,7 +368,7 @@
 
         if (s != null)
         {
-            final String s2 = s;
+            final String s_f_ = s;
             list.add(new Predicate<Entity>()
             {
                 public boolean apply(@Nullable Entity p_apply_1_)
@@ -379,7 +382,7 @@
                         EntityLivingBase entitylivingbase = (EntityLivingBase)p_apply_1_;
                         Team team = entitylivingbase.getTeam();
                         String s1 = team == null ? "" : team.getName();
-                        return s1.equals(s2) != flag;
+                        return s1.equals(s_f_) != flag;
                     }
                 }
             });
@@ -431,12 +434,12 @@
                         Score score = scoreboard.getOrCreateScore(s1, scoreobjective);
                         int i = score.getScorePoints();
 
-                        if (i < entry.getValue() && flag)
+                        if (i < ((Integer)entry.getValue()).intValue() && flag)
                         {
                             return false;
                         }
 
-                        if (i > entry.getValue() && !flag)
+                        if (i > ((Integer)entry.getValue()).intValue() && !flag)
                         {
                             return false;
                         }
@@ -450,7 +453,7 @@
 
     private static List<Predicate<Entity>> getNamePredicates(Map<String, String> params)
     {
-        List<Predicate<Entity>> list = Lists.newArrayList();
+        List<Predicate<Entity>> list = Lists.<Predicate<Entity>>newArrayList();
         String s = getArgument(params, ARGUMENT_PLAYER_NAME);
         final boolean flag = s != null && s.startsWith("!");
 
@@ -461,12 +464,12 @@
 
         if (s != null)
         {
-            final String s1 = s;
+            final String s_f_ = s;
             list.add(new Predicate<Entity>()
             {
                 public boolean apply(@Nullable Entity p_apply_1_)
                 {
-                    return p_apply_1_ != null && p_apply_1_.getName().equals(s1) != flag;
+                    return p_apply_1_ != null && p_apply_1_.getName().equals(s_f_) != flag;
                 }
             });
         }
@@ -476,7 +479,7 @@
 
     private static List<Predicate<Entity>> getTagPredicates(Map<String, String> params)
     {
-        List<Predicate<Entity>> list = Lists.newArrayList();
+        List<Predicate<Entity>> list = Lists.<Predicate<Entity>>newArrayList();
         String s = getArgument(params, ARGUMENT_ENTITY_TAG);
         final boolean flag = s != null && s.startsWith("!");
 
@@ -487,7 +490,7 @@
 
         if (s != null)
         {
-            final String s1 = s;
+            final String s_f_ = s;
             list.add(new Predicate<Entity>()
             {
                 public boolean apply(@Nullable Entity p_apply_1_)
@@ -496,9 +499,13 @@
                     {
                         return false;
                     }
+                    else if ("".equals(s_f_))
+                    {
+                        return p_apply_1_.getTags().isEmpty() != flag;
+                    }
                     else
                     {
-                        return "".equals(s1) ? p_apply_1_.getTags().isEmpty() != flag : p_apply_1_.getTags().contains(s1) != flag;
+                        return p_apply_1_.getTags().contains(s_f_) != flag;
                     }
                 }
             });
@@ -511,18 +518,18 @@
     {
         double d0 = (double)getInt(params, ARGUMENT_RANGE_MIN, -1);
         double d1 = (double)getInt(params, ARGUMENT_RANGE_MAX, -1);
-        final boolean flag = d0 < -0.5;
-        final boolean flag1 = d1 < -0.5;
+        final boolean flag = d0 < -0.5D;
+        final boolean flag1 = d1 < -0.5D;
 
         if (flag && flag1)
         {
-            return Collections.emptyList();
+            return Collections.<Predicate<Entity>>emptyList();
         }
         else
         {
-            double d2 = Math.max(d0, 1.0E-4);
+            double d2 = Math.max(d0, 1.0E-4D);
             final double d3 = d2 * d2;
-            double d4 = Math.max(d1, 1.0E-4);
+            double d4 = Math.max(d1, 1.0E-4D);
             final double d5 = d4 * d4;
             return Lists.newArrayList(new Predicate<Entity>()
             {
@@ -544,7 +551,7 @@
 
     private static List<Predicate<Entity>> getRotationsPredicates(Map<String, String> params)
     {
-        List<Predicate<Entity>> list = Lists.newArrayList();
+        List<Predicate<Entity>> list = Lists.<Predicate<Entity>>newArrayList();
 
         if (params.containsKey(ARGUMENT_ROTY_MIN) || params.containsKey(ARGUMENT_ROTY_MAX))
         {
@@ -561,7 +568,15 @@
                     else
                     {
                         int i1 = MathHelper.wrapDegrees(MathHelper.floor(p_apply_1_.rotationYaw));
-                        return i > j ? i1 >= i || i1 <= j : i1 >= i && i1 <= j;
+
+                        if (i > j)
+                        {
+                            return i1 >= i || i1 <= j;
+                        }
+                        else
+                        {
+                            return i1 >= i && i1 <= j;
+                        }
                     }
                 }
             });
@@ -582,7 +597,15 @@
                     else
                     {
                         int i1 = MathHelper.wrapDegrees(MathHelper.floor(p_apply_1_.rotationPitch));
-                        return k > l ? i1 >= k || i1 <= l : i1 >= k && i1 <= l;
+
+                        if (k > l)
+                        {
+                            return i1 >= k || i1 <= l;
+                        }
+                        else
+                        {
+                            return i1 >= k && i1 <= l;
+                        }
                     }
                 }
             });
@@ -591,16 +614,9 @@
         return list;
     }
 
-    private static <T extends Entity> List<T> filterResults(
-            Map<String, String> params,
-            Class <? extends T > entityClass,
-            List<Predicate<Entity>> inputList,
-            String type,
-            World worldIn,
-            BlockPos position
-        )
+    private static <T extends Entity> List<T> filterResults(Map<String, String> params, Class <? extends T > entityClass, List<Predicate<Entity>> inputList, String type, World worldIn, BlockPos position)
     {
-        List<T> list = Lists.newArrayList();
+        List<T> list = Lists.<T>newArrayList();
         String s = getArgument(params, ARGUMENT_ENTITY_TYPE);
         s = s != null && s.startsWith("!") ? s.substring(1) : s;
         boolean flag = !type.equals("e");
@@ -610,11 +626,39 @@
         int k = getInt(params, ARGUMENT_DELTA_Z, 0);
         int l = getInt(params, ARGUMENT_RANGE_MAX, -1);
         Predicate<Entity> predicate = Predicates.and(inputList);
-        Predicate<Entity> predicate1 = Predicates.and(EntitySelectors.IS_ALIVE, predicate);
-
-        if (params.containsKey(ARGUMENT_DELTA_X) || params.containsKey(ARGUMENT_DELTA_Y) || params.containsKey(ARGUMENT_DELTA_Z))
-        {
-            final AxisAlignedBB axisalignedbb1 = getAABB(position, i, j, k);
+        Predicate<Entity> predicate1 = Predicates.<Entity>and(EntitySelectors.IS_ALIVE, predicate);
+
+        if (!params.containsKey(ARGUMENT_DELTA_X) && !params.containsKey(ARGUMENT_DELTA_Y) && !params.containsKey(ARGUMENT_DELTA_Z))
+        {
+            if (l >= 0)
+            {
+                AxisAlignedBB axisalignedbb1 = new AxisAlignedBB((double)(position.getX() - l), (double)(position.getY() - l), (double)(position.getZ() - l), (double)(position.getX() + l + 1), (double)(position.getY() + l + 1), (double)(position.getZ() + l + 1));
+
+                if (flag && !flag1)
+                {
+                    list.addAll(worldIn.getPlayers(entityClass, predicate1));
+                }
+                else
+                {
+                    list.addAll(worldIn.getEntitiesWithinAABB(entityClass, axisalignedbb1, predicate1));
+                }
+            }
+            else if (type.equals("a"))
+            {
+                list.addAll(worldIn.getPlayers(entityClass, predicate));
+            }
+            else if (!type.equals("p") && (!type.equals("r") || flag1))
+            {
+                list.addAll(worldIn.getEntities(entityClass, predicate1));
+            }
+            else
+            {
+                list.addAll(worldIn.getPlayers(entityClass, predicate1));
+            }
+        }
+        else
+        {
+            final AxisAlignedBB axisalignedbb = getAABB(position, i, j, k);
 
             if (flag && !flag1)
             {
@@ -622,91 +666,47 @@
                 {
                     public boolean apply(@Nullable Entity p_apply_1_)
                     {
-                        return p_apply_1_ != null && axisalignedbb1.intersects(p_apply_1_.getEntityBoundingBox());
+                        return p_apply_1_ != null && axisalignedbb.intersects(p_apply_1_.getEntityBoundingBox());
                     }
                 };
                 list.addAll(worldIn.getPlayers(entityClass, Predicates.and(predicate1, predicate2)));
             }
             else
             {
-                list.addAll(worldIn.getEntitiesWithinAABB(entityClass, axisalignedbb1, predicate1));
-            }
-        }
-        else if (l >= 0)
-        {
-            AxisAlignedBB axisalignedbb = new AxisAlignedBB(
-                (double)(position.getX() - l),
-                (double)(position.getY() - l),
-                (double)(position.getZ() - l),
-                (double)(position.getX() + l + 1),
-                (double)(position.getY() + l + 1),
-                (double)(position.getZ() + l + 1)
-            );
-
-            if (flag && !flag1)
-            {
-                list.addAll(worldIn.getPlayers(entityClass, predicate1));
-            }
-            else
-            {
                 list.addAll(worldIn.getEntitiesWithinAABB(entityClass, axisalignedbb, predicate1));
             }
         }
-        else if (type.equals("a"))
-        {
-            list.addAll(worldIn.getPlayers(entityClass, predicate));
-        }
-        else if (!type.equals("p") && (!type.equals("r") || flag1))
-        {
-            list.addAll(worldIn.getEntities(entityClass, predicate1));
-        }
-        else
-        {
-            list.addAll(worldIn.getPlayers(entityClass, predicate1));
-        }
 
         return list;
     }
 
-    private static <T extends Entity> List<T> getEntitiesFromPredicates(
-            List<T> matchingEntities,
-            Map<String, String> params,
-            ICommandSender sender,
-            Class <? extends T > targetClass,
-            String type,
-            final Vec3d pos
-        )
+    private static <T extends Entity> List<T> getEntitiesFromPredicates(List<T> matchingEntities, Map<String, String> params, ICommandSender sender, Class <? extends T > targetClass, String type, final Vec3d pos)
     {
         int i = getInt(params, ARGUMENT_COUNT, !type.equals("a") && !type.equals("e") ? 1 : 0);
 
-        if (type.equals("p") || type.equals("a") || type.equals("e"))
-        {
-            Collections.sort(
-                matchingEntities,
-                new Comparator<Entity>()
+        if (!type.equals("p") && !type.equals("a") && !type.equals("e"))
+        {
+            if (type.equals("r"))
+            {
+                Collections.shuffle(matchingEntities);
+            }
+        }
+        else
+        {
+            Collections.sort(matchingEntities, new Comparator<Entity>()
             {
                 public int compare(Entity p_compare_1_, Entity p_compare_2_)
                 {
-                    return ComparisonChain.start()
-                           .compare(
-                               p_compare_1_.getDistanceSq(pos.x, pos.y, pos.z),
-                               p_compare_2_.getDistanceSq(pos.x, pos.y, pos.z)
-                           )
-                           .result();
+                    return ComparisonChain.start().compare(p_compare_1_.getDistanceSq(pos.x, pos.y, pos.z), p_compare_2_.getDistanceSq(pos.x, pos.y, pos.z)).result();
                 }
-            }
-            );
-        }
-        else if (type.equals("r"))
-        {
-            Collections.shuffle(matchingEntities);
+            });
         }
 
         Entity entity = sender.getCommandSenderEntity();
 
         if (entity != null && targetClass.isAssignableFrom(entity.getClass()) && i == 1 && matchingEntities.contains(entity) && !"r".equals(type))
         {
-            matchingEntities = Lists.newArrayList((T)(entity));
+            matchingEntities = Lists.newArrayList((T)entity);
         }
 
         if (i != 0)
@@ -738,27 +738,17 @@
 
     private static BlockPos getBlockPosFromArguments(Map<String, String> params, BlockPos pos)
     {
-        return new BlockPos(
-                   getInt(params, ARGUMENT_COORDINATE_X, pos.getX()),
-                   getInt(params, ARGUMENT_COORDINATE_Y, pos.getY()),
-                   getInt(params, ARGUMENT_COORDINATE_Z, pos.getZ())
-               );
+        return new BlockPos(getInt(params, ARGUMENT_COORDINATE_X, pos.getX()), getInt(params, ARGUMENT_COORDINATE_Y, pos.getY()), getInt(params, ARGUMENT_COORDINATE_Z, pos.getZ()));
     }
 
     private static Vec3d getPosFromArguments(Map<String, String> params, Vec3d pos)
     {
-        return new Vec3d(
-                   getCoordinate(params, ARGUMENT_COORDINATE_X, pos.x, true),
-                   getCoordinate(params, ARGUMENT_COORDINATE_Y, pos.y, false),
-                   getCoordinate(params, ARGUMENT_COORDINATE_Z, pos.z, true)
-               );
+        return new Vec3d(getCoordinate(params, ARGUMENT_COORDINATE_X, pos.x, true), getCoordinate(params, ARGUMENT_COORDINATE_Y, pos.y, false), getCoordinate(params, ARGUMENT_COORDINATE_Z, pos.z, true));
     }
 
     private static double getCoordinate(Map<String, String> params, String key, double defaultD, boolean offset)
     {
-        return params.containsKey(key)
-               ? (double)MathHelper.getInt(params.get(key), MathHelper.floor(defaultD)) + (offset ? 0.5 : 0.0)
-               : defaultD;
+        return params.containsKey(key) ? (double)MathHelper.getInt(params.get(key), MathHelper.floor(defaultD)) + (offset ? 0.5D : 0.0D) : defaultD;
     }
 
     private static boolean hasArgument(Map<String, String> params)
@@ -787,13 +777,13 @@
 
     public static Map<String, Integer> getScoreMap(Map<String, String> params)
     {
-        Map<String, Integer> map = Maps.newHashMap();
+        Map<String, Integer> map = Maps.<String, Integer>newHashMap();
 
         for (String s : params.keySet())
         {
             if (s.startsWith("score_") && s.length() > "score_".length())
             {
-                map.put(s.substring("score_".length()), MathHelper.getInt(params.get(s), 1));
+                map.put(s.substring("score_".length()), Integer.valueOf(MathHelper.getInt(params.get(s), 1)));
             }
         }
 
@@ -802,6 +792,11 @@
 
     public static boolean matchesMultiplePlayers(String selectorStr) throws CommandException
     {
+        return net.minecraftforge.common.command.SelectorHandlerManager.matchesMultiplePlayers(selectorStr);
+    }
+
+    public static boolean matchesMultiplePlayersDefault(String selectorStr) throws CommandException
+    {
         Matcher matcher = TOKEN_PATTERN.matcher(selectorStr);
 
         if (!matcher.matches())
@@ -819,12 +814,17 @@
 
     public static boolean isSelector(String selectorStr)
     {
+        return net.minecraftforge.common.command.SelectorHandlerManager.isSelector(selectorStr);
+    }
+
+    public static boolean isSelectorDefault(String selectorStr)
+    {
         return TOKEN_PATTERN.matcher(selectorStr).matches();
     }
 
     private static Map<String, String> getArgumentMap(@Nullable String argumentString) throws CommandException
     {
-        Map<String, String> map = Maps.newHashMap();
+        Map<String, String> map = Maps.<String, String>newHashMap();
 
         if (argumentString == null)
         {
@@ -839,10 +839,10 @@
 
                 if (!IS_VALID_ARGUMENT.apply(s1))
                 {
-                    throw new CommandException("commands.generic.selector_argument", s);
+                    throw new CommandException("commands.generic.selector_argument", new Object[] {s});
                 }
 
-                map.put(s1, iterator.hasNext() ? iterator.next() : "");
+                map.put(s1, iterator.hasNext() ? (String)iterator.next() : "");
             }
 
             return map;
