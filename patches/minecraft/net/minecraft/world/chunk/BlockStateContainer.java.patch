--- before/net/minecraft/world/chunk/BlockStateContainer.java
+++ after/net/minecraft/world/chunk/BlockStateContainer.java
@@ -30,6 +30,10 @@
 
     private void setBits(int bitsIn)
     {
+        setBits(bitsIn, false);
+    }
+    private void setBits(int bitsIn, boolean forceBits)
+    {
         if (bitsIn != this.bits)
         {
             this.bits = bitsIn;
@@ -47,6 +51,8 @@
             {
                 this.palette = REGISTRY_BASED_PALETTE;
                 this.bits = MathHelper.log2DeBruijn(Block.BLOCK_STATE_IDS.size());
+                if (forceBits)
+                    this.bits = bitsIn;
             }
 
             this.palette.idFor(AIR_BLOCK_STATE);
@@ -54,14 +60,13 @@
         }
     }
 
-    @Override
     public int onResize(int bits, IBlockState state)
     {
         BitArray bitarray = this.storage;
         IBlockStatePalette iblockstatepalette = this.palette;
         this.setBits(bits);
 
-        for (int i = 0; i < bitarray.size(); i++)
+        for (int i = 0; i < bitarray.size(); ++i)
         {
             IBlockState iblockstate = iblockstatepalette.getBlockState(bitarray.getAt(i));
 
@@ -103,11 +108,15 @@
 
         if (this.bits != i)
         {
-            this.setBits(i);
+            this.setBits(i, true); //Forge, Force bit density to fix network issues, resize below if needed.
         }
 
         this.palette.read(buf);
         buf.readLongArray(this.storage.getBackingLongArray());
+
+        int regSize = MathHelper.log2DeBruijn(Block.BLOCK_STATE_IDS.size());
+        if (this.palette == REGISTRY_BASED_PALETTE && this.bits != regSize) // Resize bits to fit registry.
+            this.onResize(regSize, AIR_BLOCK_STATE);
     }
 
     public void write(PacketBuffer buf)
@@ -122,7 +131,7 @@
     {
         NibbleArray nibblearray = null;
 
-        for (int i = 0; i < 4096; i++)
+        for (int i = 0; i < 4096; ++i)
         {
             int j = Block.BLOCK_STATE_IDS.get(this.get(i));
             int k = i & 15;
@@ -139,7 +148,7 @@
                 nibblearray.set(k, l, i1, j >> 12 & 15);
             }
 
-            blockIds[i] = (byte)(j >> 4 & 0xFF);
+            blockIds[i] = (byte)(j >> 4 & 255);
             data.set(k, l, i1, j & 15);
         }
 
@@ -148,7 +157,7 @@
 
     public void setDataFromNBT(byte[] blockIds, NibbleArray data, @Nullable NibbleArray blockIdExtension)
     {
-        for (int i = 0; i < 4096; i++)
+        for (int i = 0; i < 4096; ++i)
         {
             int j = i & 15;
             int k = i >> 8 & 15;
@@ -161,9 +170,6 @@
 
     public int getSerializedSize()
     {
-        return 1
-               + this.palette.getSerializedSize()
-               + PacketBuffer.getVarIntSize(this.storage.size())
-               + this.storage.getBackingLongArray().length * 8;
+        return 1 + this.palette.getSerializedSize() + PacketBuffer.getVarIntSize(this.storage.size()) + this.storage.getBackingLongArray().length * 8;
     }
 }
