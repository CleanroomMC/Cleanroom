--- before/net/minecraft/world/chunk/BlockStatePaletteHashMap.java
+++ after/net/minecraft/world/chunk/BlockStatePaletteHashMap.java
@@ -18,10 +18,9 @@
     {
         this.bits = bitsIn;
         this.paletteResizer = paletteResizerIn;
-        this.statePaletteMap = new IntIdentityHashBiMap<>(1 << bitsIn);
+        this.statePaletteMap = new IntIdentityHashBiMap<IBlockState>(1 << bitsIn);
     }
 
-    @Override
     public int idFor(IBlockState state)
     {
         int i = this.statePaletteMap.getId(state);
@@ -40,43 +39,39 @@
     }
 
     @Nullable
-    @Override
     public IBlockState getBlockState(int indexKey)
     {
         return this.statePaletteMap.get(indexKey);
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void read(PacketBuffer buf)
     {
         this.statePaletteMap.clear();
         int i = buf.readVarInt();
 
-        for (int j = 0; j < i; j++)
+        for (int j = 0; j < i; ++j)
         {
             this.statePaletteMap.add(Block.BLOCK_STATE_IDS.getByValue(buf.readVarInt()));
         }
     }
 
-    @Override
     public void write(PacketBuffer buf)
     {
         int i = this.statePaletteMap.size();
         buf.writeVarInt(i);
 
-        for (int j = 0; j < i; j++)
+        for (int j = 0; j < i; ++j)
         {
             buf.writeVarInt(Block.BLOCK_STATE_IDS.get(this.statePaletteMap.get(j)));
         }
     }
 
-    @Override
     public int getSerializedSize()
     {
         int i = PacketBuffer.getVarIntSize(this.statePaletteMap.size());
 
-        for (int j = 0; j < this.statePaletteMap.size(); j++)
+        for (int j = 0; j < this.statePaletteMap.size(); ++j)
         {
             i += PacketBuffer.getVarIntSize(Block.BLOCK_STATE_IDS.get(this.statePaletteMap.get(j)));
         }
