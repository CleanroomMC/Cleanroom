--- before/net/minecraft/world/storage/SaveHandler.java
+++ after/net/minecraft/world/storage/SaveHandler.java
@@ -44,7 +44,7 @@
         if (p_i46648_3_)
         {
             this.playersDirectory.mkdirs();
-            this.structureTemplateManager = new TemplateManager(new File(this.worldDirectory, "structures").toString(), dataFixerIn);
+            this.structureTemplateManager = new TemplateManager((new File(this.worldDirectory, "structures")).toString(), dataFixerIn);
         }
         else
         {
@@ -77,13 +77,11 @@
         }
     }
 
-    @Override
     public File getWorldDirectory()
     {
         return this.worldDirectory;
     }
 
-    @Override
     public void checkSessionLock() throws MinecraftException
     {
         try
@@ -103,27 +101,25 @@
                 datainputstream.close();
             }
         }
-        catch (IOException ioexception)
+        catch (IOException var7)
         {
             throw new MinecraftException("Failed to check session lock, aborting");
         }
     }
 
-    @Override
     public IChunkLoader getChunkLoader(WorldProvider provider)
     {
         throw new RuntimeException("Old Chunk Storage is no longer supported.");
     }
 
     @Nullable
-    @Override
     public WorldInfo loadWorldInfo()
     {
         File file1 = new File(this.worldDirectory, "level.dat");
 
         if (file1.exists())
         {
-            WorldInfo worldinfo = SaveFormatOld.getWorldData(file1, this.dataFixer);
+            WorldInfo worldinfo = SaveFormatOld.loadAndFix(file1, this.dataFixer, this);
 
             if (worldinfo != null)
             {
@@ -131,17 +127,19 @@
             }
         }
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().confirmBackupLevelDatUse(this);
         file1 = new File(this.worldDirectory, "level.dat_old");
-        return file1.exists() ? SaveFormatOld.getWorldData(file1, this.dataFixer) : null;
+        return file1.exists() ? SaveFormatOld.loadAndFix(file1, this.dataFixer, this) : null;
     }
 
-    @Override
     public void saveWorldInfoWithPlayer(WorldInfo worldInformation, @Nullable NBTTagCompound tagCompound)
     {
         NBTTagCompound nbttagcompound = worldInformation.cloneNBTCompound(tagCompound);
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
         nbttagcompound1.setTag("Data", nbttagcompound);
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().handleWorldDataSave(this, worldInformation, nbttagcompound1);
+
         try
         {
             File file1 = new File(this.worldDirectory, "level.dat_new");
@@ -174,13 +172,11 @@
         }
     }
 
-    @Override
     public void saveWorldInfo(WorldInfo worldInformation)
     {
-        this.saveWorldInfoWithPlayer(worldInformation, null);
+        this.saveWorldInfoWithPlayer(worldInformation, (NBTTagCompound)null);
     }
 
-    @Override
     public void writePlayerData(EntityPlayer player)
     {
         try
@@ -196,15 +192,15 @@
             }
 
             file1.renameTo(file2);
+            net.minecraftforge.event.ForgeEventFactory.firePlayerSavingEvent(player, this.playersDirectory, player.getUniqueID().toString());
         }
-        catch (Exception exception)
+        catch (Exception var5)
         {
-            LOGGER.warn("Failed to save player data for {}", player.getName());
+            LOGGER.warn("Failed to save player data for {}", (Object)player.getName());
         }
     }
 
     @Nullable
-    @Override
     public NBTTagCompound readPlayerData(EntityPlayer player)
     {
         NBTTagCompound nbttagcompound = null;
@@ -218,9 +214,9 @@
                 nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file1));
             }
         }
-        catch (Exception exception)
+        catch (Exception var4)
         {
-            LOGGER.warn("Failed to load player data for {}", player.getName());
+            LOGGER.warn("Failed to load player data for {}", (Object)player.getName());
         }
 
         if (nbttagcompound != null)
@@ -228,16 +224,15 @@
             player.readFromNBT(this.dataFixer.process(FixTypes.PLAYER, nbttagcompound));
         }
 
+        net.minecraftforge.event.ForgeEventFactory.firePlayerLoadingEvent(player, playersDirectory, player.getUniqueID().toString());
         return nbttagcompound;
     }
 
-    @Override
     public IPlayerFileData getPlayerNBTManager()
     {
         return this;
     }
 
-    @Override
     public String[] getAvailablePlayerDat()
     {
         String[] astring = this.playersDirectory.list();
@@ -247,7 +242,7 @@
             astring = new String[0];
         }
 
-        for (int i = 0; i < astring.length; i++)
+        for (int i = 0; i < astring.length; ++i)
         {
             if (astring[i].endsWith(".dat"))
             {
@@ -258,20 +253,35 @@
         return astring;
     }
 
-    @Override
     public void flush()
     {
     }
 
-    @Override
     public File getMapFileFromName(String mapName)
     {
         return new File(this.mapDataDir, mapName + ".dat");
     }
 
-    @Override
     public TemplateManager getStructureTemplateManager()
     {
         return this.structureTemplateManager;
+    }
+
+    public NBTTagCompound getPlayerNBT(net.minecraft.entity.player.EntityPlayerMP player)
+    {
+        try
+        {
+            File file1 = new File(this.playersDirectory, player.getUniqueID().toString() + ".dat");
+
+            if (file1.exists() && file1.isFile())
+            {
+                return CompressedStreamTools.readCompressed(new FileInputStream(file1));
+            }
+        }
+        catch (Exception exception)
+        {
+            LOGGER.warn("Failed to load player data for " + player.getName());
+        }
+        return null;
     }
 }
