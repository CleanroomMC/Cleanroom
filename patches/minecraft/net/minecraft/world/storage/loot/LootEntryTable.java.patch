--- before/net/minecraft/world/storage/loot/LootEntryTable.java
+++ after/net/minecraft/world/storage/loot/LootEntryTable.java
@@ -14,13 +14,12 @@
 {
     protected final ResourceLocation table;
 
-    public LootEntryTable(ResourceLocation tableIn, int weightIn, int qualityIn, LootCondition[] conditionsIn)
+    public LootEntryTable(ResourceLocation tableIn, int weightIn, int qualityIn, LootCondition[] conditionsIn, String entryName)
     {
-        super(weightIn, qualityIn, conditionsIn);
+        super(weightIn, qualityIn, conditionsIn, entryName);
         this.table = tableIn;
     }
 
-    @Override
     public void addLoot(Collection<ItemStack> stacks, Random rand, LootContext context)
     {
         LootTable loottable = context.getLootTableManager().getLootTableFromLocation(this.table);
@@ -28,17 +27,15 @@
         stacks.addAll(collection);
     }
 
-    @Override
     protected void serialize(JsonObject json, JsonSerializationContext context)
     {
         json.addProperty("name", this.table.toString());
     }
 
-    public static LootEntryTable deserialize(
-            JsonObject object, JsonDeserializationContext deserializationContext, int weightIn, int qualityIn, LootCondition[] conditionsIn
-        )
+    public static LootEntryTable deserialize(JsonObject object, JsonDeserializationContext deserializationContext, int weightIn, int qualityIn, LootCondition[] conditionsIn)
     {
+        String name = net.minecraftforge.common.ForgeHooks.readLootEntryName(object, "loot_table");
         ResourceLocation resourcelocation = new ResourceLocation(JsonUtils.getString(object, "name"));
-        return new LootEntryTable(resourcelocation, weightIn, qualityIn, conditionsIn);
+        return new LootEntryTable(resourcelocation, weightIn, qualityIn, conditionsIn, name);
     }
 }
