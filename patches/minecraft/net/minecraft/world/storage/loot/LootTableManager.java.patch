--- before/net/minecraft/world/storage/loot/LootTableManager.java
+++ after/net/minecraft/world/storage/loot/LootTableManager.java
@@ -25,16 +25,8 @@
 public class LootTableManager
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Gson GSON_INSTANCE = new GsonBuilder()
-        .registerTypeAdapter(RandomValueRange.class, new RandomValueRange.Serializer())
-        .registerTypeAdapter(LootPool.class, new LootPool.Serializer())
-        .registerTypeAdapter(LootTable.class, new LootTable.Serializer())
-        .registerTypeHierarchyAdapter(LootEntry.class, new LootEntry.Serializer())
-        .registerTypeHierarchyAdapter(LootFunction.class, new LootFunctionManager.Serializer())
-        .registerTypeHierarchyAdapter(LootCondition.class, new LootConditionManager.Serializer())
-        .registerTypeHierarchyAdapter(LootContext.EntityTarget.class, new LootContext.EntityTarget.Serializer())
-        .create();
-    private final LoadingCache<ResourceLocation, LootTable> registeredLootTables = CacheBuilder.newBuilder().build(new LootTableManager.Loader());
+    private static final Gson GSON_INSTANCE = (new GsonBuilder()).registerTypeAdapter(RandomValueRange.class, new RandomValueRange.Serializer()).registerTypeAdapter(LootPool.class, new LootPool.Serializer()).registerTypeAdapter(LootTable.class, new LootTable.Serializer()).registerTypeHierarchyAdapter(LootEntry.class, new LootEntry.Serializer()).registerTypeHierarchyAdapter(LootFunction.class, new LootFunctionManager.Serializer()).registerTypeHierarchyAdapter(LootCondition.class, new LootConditionManager.Serializer()).registerTypeHierarchyAdapter(LootContext.EntityTarget.class, new LootContext.EntityTarget.Serializer()).create();
+    private final LoadingCache<ResourceLocation, LootTable> registeredLootTables = CacheBuilder.newBuilder().<ResourceLocation, LootTable>build(new LootTableManager.Loader());
     private final File baseFolder;
 
     public LootTableManager(@Nullable File folder)
@@ -68,7 +60,7 @@
         {
             if (p_load_1_.getPath().contains("."))
             {
-                LootTableManager.LOGGER.debug("Invalid loot table name '{}' (can't contain periods)", p_load_1_);
+                LootTableManager.LOGGER.debug("Invalid loot table name '{}' (can't contain periods)", (Object)p_load_1_);
                 return LootTable.EMPTY_LOOT_TABLE;
             }
             else
@@ -83,7 +75,7 @@
                 if (loottable == null)
                 {
                     loottable = LootTable.EMPTY_LOOT_TABLE;
-                    LootTableManager.LOGGER.warn("Couldn't find resource table {}", p_load_1_);
+                    LootTableManager.LOGGER.warn("Couldn't find resource table {}", (Object)p_load_1_);
                 }
 
                 return loottable;
@@ -119,7 +111,7 @@
 
                         try
                         {
-                            return JsonUtils.gsonDeserialize(LootTableManager.GSON_INSTANCE, s, LootTable.class);
+                            return net.minecraftforge.common.ForgeHooks.loadLootTable(LootTableManager.GSON_INSTANCE, resource, s, true, LootTableManager.this);
                         }
                         catch (IllegalArgumentException | JsonParseException jsonparseexception)
                         {
@@ -161,7 +153,7 @@
 
                 try
                 {
-                    return JsonUtils.gsonDeserialize(LootTableManager.GSON_INSTANCE, s, LootTable.class);
+                    return net.minecraftforge.common.ForgeHooks.loadLootTable(LootTableManager.GSON_INSTANCE, resource, s, false, LootTableManager.this);
                 }
                 catch (JsonParseException jsonparseexception)
                 {
