--- before/net/minecraft/world/storage/loot/LootTable.java
+++ after/net/minecraft/world/storage/loot/LootTable.java
@@ -24,16 +24,16 @@
 {
     private static final Logger field_186465_b = LogManager.getLogger();
     public static final LootTable field_186464_a = new LootTable(new LootPool[0]);
-    private final LootPool[] field_186466_c;
+    private final List<LootPool> field_186466_c;
 
     public LootTable(LootPool[] p_i46641_1_)
     {
-        this.field_186466_c = p_i46641_1_;
+        this.field_186466_c = Lists.newArrayList(p_i46641_1_);
     }
 
     public List<ItemStack> func_186462_a(Random p_186462_1_, LootContext p_186462_2_)
     {
-        List<ItemStack> list = Lists.newArrayList();
+        List<ItemStack> list = Lists.<ItemStack>newArrayList();
 
         if (p_186462_2_.func_186496_a(this))
         {
@@ -68,18 +68,18 @@
 
             if (itemstack.func_190926_b())
             {
-                p_186460_1_.func_70299_a(list1.remove(list1.size() - 1), ItemStack.field_190927_a);
+                p_186460_1_.func_70299_a(((Integer)list1.remove(list1.size() - 1)).intValue(), ItemStack.field_190927_a);
             }
             else
             {
-                p_186460_1_.func_70299_a(list1.remove(list1.size() - 1), itemstack);
+                p_186460_1_.func_70299_a(((Integer)list1.remove(list1.size() - 1)).intValue(), itemstack);
             }
         }
     }
 
     private void func_186463_a(List<ItemStack> p_186463_1_, int p_186463_2_, Random p_186463_3_)
     {
-        List<ItemStack> list = Lists.newArrayList();
+        List<ItemStack> list = Lists.<ItemStack>newArrayList();
         Iterator<ItemStack> iterator = p_186463_1_.iterator();
 
         while (iterator.hasNext())
@@ -97,7 +97,7 @@
             }
         }
 
-        p_186463_2_ -= p_186463_1_.size();
+        p_186463_2_ = p_186463_2_ - p_186463_1_.size();
 
         while (p_186463_2_ > 0 && !list.isEmpty())
         {
@@ -130,19 +130,71 @@
 
     private List<Integer> func_186459_a(IInventory p_186459_1_, Random p_186459_2_)
     {
-        List<Integer> list = Lists.newArrayList();
+        List<Integer> list = Lists.<Integer>newArrayList();
 
         for (int i = 0; i < p_186459_1_.func_70302_i_(); ++i)
         {
             if (p_186459_1_.func_70301_a(i).func_190926_b())
             {
-                list.add(i);
+                list.add(Integer.valueOf(i));
             }
         }
 
         Collections.shuffle(list, p_186459_2_);
         return list;
     }
+
+    //======================== FORGE START =============================================
+    private boolean isFrozen = false;
+    public void freeze()
+    {
+        this.isFrozen = true;
+        for (LootPool pool : this.field_186466_c)
+            pool.freeze();
+    }
+    public boolean isFrozen(){ return this.isFrozen; }
+    private void checkFrozen()
+    {
+        if (this.isFrozen())
+            throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+    }
+
+    public LootPool getPool(String name)
+    {
+        for (LootPool pool : this.field_186466_c)
+        {
+            if (name.equals(pool.getName()))
+                return pool;
+        }
+        return null;
+    }
+
+    public LootPool removePool(String name)
+    {
+        checkFrozen();
+        for (LootPool pool : this.field_186466_c)
+        {
+            if (name.equals(pool.getName()))
+            {
+                this.field_186466_c.remove(pool);
+                return pool;
+            }
+        }
+
+        return null;
+    }
+
+    public void addPool(LootPool pool)
+    {
+        checkFrozen();
+        for (LootPool p : this.field_186466_c)
+        {
+            if (p == pool || p.getName().equals(pool.getName()))
+                throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+        }
+        this.field_186466_c.add(pool);
+    }
+    //======================== FORGE END ===============================================
 
     public static class Serializer implements JsonDeserializer<LootTable>, JsonSerializer<LootTable>
         {
