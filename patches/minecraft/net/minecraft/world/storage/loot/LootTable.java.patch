--- before/net/minecraft/world/storage/loot/LootTable.java
+++ after/net/minecraft/world/storage/loot/LootTable.java
@@ -24,16 +24,16 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     public static final LootTable EMPTY_LOOT_TABLE = new LootTable(new LootPool[0]);
-    private final LootPool[] pools;
+    private final List<LootPool> pools;
 
     public LootTable(LootPool[] poolsIn)
     {
-        this.pools = poolsIn;
+        this.pools = Lists.newArrayList(poolsIn);
     }
 
     public List<ItemStack> generateLootForPools(Random rand, LootContext context)
     {
-        List<ItemStack> list = Lists.newArrayList();
+        List<ItemStack> list = Lists.<ItemStack>newArrayList();
 
         if (context.addLootTable(this))
         {
@@ -68,18 +68,18 @@
 
             if (itemstack.isEmpty())
             {
-                inventory.setInventorySlotContents(list1.remove(list1.size() - 1), ItemStack.EMPTY);
+                inventory.setInventorySlotContents(((Integer)list1.remove(list1.size() - 1)).intValue(), ItemStack.EMPTY);
             }
             else
             {
-                inventory.setInventorySlotContents(list1.remove(list1.size() - 1), itemstack);
+                inventory.setInventorySlotContents(((Integer)list1.remove(list1.size() - 1)).intValue(), itemstack);
             }
         }
     }
 
     private void shuffleItems(List<ItemStack> stacks, int p_186463_2_, Random rand)
     {
-        List<ItemStack> list = Lists.newArrayList();
+        List<ItemStack> list = Lists.<ItemStack>newArrayList();
         Iterator<ItemStack> iterator = stacks.iterator();
 
         while (iterator.hasNext())
@@ -97,7 +97,7 @@
             }
         }
 
-        p_186463_2_ -= stacks.size();
+        p_186463_2_ = p_186463_2_ - stacks.size();
 
         while (p_186463_2_ > 0 && !list.isEmpty())
         {
@@ -130,13 +130,13 @@
 
     private List<Integer> getEmptySlotsRandomized(IInventory inventory, Random rand)
     {
-        List<Integer> list = Lists.newArrayList();
+        List<Integer> list = Lists.<Integer>newArrayList();
 
-        for (int i = 0; i < inventory.getSizeInventory(); i++)
+        for (int i = 0; i < inventory.getSizeInventory(); ++i)
         {
             if (inventory.getStackInSlot(i).isEmpty())
             {
-                list.add(i);
+                list.add(Integer.valueOf(i));
             }
         }
 
@@ -144,12 +144,64 @@
         return list;
     }
 
+    //======================== FORGE START =============================================
+    private boolean isFrozen = false;
+    public void freeze()
+    {
+        this.isFrozen = true;
+        for (LootPool pool : this.pools)
+            pool.freeze();
+    }
+    public boolean isFrozen(){ return this.isFrozen; }
+    private void checkFrozen()
+    {
+        if (this.isFrozen())
+            throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+    }
+
+    public LootPool getPool(String name)
+    {
+        for (LootPool pool : this.pools)
+        {
+            if (name.equals(pool.getName()))
+                return pool;
+        }
+        return null;
+    }
+
+    public LootPool removePool(String name)
+    {
+        checkFrozen();
+        for (LootPool pool : this.pools)
+        {
+            if (name.equals(pool.getName()))
+            {
+                this.pools.remove(pool);
+                return pool;
+            }
+        }
+
+        return null;
+    }
+
+    public void addPool(LootPool pool)
+    {
+        checkFrozen();
+        for (LootPool p : this.pools)
+        {
+            if (p == pool || p.getName().equals(pool.getName()))
+                throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+        }
+        this.pools.add(pool);
+    }
+    //======================== FORGE END ===============================================
+
     public static class Serializer implements JsonDeserializer<LootTable>, JsonSerializer<LootTable>
         {
             public LootTable deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException
             {
                 JsonObject jsonobject = JsonUtils.getJsonObject(p_deserialize_1_, "loot table");
-                LootPool[] alootpool = JsonUtils.deserializeClass(jsonobject, "pools", new LootPool[0], p_deserialize_3_, LootPool[].class);
+                LootPool[] alootpool = (LootPool[])JsonUtils.deserializeClass(jsonobject, "pools", new LootPool[0], p_deserialize_3_, LootPool[].class);
                 return new LootTable(alootpool);
             }
 
