--- before/net/minecraft/world/storage/loot/LootEntryItem.java
+++ after/net/minecraft/world/storage/loot/LootEntryItem.java
@@ -18,14 +18,13 @@
     protected final Item item;
     protected final LootFunction[] functions;
 
-    public LootEntryItem(Item itemIn, int weightIn, int qualityIn, LootFunction[] functionsIn, LootCondition[] conditionsIn)
+    public LootEntryItem(Item itemIn, int weightIn, int qualityIn, LootFunction[] functionsIn, LootCondition[] conditionsIn, String entryName)
     {
-        super(weightIn, qualityIn, conditionsIn);
+        super(weightIn, qualityIn, conditionsIn, entryName);
         this.item = itemIn;
         this.functions = functionsIn;
     }
 
-    @Override
     public void addLoot(Collection<ItemStack> stacks, Random rand, LootContext context)
     {
         ItemStack itemstack = new ItemStack(this.item);
@@ -40,7 +39,7 @@
 
         if (!itemstack.isEmpty())
         {
-            if (itemstack.getCount() < this.item.getItemStackLimit())
+            if (itemstack.getCount() < this.item.getItemStackLimit(itemstack))
             {
                 stacks.add(itemstack);
             }
@@ -59,7 +58,6 @@
         }
     }
 
-    @Override
     protected void serialize(JsonObject json, JsonSerializationContext context)
     {
         if (this.functions != null && this.functions.length > 0)
@@ -79,22 +77,21 @@
         }
     }
 
-    public static LootEntryItem deserialize(
-            JsonObject object, JsonDeserializationContext deserializationContext, int weightIn, int qualityIn, LootCondition[] conditionsIn
-        )
+    public static LootEntryItem deserialize(JsonObject object, JsonDeserializationContext deserializationContext, int weightIn, int qualityIn, LootCondition[] conditionsIn)
     {
+        String name = net.minecraftforge.common.ForgeHooks.readLootEntryName(object, "item");
         Item item = JsonUtils.getItem(object, "name");
         LootFunction[] alootfunction;
 
         if (object.has("functions"))
         {
-            alootfunction = JsonUtils.deserializeClass(object, "functions", deserializationContext, LootFunction[].class);
+            alootfunction = (LootFunction[])JsonUtils.deserializeClass(object, "functions", deserializationContext, LootFunction[].class);
         }
         else
         {
             alootfunction = new LootFunction[0];
         }
 
-        return new LootEntryItem(item, weightIn, qualityIn, alootfunction, conditionsIn);
+        return new LootEntryItem(item, weightIn, qualityIn, alootfunction, conditionsIn, name);
     }
 }
