--- before/net/minecraft/world/storage/DerivedWorldInfo.java
+++ after/net/minecraft/world/storage/DerivedWorldInfo.java
@@ -20,255 +20,223 @@
         this.delegate = worldInfoIn;
     }
 
-    @Override
     public NBTTagCompound cloneNBTCompound(@Nullable NBTTagCompound nbt)
     {
         return this.delegate.cloneNBTCompound(nbt);
     }
 
-    @Override
     public long getSeed()
     {
         return this.delegate.getSeed();
     }
 
-    @Override
     public int getSpawnX()
     {
         return this.delegate.getSpawnX();
     }
 
-    @Override
     public int getSpawnY()
     {
         return this.delegate.getSpawnY();
     }
 
-    @Override
     public int getSpawnZ()
     {
         return this.delegate.getSpawnZ();
     }
 
-    @Override
     public long getWorldTotalTime()
     {
         return this.delegate.getWorldTotalTime();
     }
 
-    @Override
     public long getWorldTime()
     {
         return this.delegate.getWorldTime();
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public long getSizeOnDisk()
     {
         return this.delegate.getSizeOnDisk();
     }
 
-    @Override
     public NBTTagCompound getPlayerNBTTagCompound()
     {
         return this.delegate.getPlayerNBTTagCompound();
     }
 
-    @Override
     public String getWorldName()
     {
         return this.delegate.getWorldName();
     }
 
-    @Override
     public int getSaveVersion()
     {
         return this.delegate.getSaveVersion();
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public long getLastTimePlayed()
     {
         return this.delegate.getLastTimePlayed();
     }
 
-    @Override
     public boolean isThundering()
     {
         return this.delegate.isThundering();
     }
 
-    @Override
     public int getThunderTime()
     {
         return this.delegate.getThunderTime();
     }
 
-    @Override
     public boolean isRaining()
     {
         return this.delegate.isRaining();
     }
 
-    @Override
     public int getRainTime()
     {
         return this.delegate.getRainTime();
     }
 
-    @Override
     public GameType getGameType()
     {
         return this.delegate.getGameType();
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void setSpawnX(int x)
     {
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void setSpawnY(int y)
     {
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
-    public void setSpawnZ(int z)
-    {
-    }
-
-    @Override
     public void setWorldTotalTime(long time)
     {
     }
 
-    @Override
+    @SideOnly(Side.CLIENT)
+    public void setSpawnZ(int z)
+    {
+    }
+
     public void setWorldTime(long time)
     {
     }
 
-    @Override
     public void setSpawn(BlockPos spawnPoint)
     {
     }
 
-    @Override
     public void setWorldName(String worldName)
     {
     }
 
-    @Override
     public void setSaveVersion(int version)
     {
     }
 
-    @Override
     public void setThundering(boolean thunderingIn)
     {
     }
 
-    @Override
     public void setThunderTime(int time)
     {
     }
 
-    @Override
     public void setRaining(boolean isRaining)
     {
     }
 
-    @Override
     public void setRainTime(int time)
     {
     }
 
-    @Override
     public boolean isMapFeaturesEnabled()
     {
         return this.delegate.isMapFeaturesEnabled();
     }
 
-    @Override
     public boolean isHardcoreModeEnabled()
     {
         return this.delegate.isHardcoreModeEnabled();
     }
 
-    @Override
     public WorldType getTerrainType()
     {
         return this.delegate.getTerrainType();
     }
 
-    @Override
     public void setTerrainType(WorldType type)
     {
     }
 
-    @Override
     public boolean areCommandsAllowed()
     {
         return this.delegate.areCommandsAllowed();
     }
 
-    @Override
     public void setAllowCommands(boolean allow)
     {
     }
 
-    @Override
     public boolean isInitialized()
     {
         return this.delegate.isInitialized();
     }
 
-    @Override
     public void setServerInitialized(boolean initializedIn)
     {
     }
 
-    @Override
     public GameRules getGameRulesInstance()
     {
         return this.delegate.getGameRulesInstance();
     }
 
-    @Override
     public EnumDifficulty getDifficulty()
     {
         return this.delegate.getDifficulty();
     }
 
-    @Override
     public void setDifficulty(EnumDifficulty newDifficulty)
     {
     }
 
-    @Override
     public boolean isDifficultyLocked()
     {
         return this.delegate.isDifficultyLocked();
     }
 
-    @Override
     public void setDifficultyLocked(boolean locked)
     {
     }
 
-    @Override
+    @Deprecated
     public void setDimensionData(DimensionType dimensionIn, NBTTagCompound compound)
     {
         this.delegate.setDimensionData(dimensionIn, compound);
     }
 
-    @Override
+    @Deprecated
     public NBTTagCompound getDimensionData(DimensionType dimensionIn)
     {
         return this.delegate.getDimensionData(dimensionIn);
+    }
+
+    public void setDimensionData(int dimensionID, NBTTagCompound compound)
+    {
+        this.delegate.setDimensionData(dimensionID, compound);
+    }
+
+    public NBTTagCompound getDimensionData(int dimensionID)
+    {
+        return this.delegate.getDimensionData(dimensionID);
     }
 }
