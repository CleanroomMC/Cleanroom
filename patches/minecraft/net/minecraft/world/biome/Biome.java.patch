--- before/net/minecraft/world/biome/Biome.java
+++ after/net/minecraft/world/biome/Biome.java
@@ -50,7 +50,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Biome
+public abstract class Biome extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<Biome>
 {
     private static final Logger LOGGER = LogManager.getLogger();
     protected static final IBlockState STONE = Blocks.STONE.getDefaultState();
@@ -61,14 +61,14 @@
     protected static final IBlockState SANDSTONE = Blocks.SANDSTONE.getDefaultState();
     protected static final IBlockState ICE = Blocks.ICE.getDefaultState();
     protected static final IBlockState WATER = Blocks.WATER.getDefaultState();
-    public static final ObjectIntIdentityMap<Biome> MUTATION_TO_BASE_ID_MAP = new ObjectIntIdentityMap<>();
+    public static final ObjectIntIdentityMap<Biome> MUTATION_TO_BASE_ID_MAP = new ObjectIntIdentityMap<Biome>();
     protected static final NoiseGeneratorPerlin TEMPERATURE_NOISE = new NoiseGeneratorPerlin(new Random(1234L), 1);
     protected static final NoiseGeneratorPerlin GRASS_COLOR_NOISE = new NoiseGeneratorPerlin(new Random(2345L), 1);
     protected static final WorldGenDoublePlant DOUBLE_PLANT_GENERATOR = new WorldGenDoublePlant();
     protected static final WorldGenTrees TREE_FEATURE = new WorldGenTrees(false);
     protected static final WorldGenBigTree BIG_TREE_FEATURE = new WorldGenBigTree(false);
     protected static final WorldGenSwamp SWAMP_FEATURE = new WorldGenSwamp();
-    public static final RegistryNamespaced<ResourceLocation, Biome> REGISTRY = new RegistryNamespaced<>();
+    public static final RegistryNamespaced<ResourceLocation, Biome> REGISTRY = net.minecraftforge.registries.GameData.getWrapper(Biome.class);
     private final String biomeName;
     private final float baseHeight;
     private final float heightVariation;
@@ -82,10 +82,12 @@
     public IBlockState topBlock = Blocks.GRASS.getDefaultState();
     public IBlockState fillerBlock = Blocks.DIRT.getDefaultState();
     public BiomeDecorator decorator;
-    protected List<Biome.SpawnListEntry> spawnableMonsterList = Lists.newArrayList();
-    protected List<Biome.SpawnListEntry> spawnableCreatureList = Lists.newArrayList();
-    protected List<Biome.SpawnListEntry> spawnableWaterCreatureList = Lists.newArrayList();
-    protected List<Biome.SpawnListEntry> spawnableCaveCreatureList = Lists.newArrayList();
+    protected List<Biome.SpawnListEntry> spawnableMonsterList = Lists.<Biome.SpawnListEntry>newArrayList();
+    protected List<Biome.SpawnListEntry> spawnableCreatureList = Lists.<Biome.SpawnListEntry>newArrayList();
+    protected List<Biome.SpawnListEntry> spawnableWaterCreatureList = Lists.<Biome.SpawnListEntry>newArrayList();
+    protected List<Biome.SpawnListEntry> spawnableCaveCreatureList = Lists.<Biome.SpawnListEntry>newArrayList();
+    // Forge: Stores the spawnable lists for non-vanilla EnumCreatureTypes. Can't be an EnumMap as that doesn't handle new enum values being added after it's created.
+    protected java.util.Map<EnumCreatureType, List<Biome.SpawnListEntry>> modSpawnableLists = com.google.common.collect.Maps.newHashMap();
 
     public static int getIdForBiome(Biome biome)
     {
@@ -130,11 +132,12 @@
         this.spawnableMonsterList.add(new Biome.SpawnListEntry(EntityWitch.class, 5, 1, 1));
         this.spawnableWaterCreatureList.add(new Biome.SpawnListEntry(EntitySquid.class, 10, 4, 4));
         this.spawnableCaveCreatureList.add(new Biome.SpawnListEntry(EntityBat.class, 10, 8, 8));
+        this.addDefaultFlowers();
     }
 
     public BiomeDecorator createBiomeDecorator()
     {
-        return new BiomeDecorator();
+        return getModdedBiomeDecorator(new BiomeDecorator());
     }
 
     public boolean isMutation()
@@ -160,7 +163,7 @@
     @SideOnly(Side.CLIENT)
     public int getSkyColorByTemp(float currentTemperature)
     {
-        currentTemperature /= 3.0F;
+        currentTemperature = currentTemperature / 3.0F;
         currentTemperature = MathHelper.clamp(currentTemperature, -1.0F, 1.0F);
         return MathHelper.hsvToRGB(0.62222224F - currentTemperature * 0.05F, 0.5F + currentTemperature * 0.1F, 1.0F);
     }
@@ -178,7 +181,9 @@
             case AMBIENT:
                 return this.spawnableCaveCreatureList;
             default:
-                return Collections.emptyList();
+                // Forge: Return a non-empty list for non-vanilla EnumCreatureTypes
+                if (!this.modSpawnableLists.containsKey(creatureType)) this.modSpawnableLists.put(creatureType, Lists.<Biome.SpawnListEntry>newArrayList());
+                return this.modSpawnableLists.get(creatureType);
         }
     }
 
@@ -206,9 +211,7 @@
     {
         if (pos.getY() > 64)
         {
-            float f = (float)(
-                          TEMPERATURE_NOISE.getValue((double)((float)pos.getX() / 8.0F), (double)((float)pos.getZ() / 8.0F)) * 4.0
-                      );
+            float f = (float)(TEMPERATURE_NOISE.getValue((double)((float)pos.getX() / 8.0F), (double)((float)pos.getZ() / 8.0F)) * 4.0D);
             return this.getDefaultTemperature() - (f + (float)pos.getY() - 64.0F) * 0.05F / 30.0F;
         }
         else
@@ -222,39 +225,31 @@
         this.decorator.decorate(worldIn, rand, this, pos);
     }
 
-    @SideOnly(Side.CLIENT)
-    public int getGrassColorAtPos(BlockPos pos)
-    {
-        double d0 = (double)MathHelper.clamp(this.getTemperature(pos), 0.0F, 1.0F);
-        double d1 = (double)MathHelper.clamp(this.getRainfall(), 0.0F, 1.0F);
-        return ColorizerGrass.getGrassColor(d0, d1);
-    }
-
-    @SideOnly(Side.CLIENT)
-    public int getFoliageColorAtPos(BlockPos pos)
-    {
-        double d0 = (double)MathHelper.clamp(this.getTemperature(pos), 0.0F, 1.0F);
-        double d1 = (double)MathHelper.clamp(this.getRainfall(), 0.0F, 1.0F);
-        return ColorizerFoliage.getFoliageColor(d0, d1);
-    }
-
     public void genTerrainBlocks(World worldIn, Random rand, ChunkPrimer chunkPrimerIn, int x, int z, double noiseVal)
     {
         this.generateBiomeTerrain(worldIn, rand, chunkPrimerIn, x, z, noiseVal);
     }
 
+    @SideOnly(Side.CLIENT)
+    public int getGrassColorAtPos(BlockPos pos)
+    {
+        double d0 = (double)MathHelper.clamp(this.getTemperature(pos), 0.0F, 1.0F);
+        double d1 = (double)MathHelper.clamp(this.getRainfall(), 0.0F, 1.0F);
+        return getModdedBiomeGrassColor(ColorizerGrass.getGrassColor(d0, d1));
+    }
+
     public final void generateBiomeTerrain(World worldIn, Random rand, ChunkPrimer chunkPrimerIn, int x, int z, double noiseVal)
     {
         int i = worldIn.getSeaLevel();
         IBlockState iblockstate = this.topBlock;
         IBlockState iblockstate1 = this.fillerBlock;
         int j = -1;
-        int k = (int)(noiseVal / 3.0 + 3.0 + rand.nextDouble() * 0.25);
+        int k = (int)(noiseVal / 3.0D + 3.0D + rand.nextDouble() * 0.25D);
         int l = x & 15;
         int i1 = z & 15;
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-        for (int j1 = 255; j1 >= 0; j1--)
+        for (int j1 = 255; j1 >= 0; --j1)
         {
             if (j1 <= rand.nextInt(5))
             {
@@ -314,7 +309,7 @@
                     }
                     else if (j > 0)
                     {
-                        j--;
+                        --j;
                         chunkPrimerIn.setBlockState(i1, j1, l, iblockstate1);
 
                         if (j == 0 && iblockstate1.getBlock() == Blocks.SAND && k > 1)
@@ -328,27 +323,35 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public int getFoliageColorAtPos(BlockPos pos)
+    {
+        double d0 = (double)MathHelper.clamp(this.getTemperature(pos), 0.0F, 1.0F);
+        double d1 = (double)MathHelper.clamp(this.getRainfall(), 0.0F, 1.0F);
+        return getModdedBiomeFoliageColor(ColorizerFoliage.getFoliageColor(d0, d1));
+    }
+
     public Class <? extends Biome > getBiomeClass()
     {
-        return (Class <? extends Biome >)this.getClass();
+        return this.getClass();
     }
 
     public Biome.TempCategory getTempCategory()
     {
-        if ((double)this.getDefaultTemperature() < 0.2)
+        if ((double)this.getDefaultTemperature() < 0.2D)
         {
             return Biome.TempCategory.COLD;
         }
         else
         {
-            return (double)this.getDefaultTemperature() < 1.0 ? Biome.TempCategory.MEDIUM : Biome.TempCategory.WARM;
+            return (double)this.getDefaultTemperature() < 1.0D ? Biome.TempCategory.MEDIUM : Biome.TempCategory.WARM;
         }
     }
 
     @Nullable
     public static Biome getBiome(int id)
     {
-        return getBiome(id, null);
+        return getBiome(id, (Biome)null);
     }
 
     public static Biome getBiome(int biomeId, Biome fallback)
@@ -391,7 +394,7 @@
     @SideOnly(Side.CLIENT)
     public final int getWaterColor()
     {
-        return this.waterColor;
+        return getWaterColorMultiplier();
     }
 
     public final boolean isSnowyBiome()
@@ -399,477 +402,148 @@
         return this.enableSnow;
     }
 
+    /* ========================================= FORGE START ======================================*/
+    protected List<FlowerEntry> flowers = new java.util.ArrayList<FlowerEntry>();
+
+    public BiomeDecorator getModdedBiomeDecorator(BiomeDecorator original)
+    {
+        return new net.minecraftforge.event.terraingen.DeferredBiomeDecorator(original);
+    }
+
+    public int getWaterColorMultiplier()
+    {
+        net.minecraftforge.event.terraingen.BiomeEvent.GetWaterColor event = new net.minecraftforge.event.terraingen.BiomeEvent.GetWaterColor(this, waterColor);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        return event.getNewColor();
+    }
+
+    public int getModdedBiomeGrassColor(int original)
+    {
+        net.minecraftforge.event.terraingen.BiomeEvent.GetGrassColor event = new net.minecraftforge.event.terraingen.BiomeEvent.GetGrassColor(this, original);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        return event.getNewColor();
+    }
+
+    public int getModdedBiomeFoliageColor(int original)
+    {
+        net.minecraftforge.event.terraingen.BiomeEvent.GetFoliageColor event = new net.minecraftforge.event.terraingen.BiomeEvent.GetFoliageColor(this, original);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        return event.getNewColor();
+    }
+
+    /**
+     * Weighted random holder class used to hold possible flowers
+     * that can spawn in this biome when bonemeal is used on grass.
+     */
+    public static class FlowerEntry extends WeightedRandom.Item
+    {
+        public final net.minecraft.block.state.IBlockState state;
+        public FlowerEntry(net.minecraft.block.state.IBlockState state, int weight)
+        {
+            super(weight);
+            this.state = state;
+        }
+    }
+
+    /**
+     * Adds the default flowers, as of 1.7, it is 2 yellow, and 1 red. I chose 10 to allow some wiggle room in the numbers.
+     */
+    public void addDefaultFlowers()
+    {
+        addFlower(Blocks.YELLOW_FLOWER.getDefaultState().withProperty(Blocks.YELLOW_FLOWER.getTypeProperty(), BlockFlower.EnumFlowerType.DANDELION), 20);
+        addFlower(Blocks.RED_FLOWER.getDefaultState().withProperty(Blocks.RED_FLOWER.getTypeProperty(), BlockFlower.EnumFlowerType.POPPY), 10);
+    }
+
+    /** Register a new plant to be planted when bonemeal is used on grass.
+     * @param state The block to place.
+     * @param weight The weight of the plant, where red flowers are
+     *               10 and yellow flowers are 20.
+     */
+    public void addFlower(IBlockState state, int weight)
+    {
+        this.flowers.add(new FlowerEntry(state, weight));
+    }
+
+    public void plantFlower(World world, Random rand, BlockPos pos)
+    {
+        if (flowers.isEmpty()) return;
+        FlowerEntry flower = (FlowerEntry)WeightedRandom.getRandomItem(rand, flowers);
+        if (flower == null || flower.state == null ||
+            (flower.state.getBlock() instanceof net.minecraft.block.BlockBush &&
+              !((net.minecraft.block.BlockBush)flower.state.getBlock()).canBlockStay(world, pos, flower.state)))
+        {
+            return;
+        }
+
+        world.setBlockState(pos, flower.state, 3);
+    }
+
+    /* ========================================= FORGE END ======================================*/
+
     public static void registerBiomes()
     {
-        registerBiome(0, "ocean", new BiomeOcean(new Biome.BiomeProperties("Ocean").setBaseHeight(-1.0F).setHeightVariation(0.1F)));
-        registerBiome(
-            1,
-            "plains",
-            new BiomePlains(false, new Biome.BiomeProperties("Plains").setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(0.8F).setRainfall(0.4F))
-        );
-        registerBiome(
-            2,
-            "desert",
-            new BiomeDesert(new Biome.BiomeProperties("Desert").setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled())
-        );
-        registerBiome(
-            3,
-            "extreme_hills",
-            new BiomeHills(
-                BiomeHills.Type.NORMAL, new Biome.BiomeProperties("Extreme Hills").setBaseHeight(1.0F).setHeightVariation(0.5F).setTemperature(0.2F).setRainfall(0.3F)
-            )
-        );
-        registerBiome(4, "forest", new BiomeForest(BiomeForest.Type.NORMAL, new Biome.BiomeProperties("Forest").setTemperature(0.7F).setRainfall(0.8F)));
-        registerBiome(
-            5,
-            "taiga",
-            new BiomeTaiga(
-                BiomeTaiga.Type.NORMAL, new Biome.BiomeProperties("Taiga").setBaseHeight(0.2F).setHeightVariation(0.2F).setTemperature(0.25F).setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            6,
-            "swampland",
-            new BiomeSwamp(
-                new Biome.BiomeProperties("Swampland").setBaseHeight(-0.2F).setHeightVariation(0.1F).setTemperature(0.8F).setRainfall(0.9F).setWaterColor(14745518)
-            )
-        );
-        registerBiome(7, "river", new BiomeRiver(new Biome.BiomeProperties("River").setBaseHeight(-0.5F).setHeightVariation(0.0F)));
-        registerBiome(8, "hell", new BiomeHell(new Biome.BiomeProperties("Hell").setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
-        registerBiome(9, "sky", new BiomeEnd(new Biome.BiomeProperties("The End").setRainDisabled()));
-        registerBiome(
-            10,
-            "frozen_ocean",
-            new BiomeOcean(
-                new Biome.BiomeProperties("FrozenOcean").setBaseHeight(-1.0F).setHeightVariation(0.1F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()
-            )
-        );
-        registerBiome(
-            11,
-            "frozen_river",
-            new BiomeRiver(
-                new Biome.BiomeProperties("FrozenRiver").setBaseHeight(-0.5F).setHeightVariation(0.0F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()
-            )
-        );
-        registerBiome(
-            12,
-            "ice_flats",
-            new BiomeSnow(
-                false, new Biome.BiomeProperties("Ice Plains").setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()
-            )
-        );
-        registerBiome(
-            13,
-            "ice_mountains",
-            new BiomeSnow(
-                false, new Biome.BiomeProperties("Ice Mountains").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()
-            )
-        );
-        registerBiome(
-            14,
-            "mushroom_island",
-            new BiomeMushroomIsland(new Biome.BiomeProperties("MushroomIsland").setBaseHeight(0.2F).setHeightVariation(0.3F).setTemperature(0.9F).setRainfall(1.0F))
-        );
-        registerBiome(
-            15,
-            "mushroom_island_shore",
-            new BiomeMushroomIsland(
-                new Biome.BiomeProperties("MushroomIslandShore").setBaseHeight(0.0F).setHeightVariation(0.025F).setTemperature(0.9F).setRainfall(1.0F)
-            )
-        );
-        registerBiome(
-            16, "beaches", new BiomeBeach(new Biome.BiomeProperties("Beach").setBaseHeight(0.0F).setHeightVariation(0.025F).setTemperature(0.8F).setRainfall(0.4F))
-        );
-        registerBiome(
-            17,
-            "desert_hills",
-            new BiomeDesert(
-                new Biome.BiomeProperties("DesertHills").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()
-            )
-        );
-        registerBiome(
-            18,
-            "forest_hills",
-            new BiomeForest(
-                BiomeForest.Type.NORMAL, new Biome.BiomeProperties("ForestHills").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.7F).setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            19,
-            "taiga_hills",
-            new BiomeTaiga(
-                BiomeTaiga.Type.NORMAL, new Biome.BiomeProperties("TaigaHills").setTemperature(0.25F).setRainfall(0.8F).setBaseHeight(0.45F).setHeightVariation(0.3F)
-            )
-        );
-        registerBiome(
-            20,
-            "smaller_extreme_hills",
-            new BiomeHills(
-                BiomeHills.Type.EXTRA_TREES,
-                new Biome.BiomeProperties("Extreme Hills Edge").setBaseHeight(0.8F).setHeightVariation(0.3F).setTemperature(0.2F).setRainfall(0.3F)
-            )
-        );
-        registerBiome(21, "jungle", new BiomeJungle(false, new Biome.BiomeProperties("Jungle").setTemperature(0.95F).setRainfall(0.9F)));
-        registerBiome(
-            22,
-            "jungle_hills",
-            new BiomeJungle(false, new Biome.BiomeProperties("JungleHills").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.95F).setRainfall(0.9F))
-        );
-        registerBiome(23, "jungle_edge", new BiomeJungle(true, new Biome.BiomeProperties("JungleEdge").setTemperature(0.95F).setRainfall(0.8F)));
-        registerBiome(24, "deep_ocean", new BiomeOcean(new Biome.BiomeProperties("Deep Ocean").setBaseHeight(-1.8F).setHeightVariation(0.1F)));
-        registerBiome(
-            25,
-            "stone_beach",
-            new BiomeStoneBeach(new Biome.BiomeProperties("Stone Beach").setBaseHeight(0.1F).setHeightVariation(0.8F).setTemperature(0.2F).setRainfall(0.3F))
-        );
-        registerBiome(
-            26,
-            "cold_beach",
-            new BiomeBeach(
-                new Biome.BiomeProperties("Cold Beach").setBaseHeight(0.0F).setHeightVariation(0.025F).setTemperature(0.05F).setRainfall(0.3F).setSnowEnabled()
-            )
-        );
-        registerBiome(
-            27, "birch_forest", new BiomeForest(BiomeForest.Type.BIRCH, new Biome.BiomeProperties("Birch Forest").setTemperature(0.6F).setRainfall(0.6F))
-        );
-        registerBiome(
-            28,
-            "birch_forest_hills",
-            new BiomeForest(
-                BiomeForest.Type.BIRCH,
-                new Biome.BiomeProperties("Birch Forest Hills").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.6F).setRainfall(0.6F)
-            )
-        );
-        registerBiome(
-            29, "roofed_forest", new BiomeForest(BiomeForest.Type.ROOFED, new Biome.BiomeProperties("Roofed Forest").setTemperature(0.7F).setRainfall(0.8F))
-        );
-        registerBiome(
-            30,
-            "taiga_cold",
-            new BiomeTaiga(
-                BiomeTaiga.Type.NORMAL,
-                new Biome.BiomeProperties("Cold Taiga").setBaseHeight(0.2F).setHeightVariation(0.2F).setTemperature(-0.5F).setRainfall(0.4F).setSnowEnabled()
-            )
-        );
-        registerBiome(
-            31,
-            "taiga_cold_hills",
-            new BiomeTaiga(
-                BiomeTaiga.Type.NORMAL,
-                new Biome.BiomeProperties("Cold Taiga Hills").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(-0.5F).setRainfall(0.4F).setSnowEnabled()
-            )
-        );
-        registerBiome(
-            32,
-            "redwood_taiga",
-            new BiomeTaiga(
-                BiomeTaiga.Type.MEGA, new Biome.BiomeProperties("Mega Taiga").setTemperature(0.3F).setRainfall(0.8F).setBaseHeight(0.2F).setHeightVariation(0.2F)
-            )
-        );
-        registerBiome(
-            33,
-            "redwood_taiga_hills",
-            new BiomeTaiga(
-                BiomeTaiga.Type.MEGA,
-                new Biome.BiomeProperties("Mega Taiga Hills").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.3F).setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            34,
-            "extreme_hills_with_trees",
-            new BiomeHills(
-                BiomeHills.Type.EXTRA_TREES,
-                new Biome.BiomeProperties("Extreme Hills+").setBaseHeight(1.0F).setHeightVariation(0.5F).setTemperature(0.2F).setRainfall(0.3F)
-            )
-        );
-        registerBiome(
-            35,
-            "savanna",
-            new BiomeSavanna(
-                new Biome.BiomeProperties("Savanna").setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(1.2F).setRainfall(0.0F).setRainDisabled()
-            )
-        );
-        registerBiome(
-            36,
-            "savanna_rock",
-            new BiomeSavanna(
-                new Biome.BiomeProperties("Savanna Plateau").setBaseHeight(1.5F).setHeightVariation(0.025F).setTemperature(1.0F).setRainfall(0.0F).setRainDisabled()
-            )
-        );
-        registerBiome(37, "mesa", new BiomeMesa(false, false, new Biome.BiomeProperties("Mesa").setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
-        registerBiome(
-            38,
-            "mesa_rock",
-            new BiomeMesa(
-                false,
-                true,
-                new Biome.BiomeProperties("Mesa Plateau F").setBaseHeight(1.5F).setHeightVariation(0.025F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()
-            )
-        );
-        registerBiome(
-            39,
-            "mesa_clear_rock",
-            new BiomeMesa(
-                false,
-                false,
-                new Biome.BiomeProperties("Mesa Plateau").setBaseHeight(1.5F).setHeightVariation(0.025F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()
-            )
-        );
-        registerBiome(127, "void", new BiomeVoid(new Biome.BiomeProperties("The Void").setRainDisabled()));
-        registerBiome(
-            129,
-            "mutated_plains",
-            new BiomePlains(
-                true,
-                new Biome.BiomeProperties("Sunflower Plains")
-                .setBaseBiome("plains")
-                .setBaseHeight(0.125F)
-                .setHeightVariation(0.05F)
-                .setTemperature(0.8F)
-                .setRainfall(0.4F)
-            )
-        );
-        registerBiome(
-            130,
-            "mutated_desert",
-            new BiomeDesert(
-                new Biome.BiomeProperties("Desert M")
-                .setBaseBiome("desert")
-                .setBaseHeight(0.225F)
-                .setHeightVariation(0.25F)
-                .setTemperature(2.0F)
-                .setRainfall(0.0F)
-                .setRainDisabled()
-            )
-        );
-        registerBiome(
-            131,
-            "mutated_extreme_hills",
-            new BiomeHills(
-                BiomeHills.Type.MUTATED,
-                new Biome.BiomeProperties("Extreme Hills M")
-                .setBaseBiome("extreme_hills")
-                .setBaseHeight(1.0F)
-                .setHeightVariation(0.5F)
-                .setTemperature(0.2F)
-                .setRainfall(0.3F)
-            )
-        );
-        registerBiome(
-            132,
-            "mutated_forest",
-            new BiomeForest(
-                BiomeForest.Type.FLOWER,
-                new Biome.BiomeProperties("Flower Forest").setBaseBiome("forest").setHeightVariation(0.4F).setTemperature(0.7F).setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            133,
-            "mutated_taiga",
-            new BiomeTaiga(
-                BiomeTaiga.Type.NORMAL,
-                new Biome.BiomeProperties("Taiga M").setBaseBiome("taiga").setBaseHeight(0.3F).setHeightVariation(0.4F).setTemperature(0.25F).setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            134,
-            "mutated_swampland",
-            new BiomeSwamp(
-                new Biome.BiomeProperties("Swampland M")
-                .setBaseBiome("swampland")
-                .setBaseHeight(-0.1F)
-                .setHeightVariation(0.3F)
-                .setTemperature(0.8F)
-                .setRainfall(0.9F)
-                .setWaterColor(14745518)
-            )
-        );
-        registerBiome(
-            140,
-            "mutated_ice_flats",
-            new BiomeSnow(
-                true,
-                new Biome.BiomeProperties("Ice Plains Spikes")
-                .setBaseBiome("ice_flats")
-                .setBaseHeight(0.425F)
-                .setHeightVariation(0.45000002F)
-                .setTemperature(0.0F)
-                .setRainfall(0.5F)
-                .setSnowEnabled()
-            )
-        );
-        registerBiome(
-            149,
-            "mutated_jungle",
-            new BiomeJungle(
-                false,
-                new Biome.BiomeProperties("Jungle M").setBaseBiome("jungle").setBaseHeight(0.2F).setHeightVariation(0.4F).setTemperature(0.95F).setRainfall(0.9F)
-            )
-        );
-        registerBiome(
-            151,
-            "mutated_jungle_edge",
-            new BiomeJungle(
-                true,
-                new Biome.BiomeProperties("JungleEdge M")
-                .setBaseBiome("jungle_edge")
-                .setBaseHeight(0.2F)
-                .setHeightVariation(0.4F)
-                .setTemperature(0.95F)
-                .setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            155,
-            "mutated_birch_forest",
-            new BiomeForestMutated(
-                new Biome.BiomeProperties("Birch Forest M")
-                .setBaseBiome("birch_forest")
-                .setBaseHeight(0.2F)
-                .setHeightVariation(0.4F)
-                .setTemperature(0.6F)
-                .setRainfall(0.6F)
-            )
-        );
-        registerBiome(
-            156,
-            "mutated_birch_forest_hills",
-            new BiomeForestMutated(
-                new Biome.BiomeProperties("Birch Forest Hills M")
-                .setBaseBiome("birch_forest_hills")
-                .setBaseHeight(0.55F)
-                .setHeightVariation(0.5F)
-                .setTemperature(0.6F)
-                .setRainfall(0.6F)
-            )
-        );
-        registerBiome(
-            157,
-            "mutated_roofed_forest",
-            new BiomeForest(
-                BiomeForest.Type.ROOFED,
-                new Biome.BiomeProperties("Roofed Forest M")
-                .setBaseBiome("roofed_forest")
-                .setBaseHeight(0.2F)
-                .setHeightVariation(0.4F)
-                .setTemperature(0.7F)
-                .setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            158,
-            "mutated_taiga_cold",
-            new BiomeTaiga(
-                BiomeTaiga.Type.NORMAL,
-                new Biome.BiomeProperties("Cold Taiga M")
-                .setBaseBiome("taiga_cold")
-                .setBaseHeight(0.3F)
-                .setHeightVariation(0.4F)
-                .setTemperature(-0.5F)
-                .setRainfall(0.4F)
-                .setSnowEnabled()
-            )
-        );
-        registerBiome(
-            160,
-            "mutated_redwood_taiga",
-            new BiomeTaiga(
-                BiomeTaiga.Type.MEGA_SPRUCE,
-                new Biome.BiomeProperties("Mega Spruce Taiga")
-                .setBaseBiome("redwood_taiga")
-                .setBaseHeight(0.2F)
-                .setHeightVariation(0.2F)
-                .setTemperature(0.25F)
-                .setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            161,
-            "mutated_redwood_taiga_hills",
-            new BiomeTaiga(
-                BiomeTaiga.Type.MEGA_SPRUCE,
-                new Biome.BiomeProperties("Redwood Taiga Hills M")
-                .setBaseBiome("redwood_taiga_hills")
-                .setBaseHeight(0.2F)
-                .setHeightVariation(0.2F)
-                .setTemperature(0.25F)
-                .setRainfall(0.8F)
-            )
-        );
-        registerBiome(
-            162,
-            "mutated_extreme_hills_with_trees",
-            new BiomeHills(
-                BiomeHills.Type.MUTATED,
-                new Biome.BiomeProperties("Extreme Hills+ M")
-                .setBaseBiome("extreme_hills_with_trees")
-                .setBaseHeight(1.0F)
-                .setHeightVariation(0.5F)
-                .setTemperature(0.2F)
-                .setRainfall(0.3F)
-            )
-        );
-        registerBiome(
-            163,
-            "mutated_savanna",
-            new BiomeSavannaMutated(
-                new Biome.BiomeProperties("Savanna M")
-                .setBaseBiome("savanna")
-                .setBaseHeight(0.3625F)
-                .setHeightVariation(1.225F)
-                .setTemperature(1.1F)
-                .setRainfall(0.0F)
-                .setRainDisabled()
-            )
-        );
-        registerBiome(
-            164,
-            "mutated_savanna_rock",
-            new BiomeSavannaMutated(
-                new Biome.BiomeProperties("Savanna Plateau M")
-                .setBaseBiome("savanna_rock")
-                .setBaseHeight(1.05F)
-                .setHeightVariation(1.2125001F)
-                .setTemperature(1.0F)
-                .setRainfall(0.0F)
-                .setRainDisabled()
-            )
-        );
-        registerBiome(
-            165,
-            "mutated_mesa",
-            new BiomeMesa(true, false, new Biome.BiomeProperties("Mesa (Bryce)").setBaseBiome("mesa").setTemperature(2.0F).setRainfall(0.0F).setRainDisabled())
-        );
-        registerBiome(
-            166,
-            "mutated_mesa_rock",
-            new BiomeMesa(
-                false,
-                true,
-                new Biome.BiomeProperties("Mesa Plateau F M")
-                .setBaseBiome("mesa_rock")
-                .setBaseHeight(0.45F)
-                .setHeightVariation(0.3F)
-                .setTemperature(2.0F)
-                .setRainfall(0.0F)
-                .setRainDisabled()
-            )
-        );
-        registerBiome(
-            167,
-            "mutated_mesa_clear_rock",
-            new BiomeMesa(
-                false,
-                false,
-                new Biome.BiomeProperties("Mesa Plateau M")
-                .setBaseBiome("mesa_clear_rock")
-                .setBaseHeight(0.45F)
-                .setHeightVariation(0.3F)
-                .setTemperature(2.0F)
-                .setRainfall(0.0F)
-                .setRainDisabled()
-            )
-        );
+        registerBiome(0, "ocean", new BiomeOcean((new Biome.BiomeProperties("Ocean")).setBaseHeight(-1.0F).setHeightVariation(0.1F)));
+        registerBiome(1, "plains", new BiomePlains(false, (new Biome.BiomeProperties("Plains")).setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(0.8F).setRainfall(0.4F)));
+        registerBiome(2, "desert", new BiomeDesert((new Biome.BiomeProperties("Desert")).setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(3, "extreme_hills", new BiomeHills(BiomeHills.Type.NORMAL, (new Biome.BiomeProperties("Extreme Hills")).setBaseHeight(1.0F).setHeightVariation(0.5F).setTemperature(0.2F).setRainfall(0.3F)));
+        registerBiome(4, "forest", new BiomeForest(BiomeForest.Type.NORMAL, (new Biome.BiomeProperties("Forest")).setTemperature(0.7F).setRainfall(0.8F)));
+        registerBiome(5, "taiga", new BiomeTaiga(BiomeTaiga.Type.NORMAL, (new Biome.BiomeProperties("Taiga")).setBaseHeight(0.2F).setHeightVariation(0.2F).setTemperature(0.25F).setRainfall(0.8F)));
+        registerBiome(6, "swampland", new BiomeSwamp((new Biome.BiomeProperties("Swampland")).setBaseHeight(-0.2F).setHeightVariation(0.1F).setTemperature(0.8F).setRainfall(0.9F).setWaterColor(14745518)));
+        registerBiome(7, "river", new BiomeRiver((new Biome.BiomeProperties("River")).setBaseHeight(-0.5F).setHeightVariation(0.0F)));
+        registerBiome(8, "hell", new BiomeHell((new Biome.BiomeProperties("Hell")).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(9, "sky", new BiomeEnd((new Biome.BiomeProperties("The End")).setRainDisabled()));
+        registerBiome(10, "frozen_ocean", new BiomeOcean((new Biome.BiomeProperties("FrozenOcean")).setBaseHeight(-1.0F).setHeightVariation(0.1F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()));
+        registerBiome(11, "frozen_river", new BiomeRiver((new Biome.BiomeProperties("FrozenRiver")).setBaseHeight(-0.5F).setHeightVariation(0.0F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()));
+        registerBiome(12, "ice_flats", new BiomeSnow(false, (new Biome.BiomeProperties("Ice Plains")).setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()));
+        registerBiome(13, "ice_mountains", new BiomeSnow(false, (new Biome.BiomeProperties("Ice Mountains")).setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()));
+        registerBiome(14, "mushroom_island", new BiomeMushroomIsland((new Biome.BiomeProperties("MushroomIsland")).setBaseHeight(0.2F).setHeightVariation(0.3F).setTemperature(0.9F).setRainfall(1.0F)));
+        registerBiome(15, "mushroom_island_shore", new BiomeMushroomIsland((new Biome.BiomeProperties("MushroomIslandShore")).setBaseHeight(0.0F).setHeightVariation(0.025F).setTemperature(0.9F).setRainfall(1.0F)));
+        registerBiome(16, "beaches", new BiomeBeach((new Biome.BiomeProperties("Beach")).setBaseHeight(0.0F).setHeightVariation(0.025F).setTemperature(0.8F).setRainfall(0.4F)));
+        registerBiome(17, "desert_hills", new BiomeDesert((new Biome.BiomeProperties("DesertHills")).setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(18, "forest_hills", new BiomeForest(BiomeForest.Type.NORMAL, (new Biome.BiomeProperties("ForestHills")).setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.7F).setRainfall(0.8F)));
+        registerBiome(19, "taiga_hills", new BiomeTaiga(BiomeTaiga.Type.NORMAL, (new Biome.BiomeProperties("TaigaHills")).setTemperature(0.25F).setRainfall(0.8F).setBaseHeight(0.45F).setHeightVariation(0.3F)));
+        registerBiome(20, "smaller_extreme_hills", new BiomeHills(BiomeHills.Type.EXTRA_TREES, (new Biome.BiomeProperties("Extreme Hills Edge")).setBaseHeight(0.8F).setHeightVariation(0.3F).setTemperature(0.2F).setRainfall(0.3F)));
+        registerBiome(21, "jungle", new BiomeJungle(false, (new Biome.BiomeProperties("Jungle")).setTemperature(0.95F).setRainfall(0.9F)));
+        registerBiome(22, "jungle_hills", new BiomeJungle(false, (new Biome.BiomeProperties("JungleHills")).setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.95F).setRainfall(0.9F)));
+        registerBiome(23, "jungle_edge", new BiomeJungle(true, (new Biome.BiomeProperties("JungleEdge")).setTemperature(0.95F).setRainfall(0.8F)));
+        registerBiome(24, "deep_ocean", new BiomeOcean((new Biome.BiomeProperties("Deep Ocean")).setBaseHeight(-1.8F).setHeightVariation(0.1F)));
+        registerBiome(25, "stone_beach", new BiomeStoneBeach((new Biome.BiomeProperties("Stone Beach")).setBaseHeight(0.1F).setHeightVariation(0.8F).setTemperature(0.2F).setRainfall(0.3F)));
+        registerBiome(26, "cold_beach", new BiomeBeach((new Biome.BiomeProperties("Cold Beach")).setBaseHeight(0.0F).setHeightVariation(0.025F).setTemperature(0.05F).setRainfall(0.3F).setSnowEnabled()));
+        registerBiome(27, "birch_forest", new BiomeForest(BiomeForest.Type.BIRCH, (new Biome.BiomeProperties("Birch Forest")).setTemperature(0.6F).setRainfall(0.6F)));
+        registerBiome(28, "birch_forest_hills", new BiomeForest(BiomeForest.Type.BIRCH, (new Biome.BiomeProperties("Birch Forest Hills")).setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.6F).setRainfall(0.6F)));
+        registerBiome(29, "roofed_forest", new BiomeForest(BiomeForest.Type.ROOFED, (new Biome.BiomeProperties("Roofed Forest")).setTemperature(0.7F).setRainfall(0.8F)));
+        registerBiome(30, "taiga_cold", new BiomeTaiga(BiomeTaiga.Type.NORMAL, (new Biome.BiomeProperties("Cold Taiga")).setBaseHeight(0.2F).setHeightVariation(0.2F).setTemperature(-0.5F).setRainfall(0.4F).setSnowEnabled()));
+        registerBiome(31, "taiga_cold_hills", new BiomeTaiga(BiomeTaiga.Type.NORMAL, (new Biome.BiomeProperties("Cold Taiga Hills")).setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(-0.5F).setRainfall(0.4F).setSnowEnabled()));
+        registerBiome(32, "redwood_taiga", new BiomeTaiga(BiomeTaiga.Type.MEGA, (new Biome.BiomeProperties("Mega Taiga")).setTemperature(0.3F).setRainfall(0.8F).setBaseHeight(0.2F).setHeightVariation(0.2F)));
+        registerBiome(33, "redwood_taiga_hills", new BiomeTaiga(BiomeTaiga.Type.MEGA, (new Biome.BiomeProperties("Mega Taiga Hills")).setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(0.3F).setRainfall(0.8F)));
+        registerBiome(34, "extreme_hills_with_trees", new BiomeHills(BiomeHills.Type.EXTRA_TREES, (new Biome.BiomeProperties("Extreme Hills+")).setBaseHeight(1.0F).setHeightVariation(0.5F).setTemperature(0.2F).setRainfall(0.3F)));
+        registerBiome(35, "savanna", new BiomeSavanna((new Biome.BiomeProperties("Savanna")).setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(1.2F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(36, "savanna_rock", new BiomeSavanna((new Biome.BiomeProperties("Savanna Plateau")).setBaseHeight(1.5F).setHeightVariation(0.025F).setTemperature(1.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(37, "mesa", new BiomeMesa(false, false, (new Biome.BiomeProperties("Mesa")).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(38, "mesa_rock", new BiomeMesa(false, true, (new Biome.BiomeProperties("Mesa Plateau F")).setBaseHeight(1.5F).setHeightVariation(0.025F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(39, "mesa_clear_rock", new BiomeMesa(false, false, (new Biome.BiomeProperties("Mesa Plateau")).setBaseHeight(1.5F).setHeightVariation(0.025F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(127, "void", new BiomeVoid((new Biome.BiomeProperties("The Void")).setRainDisabled()));
+        registerBiome(129, "mutated_plains", new BiomePlains(true, (new Biome.BiomeProperties("Sunflower Plains")).setBaseBiome("plains").setBaseHeight(0.125F).setHeightVariation(0.05F).setTemperature(0.8F).setRainfall(0.4F)));
+        registerBiome(130, "mutated_desert", new BiomeDesert((new Biome.BiomeProperties("Desert M")).setBaseBiome("desert").setBaseHeight(0.225F).setHeightVariation(0.25F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(131, "mutated_extreme_hills", new BiomeHills(BiomeHills.Type.MUTATED, (new Biome.BiomeProperties("Extreme Hills M")).setBaseBiome("extreme_hills").setBaseHeight(1.0F).setHeightVariation(0.5F).setTemperature(0.2F).setRainfall(0.3F)));
+        registerBiome(132, "mutated_forest", new BiomeForest(BiomeForest.Type.FLOWER, (new Biome.BiomeProperties("Flower Forest")).setBaseBiome("forest").setHeightVariation(0.4F).setTemperature(0.7F).setRainfall(0.8F)));
+        registerBiome(133, "mutated_taiga", new BiomeTaiga(BiomeTaiga.Type.NORMAL, (new Biome.BiomeProperties("Taiga M")).setBaseBiome("taiga").setBaseHeight(0.3F).setHeightVariation(0.4F).setTemperature(0.25F).setRainfall(0.8F)));
+        registerBiome(134, "mutated_swampland", new BiomeSwamp((new Biome.BiomeProperties("Swampland M")).setBaseBiome("swampland").setBaseHeight(-0.1F).setHeightVariation(0.3F).setTemperature(0.8F).setRainfall(0.9F).setWaterColor(14745518)));
+        registerBiome(140, "mutated_ice_flats", new BiomeSnow(true, (new Biome.BiomeProperties("Ice Plains Spikes")).setBaseBiome("ice_flats").setBaseHeight(0.425F).setHeightVariation(0.45000002F).setTemperature(0.0F).setRainfall(0.5F).setSnowEnabled()));
+        registerBiome(149, "mutated_jungle", new BiomeJungle(false, (new Biome.BiomeProperties("Jungle M")).setBaseBiome("jungle").setBaseHeight(0.2F).setHeightVariation(0.4F).setTemperature(0.95F).setRainfall(0.9F)));
+        registerBiome(151, "mutated_jungle_edge", new BiomeJungle(true, (new Biome.BiomeProperties("JungleEdge M")).setBaseBiome("jungle_edge").setBaseHeight(0.2F).setHeightVariation(0.4F).setTemperature(0.95F).setRainfall(0.8F)));
+        registerBiome(155, "mutated_birch_forest", new BiomeForestMutated((new Biome.BiomeProperties("Birch Forest M")).setBaseBiome("birch_forest").setBaseHeight(0.2F).setHeightVariation(0.4F).setTemperature(0.6F).setRainfall(0.6F)));
+        registerBiome(156, "mutated_birch_forest_hills", new BiomeForestMutated((new Biome.BiomeProperties("Birch Forest Hills M")).setBaseBiome("birch_forest_hills").setBaseHeight(0.55F).setHeightVariation(0.5F).setTemperature(0.6F).setRainfall(0.6F)));
+        registerBiome(157, "mutated_roofed_forest", new BiomeForest(BiomeForest.Type.ROOFED, (new Biome.BiomeProperties("Roofed Forest M")).setBaseBiome("roofed_forest").setBaseHeight(0.2F).setHeightVariation(0.4F).setTemperature(0.7F).setRainfall(0.8F)));
+        registerBiome(158, "mutated_taiga_cold", new BiomeTaiga(BiomeTaiga.Type.NORMAL, (new Biome.BiomeProperties("Cold Taiga M")).setBaseBiome("taiga_cold").setBaseHeight(0.3F).setHeightVariation(0.4F).setTemperature(-0.5F).setRainfall(0.4F).setSnowEnabled()));
+        registerBiome(160, "mutated_redwood_taiga", new BiomeTaiga(BiomeTaiga.Type.MEGA_SPRUCE, (new Biome.BiomeProperties("Mega Spruce Taiga")).setBaseBiome("redwood_taiga").setBaseHeight(0.2F).setHeightVariation(0.2F).setTemperature(0.25F).setRainfall(0.8F)));
+        registerBiome(161, "mutated_redwood_taiga_hills", new BiomeTaiga(BiomeTaiga.Type.MEGA_SPRUCE, (new Biome.BiomeProperties("Redwood Taiga Hills M")).setBaseBiome("redwood_taiga_hills").setBaseHeight(0.2F).setHeightVariation(0.2F).setTemperature(0.25F).setRainfall(0.8F)));
+        registerBiome(162, "mutated_extreme_hills_with_trees", new BiomeHills(BiomeHills.Type.MUTATED, (new Biome.BiomeProperties("Extreme Hills+ M")).setBaseBiome("extreme_hills_with_trees").setBaseHeight(1.0F).setHeightVariation(0.5F).setTemperature(0.2F).setRainfall(0.3F)));
+        registerBiome(163, "mutated_savanna", new BiomeSavannaMutated((new Biome.BiomeProperties("Savanna M")).setBaseBiome("savanna").setBaseHeight(0.3625F).setHeightVariation(1.225F).setTemperature(1.1F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(164, "mutated_savanna_rock", new BiomeSavannaMutated((new Biome.BiomeProperties("Savanna Plateau M")).setBaseBiome("savanna_rock").setBaseHeight(1.05F).setHeightVariation(1.2125001F).setTemperature(1.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(165, "mutated_mesa", new BiomeMesa(true, false, (new Biome.BiomeProperties("Mesa (Bryce)")).setBaseBiome("mesa").setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(166, "mutated_mesa_rock", new BiomeMesa(false, true, (new Biome.BiomeProperties("Mesa Plateau F M")).setBaseBiome("mesa_rock").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
+        registerBiome(167, "mutated_mesa_clear_rock", new BiomeMesa(false, false, (new Biome.BiomeProperties("Mesa Plateau M")).setBaseBiome("mesa_clear_rock").setBaseHeight(0.45F).setHeightVariation(0.3F).setTemperature(2.0F).setRainfall(0.0F).setRainDisabled()));
     }
 
     public static void registerBiome(int id, String name, Biome biome)
@@ -970,10 +644,16 @@
                 this.maxGroupCount = groupCountMax;
             }
 
-            @Override
             public String toString()
             {
                 return this.entityClass.getSimpleName() + "*(" + this.minGroupCount + "-" + this.maxGroupCount + "):" + this.itemWeight;
+            }
+
+            public EntityLiving newInstance(World world) throws Exception
+            {
+                net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.EntityRegistry.getEntry(this.entityClass);
+                if (entry != null) return (EntityLiving) entry.newInstance(world);
+                return this.entityClass.getConstructor(World.class).newInstance(world);
             }
         }
 
