--- before/net/minecraft/world/gen/MapGenRavine.java
+++ after/net/minecraft/world/gen/MapGenRavine.java
@@ -14,21 +14,7 @@
     protected static final IBlockState AIR = Blocks.AIR.getDefaultState();
     private final float[] rs = new float[1024];
 
-    protected void addTunnel(
-        long p_180707_1_,
-        int p_180707_3_,
-        int p_180707_4_,
-        ChunkPrimer p_180707_5_,
-        double p_180707_6_,
-        double p_180707_8_,
-        double p_180707_10_,
-        float p_180707_12_,
-        float p_180707_13_,
-        float p_180707_14_,
-        int p_180707_15_,
-        int p_180707_16_,
-        double p_180707_17_
-    )
+    protected void addTunnel(long p_180707_1_, int p_180707_3_, int p_180707_4_, ChunkPrimer p_180707_5_, double p_180707_6_, double p_180707_8_, double p_180707_10_, float p_180707_12_, float p_180707_13_, float p_180707_14_, int p_180707_15_, int p_180707_16_, double p_180707_17_)
     {
         Random random = new Random(p_180707_1_);
         double d0 = (double)(p_180707_3_ * 16 + 8);
@@ -52,7 +38,7 @@
 
         float f2 = 1.0F;
 
-        for (int j = 0; j < 256; j++)
+        for (int j = 0; j < 256; ++j)
         {
             if (j == 0 || random.nextInt(3) == 0)
             {
@@ -62,24 +48,24 @@
             this.rs[j] = f2 * f2;
         }
 
-        for (; p_180707_15_ < p_180707_16_; p_180707_15_++)
+        for (; p_180707_15_ < p_180707_16_; ++p_180707_15_)
         {
-            double d9 = 1.5 + (double)(MathHelper.sin((float)p_180707_15_ * (float) Math.PI / (float)p_180707_16_) * p_180707_12_);
+            double d9 = 1.5D + (double)(MathHelper.sin((float)p_180707_15_ * (float)Math.PI / (float)p_180707_16_) * p_180707_12_);
             double d2 = d9 * p_180707_17_;
-            d9 *= (double)random.nextFloat() * 0.25 + 0.75;
-            d2 *= (double)random.nextFloat() * 0.25 + 0.75;
+            d9 = d9 * ((double)random.nextFloat() * 0.25D + 0.75D);
+            d2 = d2 * ((double)random.nextFloat() * 0.25D + 0.75D);
             float f3 = MathHelper.cos(p_180707_14_);
             float f4 = MathHelper.sin(p_180707_14_);
             p_180707_6_ += (double)(MathHelper.cos(p_180707_13_) * f3);
             p_180707_8_ += (double)f4;
             p_180707_10_ += (double)(MathHelper.sin(p_180707_13_) * f3);
-            p_180707_14_ *= 0.7F;
-            p_180707_14_ += f1 * 0.05F;
+            p_180707_14_ = p_180707_14_ * 0.7F;
+            p_180707_14_ = p_180707_14_ + f1 * 0.05F;
             p_180707_13_ += f * 0.05F;
-            f1 *= 0.8F;
-            f *= 0.5F;
-            f1 += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 2.0F;
-            f += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 4.0F;
+            f1 = f1 * 0.8F;
+            f = f * 0.5F;
+            f1 = f1 + (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 2.0F;
+            f = f + (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 4.0F;
 
             if (flag1 || random.nextInt(4) != 0)
             {
@@ -93,10 +79,7 @@
                     return;
                 }
 
-                if (!(p_180707_6_ < d0 - 16.0 - d9 * 2.0)
-                        && !(p_180707_10_ < d1 - 16.0 - d9 * 2.0)
-                        && !(p_180707_6_ > d0 + 16.0 + d9 * 2.0)
-                        && !(p_180707_10_ > d1 + 16.0 + d9 * 2.0))
+                if (p_180707_6_ >= d0 - 16.0D - d9 * 2.0D && p_180707_10_ >= d1 - 16.0D - d9 * 2.0D && p_180707_6_ <= d0 + 16.0D + d9 * 2.0D && p_180707_10_ <= d1 + 16.0D + d9 * 2.0D)
                 {
                     int k2 = MathHelper.floor(p_180707_6_ - d9) - p_180707_3_ * 16 - 1;
                     int k = MathHelper.floor(p_180707_6_ + d9) - p_180707_3_ * 16 + 1;
@@ -137,17 +120,15 @@
 
                     boolean flag2 = false;
 
-                    for (int j1 = k2; !flag2 && j1 < k; j1++)
+                    for (int j1 = k2; !flag2 && j1 < k; ++j1)
                     {
-                        for (int k1 = i3; !flag2 && k1 < i1; k1++)
+                        for (int k1 = i3; !flag2 && k1 < i1; ++k1)
                         {
-                            for (int l1 = l + 1; !flag2 && l1 >= l2 - 1; l1--)
+                            for (int l1 = l + 1; !flag2 && l1 >= l2 - 1; --l1)
                             {
                                 if (l1 >= 0 && l1 < 256)
                                 {
-                                    IBlockState iblockstate = p_180707_5_.getBlockState(j1, l1, k1);
-
-                                    if (iblockstate.getBlock() == Blocks.FLOWING_WATER || iblockstate.getBlock() == Blocks.WATER)
+                                    if (isOceanBlock(p_180707_5_, j1, l1, k1, p_180707_3_, p_180707_4_))
                                     {
                                         flag2 = true;
                                     }
@@ -163,51 +144,29 @@
 
                     if (!flag2)
                     {
-                        BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
-
-                        for (int j3 = k2; j3 < k; j3++)
+                        for (int j3 = k2; j3 < k; ++j3)
                         {
-                            double d10 = ((double)(j3 + p_180707_3_ * 16) + 0.5 - p_180707_6_) / d9;
+                            double d10 = ((double)(j3 + p_180707_3_ * 16) + 0.5D - p_180707_6_) / d9;
 
-                            for (int i2 = i3; i2 < i1; i2++)
+                            for (int i2 = i3; i2 < i1; ++i2)
                             {
-                                double d7 = ((double)(i2 + p_180707_4_ * 16) + 0.5 - p_180707_10_) / d9;
+                                double d7 = ((double)(i2 + p_180707_4_ * 16) + 0.5D - p_180707_10_) / d9;
                                 boolean flag = false;
 
-                                if (d10 * d10 + d7 * d7 < 1.0)
+                                if (d10 * d10 + d7 * d7 < 1.0D)
                                 {
-                                    for (int j2 = l; j2 > l2; j2--)
+                                    for (int j2 = l; j2 > l2; --j2)
                                     {
-                                        double d8 = ((double)(j2 - 1) + 0.5 - p_180707_8_) / d2;
+                                        double d8 = ((double)(j2 - 1) + 0.5D - p_180707_8_) / d2;
 
-                                        if ((d10 * d10 + d7 * d7) * (double)this.rs[j2 - 1] + d8 * d8 / 6.0 < 1.0)
+                                        if ((d10 * d10 + d7 * d7) * (double)this.rs[j2 - 1] + d8 * d8 / 6.0D < 1.0D)
                                         {
-                                            IBlockState iblockstate1 = p_180707_5_.getBlockState(j3, j2, i2);
-
-                                            if (iblockstate1.getBlock() == Blocks.GRASS)
+                                            if (isTopBlock(p_180707_5_, j3, j2, i2, p_180707_3_, p_180707_4_))
                                             {
                                                 flag = true;
                                             }
 
-                                            if (iblockstate1.getBlock() == Blocks.STONE
-                                                    || iblockstate1.getBlock() == Blocks.DIRT
-                                                    || iblockstate1.getBlock() == Blocks.GRASS)
-                                            {
-                                                if (j2 - 1 < 10)
-                                                {
-                                                    p_180707_5_.setBlockState(j3, j2, i2, FLOWING_LAVA);
-                                                }
-                                                else
-                                                {
-                                                    p_180707_5_.setBlockState(j3, j2, i2, AIR);
-
-                                                    if (flag && p_180707_5_.getBlockState(j3, j2 - 1, i2).getBlock() == Blocks.DIRT)
-                                                    {
-                                                        blockpos$mutableblockpos.setPos(j3 + p_180707_3_ * 16, 0, i2 + p_180707_4_ * 16);
-                                                        p_180707_5_.setBlockState(j3, j2 - 1, i2, this.world.getBiome(blockpos$mutableblockpos).topBlock);
-                                                    }
-                                                }
-                                            }
+                                            digBlock(p_180707_5_, j3, j2, i2, p_180707_3_, p_180707_4_, flag);
                                         }
                                     }
                                 }
@@ -224,7 +183,6 @@
         }
     }
 
-    @Override
     protected void recursiveGenerate(World worldIn, int chunkX, int chunkZ, int originalX, int originalZ, ChunkPrimer chunkPrimerIn)
     {
         if (this.rand.nextInt(50) == 0)
@@ -234,12 +192,76 @@
             double d2 = (double)(chunkZ * 16 + this.rand.nextInt(16));
             int i = 1;
 
-            for (int j = 0; j < 1; j++)
+            for (int j = 0; j < 1; ++j)
             {
-                float f = this.rand.nextFloat() * (float)(Math.PI * 2);
+                float f = this.rand.nextFloat() * ((float)Math.PI * 2F);
                 float f1 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
                 float f2 = (this.rand.nextFloat() * 2.0F + this.rand.nextFloat()) * 2.0F;
-                this.addTunnel(this.rand.nextLong(), originalX, originalZ, chunkPrimerIn, d0, d1, d2, f2, f, f1, 0, 0, 3.0);
+                this.addTunnel(this.rand.nextLong(), originalX, originalZ, chunkPrimerIn, d0, d1, d2, f2, f, f1, 0, 0, 3.0D);
+            }
+        }
+    }
+    protected boolean isOceanBlock(ChunkPrimer data, int x, int y, int z, int chunkX, int chunkZ)
+    {
+        net.minecraft.block.Block block = data.getBlockState(x, y, z).getBlock();
+        return block== Blocks.FLOWING_WATER || block == Blocks.WATER;
+    }
+
+    //Exception biomes to make sure we generate like vanilla
+    private boolean isExceptionBiome(net.minecraft.world.biome.Biome biome)
+    {
+        if (biome == net.minecraft.init.Biomes.BEACH) return true;
+        if (biome == net.minecraft.init.Biomes.DESERT) return true;
+        if (biome == net.minecraft.init.Biomes.MUSHROOM_ISLAND) return true;
+        if (biome == net.minecraft.init.Biomes.MUSHROOM_ISLAND_SHORE) return true;
+        return false;
+    }
+
+    //Determine if the block at the specified location is the top block for the biome, we take into account
+    //Vanilla bugs to make sure that we generate the map the same way vanilla does.
+    private boolean isTopBlock(ChunkPrimer data, int x, int y, int z, int chunkX, int chunkZ)
+    {
+        net.minecraft.world.biome.Biome biome = world.getBiome(new BlockPos(x + chunkX * 16, 0, z + chunkZ * 16));
+        IBlockState state = data.getBlockState(x, y, z);
+        return (isExceptionBiome(biome) ? state.getBlock() == Blocks.GRASS : state.getBlock() == biome.topBlock);
+    }
+
+    /**
+     * Digs out the current block, default implementation removes stone, filler, and top block
+     * Sets the block to lava if y is less then 10, and air other wise.
+     * If setting to air, it also checks to see if we've broken the surface and if so
+     * tries to make the floor the biome's top block
+     *
+     * @param data Block data array
+     * @param index Pre-calculated index into block data
+     * @param x local X position
+     * @param y local Y position
+     * @param z local Z position
+     * @param chunkX Chunk X position
+     * @param chunkZ Chunk Y position
+     * @param foundTop True if we've encountered the biome's top block. Ideally if we've broken the surface.
+     */
+    protected void digBlock(ChunkPrimer data, int x, int y, int z, int chunkX, int chunkZ, boolean foundTop)
+    {
+        net.minecraft.world.biome.Biome biome = world.getBiome(new BlockPos(x + chunkX * 16, 0, z + chunkZ * 16));
+        IBlockState state = data.getBlockState(x, y, z);
+        IBlockState top = isExceptionBiome(biome) ? Blocks.GRASS.getDefaultState() : biome.topBlock;
+        IBlockState filler = isExceptionBiome(biome) ? Blocks.DIRT.getDefaultState() : biome.fillerBlock;
+
+        if (state.getBlock() == Blocks.STONE || state.getBlock() == top.getBlock() || state.getBlock() == filler.getBlock())
+        {
+            if (y - 1 < 10)
+            {
+                data.setBlockState(x, y, z, FLOWING_LAVA);
+            }
+            else
+            {
+                data.setBlockState(x, y, z, AIR);
+
+                if (foundTop && data.getBlockState(x, y - 1, z).getBlock() == filler.getBlock())
+                {
+                    data.setBlockState(x, y - 1, z, top.getBlock().getDefaultState());
+                }
             }
         }
     }
