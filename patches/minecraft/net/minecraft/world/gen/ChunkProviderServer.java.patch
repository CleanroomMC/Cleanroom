--- before/net/minecraft/world/gen/ChunkProviderServer.java
+++ after/net/minecraft/world/gen/ChunkProviderServer.java
@@ -4,6 +4,7 @@
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Iterator;
@@ -29,11 +30,12 @@
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger field_147417_b = LogManager.getLogger();
-    private final Set<Long> field_73248_b = Sets.newHashSet();
+    private final Set<Long> field_73248_b = Sets.<Long>newHashSet();
     public final IChunkGenerator field_186029_c;
     public final IChunkLoader field_73247_e;
-    public final Long2ObjectMap<Chunk> field_73244_f = new Long2ObjectOpenHashMap<>(8192);
+    public final Long2ObjectMap<Chunk> field_73244_f = new Long2ObjectOpenHashMap<Chunk>(8192);
     public final WorldServer field_73251_h;
+    private final Set<Long> loadingChunks = com.google.common.collect.Sets.newHashSet();
 
     public ChunkProviderServer(WorldServer p_i46838_1_, IChunkLoader p_i46838_2_, IChunkGenerator p_i46838_3_)
     {
@@ -51,25 +53,27 @@
     {
         if (this.field_73251_h.field_73011_w.func_186056_c(p_189549_1_.field_76635_g, p_189549_1_.field_76647_h))
         {
-            this.field_73248_b.add(ChunkPos.func_77272_a(p_189549_1_.field_76635_g, p_189549_1_.field_76647_h));
+            this.field_73248_b.add(Long.valueOf(ChunkPos.func_77272_a(p_189549_1_.field_76635_g, p_189549_1_.field_76647_h)));
             p_189549_1_.field_189550_d = true;
         }
     }
 
     public void func_73240_a()
     {
-        for (Chunk chunk : this.field_73244_f.values())
+        ObjectIterator objectiterator = this.field_73244_f.values().iterator();
+
+        while (objectiterator.hasNext())
         {
+            Chunk chunk = (Chunk)objectiterator.next();
             this.func_189549_a(chunk);
         }
     }
 
     @Nullable
-    @Override
     public Chunk func_186026_b(int p_186026_1_, int p_186026_2_)
     {
         long i = ChunkPos.func_77272_a(p_186026_1_, p_186026_2_);
-        Chunk chunk = this.field_73244_f.get(i);
+        Chunk chunk = (Chunk)this.field_73244_f.get(i);
 
         if (chunk != null)
         {
@@ -82,24 +86,50 @@
     @Nullable
     public Chunk func_186028_c(int p_186028_1_, int p_186028_2_)
     {
+        return loadChunk(p_186028_1_, p_186028_2_, null);
+    }
+
+    @Nullable
+    public Chunk loadChunk(int p_186028_1_, int p_186028_2_, @Nullable Runnable runnable)
+    {
         Chunk chunk = this.func_186026_b(p_186028_1_, p_186028_2_);
-
         if (chunk == null)
         {
-            chunk = this.func_73239_e(p_186028_1_, p_186028_2_);
-
-            if (chunk != null)
+            long pos = ChunkPos.func_77272_a(p_186028_1_, p_186028_2_);
+            chunk = net.minecraftforge.common.ForgeChunkManager.fetchDormantChunk(pos, this.field_73251_h);
+            if (chunk != null || !(this.field_73247_e instanceof net.minecraft.world.chunk.storage.AnvilChunkLoader))
             {
+                if (!loadingChunks.add(pos)) net.minecraftforge.fml.common.FMLLog.bigWarning("There is an attempt to load a chunk ({},{}) in dimension {} that is already being loaded. This will cause weird chunk breakages.", p_186028_1_, p_186028_2_, this.field_73251_h.field_73011_w.getDimension());
+                if (chunk == null) chunk = this.func_73239_e(p_186028_1_, p_186028_2_);
+
+                if (chunk != null)
+                {
                 this.field_73244_f.put(ChunkPos.func_77272_a(p_186028_1_, p_186028_2_), chunk);
                 chunk.func_76631_c();
                 chunk.func_186030_a(this, this.field_186029_c);
+                }
+
+                loadingChunks.remove(pos);
+            }
+            else
+            {
+                net.minecraft.world.chunk.storage.AnvilChunkLoader loader = (net.minecraft.world.chunk.storage.AnvilChunkLoader) this.field_73247_e;
+                if (runnable == null || !net.minecraftforge.common.ForgeChunkManager.asyncChunkLoading)
+                    chunk = net.minecraftforge.common.chunkio.ChunkIOExecutor.syncChunkLoad(this.field_73251_h, loader, this, p_186028_1_, p_186028_2_);
+                else if (loader.func_191063_a(p_186028_1_, p_186028_2_))
+                {
+                    // We can only use the async queue for already generated chunks
+                    net.minecraftforge.common.chunkio.ChunkIOExecutor.queueChunkLoad(this.field_73251_h, loader, this, p_186028_1_, p_186028_2_, runnable);
+                    return null;
+                }
             }
         }
 
+        // If we didn't load the chunk async and have a callback run it now
+        if (runnable != null) runnable.run();
         return chunk;
     }
 
-    @Override
     public Chunk func_186025_d(int p_186025_1_, int p_186025_2_)
     {
         Chunk chunk = this.func_186028_c(p_186025_1_, p_186025_2_);
@@ -117,7 +147,7 @@
                 CrashReport crashreport = CrashReport.func_85055_a(throwable, "Exception generating new chunk");
                 CrashReportCategory crashreportcategory = crashreport.func_85058_a("Chunk to be generated");
                 crashreportcategory.func_71507_a("Location", String.format("%d,%d", p_186025_1_, p_186025_2_));
-                crashreportcategory.func_71507_a("Position hash", i);
+                crashreportcategory.func_71507_a("Position hash", Long.valueOf(i));
                 crashreportcategory.func_71507_a("Generator", this.field_186029_c);
                 throw new ReportedException(crashreport);
             }
@@ -199,8 +229,9 @@
             {
                 this.func_73242_b(chunk);
                 chunk.func_177427_f(false);
+                ++i;
 
-                if (++i == 24 && !p_186027_1_)
+                if (i == 24 && !p_186027_1_)
                 {
                     return false;
                 }
@@ -215,23 +246,28 @@
         this.field_73247_e.func_75818_b();
     }
 
-    @Override
     public boolean func_73156_b()
     {
         if (!this.field_73251_h.field_73058_d)
         {
             if (!this.field_73248_b.isEmpty())
             {
+                for (ChunkPos forced : this.field_73251_h.getPersistentChunks().keySet())
+                {
+                    this.field_73248_b.remove(ChunkPos.func_77272_a(forced.field_77276_a, forced.field_77275_b));
+                }
+
                 Iterator<Long> iterator = this.field_73248_b.iterator();
 
                 for (int i = 0; i < 100 && iterator.hasNext(); iterator.remove())
                 {
                     Long olong = iterator.next();
-                    Chunk chunk = this.field_73244_f.get(olong);
+                    Chunk chunk = (Chunk)this.field_73244_f.get(olong);
 
                     if (chunk != null && chunk.field_189550_d)
                     {
                         chunk.func_76623_d();
+                        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.func_77272_a(chunk.field_76635_g, chunk.field_76647_h), chunk);
                         this.func_73242_b(chunk);
                         this.func_73243_a(chunk);
                         this.field_73244_f.remove(olong);
@@ -240,6 +276,8 @@
                 }
             }
 
+            if (this.field_73244_f.isEmpty()) net.minecraftforge.common.DimensionManager.unloadWorld(this.field_73251_h.field_73011_w.getDimension());
+
             this.field_73247_e.func_75817_a();
         }
 
@@ -251,7 +289,6 @@
         return !this.field_73251_h.field_73058_d;
     }
 
-    @Override
     public String func_73148_d()
     {
         return "ServerChunkCache: " + this.field_73244_f.size() + " Drop: " + this.field_73248_b.size();
@@ -283,7 +320,6 @@
         return this.field_73244_f.containsKey(ChunkPos.func_77272_a(p_73149_1_, p_73149_2_));
     }
 
-    @Override
     public boolean func_191062_e(int p_191062_1_, int p_191062_2_)
     {
         return this.field_73244_f.containsKey(ChunkPos.func_77272_a(p_191062_1_, p_191062_2_)) || this.field_73247_e.func_191063_a(p_191062_1_, p_191062_2_);
