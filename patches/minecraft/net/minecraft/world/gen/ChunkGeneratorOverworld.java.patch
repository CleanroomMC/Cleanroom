--- before/net/minecraft/world/gen/ChunkGeneratorOverworld.java
+++ after/net/minecraft/world/gen/ChunkGeneratorOverworld.java
@@ -61,6 +61,16 @@
 
     public ChunkGeneratorOverworld(World worldIn, long seed, boolean mapFeaturesEnabledIn, String generatorOptions)
     {
+        {
+            caveGenerator = net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(caveGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.CAVE);
+            strongholdGenerator = (MapGenStronghold)net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(strongholdGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.STRONGHOLD);
+            villageGenerator = (MapGenVillage)net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(villageGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.VILLAGE);
+            mineshaftGenerator = (MapGenMineshaft)net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(mineshaftGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.MINESHAFT);
+            scatteredFeatureGenerator = (MapGenScatteredFeature)net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(scatteredFeatureGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.SCATTERED_FEATURE);
+            ravineGenerator = net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(ravineGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.RAVINE);
+            oceanMonumentGenerator = (StructureOceanMonument)net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(oceanMonumentGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.OCEAN_MONUMENT);
+            woodlandMansionGenerator = (WoodlandMansion)net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(woodlandMansionGenerator, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.WOODLAND_MANSION);
+        }
         this.world = worldIn;
         this.mapFeaturesEnabled = mapFeaturesEnabledIn;
         this.terrainType = worldIn.getWorldInfo().getTerrainType();
@@ -75,9 +85,9 @@
         this.heightMap = new double[825];
         this.biomeWeights = new float[25];
 
-        for (int i = -2; i <= 2; i++)
+        for (int i = -2; i <= 2; ++i)
         {
-            for (int j = -2; j <= 2; j++)
+            for (int j = -2; j <= 2; ++j)
             {
                 float f = 10.0F / MathHelper.sqrt((float)(i * i + j * j) + 0.2F);
                 this.biomeWeights[i + 2 + (j + 2) * 5] = f;
@@ -90,6 +100,17 @@
             this.oceanBlock = this.settings.useLavaOceans ? Blocks.LAVA.getDefaultState() : Blocks.WATER.getDefaultState();
             worldIn.setSeaLevel(this.settings.seaLevel);
         }
+
+        net.minecraftforge.event.terraingen.InitNoiseGensEvent.ContextOverworld ctx =
+                new net.minecraftforge.event.terraingen.InitNoiseGensEvent.ContextOverworld(minLimitPerlinNoise, maxLimitPerlinNoise, mainPerlinNoise, surfaceNoise, scaleNoise, depthNoise, forestNoise);
+        ctx = net.minecraftforge.event.terraingen.TerrainGen.getModdedNoiseGenerators(worldIn, this.rand, ctx);
+        this.minLimitPerlinNoise = ctx.getLPerlin1();
+        this.maxLimitPerlinNoise = ctx.getLPerlin2();
+        this.mainPerlinNoise = ctx.getPerlin();
+        this.surfaceNoise = ctx.getHeight();
+        this.scaleNoise = ctx.getScale();
+        this.depthNoise = ctx.getDepth();
+        this.forestNoise = ctx.getForest();
     }
 
     public void setBlocksInChunk(int x, int z, ChunkPrimer primer)
@@ -97,47 +118,47 @@
         this.biomesForGeneration = this.world.getBiomeProvider().getBiomesForGeneration(this.biomesForGeneration, x * 4 - 2, z * 4 - 2, 10, 10);
         this.generateHeightmap(x * 4, 0, z * 4);
 
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             int j = i * 5;
             int k = (i + 1) * 5;
 
-            for (int l = 0; l < 4; l++)
+            for (int l = 0; l < 4; ++l)
             {
                 int i1 = (j + l) * 33;
                 int j1 = (j + l + 1) * 33;
                 int k1 = (k + l) * 33;
                 int l1 = (k + l + 1) * 33;
 
-                for (int i2 = 0; i2 < 32; i2++)
+                for (int i2 = 0; i2 < 32; ++i2)
                 {
-                    double d0 = 0.125;
+                    double d0 = 0.125D;
                     double d1 = this.heightMap[i1 + i2];
                     double d2 = this.heightMap[j1 + i2];
                     double d3 = this.heightMap[k1 + i2];
                     double d4 = this.heightMap[l1 + i2];
-                    double d5 = (this.heightMap[i1 + i2 + 1] - d1) * 0.125;
-                    double d6 = (this.heightMap[j1 + i2 + 1] - d2) * 0.125;
-                    double d7 = (this.heightMap[k1 + i2 + 1] - d3) * 0.125;
-                    double d8 = (this.heightMap[l1 + i2 + 1] - d4) * 0.125;
+                    double d5 = (this.heightMap[i1 + i2 + 1] - d1) * 0.125D;
+                    double d6 = (this.heightMap[j1 + i2 + 1] - d2) * 0.125D;
+                    double d7 = (this.heightMap[k1 + i2 + 1] - d3) * 0.125D;
+                    double d8 = (this.heightMap[l1 + i2 + 1] - d4) * 0.125D;
 
-                    for (int j2 = 0; j2 < 8; j2++)
+                    for (int j2 = 0; j2 < 8; ++j2)
                     {
-                        double d9 = 0.25;
+                        double d9 = 0.25D;
                         double d10 = d1;
                         double d11 = d2;
-                        double d12 = (d3 - d1) * 0.25;
-                        double d13 = (d4 - d2) * 0.25;
+                        double d12 = (d3 - d1) * 0.25D;
+                        double d13 = (d4 - d2) * 0.25D;
 
-                        for (int k2 = 0; k2 < 4; k2++)
+                        for (int k2 = 0; k2 < 4; ++k2)
                         {
-                            double d14 = 0.25;
-                            double d16 = (d11 - d10) * 0.25;
+                            double d14 = 0.25D;
+                            double d16 = (d11 - d10) * 0.25D;
                             double lvt_45_1_ = d10 - d16;
 
-                            for (int l2 = 0; l2 < 4; l2++)
+                            for (int l2 = 0; l2 < 4; ++l2)
                             {
-                                if ((lvt_45_1_ += d16) > 0.0)
+                                if ((lvt_45_1_ += d16) > 0.0D)
                                 {
                                     primer.setBlockState(i * 4 + k2, i2 * 8 + j2, l * 4 + l2, STONE);
                                 }
@@ -163,23 +184,20 @@
 
     public void replaceBiomeBlocks(int x, int z, ChunkPrimer primer, Biome[] biomesIn)
     {
-        double d0 = 0.03125;
-        this.depthBuffer = this.surfaceNoise
-                              .getRegion(this.depthBuffer, (double)(x * 16), (double)(z * 16), 16, 16, 0.0625, 0.0625, 1.0);
+        if (!net.minecraftforge.event.ForgeEventFactory.onReplaceBiomeBlocks(this, x, z, primer, this.world)) return;
+        double d0 = 0.03125D;
+        this.depthBuffer = this.surfaceNoise.getRegion(this.depthBuffer, (double)(x * 16), (double)(z * 16), 16, 16, 0.0625D, 0.0625D, 1.0D);
 
-        for (int i = 0; i < 16; i++)
+        for (int i = 0; i < 16; ++i)
         {
-            for (int j = 0; j < 16; j++)
+            for (int j = 0; j < 16; ++j)
             {
                 Biome biome = biomesIn[j + i * 16];
-                biome.genTerrainBlocks(
-                    this.world, this.rand, primer, x * 16 + i, z * 16 + j, this.depthBuffer[j + i * 16]
-                );
+                biome.genTerrainBlocks(this.world, this.rand, primer, x * 16 + i, z * 16 + j, this.depthBuffer[j + i * 16]);
             }
         }
     }
 
-    @Override
     public Chunk generateChunk(int x, int z)
     {
         this.rand.setSeed((long)x * 341873128712L + (long)z * 132897987541L);
@@ -234,7 +252,7 @@
         Chunk chunk = new Chunk(this.world, chunkprimer, x, z);
         byte[] abyte = chunk.getBiomeArray();
 
-        for (int i = 0; i < abyte.length; i++)
+        for (int i = 0; i < abyte.length; ++i)
         {
             abyte[i] = (byte)Biome.getIdForBiome(this.biomesForGeneration[i]);
         }
@@ -245,42 +263,18 @@
 
     private void generateHeightmap(int x, int y, int z)
     {
-        this.depthRegion = this.depthNoise
-                              .generateNoiseOctaves(
-                                  this.depthRegion,
-                                  x,
-                                  z,
-                                  5,
-                                  5,
-                                  (double)this.settings.depthNoiseScaleX,
-                                  (double)this.settings.depthNoiseScaleZ,
-                                  (double)this.settings.depthNoiseScaleExponent
-                              );
+        this.depthRegion = this.depthNoise.generateNoiseOctaves(this.depthRegion, x, z, 5, 5, (double)this.settings.depthNoiseScaleX, (double)this.settings.depthNoiseScaleZ, (double)this.settings.depthNoiseScaleExponent);
         float f = this.settings.coordinateScale;
         float f1 = this.settings.heightScale;
-        this.mainNoiseRegion = this.mainPerlinNoise
-                              .generateNoiseOctaves(
-                                  this.mainNoiseRegion,
-                                  x,
-                                  y,
-                                  z,
-                                  5,
-                                  33,
-                                  5,
-                                  (double)(f / this.settings.mainNoiseScaleX),
-                                  (double)(f1 / this.settings.mainNoiseScaleY),
-                                  (double)(f / this.settings.mainNoiseScaleZ)
-                              );
-        this.minLimitRegion = this.minLimitPerlinNoise
-                              .generateNoiseOctaves(this.minLimitRegion, x, y, z, 5, 33, 5, (double)f, (double)f1, (double)f);
-        this.maxLimitRegion = this.maxLimitPerlinNoise
-                              .generateNoiseOctaves(this.maxLimitRegion, x, y, z, 5, 33, 5, (double)f, (double)f1, (double)f);
+        this.mainNoiseRegion = this.mainPerlinNoise.generateNoiseOctaves(this.mainNoiseRegion, x, y, z, 5, 33, 5, (double)(f / this.settings.mainNoiseScaleX), (double)(f1 / this.settings.mainNoiseScaleY), (double)(f / this.settings.mainNoiseScaleZ));
+        this.minLimitRegion = this.minLimitPerlinNoise.generateNoiseOctaves(this.minLimitRegion, x, y, z, 5, 33, 5, (double)f, (double)f1, (double)f);
+        this.maxLimitRegion = this.maxLimitPerlinNoise.generateNoiseOctaves(this.maxLimitRegion, x, y, z, 5, 33, 5, (double)f, (double)f1, (double)f);
         int i = 0;
         int j = 0;
 
-        for (int k = 0; k < 5; k++)
+        for (int k = 0; k < 5; ++k)
         {
-            for (int l = 0; l < 5; l++)
+            for (int l = 0; l < 5; ++l)
             {
                 float f2 = 0.0F;
                 float f3 = 0.0F;
@@ -288,9 +282,9 @@
                 int i1 = 2;
                 Biome biome = this.biomesForGeneration[k + 2 + (l + 2) * 10];
 
-                for (int j1 = -2; j1 <= 2; j1++)
+                for (int j1 = -2; j1 <= 2; ++j1)
                 {
-                    for (int k1 = -2; k1 <= 2; k1++)
+                    for (int k1 = -2; k1 <= 2; ++k1)
                     {
                         Biome biome1 = this.biomesForGeneration[k + j1 + 2 + (l + k1 + 2) * 10];
                         float f5 = this.settings.biomeDepthOffSet + biome1.getBaseHeight() * this.settings.biomeDepthWeight;
@@ -315,76 +309,75 @@
                     }
                 }
 
-                f2 /= f4;
-                f3 /= f4;
+                f2 = f2 / f4;
+                f3 = f3 / f4;
                 f2 = f2 * 0.9F + 0.1F;
                 f3 = (f3 * 4.0F - 1.0F) / 8.0F;
-                double d7 = this.depthRegion[j] / 8000.0;
+                double d7 = this.depthRegion[j] / 8000.0D;
 
-                if (d7 < 0.0)
+                if (d7 < 0.0D)
                 {
-                    d7 = -d7 * 0.3;
+                    d7 = -d7 * 0.3D;
                 }
 
-                d7 = d7 * 3.0 - 2.0;
+                d7 = d7 * 3.0D - 2.0D;
 
-                if (d7 < 0.0)
+                if (d7 < 0.0D)
                 {
-                    d7 /= 2.0;
+                    d7 = d7 / 2.0D;
 
-                    if (d7 < -1.0)
+                    if (d7 < -1.0D)
                     {
-                        d7 = -1.0;
+                        d7 = -1.0D;
                     }
 
-                    d7 /= 1.4;
-                    d7 /= 2.0;
+                    d7 = d7 / 1.4D;
+                    d7 = d7 / 2.0D;
                 }
                 else
                 {
-                    if (d7 > 1.0)
+                    if (d7 > 1.0D)
                     {
-                        d7 = 1.0;
+                        d7 = 1.0D;
                     }
 
-                    d7 /= 8.0;
+                    d7 = d7 / 8.0D;
                 }
 
-                j++;
+                ++j;
                 double d8 = (double)f3;
                 double d9 = (double)f2;
-                d8 += d7 * 0.2;
-                d8 = d8 * (double)this.settings.baseSize / 8.0;
-                double d0 = (double)this.settings.baseSize + d8 * 4.0;
+                d8 = d8 + d7 * 0.2D;
+                d8 = d8 * (double)this.settings.baseSize / 8.0D;
+                double d0 = (double)this.settings.baseSize + d8 * 4.0D;
 
-                for (int l1 = 0; l1 < 33; l1++)
+                for (int l1 = 0; l1 < 33; ++l1)
                 {
-                    double d1 = ((double)l1 - d0) * (double)this.settings.stretchY * 128.0 / 256.0 / d9;
+                    double d1 = ((double)l1 - d0) * (double)this.settings.stretchY * 128.0D / 256.0D / d9;
 
-                    if (d1 < 0.0)
+                    if (d1 < 0.0D)
                     {
-                        d1 *= 4.0;
+                        d1 *= 4.0D;
                     }
 
                     double d2 = this.minLimitRegion[i] / (double)this.settings.lowerLimitScale;
                     double d3 = this.maxLimitRegion[i] / (double)this.settings.upperLimitScale;
-                    double d4 = (this.mainNoiseRegion[i] / 10.0 + 1.0) / 2.0;
+                    double d4 = (this.mainNoiseRegion[i] / 10.0D + 1.0D) / 2.0D;
                     double d5 = MathHelper.clampedLerp(d2, d3, d4) - d1;
 
                     if (l1 > 29)
                     {
                         double d6 = (double)((float)(l1 - 29) / 3.0F);
-                        d5 = d5 * (1.0 - d6) + -10.0 * d6;
+                        d5 = d5 * (1.0D - d6) + -10.0D * d6;
                     }
 
                     this.heightMap[i] = d5;
-                    i++;
+                    ++i;
                 }
             }
         }
     }
 
-    @Override
     public void populate(int x, int z)
     {
         BlockFalling.fallInstantly = true;
@@ -399,6 +392,8 @@
         boolean flag = false;
         ChunkPos chunkpos = new ChunkPos(x, z);
 
+        net.minecraftforge.event.ForgeEventFactory.onChunkPopulate(true, this, this.world, this.rand, x, z, flag);
+
         if (this.mapFeaturesEnabled)
         {
             if (this.settings.useMineShafts)
@@ -432,19 +427,17 @@
             }
         }
 
-        if (biome != Biomes.DESERT
-                && biome != Biomes.DESERT_HILLS
-                && this.settings.useWaterLakes
-                && !flag
-                && this.rand.nextInt(this.settings.waterLakeChance) == 0)
+        if (biome != Biomes.DESERT && biome != Biomes.DESERT_HILLS && this.settings.useWaterLakes && !flag && this.rand.nextInt(this.settings.waterLakeChance) == 0)
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, flag, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.LAKE))
         {
             int i1 = this.rand.nextInt(16) + 8;
             int j1 = this.rand.nextInt(256);
             int k1 = this.rand.nextInt(16) + 8;
-            new WorldGenLakes(Blocks.WATER).generate(this.world, this.rand, blockpos.add(i1, j1, k1));
+            (new WorldGenLakes(Blocks.WATER)).generate(this.world, this.rand, blockpos.add(i1, j1, k1));
         }
 
         if (!flag && this.rand.nextInt(this.settings.lavaLakeChance / 10) == 0 && this.settings.useLavaLakes)
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, flag, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.LAVA))
         {
             int i2 = this.rand.nextInt(16) + 8;
             int l2 = this.rand.nextInt(this.rand.nextInt(248) + 8);
@@ -452,28 +445,32 @@
 
             if (l2 < this.world.getSeaLevel() || this.rand.nextInt(this.settings.lavaLakeChance / 8) == 0)
             {
-                new WorldGenLakes(Blocks.LAVA).generate(this.world, this.rand, blockpos.add(i2, l2, k3));
+                (new WorldGenLakes(Blocks.LAVA)).generate(this.world, this.rand, blockpos.add(i2, l2, k3));
             }
         }
 
         if (this.settings.useDungeons)
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, flag, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.DUNGEON))
         {
-            for (int j2 = 0; j2 < this.settings.dungeonChance; j2++)
+            for (int j2 = 0; j2 < this.settings.dungeonChance; ++j2)
             {
                 int i3 = this.rand.nextInt(16) + 8;
                 int l3 = this.rand.nextInt(256);
                 int l1 = this.rand.nextInt(16) + 8;
-                new WorldGenDungeons().generate(this.world, this.rand, blockpos.add(i3, l3, l1));
+                (new WorldGenDungeons()).generate(this.world, this.rand, blockpos.add(i3, l3, l1));
             }
         }
 
         biome.decorate(this.world, this.rand, new BlockPos(i, 0, j));
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, flag, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.ANIMALS))
         WorldEntitySpawner.performWorldGenSpawning(this.world, biome, i + 8, j + 8, 16, 16, this.rand);
         blockpos = blockpos.add(8, 0, 8);
 
-        for (int k2 = 0; k2 < 16; k2++)
-        {
-            for (int j3 = 0; j3 < 16; j3++)
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, flag, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.ICE))
+        {
+        for (int k2 = 0; k2 < 16; ++k2)
+        {
+            for (int j3 = 0; j3 < 16; ++j3)
             {
                 BlockPos blockpos1 = this.world.getPrecipitationHeight(blockpos.add(k2, 0, j3));
                 BlockPos blockpos2 = blockpos1.down();
@@ -489,11 +486,13 @@
                 }
             }
         }
+        }//Forge: End ICE
+
+        net.minecraftforge.event.ForgeEventFactory.onChunkPopulate(false, this, this.world, this.rand, x, z, flag);
 
         BlockFalling.fallInstantly = false;
     }
 
-    @Override
     public boolean generateStructures(Chunk chunkIn, int x, int z)
     {
         boolean flag = false;
@@ -506,7 +505,6 @@
         return flag;
     }
 
-    @Override
     public List<Biome.SpawnListEntry> getPossibleCreatures(EnumCreatureType creatureType, BlockPos pos)
     {
         Biome biome = this.world.getBiome(pos);
@@ -518,9 +516,7 @@
                 return this.scatteredFeatureGenerator.getMonsters();
             }
 
-            if (creatureType == EnumCreatureType.MONSTER
-                    && this.settings.useMonuments
-                    && this.oceanMonumentGenerator.isPositionInStructure(this.world, pos))
+            if (creatureType == EnumCreatureType.MONSTER && this.settings.useMonuments && this.oceanMonumentGenerator.isPositionInStructure(this.world, pos))
             {
                 return this.oceanMonumentGenerator.getMonsters();
             }
@@ -529,7 +525,6 @@
         return biome.getSpawnableList(creatureType);
     }
 
-    @Override
     public boolean isInsideStructure(World worldIn, String structureName, BlockPos pos)
     {
         if (!this.mapFeaturesEnabled)
@@ -563,7 +558,6 @@
     }
 
     @Nullable
-    @Override
     public BlockPos getNearestStructurePos(World worldIn, String structureName, BlockPos position, boolean findUnexplored)
     {
         if (!this.mapFeaturesEnabled)
@@ -596,39 +590,38 @@
         }
     }
 
-    @Override
     public void recreateStructures(Chunk chunkIn, int x, int z)
     {
         if (this.mapFeaturesEnabled)
         {
             if (this.settings.useMineShafts)
             {
-                this.mineshaftGenerator.generate(this.world, x, z, null);
+                this.mineshaftGenerator.generate(this.world, x, z, (ChunkPrimer)null);
             }
 
             if (this.settings.useVillages)
             {
-                this.villageGenerator.generate(this.world, x, z, null);
+                this.villageGenerator.generate(this.world, x, z, (ChunkPrimer)null);
             }
 
             if (this.settings.useStrongholds)
             {
-                this.strongholdGenerator.generate(this.world, x, z, null);
+                this.strongholdGenerator.generate(this.world, x, z, (ChunkPrimer)null);
             }
 
             if (this.settings.useTemples)
             {
-                this.scatteredFeatureGenerator.generate(this.world, x, z, null);
+                this.scatteredFeatureGenerator.generate(this.world, x, z, (ChunkPrimer)null);
             }
 
             if (this.settings.useMonuments)
             {
-                this.oceanMonumentGenerator.generate(this.world, x, z, null);
+                this.oceanMonumentGenerator.generate(this.world, x, z, (ChunkPrimer)null);
             }
 
             if (this.settings.useMansions)
             {
-                this.woodlandMansionGenerator.generate(this.world, x, z, null);
+                this.woodlandMansionGenerator.generate(this.world, x, z, (ChunkPrimer)null);
             }
         }
     }
