--- before/net/minecraft/world/gen/ChunkGeneratorHell.java
+++ after/net/minecraft/world/gen/ChunkGeneratorHell.java
@@ -50,12 +50,8 @@
     private final WorldGenFire fireFeature = new WorldGenFire();
     private final WorldGenGlowStone1 lightGemGen = new WorldGenGlowStone1();
     private final WorldGenGlowStone2 hellPortalGen = new WorldGenGlowStone2();
-    private final WorldGenerator quartzGen = new WorldGenMinable(
-        Blocks.QUARTZ_ORE.getDefaultState(), 14, BlockMatcher.forBlock(Blocks.NETHERRACK)
-    );
-    private final WorldGenerator magmaGen = new WorldGenMinable(
-        Blocks.MAGMA.getDefaultState(), 33, BlockMatcher.forBlock(Blocks.NETHERRACK)
-    );
+    private final WorldGenerator quartzGen = new WorldGenMinable(Blocks.QUARTZ_ORE.getDefaultState(), 14, BlockMatcher.forBlock(Blocks.NETHERRACK));
+    private final WorldGenerator magmaGen = new WorldGenMinable(Blocks.MAGMA.getDefaultState(), 33, BlockMatcher.forBlock(Blocks.NETHERRACK));
     private final WorldGenHellLava lavaTrapGen = new WorldGenHellLava(Blocks.FLOWING_LAVA, true);
     private final WorldGenHellLava hellSpringGen = new WorldGenHellLava(Blocks.FLOWING_LAVA, false);
     private final WorldGenBush brownMushroomFeature = new WorldGenBush(Blocks.BROWN_MUSHROOM);
@@ -81,6 +77,19 @@
         this.scaleNoise = new NoiseGeneratorOctaves(this.rand, 10);
         this.depthNoise = new NoiseGeneratorOctaves(this.rand, 16);
         worldIn.setSeaLevel(63);
+
+        net.minecraftforge.event.terraingen.InitNoiseGensEvent.ContextHell ctx =
+                new net.minecraftforge.event.terraingen.InitNoiseGensEvent.ContextHell(lperlinNoise1, lperlinNoise2, perlinNoise1, slowsandGravelNoiseGen, netherrackExculsivityNoiseGen, scaleNoise, depthNoise);
+        ctx = net.minecraftforge.event.terraingen.TerrainGen.getModdedNoiseGenerators(worldIn, this.rand, ctx);
+        this.lperlinNoise1 = ctx.getLPerlin1();
+        this.lperlinNoise2 = ctx.getLPerlin2();
+        this.perlinNoise1 = ctx.getPerlin();
+        this.slowsandGravelNoiseGen = ctx.getPerlin2();
+        this.netherrackExculsivityNoiseGen = ctx.getPerlin3();
+        this.scaleNoise = ctx.getScale();
+        this.depthNoise = ctx.getDepth();
+        this.genNetherBridge = (MapGenNetherBridge)net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(genNetherBridge, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.NETHER_BRIDGE);
+        this.genNetherCaves = net.minecraftforge.event.terraingen.TerrainGen.getModdedMapGen(genNetherCaves, net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.NETHER_CAVE);
     }
 
     public void prepareHeights(int p_185936_1_, int p_185936_2_, ChunkPrimer primer)
@@ -92,37 +101,37 @@
         int i1 = 5;
         this.buffer = this.getHeights(this.buffer, p_185936_1_ * 4, 0, p_185936_2_ * 4, 5, 17, 5);
 
-        for (int j1 = 0; j1 < 4; j1++)
+        for (int j1 = 0; j1 < 4; ++j1)
         {
-            for (int k1 = 0; k1 < 4; k1++)
+            for (int k1 = 0; k1 < 4; ++k1)
             {
-                for (int l1 = 0; l1 < 16; l1++)
+                for (int l1 = 0; l1 < 16; ++l1)
                 {
-                    double d0 = 0.125;
+                    double d0 = 0.125D;
                     double d1 = this.buffer[((j1 + 0) * 5 + k1 + 0) * 17 + l1 + 0];
                     double d2 = this.buffer[((j1 + 0) * 5 + k1 + 1) * 17 + l1 + 0];
                     double d3 = this.buffer[((j1 + 1) * 5 + k1 + 0) * 17 + l1 + 0];
                     double d4 = this.buffer[((j1 + 1) * 5 + k1 + 1) * 17 + l1 + 0];
-                    double d5 = (this.buffer[((j1 + 0) * 5 + k1 + 0) * 17 + l1 + 1] - d1) * 0.125;
-                    double d6 = (this.buffer[((j1 + 0) * 5 + k1 + 1) * 17 + l1 + 1] - d2) * 0.125;
-                    double d7 = (this.buffer[((j1 + 1) * 5 + k1 + 0) * 17 + l1 + 1] - d3) * 0.125;
-                    double d8 = (this.buffer[((j1 + 1) * 5 + k1 + 1) * 17 + l1 + 1] - d4) * 0.125;
+                    double d5 = (this.buffer[((j1 + 0) * 5 + k1 + 0) * 17 + l1 + 1] - d1) * 0.125D;
+                    double d6 = (this.buffer[((j1 + 0) * 5 + k1 + 1) * 17 + l1 + 1] - d2) * 0.125D;
+                    double d7 = (this.buffer[((j1 + 1) * 5 + k1 + 0) * 17 + l1 + 1] - d3) * 0.125D;
+                    double d8 = (this.buffer[((j1 + 1) * 5 + k1 + 1) * 17 + l1 + 1] - d4) * 0.125D;
 
-                    for (int i2 = 0; i2 < 8; i2++)
+                    for (int i2 = 0; i2 < 8; ++i2)
                     {
-                        double d9 = 0.25;
+                        double d9 = 0.25D;
                         double d10 = d1;
                         double d11 = d2;
-                        double d12 = (d3 - d1) * 0.25;
-                        double d13 = (d4 - d2) * 0.25;
+                        double d12 = (d3 - d1) * 0.25D;
+                        double d13 = (d4 - d2) * 0.25D;
 
-                        for (int j2 = 0; j2 < 4; j2++)
+                        for (int j2 = 0; j2 < 4; ++j2)
                         {
-                            double d14 = 0.25;
+                            double d14 = 0.25D;
                             double d15 = d10;
-                            double d16 = (d11 - d10) * 0.25;
+                            double d16 = (d11 - d10) * 0.25D;
 
-                            for (int k2 = 0; k2 < 4; k2++)
+                            for (int k2 = 0; k2 < 4; ++k2)
                             {
                                 IBlockState iblockstate = null;
 
@@ -131,7 +140,7 @@
                                     iblockstate = LAVA;
                                 }
 
-                                if (d15 > 0.0)
+                                if (d15 > 0.0D)
                                 {
                                     iblockstate = NETHERRACK;
                                 }
@@ -159,81 +168,85 @@
 
     public void buildSurfaces(int p_185937_1_, int p_185937_2_, ChunkPrimer primer)
     {
+        if (!net.minecraftforge.event.ForgeEventFactory.onReplaceBiomeBlocks(this, p_185937_1_, p_185937_2_, primer, this.world)) return;
         int i = this.world.getSeaLevel() + 1;
-        double d0 = 0.03125;
-        this.slowsandNoise = this.slowsandGravelNoiseGen.generateNoiseOctaves(this.slowsandNoise, p_185937_1_ * 16, p_185937_2_ * 16, 0, 16, 16, 1, 0.03125, 0.03125, 1.0);
-        this.gravelNoise = this.slowsandGravelNoiseGen.generateNoiseOctaves(this.gravelNoise, p_185937_1_ * 16, 109, p_185937_2_ * 16, 16, 1, 16, 0.03125, 1.0, 0.03125);
-        this.depthBuffer = this.netherrackExculsivityNoiseGen.generateNoiseOctaves(this.depthBuffer, p_185937_1_ * 16, p_185937_2_ * 16, 0, 16, 16, 1, 0.0625, 0.0625, 0.0625);
+        double d0 = 0.03125D;
+        this.slowsandNoise = this.slowsandGravelNoiseGen.generateNoiseOctaves(this.slowsandNoise, p_185937_1_ * 16, p_185937_2_ * 16, 0, 16, 16, 1, 0.03125D, 0.03125D, 1.0D);
+        this.gravelNoise = this.slowsandGravelNoiseGen.generateNoiseOctaves(this.gravelNoise, p_185937_1_ * 16, 109, p_185937_2_ * 16, 16, 1, 16, 0.03125D, 1.0D, 0.03125D);
+        this.depthBuffer = this.netherrackExculsivityNoiseGen.generateNoiseOctaves(this.depthBuffer, p_185937_1_ * 16, p_185937_2_ * 16, 0, 16, 16, 1, 0.0625D, 0.0625D, 0.0625D);
 
-        for (int j = 0; j < 16; j++)
+        for (int j = 0; j < 16; ++j)
         {
-            for (int k = 0; k < 16; k++)
+            for (int k = 0; k < 16; ++k)
             {
-                boolean flag = this.slowsandNoise[j + k * 16] + this.rand.nextDouble() * 0.2 > 0.0;
-                boolean flag1 = this.gravelNoise[j + k * 16] + this.rand.nextDouble() * 0.2 > 0.0;
-                int l = (int)(this.depthBuffer[j + k * 16] / 3.0 + 3.0 + this.rand.nextDouble() * 0.25);
+                boolean flag = this.slowsandNoise[j + k * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
+                boolean flag1 = this.gravelNoise[j + k * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
+                int l = (int)(this.depthBuffer[j + k * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
                 int i1 = -1;
                 IBlockState iblockstate = NETHERRACK;
                 IBlockState iblockstate1 = NETHERRACK;
 
-                for (int j1 = 127; j1 >= 0; j1--)
+                for (int j1 = 127; j1 >= 0; --j1)
                 {
                     if (j1 < 127 - this.rand.nextInt(5) && j1 > this.rand.nextInt(5))
                     {
                         IBlockState iblockstate2 = primer.getBlockState(k, j1, j);
 
-                        if (iblockstate2.getBlock() == null || iblockstate2.getMaterial() == Material.AIR)
-                        {
-                            i1 = -1;
-                        }
-                        else if (iblockstate2.getBlock() == Blocks.NETHERRACK)
-                        {
-                            if (i1 == -1)
+                        if (iblockstate2.getBlock() != null && iblockstate2.getMaterial() != Material.AIR)
+                        {
+                            if (iblockstate2.getBlock() == Blocks.NETHERRACK)
                             {
-                                if (l <= 0)
-                                {
-                                    iblockstate = AIR;
-                                    iblockstate1 = NETHERRACK;
-                                }
-                                else if (j1 >= i - 4 && j1 <= i + 1)
-                                {
-                                    iblockstate = NETHERRACK;
-                                    iblockstate1 = NETHERRACK;
-
-                                    if (flag1)
-                                    {
-                                        iblockstate = GRAVEL;
-                                        iblockstate1 = NETHERRACK;
-                                    }
-
-                                    if (flag)
-                                    {
-                                        iblockstate = SOUL_SAND;
-                                        iblockstate1 = SOUL_SAND;
-                                    }
-                                }
-
-                                if (j1 < i && (iblockstate == null || iblockstate.getMaterial() == Material.AIR))
-                                {
-                                    iblockstate = LAVA;
-                                }
-
-                                i1 = l;
-
-                                if (j1 >= i - 1)
-                                {
-                                    primer.setBlockState(k, j1, j, iblockstate);
-                                }
-                                else
-                                {
+                                if (i1 == -1)
+                                {
+                                    if (l <= 0)
+                                    {
+                                        iblockstate = AIR;
+                                        iblockstate1 = NETHERRACK;
+                                    }
+                                    else if (j1 >= i - 4 && j1 <= i + 1)
+                                    {
+                                        iblockstate = NETHERRACK;
+                                        iblockstate1 = NETHERRACK;
+
+                                        if (flag1)
+                                        {
+                                            iblockstate = GRAVEL;
+                                            iblockstate1 = NETHERRACK;
+                                        }
+
+                                        if (flag)
+                                        {
+                                            iblockstate = SOUL_SAND;
+                                            iblockstate1 = SOUL_SAND;
+                                        }
+                                    }
+
+                                    if (j1 < i && (iblockstate == null || iblockstate.getMaterial() == Material.AIR))
+                                    {
+                                        iblockstate = LAVA;
+                                    }
+
+                                    i1 = l;
+
+                                    if (j1 >= i - 1)
+                                    {
+                                        primer.setBlockState(k, j1, j, iblockstate);
+                                    }
+                                    else
+                                    {
+                                        primer.setBlockState(k, j1, j, iblockstate1);
+                                    }
+                                }
+                                else if (i1 > 0)
+                                {
+                                    --i1;
                                     primer.setBlockState(k, j1, j, iblockstate1);
                                 }
                             }
-                            else if (i1 > 0)
-                            {
-                                i1--;
-                                primer.setBlockState(k, j1, j, iblockstate1);
-                            }
+                        }
+                        else
+                        {
+                            i1 = -1;
                         }
                     }
                     else
@@ -245,7 +258,6 @@
         }
     }
 
-    @Override
     public Chunk generateChunk(int x, int z)
     {
         this.rand.setSeed((long)x * 341873128712L + (long)z * 132897987541L);
@@ -260,10 +272,10 @@
         }
 
         Chunk chunk = new Chunk(this.world, chunkprimer, x, z);
-        Biome[] abiome = this.world.getBiomeProvider().getBiomes(null, x * 16, z * 16, 16, 16);
+        Biome[] abiome = this.world.getBiomeProvider().getBiomes((Biome[])null, x * 16, z * 16, 16, 16);
         byte[] abyte = chunk.getBiomeArray();
 
-        for (int i = 0; i < abyte.length; i++)
+        for (int i = 0; i < abyte.length; ++i)
         {
             abyte[i] = (byte)Biome.getIdForBiome(abiome[i]);
         }
@@ -279,26 +291,23 @@
             p_185938_1_ = new double[p_185938_5_ * p_185938_6_ * p_185938_7_];
         }
 
-        double d0 = 684.412;
-        double d1 = 2053.236;
-        this.noiseData4 = this.scaleNoise
-                             .generateNoiseOctaves(this.noiseData4, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, 1, p_185938_7_, 1.0, 0.0, 1.0);
-        this.dr = this.depthNoise
-                              .generateNoiseOctaves(this.dr, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, 1, p_185938_7_, 100.0, 0.0, 100.0);
-        this.pnr = this.perlinNoise1
-                              .generateNoiseOctaves(
-                                  this.pnr, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, p_185938_6_, p_185938_7_, 8.555150000000001, 34.2206, 8.555150000000001
-                              );
-        this.ar = this.lperlinNoise1
-                              .generateNoiseOctaves(this.ar, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, p_185938_6_, p_185938_7_, 684.412, 2053.236, 684.412);
-        this.br = this.lperlinNoise2
-                              .generateNoiseOctaves(this.br, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, p_185938_6_, p_185938_7_, 684.412, 2053.236, 684.412);
+        net.minecraftforge.event.terraingen.ChunkGeneratorEvent.InitNoiseField event = new net.minecraftforge.event.terraingen.ChunkGeneratorEvent.InitNoiseField(this, p_185938_1_, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, p_185938_6_, p_185938_7_);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        if (event.getResult() == net.minecraftforge.fml.common.eventhandler.Event.Result.DENY) return event.getNoisefield();
+
+        double d0 = 684.412D;
+        double d1 = 2053.236D;
+        this.noiseData4 = this.scaleNoise.generateNoiseOctaves(this.noiseData4, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, 1, p_185938_7_, 1.0D, 0.0D, 1.0D);
+        this.dr = this.depthNoise.generateNoiseOctaves(this.dr, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, 1, p_185938_7_, 100.0D, 0.0D, 100.0D);
+        this.pnr = this.perlinNoise1.generateNoiseOctaves(this.pnr, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, p_185938_6_, p_185938_7_, 8.555150000000001D, 34.2206D, 8.555150000000001D);
+        this.ar = this.lperlinNoise1.generateNoiseOctaves(this.ar, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, p_185938_6_, p_185938_7_, 684.412D, 2053.236D, 684.412D);
+        this.br = this.lperlinNoise2.generateNoiseOctaves(this.br, p_185938_2_, p_185938_3_, p_185938_4_, p_185938_5_, p_185938_6_, p_185938_7_, 684.412D, 2053.236D, 684.412D);
         int i = 0;
         double[] adouble = new double[p_185938_6_];
 
-        for (int j = 0; j < p_185938_6_; j++)
+        for (int j = 0; j < p_185938_6_; ++j)
         {
-            adouble[j] = Math.cos((double)j * Math.PI * 6.0 / (double)p_185938_6_) * 2.0;
+            adouble[j] = Math.cos((double)j * Math.PI * 6.0D / (double)p_185938_6_) * 2.0D;
             double d2 = (double)j;
 
             if (j > p_185938_6_ / 2)
@@ -306,32 +315,32 @@
                 d2 = (double)(p_185938_6_ - 1 - j);
             }
 
-            if (d2 < 4.0)
+            if (d2 < 4.0D)
             {
-                d2 = 4.0 - d2;
-                adouble[j] -= d2 * d2 * d2 * 10.0;
+                d2 = 4.0D - d2;
+                adouble[j] -= d2 * d2 * d2 * 10.0D;
             }
         }
 
-        for (int l = 0; l < p_185938_5_; l++)
+        for (int l = 0; l < p_185938_5_; ++l)
         {
-            for (int i1 = 0; i1 < p_185938_7_; i1++)
+            for (int i1 = 0; i1 < p_185938_7_; ++i1)
             {
-                double d3 = 0.0;
+                double d3 = 0.0D;
 
-                for (int k = 0; k < p_185938_6_; k++)
+                for (int k = 0; k < p_185938_6_; ++k)
                 {
                     double d4 = adouble[k];
-                    double d5 = this.ar[i] / 512.0;
-                    double d6 = this.br[i] / 512.0;
-                    double d7 = (this.pnr[i] / 10.0 + 1.0) / 2.0;
+                    double d5 = this.ar[i] / 512.0D;
+                    double d6 = this.br[i] / 512.0D;
+                    double d7 = (this.pnr[i] / 10.0D + 1.0D) / 2.0D;
                     double d8;
 
-                    if (d7 < 0.0)
+                    if (d7 < 0.0D)
                     {
                         d8 = d5;
                     }
-                    else if (d7 > 1.0)
+                    else if (d7 > 1.0D)
                     {
                         d8 = d6;
                     }
@@ -340,23 +349,23 @@
                         d8 = d5 + (d6 - d5) * d7;
                     }
 
-                    d8 -= d4;
+                    d8 = d8 - d4;
 
                     if (k > p_185938_6_ - 4)
                     {
                         double d9 = (double)((float)(k - (p_185938_6_ - 4)) / 3.0F);
-                        d8 = d8 * (1.0 - d9) + -10.0 * d9;
+                        d8 = d8 * (1.0D - d9) + -10.0D * d9;
                     }
 
-                    if ((double)k < 0.0)
+                    if ((double)k < 0.0D)
                     {
-                        double d10 = (0.0 - (double)k) / 4.0;
-                        d10 = MathHelper.clamp(d10, 0.0, 1.0);
-                        d8 = d8 * (1.0 - d10) + -10.0 * d10;
+                        double d10 = (0.0D - (double)k) / 4.0D;
+                        d10 = MathHelper.clamp(d10, 0.0D, 1.0D);
+                        d8 = d8 * (1.0D - d10) + -10.0D * d10;
                     }
 
                     p_185938_1_[i] = d8;
-                    i++;
+                    ++i;
                 }
             }
         }
@@ -364,10 +373,10 @@
         return p_185938_1_;
     }
 
-    @Override
     public void populate(int x, int z)
     {
         BlockFalling.fallInstantly = true;
+        net.minecraftforge.event.ForgeEventFactory.onChunkPopulate(true, this, this.world, this.rand, x, z, false);
         int i = x * 16;
         int j = z * 16;
         BlockPos blockpos = new BlockPos(i, 0, j);
@@ -375,109 +384,81 @@
         ChunkPos chunkpos = new ChunkPos(x, z);
         this.genNetherBridge.generateStructure(this.world, this.rand, chunkpos);
 
-        for (int k = 0; k < 8; k++)
-        {
-            this.hellSpringGen
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(120) + 4, this.rand.nextInt(16) + 8)
-            );
-        }
-
-        for (int i1 = 0; i1 < this.rand.nextInt(this.rand.nextInt(10) + 1) + 1; i1++)
-        {
-            this.fireFeature
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(120) + 4, this.rand.nextInt(16) + 8)
-            );
-        }
-
-        for (int j1 = 0; j1 < this.rand.nextInt(this.rand.nextInt(10) + 1); j1++)
-        {
-            this.lightGemGen
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(120) + 4, this.rand.nextInt(16) + 8)
-            );
-        }
-
-        for (int k1 = 0; k1 < 10; k1++)
-        {
-            this.hellPortalGen
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(128), this.rand.nextInt(16) + 8)
-            );
-        }
-
-        if (this.rand.nextBoolean())
-        {
-            this.brownMushroomFeature
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(128), this.rand.nextInt(16) + 8)
-            );
-        }
-
-        if (this.rand.nextBoolean())
-        {
-            this.redMushroomFeature
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(128), this.rand.nextInt(16) + 8)
-            );
-        }
-
-        for (int l1 = 0; l1 < 16; l1++)
-        {
-            this.quartzGen
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16), this.rand.nextInt(108) + 10, this.rand.nextInt(16))
-            );
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, false, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.NETHER_LAVA))
+        for (int k = 0; k < 8; ++k)
+        {
+            this.hellSpringGen.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(120) + 4, this.rand.nextInt(16) + 8));
+        }
+
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, false, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.FIRE))
+        for (int i1 = 0; i1 < this.rand.nextInt(this.rand.nextInt(10) + 1) + 1; ++i1)
+        {
+            this.fireFeature.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(120) + 4, this.rand.nextInt(16) + 8));
+        }
+
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, false, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.GLOWSTONE))
+        {
+        for (int j1 = 0; j1 < this.rand.nextInt(this.rand.nextInt(10) + 1); ++j1)
+        {
+            this.lightGemGen.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(120) + 4, this.rand.nextInt(16) + 8));
+        }
+
+        for (int k1 = 0; k1 < 10; ++k1)
+        {
+            this.hellPortalGen.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(128), this.rand.nextInt(16) + 8));
+        }
+        }//Forge: End doGLowstone
+
+        net.minecraftforge.event.ForgeEventFactory.onChunkPopulate(false, this, this.world, this.rand, x, z, false);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.terraingen.DecorateBiomeEvent.Pre(this.world, this.rand, chunkpos));
+
+        if (net.minecraftforge.event.terraingen.TerrainGen.decorate(this.world, this.rand, chunkpos, net.minecraftforge.event.terraingen.DecorateBiomeEvent.Decorate.EventType.SHROOM))
+        {
+        if (this.rand.nextBoolean())
+        {
+            this.brownMushroomFeature.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(128), this.rand.nextInt(16) + 8));
+        }
+
+        if (this.rand.nextBoolean())
+        {
+            this.redMushroomFeature.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16) + 8, this.rand.nextInt(128), this.rand.nextInt(16) + 8));
+        }
+        }
+
+
+        if (net.minecraftforge.event.terraingen.TerrainGen.generateOre(this.world, this.rand, quartzGen, blockpos, net.minecraftforge.event.terraingen.OreGenEvent.GenerateMinable.EventType.QUARTZ))
+        for (int l1 = 0; l1 < 16; ++l1)
+        {
+            this.quartzGen.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16), this.rand.nextInt(108) + 10, this.rand.nextInt(16)));
         }
 
         int i2 = this.world.getSeaLevel() / 2 + 1;
 
-        for (int l = 0; l < 4; l++)
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, false, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.NETHER_MAGMA))
+        for (int l = 0; l < 4; ++l)
         {
-            this.magmaGen
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16), i2 - 5 + this.rand.nextInt(10), this.rand.nextInt(16))
-            );
+            this.magmaGen.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16), i2 - 5 + this.rand.nextInt(10), this.rand.nextInt(16)));
         }
 
-        for (int j2 = 0; j2 < 16; j2++)
+        if (net.minecraftforge.event.terraingen.TerrainGen.populate(this, this.world, this.rand, x, z, false, net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.NETHER_LAVA2))
+        for (int j2 = 0; j2 < 16; ++j2)
         {
-            this.lavaTrapGen
-            .generate(
-                this.world,
-                this.rand,
-                blockpos.add(this.rand.nextInt(16), this.rand.nextInt(108) + 10, this.rand.nextInt(16))
-            );
+            int offset = net.minecraftforge.common.ForgeModContainer.fixVanillaCascading ? 8 : 0; // MC-117810
+            this.lavaTrapGen.generate(this.world, this.rand, blockpos.add(this.rand.nextInt(16) + offset, this.rand.nextInt(108) + 10, this.rand.nextInt(16) + offset));
         }
 
         biome.decorate(this.world, this.rand, new BlockPos(i, 0, j));
+
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.terraingen.DecorateBiomeEvent.Post(this.world, this.rand, blockpos));
+
         BlockFalling.fallInstantly = false;
     }
 
-    @Override
     public boolean generateStructures(Chunk chunkIn, int x, int z)
     {
         return false;
     }
 
-    @Override
     public List<Biome.SpawnListEntry> getPossibleCreatures(EnumCreatureType creatureType, BlockPos pos)
     {
         if (creatureType == EnumCreatureType.MONSTER)
@@ -487,8 +468,7 @@
                 return this.genNetherBridge.getSpawnList();
             }
 
-            if (this.genNetherBridge.isPositionInStructure(this.world, pos)
-                    && this.world.getBlockState(pos.down()).getBlock() == Blocks.NETHER_BRICK)
+            if (this.genNetherBridge.isPositionInStructure(this.world, pos) && this.world.getBlockState(pos.down()).getBlock() == Blocks.NETHER_BRICK)
             {
                 return this.genNetherBridge.getSpawnList();
             }
@@ -499,21 +479,18 @@
     }
 
     @Nullable
-    @Override
     public BlockPos getNearestStructurePos(World worldIn, String structureName, BlockPos position, boolean findUnexplored)
     {
         return "Fortress".equals(structureName) && this.genNetherBridge != null ? this.genNetherBridge.getNearestStructurePos(worldIn, position, findUnexplored) : null;
     }
 
-    @Override
     public boolean isInsideStructure(World worldIn, String structureName, BlockPos pos)
     {
         return "Fortress".equals(structureName) && this.genNetherBridge != null ? this.genNetherBridge.isInsideStructure(pos) : false;
     }
 
-    @Override
     public void recreateStructures(Chunk chunkIn, int x, int z)
     {
-        this.genNetherBridge.generate(this.world, x, z, null);
+        this.genNetherBridge.generate(this.world, x, z, (ChunkPrimer)null);
     }
 }
