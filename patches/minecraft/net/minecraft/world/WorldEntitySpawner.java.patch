--- before/net/minecraft/world/WorldEntitySpawner.java
+++ after/net/minecraft/world/WorldEntitySpawner.java
@@ -24,8 +24,8 @@
 
 public final class WorldEntitySpawner
 {
-    private static final int MOB_COUNT_DIV = (int)Math.pow(17.0, 2.0);
-    private final Set<ChunkPos> eligibleChunksForSpawning = Sets.newHashSet();
+    private static final int MOB_COUNT_DIV = (int)Math.pow(17.0D, 2.0D);
+    private final Set<ChunkPos> eligibleChunksForSpawning = Sets.<ChunkPos>newHashSet();
 
     public int findChunksForSpawning(WorldServer worldServerIn, boolean spawnHostileMobs, boolean spawnPeacefulMobs, boolean spawnOnSetTickRate)
     {
@@ -42,20 +42,20 @@
             {
                 if (!entityplayer.isSpectator())
                 {
-                    int j = MathHelper.floor(entityplayer.posX / 16.0);
-                    int k = MathHelper.floor(entityplayer.posZ / 16.0);
+                    int j = MathHelper.floor(entityplayer.posX / 16.0D);
+                    int k = MathHelper.floor(entityplayer.posZ / 16.0D);
                     int l = 8;
 
-                    for (int i1 = -8; i1 <= 8; i1++)
+                    for (int i1 = -8; i1 <= 8; ++i1)
                     {
-                        for (int j1 = -8; j1 <= 8; j1++)
+                        for (int j1 = -8; j1 <= 8; ++j1)
                         {
                             boolean flag = i1 == -8 || i1 == 8 || j1 == -8 || j1 == 8;
                             ChunkPos chunkpos = new ChunkPos(i1 + j, j1 + k);
 
                             if (!this.eligibleChunksForSpawning.contains(chunkpos))
                             {
-                                i++;
+                                ++i;
 
                                 if (!flag && worldServerIn.getWorldBorder().contains(chunkpos))
                                 {
@@ -77,19 +77,19 @@
 
             for (EnumCreatureType enumcreaturetype : EnumCreatureType.values())
             {
-                if ((!enumcreaturetype.getPeacefulCreature() || spawnPeacefulMobs)
-                        && (enumcreaturetype.getPeacefulCreature() || spawnHostileMobs)
-                        && (!enumcreaturetype.getAnimal() || spawnOnSetTickRate))
+                if ((!enumcreaturetype.getPeacefulCreature() || spawnPeacefulMobs) && (enumcreaturetype.getPeacefulCreature() || spawnHostileMobs) && (!enumcreaturetype.getAnimal() || spawnOnSetTickRate))
                 {
-                    int k4 = worldServerIn.countEntities(enumcreaturetype.getCreatureClass());
+                    int k4 = worldServerIn.countEntities(enumcreaturetype, true);
                     int l4 = enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV;
 
                     if (k4 <= l4)
                     {
+                        java.util.ArrayList<ChunkPos> shuffled = com.google.common.collect.Lists.newArrayList(this.eligibleChunksForSpawning);
+                        java.util.Collections.shuffle(shuffled);
                         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
                         label134:
 
-                        for (ChunkPos chunkpos1 : this.eligibleChunksForSpawning)
+                        for (ChunkPos chunkpos1 : shuffled)
                         {
                             BlockPos blockpos = getRandomChunkPosition(worldServerIn, chunkpos1.x, chunkpos1.z);
                             int k1 = blockpos.getX();
@@ -101,7 +101,7 @@
                             {
                                 int j2 = 0;
 
-                                for (int k2 = 0; k2 < 3; k2++)
+                                for (int k2 = 0; k2 < 3; ++k2)
                                 {
                                     int l2 = k1;
                                     int i3 = l1;
@@ -109,9 +109,9 @@
                                     int k3 = 6;
                                     Biome.SpawnListEntry biome$spawnlistentry = null;
                                     IEntityLivingData ientitylivingdata = null;
-                                    int l3 = MathHelper.ceil(Math.random() * 4.0);
+                                    int l3 = MathHelper.ceil(Math.random() * 4.0D);
 
-                                    for (int i4 = 0; i4 < l3; i4++)
+                                    for (int i4 = 0; i4 < l3; ++i4)
                                     {
                                         l2 += worldServerIn.rand.nextInt(6) - worldServerIn.rand.nextInt(6);
                                         i3 += worldServerIn.rand.nextInt(1) - worldServerIn.rand.nextInt(1);
@@ -120,8 +120,7 @@
                                         float f = (float)l2 + 0.5F;
                                         float f1 = (float)j3 + 0.5F;
 
-                                        if (!worldServerIn.isAnyPlayerWithinRangeAt((double)f, (double)i3, (double)f1, 24.0)
-                                                && !(blockpos1.distanceSq((double)f, (double)i3, (double)f1) < 576.0))
+                                        if (!worldServerIn.isAnyPlayerWithinRangeAt((double)f, (double)i3, (double)f1, 24.0D) && blockpos1.distanceSq((double)f, (double)i3, (double)f1) >= 576.0D)
                                         {
                                             if (biome$spawnlistentry == null)
                                             {
@@ -133,16 +132,13 @@
                                                 }
                                             }
 
-                                            if (worldServerIn.canCreatureTypeSpawnHere(enumcreaturetype, biome$spawnlistentry, blockpos$mutableblockpos)
-                                                    && canCreatureTypeSpawnAtLocation(
-                                                        EntitySpawnPlacementRegistry.getPlacementForEntity(biome$spawnlistentry.entityClass), worldServerIn, blockpos$mutableblockpos
-                                                    ))
+                                            if (worldServerIn.canCreatureTypeSpawnHere(enumcreaturetype, biome$spawnlistentry, blockpos$mutableblockpos) && canCreatureTypeSpawnAtLocation(EntitySpawnPlacementRegistry.getPlacementForEntity(biome$spawnlistentry.entityClass), worldServerIn, blockpos$mutableblockpos))
                                             {
                                                 EntityLiving entityliving;
 
                                                 try
                                                 {
-                                                    entityliving = biome$spawnlistentry.entityClass.getConstructor(World.class).newInstance(worldServerIn);
+                                                    entityliving = biome$spawnlistentry.newInstance(worldServerIn);
                                                 }
                                                 catch (Exception exception)
                                                 {
@@ -152,13 +148,15 @@
 
                                                 entityliving.setLocationAndAngles((double)f, (double)i3, (double)f1, worldServerIn.rand.nextFloat() * 360.0F, 0.0F);
 
-                                                if (entityliving.getCanSpawnHere() && entityliving.isNotColliding())
+                                                net.minecraftforge.fml.common.eventhandler.Event.Result canSpawn = net.minecraftforge.event.ForgeEventFactory.canEntitySpawn(entityliving, worldServerIn, f, i3, f1, false);
+                                                if (canSpawn == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW || (canSpawn == net.minecraftforge.fml.common.eventhandler.Event.Result.DEFAULT && (entityliving.getCanSpawnHere() && entityliving.isNotColliding())))
                                                 {
+                                                    if (!net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn(entityliving, worldServerIn, f, i3, f1))
                                                     ientitylivingdata = entityliving.onInitialSpawn(worldServerIn.getDifficultyForLocation(new BlockPos(entityliving)), ientitylivingdata);
 
                                                     if (entityliving.isNotColliding())
                                                     {
-                                                        j2++;
+                                                        ++j2;
                                                         worldServerIn.spawnEntity(entityliving);
                                                     }
                                                     else
@@ -166,7 +164,7 @@
                                                         entityliving.setDead();
                                                     }
 
-                                                    if (j2 >= entityliving.getMaxSpawnedInChunk())
+                                                    if (j2 >= net.minecraftforge.event.ForgeEventFactory.getMaxSpawnPackSize(entityliving))
                                                     {
                                                         continue label134;
                                                     }
@@ -207,9 +205,13 @@
         {
             return false;
         }
+        else if (state.getMaterial().isLiquid())
+        {
+            return false;
+        }
         else
         {
-            return state.getMaterial().isLiquid() ? false : !BlockRailBase.isRailBlock(state);
+            return !BlockRailBase.isRailBlock(state);
         }
     }
 
@@ -221,19 +223,25 @@
         }
         else
         {
+            return spawnPlacementTypeIn.canSpawnAt(worldIn, pos);
+        }
+    }
+
+    public static boolean canCreatureTypeSpawnBody(EntityLiving.SpawnPlacementType spawnPlacementTypeIn, World worldIn, BlockPos pos)
+    {
+        {
             IBlockState iblockstate = worldIn.getBlockState(pos);
 
             if (spawnPlacementTypeIn == EntityLiving.SpawnPlacementType.IN_WATER)
             {
-                return iblockstate.getMaterial() == Material.WATER
-                       && worldIn.getBlockState(pos.down()).getMaterial() == Material.WATER
-                       && !worldIn.getBlockState(pos.up()).isNormalCube();
+                return iblockstate.getMaterial() == Material.WATER && worldIn.getBlockState(pos.down()).getMaterial() == Material.WATER && !worldIn.getBlockState(pos.up()).isNormalCube();
             }
             else
             {
                 BlockPos blockpos = pos.down();
+                IBlockState state = worldIn.getBlockState(blockpos);
 
-                if (!worldIn.getBlockState(blockpos).isTopSolid())
+                if (!state.getBlock().canCreatureSpawn(state, worldIn, blockpos, spawnPlacementTypeIn))
                 {
                     return false;
                 }
@@ -255,7 +263,7 @@
         {
             while (randomIn.nextFloat() < biomeIn.getSpawningChance())
             {
-                Biome.SpawnListEntry biome$spawnlistentry = WeightedRandom.getRandomItem(worldIn.rand, list);
+                Biome.SpawnListEntry biome$spawnlistentry = (Biome.SpawnListEntry)WeightedRandom.getRandomItem(worldIn.rand, list);
                 int i = biome$spawnlistentry.minGroupCount + randomIn.nextInt(1 + biome$spawnlistentry.maxGroupCount - biome$spawnlistentry.minGroupCount);
                 IEntityLivingData ientitylivingdata = null;
                 int j = centerX + randomIn.nextInt(diameterX);
@@ -263,11 +271,11 @@
                 int l = j;
                 int i1 = k;
 
-                for (int j1 = 0; j1 < i; j1++)
+                for (int j1 = 0; j1 < i; ++j1)
                 {
                     boolean flag = false;
 
-                    for (int k1 = 0; !flag && k1 < 4; k1++)
+                    for (int k1 = 0; !flag && k1 < 4; ++k1)
                     {
                         BlockPos blockpos = worldIn.getTopSolidOrLiquidBlock(new BlockPos(j, 0, k));
 
@@ -277,7 +285,7 @@
 
                             try
                             {
-                                entityliving = biome$spawnlistentry.entityClass.getConstructor(World.class).newInstance(worldIn);
+                                entityliving = biome$spawnlistentry.newInstance(worldIn);
                             }
                             catch (Exception exception)
                             {
@@ -285,9 +293,8 @@
                                 continue;
                             }
 
-                            entityliving.setLocationAndAngles(
-                                (double)((float)j + 0.5F), (double)blockpos.getY(), (double)((float)k + 0.5F), randomIn.nextFloat() * 360.0F, 0.0F
-                            );
+                            if (net.minecraftforge.event.ForgeEventFactory.canEntitySpawn(entityliving, worldIn, j + 0.5f, (float) blockpos.getY(), k +0.5f, false) == net.minecraftforge.fml.common.eventhandler.Event.Result.DENY) continue;
+                            entityliving.setLocationAndAngles((double)((float)j + 0.5F), (double)blockpos.getY(), (double)((float)k + 0.5F), randomIn.nextFloat() * 360.0F, 0.0F);
                             worldIn.spawnEntity(entityliving);
                             ientitylivingdata = entityliving.onInitialSpawn(worldIn.getDifficultyForLocation(new BlockPos(entityliving)), ientitylivingdata);
                             flag = true;
@@ -295,10 +302,7 @@
 
                         j += randomIn.nextInt(5) - randomIn.nextInt(5);
 
-                        for (k += randomIn.nextInt(5) - randomIn.nextInt(5);
-                                j < centerX || j >= centerX + diameterX || k < centerZ || k >= centerZ + diameterX;
-                                k = i1 + randomIn.nextInt(5) - randomIn.nextInt(5)
-                            )
+                        for (k += randomIn.nextInt(5) - randomIn.nextInt(5); j < centerX || j >= centerX + diameterX || k < centerZ || k >= centerZ + diameterX; k = i1 + randomIn.nextInt(5) - randomIn.nextInt(5))
                         {
                             j = l + randomIn.nextInt(5) - randomIn.nextInt(5);
                         }
