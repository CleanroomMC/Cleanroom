--- before/net/minecraft/world/end/DragonFightManager.java
+++ after/net/minecraft/world/end/DragonFightManager.java
@@ -8,6 +8,7 @@
 import com.google.common.collect.Range;
 import com.google.common.collect.Sets;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
@@ -50,16 +51,10 @@
 public class DragonFightManager
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Predicate<EntityPlayerMP> VALID_PLAYER = Predicates.and(
-                    EntitySelectors.IS_ALIVE, EntitySelectors.withinRange(0.0, 128.0, 0.0, 192.0)
-                );
-    private final BossInfoServer bossInfo = (BossInfoServer)new BossInfoServer(
-                new TextComponentTranslation("entity.EnderDragon.name"), BossInfo.Color.PINK, BossInfo.Overlay.PROGRESS
-            )
-            .setPlayEndBossMusic(true)
-            .setCreateFog(true);
+    private static final Predicate<EntityPlayerMP> VALID_PLAYER = Predicates.<EntityPlayerMP>and(EntitySelectors.IS_ALIVE, EntitySelectors.withinRange(0.0D, 128.0D, 0.0D, 192.0D));
+    private final BossInfoServer bossInfo = (BossInfoServer)(new BossInfoServer(new TextComponentTranslation("entity.EnderDragon.name", new Object[0]), BossInfo.Color.PINK, BossInfo.Overlay.PROGRESS)).setPlayEndBossMusic(true).setCreateFog(true);
     private final WorldServer world;
-    private final List<Integer> gateways = Lists.newArrayList();
+    private final List<Integer> gateways = Lists.<Integer>newArrayList();
     private final BlockPattern portalPattern;
     private int ticksSinceDragonSeen;
     private int aliveCrystals;
@@ -87,6 +82,7 @@
 
             this.dragonKilled = compound.getBoolean("DragonKilled");
             this.previouslyKilled = compound.getBoolean("PreviouslyKilled");
+            this.scanForLegacyFight = !compound.getBoolean("LegacyScanPerformed"); // Forge: fix MC-105080
 
             if (compound.getBoolean("IsRespawning"))
             {
@@ -108,25 +104,18 @@
         {
             NBTTagList nbttaglist = compound.getTagList("Gateways", 3);
 
-            for (int i = 0; i < nbttaglist.tagCount(); i++)
+            for (int i = 0; i < nbttaglist.tagCount(); ++i)
             {
-                this.gateways.add(nbttaglist.getIntAt(i));
+                this.gateways.add(Integer.valueOf(nbttaglist.getIntAt(i)));
             }
         }
         else
         {
-            this.gateways.addAll(ContiguousSet.create(Range.closedOpen(0, 20), DiscreteDomain.integers()));
+            this.gateways.addAll(ContiguousSet.create(Range.closedOpen(Integer.valueOf(0), Integer.valueOf(20)), DiscreteDomain.integers()));
             Collections.shuffle(this.gateways, new Random(worldIn.getSeed()));
         }
 
-        this.portalPattern = FactoryBlockPattern.start()
-                              .aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ")
-                              .aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ")
-                              .aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ")
-                              .aisle("  ###  ", " #   # ", "#     #", "#  #  #", "#     #", " #   # ", "  ###  ")
-                              .aisle("       ", "  ###  ", " ##### ", " ##### ", " ##### ", "  ###  ", "       ")
-                              .where('#', BlockWorldState.hasState(BlockMatcher.forBlock(Blocks.BEDROCK)))
-                              .build();
+        this.portalPattern = FactoryBlockPattern.start().aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("  ###  ", " #   # ", "#     #", "#  #  #", "#     #", " #   # ", "  ###  ").aisle("       ", "  ###  ", " ##### ", " ##### ", " ##### ", "  ###  ", "       ").where('#', BlockWorldState.hasState(BlockMatcher.forBlock(Blocks.BEDROCK))).build();
     }
 
     public NBTTagCompound getCompound()
@@ -140,6 +129,7 @@
 
         nbttagcompound.setBoolean("DragonKilled", this.dragonKilled);
         nbttagcompound.setBoolean("PreviouslyKilled", this.previouslyKilled);
+        nbttagcompound.setBoolean("LegacyScanPerformed", !this.scanForLegacyFight); // Forge: fix MC-105080
 
         if (this.exitPortalLocation != null)
         {
@@ -147,9 +137,11 @@
         }
 
         NBTTagList nbttaglist = new NBTTagList();
+        Iterator iterator = this.gateways.iterator();
 
-        for (int i : this.gateways)
+        while (iterator.hasNext())
         {
+            int i = ((Integer)iterator.next()).intValue();
             nbttaglist.appendTag(new NBTTagInt(i));
         }
 
@@ -198,7 +190,7 @@
                 {
                     EntityDragon entitydragon = list.get(0);
                     this.dragonUniqueId = entitydragon.getUniqueID();
-                    LOGGER.info("Found that there's a dragon still alive ({})", entitydragon);
+                    LOGGER.info("Found that there's a dragon still alive ({})", (Object)entitydragon);
                     this.dragonKilled = false;
 
                     if (!flag)
@@ -241,7 +233,7 @@
                     else
                     {
                         LOGGER.debug("Haven't seen our dragon, but found another one to use.");
-                        this.dragonUniqueId = list1.get(0).getUniqueID();
+                        this.dragonUniqueId = ((EntityDragon)list1.get(0)).getUniqueID();
                     }
 
                     this.ticksSinceDragonSeen = 0;
@@ -286,9 +278,9 @@
 
     private boolean hasDragonBeenKilled()
     {
-        for (int i = -8; i <= 8; i++)
+        for (int i = -8; i <= 8; ++i)
         {
-            for (int j = -8; j <= 8; j++)
+            for (int j = -8; j <= 8; ++j)
             {
                 Chunk chunk = this.world.getChunk(i, j);
 
@@ -308,9 +300,9 @@
     @Nullable
     private BlockPattern.PatternHelper findExitPortal()
     {
-        for (int i = -8; i <= 8; i++)
+        for (int i = -8; i <= 8; ++i)
         {
-            for (int j = -8; j <= 8; j++)
+            for (int j = -8; j <= 8; ++j)
             {
                 Chunk chunk = this.world.getChunk(i, j);
 
@@ -338,12 +330,9 @@
 
         int k = this.world.getHeight(WorldGenEndPodium.END_PODIUM_LOCATION).getY();
 
-        for (int l = k; l >= 0; l--)
+        for (int l = k; l >= 0; --l)
         {
-            BlockPattern.PatternHelper blockpattern$patternhelper1 = this.portalPattern
-                    .match(
-                        this.world, new BlockPos(WorldGenEndPodium.END_PODIUM_LOCATION.getX(), l, WorldGenEndPodium.END_PODIUM_LOCATION.getZ())
-                    );
+            BlockPattern.PatternHelper blockpattern$patternhelper1 = this.portalPattern.match(this.world, new BlockPos(WorldGenEndPodium.END_PODIUM_LOCATION.getX(), l, WorldGenEndPodium.END_PODIUM_LOCATION.getZ()));
 
             if (blockpattern$patternhelper1 != null)
             {
@@ -361,9 +350,9 @@
 
     private void loadChunks()
     {
-        for (int i = -8; i <= 8; i++)
+        for (int i = -8; i <= 8; ++i)
         {
-            for (int j = -8; j <= 8; j++)
+            for (int j = -8; j <= 8; ++j)
             {
                 this.world.getChunk(i, j);
             }
@@ -372,7 +361,7 @@
 
     private void updatePlayers()
     {
-        Set<EntityPlayerMP> set = Sets.newHashSet();
+        Set<EntityPlayerMP> set = Sets.<EntityPlayerMP>newHashSet();
 
         for (EntityPlayerMP entityplayermp : this.world.getPlayers(EntityPlayerMP.class, VALID_PLAYER))
         {
@@ -396,10 +385,10 @@
 
         for (WorldGenSpikes.EndSpike worldgenspikes$endspike : BiomeEndDecorator.getSpikesForWorld(this.world))
         {
-            this.aliveCrystals = this.aliveCrystals + this.world.getEntitiesWithinAABB(EntityEnderCrystal.class, worldgenspikes$endspike.getTopBoundingBox()).size();
+            this.aliveCrystals += this.world.getEntitiesWithinAABB(EntityEnderCrystal.class, worldgenspikes$endspike.getTopBoundingBox()).size();
         }
 
-        LOGGER.debug("Found {} end crystals still alive", this.aliveCrystals);
+        LOGGER.debug("Found {} end crystals still alive", (int)this.aliveCrystals);
     }
 
     public void processDragonDeath(EntityDragon dragon)
@@ -425,9 +414,9 @@
     {
         if (!this.gateways.isEmpty())
         {
-            int i = this.gateways.remove(this.gateways.size() - 1);
-            int j = (int)(96.0 * Math.cos(2.0 * (-Math.PI + (Math.PI / 20) * (double)i)));
-            int k = (int)(96.0 * Math.sin(2.0 * (-Math.PI + (Math.PI / 20) * (double)i)));
+            int i = ((Integer)this.gateways.remove(this.gateways.size() - 1)).intValue();
+            int j = (int)(96.0D * Math.cos(2.0D * (-Math.PI + 0.15707963267948966D * (double)i)));
+            int k = (int)(96.0D * Math.sin(2.0D * (-Math.PI + 0.15707963267948966D * (double)i)));
             this.generateGateway(new BlockPos(j, 75, k));
         }
     }
@@ -435,7 +424,7 @@
     private void generateGateway(BlockPos pos)
     {
         this.world.playEvent(3000, pos, 0);
-        new WorldGenEndGateway().generate(this.world, new Random(), pos);
+        (new WorldGenEndGateway()).generate(this.world, new Random(), pos);
     }
 
     private void generatePortal(boolean active)
@@ -444,14 +433,9 @@
 
         if (this.exitPortalLocation == null)
         {
-            this.exitPortalLocation = this.world.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION).down();
-
-            while (
-                this.world.getBlockState(this.exitPortalLocation).getBlock() == Blocks.BEDROCK
-                && this.exitPortalLocation.getY() > this.world.getSeaLevel()
-            )
+            for (this.exitPortalLocation = this.world.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION).down(); this.world.getBlockState(this.exitPortalLocation).getBlock() == Blocks.BEDROCK && this.exitPortalLocation.getY() > this.world.getSeaLevel(); this.exitPortalLocation = this.exitPortalLocation.down())
             {
-                this.exitPortalLocation = this.exitPortalLocation.down();
+                ;
             }
         }
 
@@ -463,7 +447,7 @@
         this.world.getChunk(new BlockPos(0, 128, 0));
         EntityDragon entitydragon = new EntityDragon(this.world);
         entitydragon.getPhaseManager().setPhase(PhaseList.HOLDING_PATTERN);
-        entitydragon.setLocationAndAngles(0.0, 128.0, 0.0, this.world.rand.nextFloat() * 360.0F, 0.0F);
+        entitydragon.setLocationAndAngles(0.0D, 128.0D, 0.0D, this.world.rand.nextFloat() * 360.0F, 0.0F);
         this.world.spawnEntity(entitydragon);
         this.dragonUniqueId = entitydragon.getUniqueID();
         return entitydragon;
@@ -539,13 +523,12 @@
                 blockpos = this.exitPortalLocation;
             }
 
-            List<EntityEnderCrystal> list1 = Lists.newArrayList();
+            List<EntityEnderCrystal> list1 = Lists.<EntityEnderCrystal>newArrayList();
             BlockPos blockpos1 = blockpos.up(1);
 
             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
             {
-                List<EntityEnderCrystal> list = this.world
-                                                .getEntitiesWithinAABB(EntityEnderCrystal.class, new AxisAlignedBB(blockpos1.offset(enumfacing, 2)));
+                List<EntityEnderCrystal> list = this.world.getEntitiesWithinAABB(EntityEnderCrystal.class, new AxisAlignedBB(blockpos1.offset(enumfacing, 2)));
 
                 if (list.isEmpty())
                 {
@@ -564,21 +547,17 @@
     {
         if (this.dragonKilled && this.respawnState == null)
         {
-            for (BlockPattern.PatternHelper blockpattern$patternhelper = this.findExitPortal();
-                    blockpattern$patternhelper != null;
-                    blockpattern$patternhelper = this.findExitPortal()
-                )
+            for (BlockPattern.PatternHelper blockpattern$patternhelper = this.findExitPortal(); blockpattern$patternhelper != null; blockpattern$patternhelper = this.findExitPortal())
             {
-                for (int i = 0; i < this.portalPattern.getPalmLength(); i++)
+                for (int i = 0; i < this.portalPattern.getPalmLength(); ++i)
                 {
-                    for (int j = 0; j < this.portalPattern.getThumbLength(); j++)
+                    for (int j = 0; j < this.portalPattern.getThumbLength(); ++j)
                     {
-                        for (int k = 0; k < this.portalPattern.getFingerLength(); k++)
+                        for (int k = 0; k < this.portalPattern.getFingerLength(); ++k)
                         {
                             BlockWorldState blockworldstate = blockpattern$patternhelper.translateOffset(i, j, k);
 
-                            if (blockworldstate.getBlockState().getBlock() == Blocks.BEDROCK
-                                    || blockworldstate.getBlockState().getBlock() == Blocks.END_PORTAL)
+                            if (blockworldstate.getBlockState().getBlock() == Blocks.BEDROCK || blockworldstate.getBlockState().getBlock() == Blocks.END_PORTAL)
                             {
                                 this.world.setBlockState(blockworldstate.getPos(), Blocks.END_STONE.getDefaultState());
                             }
@@ -601,8 +580,18 @@
             for (EntityEnderCrystal entityendercrystal : this.world.getEntitiesWithinAABB(EntityEnderCrystal.class, worldgenspikes$endspike.getTopBoundingBox()))
             {
                 entityendercrystal.setEntityInvulnerable(false);
-                entityendercrystal.setBeamTarget(null);
+                entityendercrystal.setBeamTarget((BlockPos)null);
             }
         }
+    }
+
+    public void addPlayer(EntityPlayerMP player)
+    {
+        this.bossInfo.addPlayer(player);
+    }
+
+    public void removePlayer(EntityPlayerMP player)
+    {
+        this.bossInfo.removePlayer(player);
     }
 }
