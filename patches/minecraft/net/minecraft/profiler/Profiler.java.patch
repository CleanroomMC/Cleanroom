--- before/net/minecraft/profiler/Profiler.java
+++ after/net/minecraft/profiler/Profiler.java
@@ -14,11 +14,11 @@
 public class Profiler
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private final List<String> sectionList = Lists.newArrayList();
-    private final List<Long> timestampList = Lists.newArrayList();
+    private final List<String> sectionList = Lists.<String>newArrayList();
+    private final List<Long> timestampList = Lists.<Long>newArrayList();
     public boolean profilingEnabled;
     private String profilingSection = "";
-    private final Map<String, Long> profilingMap = Maps.newHashMap();
+    private final Map<String, Long> profilingMap = Maps.<String, Long>newHashMap();
 
     public void clearProfiling()
     {
@@ -38,7 +38,7 @@
 
             this.profilingSection = this.profilingSection + name;
             this.sectionList.add(this.profilingSection);
-            this.timestampList.add(System.nanoTime());
+            this.timestampList.add(Long.valueOf(System.nanoTime()));
         }
     }
 
@@ -55,25 +55,25 @@
         if (this.profilingEnabled)
         {
             long i = System.nanoTime();
-            long j = this.timestampList.remove(this.timestampList.size() - 1);
+            long j = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
             this.sectionList.remove(this.sectionList.size() - 1);
             long k = i - j;
 
             if (this.profilingMap.containsKey(this.profilingSection))
             {
-                this.profilingMap.put(this.profilingSection, this.profilingMap.get(this.profilingSection) + k);
+                this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + k));
             }
             else
             {
-                this.profilingMap.put(this.profilingSection, k);
+                this.profilingMap.put(this.profilingSection, Long.valueOf(k));
             }
 
             if (k > 100000000L)
             {
-                LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", this.profilingSection, (double)k / 1000000.0);
+                LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", this.profilingSection, Double.valueOf((double)k / 1000000.0D));
             }
 
-            this.profilingSection = this.sectionList.isEmpty() ? "" : this.sectionList.get(this.sectionList.size() - 1);
+            this.profilingSection = this.sectionList.isEmpty() ? "" : (String)this.sectionList.get(this.sectionList.size() - 1);
         }
     }
 
@@ -81,14 +81,13 @@
     {
         if (!this.profilingEnabled)
         {
-            return Collections.emptyList();
+            return Collections.<Profiler.Result>emptyList();
         }
         else
         {
-            String s = profilerName;
-            long i = this.profilingMap.containsKey("root") ? this.profilingMap.get("root") : 0L;
-            long j = this.profilingMap.containsKey(profilerName) ? this.profilingMap.get(profilerName) : -1L;
-            List<Profiler.Result> list = Lists.newArrayList();
+            long i = this.profilingMap.containsKey("root") ? ((Long)this.profilingMap.get("root")).longValue() : 0L;
+            long j = this.profilingMap.containsKey(profilerName) ? ((Long)this.profilingMap.get(profilerName)).longValue() : -1L;
+            List<Profiler.Result> list = Lists.<Profiler.Result>newArrayList();
 
             if (!profilerName.isEmpty())
             {
@@ -97,11 +96,11 @@
 
             long k = 0L;
 
-            for (String s1 : this.profilingMap.keySet())
+            for (String s : this.profilingMap.keySet())
             {
-                if (s1.length() > profilerName.length() && s1.startsWith(profilerName) && s1.indexOf(".", profilerName.length() + 1) < 0)
+                if (s.length() > profilerName.length() && s.startsWith(profilerName) && s.indexOf(".", profilerName.length() + 1) < 0)
                 {
-                    k += this.profilingMap.get(s1);
+                    k += ((Long)this.profilingMap.get(s)).longValue();
                 }
             }
 
@@ -117,30 +116,30 @@
                 i = k;
             }
 
-            for (String s2 : this.profilingMap.keySet())
+            for (String s1 : this.profilingMap.keySet())
             {
-                if (s2.length() > profilerName.length() && s2.startsWith(profilerName) && s2.indexOf(".", profilerName.length() + 1) < 0)
+                if (s1.length() > profilerName.length() && s1.startsWith(profilerName) && s1.indexOf(".", profilerName.length() + 1) < 0)
                 {
-                    long l = this.profilingMap.get(s2);
-                    double d0 = (double)l * 100.0 / (double)k;
-                    double d1 = (double)l * 100.0 / (double)i;
-                    String s3 = s2.substring(profilerName.length());
-                    list.add(new Profiler.Result(s3, d0, d1));
+                    long l = ((Long)this.profilingMap.get(s1)).longValue();
+                    double d0 = (double)l * 100.0D / (double)k;
+                    double d1 = (double)l * 100.0D / (double)i;
+                    String s2 = s1.substring(profilerName.length());
+                    list.add(new Profiler.Result(s2, d0, d1));
                 }
             }
 
-            for (String s4 : this.profilingMap.keySet())
+            for (String s3 : this.profilingMap.keySet())
             {
-                this.profilingMap.put(s4, this.profilingMap.get(s4) * 999L / 1000L);
+                this.profilingMap.put(s3, Long.valueOf(((Long)this.profilingMap.get(s3)).longValue() * 999L / 1000L));
             }
 
             if ((float)k > f)
             {
-                list.add(new Profiler.Result("unspecified", (double)((float)k - f) * 100.0 / (double)k, (double)((float)k - f) * 100.0 / (double)i));
+                list.add(new Profiler.Result("unspecified", (double)((float)k - f) * 100.0D / (double)k, (double)((float)k - f) * 100.0D / (double)i));
             }
 
             Collections.sort(list);
-            list.add(0, new Profiler.Result(s, 100.0, (double)k * 100.0 / (double)i));
+            list.add(0, new Profiler.Result(profilerName, 100.0D, (double)k * 100.0D / (double)i));
             return list;
         }
     }
@@ -151,6 +150,11 @@
         this.startSection(name);
     }
 
+    public String getNameOfLastSection()
+    {
+        return this.sectionList.isEmpty() ? "[UNKNOWN]" : (String)this.sectionList.get(this.sectionList.size() - 1);
+    }
+
     @SideOnly(Side.CLIENT)
     public void func_194339_b(Supplier<String> p_194339_1_)
     {
@@ -158,11 +162,6 @@
         this.func_194340_a(p_194339_1_);
     }
 
-    public String getNameOfLastSection()
-    {
-        return this.sectionList.isEmpty() ? "[UNKNOWN]" : this.sectionList.get(this.sectionList.size() - 1);
-    }
-
     public static final class Result implements Comparable<Profiler.Result>
         {
             public double usePercentage;
@@ -194,4 +193,16 @@
                 return (this.profilerName.hashCode() & 11184810) + 4473924;
             }
         }
+
+    /**
+     * Forge: Fix for MC-117087, World.updateEntities is wasting time calling Class.getSimpleName() when the profiler is not active
+     */
+    @Deprecated // TODO: remove (1.13)
+    public void startSection(Class<?> profiledClass)
+    {
+        if (this.profilingEnabled)
+        {
+            startSection(profiledClass.getSimpleName());
+        }
+    }
 }
