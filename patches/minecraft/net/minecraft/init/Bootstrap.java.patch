--- before/net/minecraft/init/Bootstrap.java
+++ after/net/minecraft/init/Bootstrap.java
@@ -1,8 +1,10 @@
 package net.minecraft.init;
 
 import com.mojang.authlib.GameProfile;
+import java.io.File;
 import java.io.PrintStream;
 import java.util.Random;
+import java.util.UUID;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockDispenser;
@@ -28,6 +30,8 @@
 import net.minecraft.entity.item.EntityExpBottle;
 import net.minecraft.entity.item.EntityFireworkRocket;
 import net.minecraft.entity.item.EntityTNTPrimed;
+import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.entity.projectile.EntityEgg;
 import net.minecraft.entity.projectile.EntityPotion;
@@ -82,42 +86,27 @@
 
     static void registerDispenserBehaviors()
     {
-        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY
-        .putObject(
-            Items.ARROW,
-            new BehaviorProjectileDispense()
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.ARROW, new BehaviorProjectileDispense()
         {
-            @Override
             protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
             {
-                EntityTippedArrow entitytippedarrow = new EntityTippedArrow(
-                    worldIn, position.getX(), position.getY(), position.getZ()
-                );
+                EntityTippedArrow entitytippedarrow = new EntityTippedArrow(worldIn, position.getX(), position.getY(), position.getZ());
                 entitytippedarrow.pickupStatus = EntityArrow.PickupStatus.ALLOWED;
                 return entitytippedarrow;
             }
-        }
-        );
-        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY
-        .putObject(
-            Items.TIPPED_ARROW,
-            new BehaviorProjectileDispense()
+        });
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.TIPPED_ARROW, new BehaviorProjectileDispense()
         {
-            @Override
             protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
             {
-                EntityTippedArrow entitytippedarrow = new EntityTippedArrow(
-                    worldIn, position.getX(), position.getY(), position.getZ()
-                );
+                EntityTippedArrow entitytippedarrow = new EntityTippedArrow(worldIn, position.getX(), position.getY(), position.getZ());
                 entitytippedarrow.setPotionEffect(stackIn);
                 entitytippedarrow.pickupStatus = EntityArrow.PickupStatus.ALLOWED;
                 return entitytippedarrow;
             }
-        }
-        );
+        });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.SPECTRAL_ARROW, new BehaviorProjectileDispense()
         {
-            @Override
             protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
             {
                 EntityArrow entityarrow = new EntitySpectralArrow(worldIn, position.getX(), position.getY(), position.getZ());
@@ -127,7 +116,6 @@
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.EGG, new BehaviorProjectileDispense()
         {
-            @Override
             protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
             {
                 return new EntityEgg(worldIn, position.getX(), position.getY(), position.getZ());
@@ -135,7 +123,6 @@
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.SNOWBALL, new BehaviorProjectileDispense()
         {
-            @Override
             protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
             {
                 return new EntitySnowball(worldIn, position.getX(), position.getY(), position.getZ());
@@ -143,92 +130,66 @@
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.EXPERIENCE_BOTTLE, new BehaviorProjectileDispense()
         {
-            @Override
             protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
             {
                 return new EntityExpBottle(worldIn, position.getX(), position.getY(), position.getZ());
             }
-            @Override
             protected float getProjectileInaccuracy()
             {
                 return super.getProjectileInaccuracy() * 0.5F;
             }
-            @Override
             protected float getProjectileVelocity()
             {
                 return super.getProjectileVelocity() * 1.25F;
             }
         });
-        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY
-        .putObject(
-            Items.SPLASH_POTION,
-            new IBehaviorDispenseItem()
-        {
-            @Override
-            public ItemStack dispense(IBlockSource source, final ItemStack stack)
-            {
-                return (new BehaviorProjectileDispense()
-                {
-                    @Override
-                    protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
-                    {
-                        return new EntityPotion(
-                                   worldIn, position.getX(), position.getY(), position.getZ(), stack.copy()
-                               );
-                    }
-                    @Override
-                    protected float getProjectileInaccuracy()
-                    {
-                        return super.getProjectileInaccuracy() * 0.5F;
-                    }
-                    @Override
-                    protected float getProjectileVelocity()
-                    {
-                        return super.getProjectileVelocity() * 1.25F;
-                    }
-                })
-                       .dispense(source, stack);
-            }
-        }
-        );
-        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY
-        .putObject(
-            Items.LINGERING_POTION,
-            new IBehaviorDispenseItem()
-        {
-            @Override
-            public ItemStack dispense(IBlockSource source, final ItemStack stack)
-            {
-                return (new BehaviorProjectileDispense()
-                {
-                    @Override
-                    protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
-                    {
-                        return new EntityPotion(
-                                   worldIn, position.getX(), position.getY(), position.getZ(), stack.copy()
-                               );
-                    }
-                    @Override
-                    protected float getProjectileInaccuracy()
-                    {
-                        return super.getProjectileInaccuracy() * 0.5F;
-                    }
-                    @Override
-                    protected float getProjectileVelocity()
-                    {
-                        return super.getProjectileVelocity() * 1.25F;
-                    }
-                })
-                       .dispense(source, stack);
-            }
-        }
-        );
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.SPLASH_POTION, new IBehaviorDispenseItem()
+        {
+            public ItemStack dispense(IBlockSource source, final ItemStack stack)
+            {
+                return (new BehaviorProjectileDispense()
+                {
+                    protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
+                    {
+                        return new EntityPotion(worldIn, position.getX(), position.getY(), position.getZ(), stack.copy());
+                    }
+                    protected float getProjectileInaccuracy()
+                    {
+                        return super.getProjectileInaccuracy() * 0.5F;
+                    }
+                    protected float getProjectileVelocity()
+                    {
+                        return super.getProjectileVelocity() * 1.25F;
+                    }
+                }).dispense(source, stack);
+            }
+        });
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.LINGERING_POTION, new IBehaviorDispenseItem()
+        {
+            public ItemStack dispense(IBlockSource source, final ItemStack stack)
+            {
+                return (new BehaviorProjectileDispense()
+                {
+                    protected IProjectile getProjectileEntity(World worldIn, IPosition position, ItemStack stackIn)
+                    {
+                        return new EntityPotion(worldIn, position.getX(), position.getY(), position.getZ(), stack.copy());
+                    }
+                    protected float getProjectileInaccuracy()
+                    {
+                        return super.getProjectileInaccuracy() * 0.5F;
+                    }
+                    protected float getProjectileVelocity()
+                    {
+                        return super.getProjectileVelocity() * 1.25F;
+                    }
+                }).dispense(source, stack);
+            }
+        });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.SPAWN_EGG, new BehaviorDefaultDispenseItem()
         {
-            @Override
             public ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
-                EnumFacing enumfacing = source.getBlockState().getValue(BlockDispenser.FACING);
+                EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 double d0 = source.getX() + (double)enumfacing.getXOffset();
                 double d1 = (double)((float)(source.getBlockPos().getY() + enumfacing.getYOffset()) + 0.2F);
                 double d2 = source.getZ() + (double)enumfacing.getZOffset();
@@ -239,17 +200,16 @@
                     entity.setCustomNameTag(stack.getDisplayName());
                 }
 
-                ItemMonsterPlacer.applyItemEntityDataToEntity(source.getWorld(), null, stack, entity);
+                ItemMonsterPlacer.applyItemEntityDataToEntity(source.getWorld(), (EntityPlayer)null, stack, entity);
                 stack.shrink(1);
                 return stack;
             }
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.FIREWORKS, new BehaviorDefaultDispenseItem()
         {
-            @Override
             public ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
-                EnumFacing enumfacing = source.getBlockState().getValue(BlockDispenser.FACING);
+                EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 double d0 = source.getX() + (double)enumfacing.getXOffset();
                 double d1 = (double)((float)source.getBlockPos().getY() + 0.2F);
                 double d2 = source.getZ() + (double)enumfacing.getZOffset();
@@ -258,7 +218,6 @@
                 stack.shrink(1);
                 return stack;
             }
-            @Override
             protected void playDispenseSound(IBlockSource source)
             {
                 source.getWorld().playEvent(1004, source.getBlockPos(), 0);
@@ -266,24 +225,22 @@
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.FIRE_CHARGE, new BehaviorDefaultDispenseItem()
         {
-            @Override
             public ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
-                EnumFacing enumfacing = source.getBlockState().getValue(BlockDispenser.FACING);
+                EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 IPosition iposition = BlockDispenser.getDispensePosition(source);
                 double d0 = iposition.getX() + (double)((float)enumfacing.getXOffset() * 0.3F);
                 double d1 = iposition.getY() + (double)((float)enumfacing.getYOffset() * 0.3F);
                 double d2 = iposition.getZ() + (double)((float)enumfacing.getZOffset() * 0.3F);
                 World world = source.getWorld();
                 Random random = world.rand;
-                double d3 = random.nextGaussian() * 0.05 + (double)enumfacing.getXOffset();
-                double d4 = random.nextGaussian() * 0.05 + (double)enumfacing.getYOffset();
-                double d5 = random.nextGaussian() * 0.05 + (double)enumfacing.getZOffset();
+                double d3 = random.nextGaussian() * 0.05D + (double)enumfacing.getXOffset();
+                double d4 = random.nextGaussian() * 0.05D + (double)enumfacing.getYOffset();
+                double d5 = random.nextGaussian() * 0.05D + (double)enumfacing.getZOffset();
                 world.spawnEntity(new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5));
                 stack.shrink(1);
                 return stack;
             }
-            @Override
             protected void playDispenseSound(IBlockSource source)
             {
                 source.getWorld().playEvent(1018, source.getBlockPos(), 0);
@@ -298,38 +255,37 @@
         IBehaviorDispenseItem ibehaviordispenseitem = new BehaviorDefaultDispenseItem()
         {
             private final BehaviorDefaultDispenseItem dispenseBehavior = new BehaviorDefaultDispenseItem();
-            @Override
             public ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 ItemBucket itembucket = (ItemBucket)stack.getItem();
-                BlockPos blockpos = source.getBlockPos().offset(source.getBlockState().getValue(BlockDispenser.FACING));
-                return itembucket.tryPlaceContainedLiquid(null, source.getWorld(), blockpos)
-                       ? new ItemStack(Items.BUCKET)
-                       : this.dispenseBehavior.dispense(source, stack);
+                BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
+                return itembucket.tryPlaceContainedLiquid((EntityPlayer)null, source.getWorld(), blockpos) ? new ItemStack(Items.BUCKET) : this.dispenseBehavior.dispense(source, stack);
             }
         };
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.LAVA_BUCKET, ibehaviordispenseitem);
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.WATER_BUCKET, ibehaviordispenseitem);
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.MILK_BUCKET, net.minecraftforge.fluids.DispenseFluidContainer.getInstance());
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.BUCKET, net.minecraftforge.fluids.DispenseFluidContainer.getInstance());
+        if (false)
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.BUCKET, new BehaviorDefaultDispenseItem()
         {
             private final BehaviorDefaultDispenseItem dispenseBehavior = new BehaviorDefaultDispenseItem();
-            @Override
             public ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
-                BlockPos blockpos = source.getBlockPos().offset(source.getBlockState().getValue(BlockDispenser.FACING));
+                BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
                 IBlockState iblockstate = world.getBlockState(blockpos);
                 Block block = iblockstate.getBlock();
                 Material material = iblockstate.getMaterial();
                 Item item;
 
-                if (Material.WATER.equals(material) && block instanceof BlockLiquid && iblockstate.getValue(BlockLiquid.LEVEL) == 0)
+                if (Material.WATER.equals(material) && block instanceof BlockLiquid && ((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue() == 0)
                 {
                     item = Items.WATER_BUCKET;
                 }
                 else
                 {
-                    if (!Material.LAVA.equals(material) || !(block instanceof BlockLiquid) || iblockstate.getValue(BlockLiquid.LEVEL) != 0)
+                    if (!Material.LAVA.equals(material) || !(block instanceof BlockLiquid) || ((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue() != 0)
                     {
                         return super.dispenseStack(source, stack);
                     }
@@ -346,7 +302,7 @@
                 }
                 else
                 {
-                    if (source.<TileEntityDispenser>getBlockTileEntity().addItemStack(new ItemStack(item)) < 0)
+                    if (((TileEntityDispenser)source.getBlockTileEntity()).addItemStack(new ItemStack(item)) < 0)
                     {
                         this.dispenseBehavior.dispense(source, new ItemStack(item));
                     }
@@ -357,25 +313,24 @@
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.FLINT_AND_STEEL, new Bootstrap.BehaviorDispenseOptional()
         {
-            @Override
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
                 this.successful = true;
-                BlockPos blockpos = source.getBlockPos().offset(source.getBlockState().getValue(BlockDispenser.FACING));
+                BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
 
                 if (world.isAirBlock(blockpos))
                 {
                     world.setBlockState(blockpos, Blocks.FIRE.getDefaultState());
 
-                    if (stack.attemptDamageItem(1, world.rand, null))
+                    if (stack.attemptDamageItem(1, world.rand, (EntityPlayerMP)null))
                     {
                         stack.setCount(0);
                     }
                 }
                 else if (world.getBlockState(blockpos).getBlock() == Blocks.TNT)
                 {
-                    Blocks.TNT.onPlayerDestroy(world, blockpos, Blocks.TNT.getDefaultState().withProperty(BlockTNT.EXPLODE, true));
+                    Blocks.TNT.onPlayerDestroy(world, blockpos, Blocks.TNT.getDefaultState().withProperty(BlockTNT.EXPLODE, Boolean.valueOf(true)));
                     world.setBlockToAir(blockpos);
                 }
                 else
@@ -388,7 +343,6 @@
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.DYE, new Bootstrap.BehaviorDispenseOptional()
         {
-            @Override
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 this.successful = true;
@@ -396,7 +350,7 @@
                 if (EnumDyeColor.WHITE == EnumDyeColor.byDyeDamage(stack.getMetadata()))
                 {
                     World world = source.getWorld();
-                    BlockPos blockpos = source.getBlockPos().offset(source.getBlockState().getValue(BlockDispenser.FACING));
+                    BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
 
                     if (ItemDye.applyBonemeal(stack, world, blockpos))
                     {
@@ -418,42 +372,25 @@
                 }
             }
         });
-        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY
-        .putObject(
-            Item.getItemFromBlock(Blocks.TNT),
-            new BehaviorDefaultDispenseItem()
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Item.getItemFromBlock(Blocks.TNT), new BehaviorDefaultDispenseItem()
         {
-            @Override
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
-                BlockPos blockpos = source.getBlockPos().offset(source.getBlockState().getValue(BlockDispenser.FACING));
-                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(
-                    world, (double)blockpos.getX() + 0.5, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5, null
-                );
+                BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D, (EntityLivingBase)null);
                 world.spawnEntity(entitytntprimed);
-                world.playSound(
-                    null,
-                    entitytntprimed.posX,
-                    entitytntprimed.posY,
-                    entitytntprimed.posZ,
-                    SoundEvents.ENTITY_TNT_PRIMED,
-                    SoundCategory.BLOCKS,
-                    1.0F,
-                    1.0F
-                );
+                world.playSound((EntityPlayer)null, entitytntprimed.posX, entitytntprimed.posY, entitytntprimed.posZ, SoundEvents.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 stack.shrink(1);
                 return stack;
             }
-        }
-        );
+        });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Items.SKULL, new Bootstrap.BehaviorDispenseOptional()
         {
-            @Override
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
-                EnumFacing enumfacing = source.getBlockState().getValue(BlockDispenser.FACING);
+                EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 BlockPos blockpos = source.getBlockPos().offset(enumfacing);
                 BlockSkull blockskull = Blocks.SKULL;
                 this.successful = true;
@@ -485,7 +422,7 @@
 
                                         if (!StringUtils.isNullOrEmpty(s))
                                         {
-                                            gameprofile = new GameProfile(null, s);
+                                            gameprofile = new GameProfile((UUID)null, s);
                                         }
                                     }
                                 }
@@ -514,11 +451,10 @@
         });
         BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Item.getItemFromBlock(Blocks.PUMPKIN), new Bootstrap.BehaviorDispenseOptional()
         {
-            @Override
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 World world = source.getWorld();
-                BlockPos blockpos = source.getBlockPos().offset(source.getBlockState().getValue(BlockDispenser.FACING));
+                BlockPos blockpos = source.getBlockPos().offset((EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING));
                 BlockPumpkin blockpumpkin = (BlockPumpkin)Blocks.PUMPKIN;
                 this.successful = true;
 
@@ -547,8 +483,7 @@
 
         for (EnumDyeColor enumdyecolor : EnumDyeColor.values())
         {
-            BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY
-            .putObject(Item.getItemFromBlock(BlockShulkerBox.getBlockByColor(enumdyecolor)), new Bootstrap.BehaviorDispenseShulkerBox());
+            BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(Item.getItemFromBlock(BlockShulkerBox.getBlockByColor(enumdyecolor)), new Bootstrap.BehaviorDispenseShulkerBox());
         }
     }
 
@@ -557,6 +492,7 @@
         if (!alreadyRegistered)
         {
             alreadyRegistered = true;
+            if (false) // skip redirectOutputToLog, Forge already redirects stdout and stderr output to log so that they print with more context
             redirectOutputToLog();
             SoundEvent.registerSounds();
             Block.registerBlocks();
@@ -580,7 +516,7 @@
 
             if (LOGGER.isDebugEnabled())
             {
-                if (new AdvancementManager(null).hasErrored())
+                if ((new AdvancementManager((File)null)).hasErrored())
                 {
                     hasErrored = true;
                     LOGGER.error("Errors with built-in advancements!");
@@ -592,6 +528,8 @@
                     LOGGER.error("Errors with built-in loot tables");
                 }
             }
+
+            net.minecraftforge.registries.GameData.vanillaSnapshot();
         }
     }
 
@@ -625,10 +563,9 @@
                 this.boatType = boatTypeIn;
             }
 
-            @Override
             public ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
-                EnumFacing enumfacing = source.getBlockState().getValue(BlockDispenser.FACING);
+                EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 World world = source.getWorld();
                 double d0 = source.getX() + (double)((float)enumfacing.getXOffset() * 1.125F);
                 double d1 = source.getY() + (double)((float)enumfacing.getYOffset() * 1.125F);
@@ -639,7 +576,7 @@
 
                 if (Material.WATER.equals(material))
                 {
-                    d3 = 1.0;
+                    d3 = 1.0D;
                 }
                 else
                 {
@@ -648,7 +585,7 @@
                         return this.dispenseBehavior.dispense(source, stack);
                     }
 
-                    d3 = 0.0;
+                    d3 = 0.0D;
                 }
 
                 EntityBoat entityboat = new EntityBoat(world, d0, d1 + d3, d2);
@@ -659,7 +596,6 @@
                 return stack;
             }
 
-            @Override
             protected void playDispenseSound(IBlockSource source)
             {
                 source.getWorld().playEvent(1000, source.getBlockPos(), 0);
@@ -670,7 +606,6 @@
         {
             protected boolean successful = true;
 
-            @Override
             protected void playDispenseSound(IBlockSource source)
             {
                 source.getWorld().playEvent(this.successful ? 1000 : 1001, source.getBlockPos(), 0);
@@ -683,14 +618,13 @@
             {
             }
 
-            @Override
             protected ItemStack dispenseStack(IBlockSource source, ItemStack stack)
             {
                 Block block = Block.getBlockFromItem(stack.getItem());
                 World world = source.getWorld();
-                EnumFacing enumfacing = source.getBlockState().getValue(BlockDispenser.FACING);
+                EnumFacing enumfacing = (EnumFacing)source.getBlockState().getValue(BlockDispenser.FACING);
                 BlockPos blockpos = source.getBlockPos().offset(enumfacing);
-                this.successful = world.mayPlace(block, blockpos, false, EnumFacing.DOWN, null);
+                this.successful = world.mayPlace(block, blockpos, false, EnumFacing.DOWN, (Entity)null);
 
                 if (this.successful)
                 {
