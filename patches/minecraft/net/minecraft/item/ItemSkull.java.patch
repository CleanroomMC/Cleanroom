--- before/net/minecraft/item/ItemSkull.java
+++ after/net/minecraft/item/ItemSkull.java
@@ -1,6 +1,7 @@
 package net.minecraft.item;
 
 import com.mojang.authlib.GameProfile;
+import java.util.UUID;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockSkull;
@@ -34,17 +35,7 @@
         this.setHasSubtypes(true);
     }
 
-    @Override
-    public EnumActionResult onItemUse(
-        EntityPlayer player,
-        World worldIn,
-        BlockPos pos,
-        EnumHand hand,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         if (facing == EnumFacing.DOWN)
         {
@@ -52,13 +43,18 @@
         }
         else
         {
+            if (worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos))
+            {
+                facing = EnumFacing.UP;
+                pos = pos.down();
+            }
             IBlockState iblockstate = worldIn.getBlockState(pos);
             Block block = iblockstate.getBlock();
             boolean flag = block.isReplaceable(worldIn, pos);
 
             if (!flag)
             {
-                if (!worldIn.getBlockState(pos).getMaterial().isSolid())
+                if (!worldIn.getBlockState(pos).getMaterial().isSolid() && !worldIn.isSideSolid(pos, facing, true))
                 {
                     return EnumActionResult.FAIL;
                 }
@@ -68,89 +64,89 @@
 
             ItemStack itemstack = player.getHeldItem(hand);
 
-            if (!player.canPlayerEdit(pos, facing, itemstack) || !Blocks.SKULL.canPlaceBlockAt(worldIn, pos))
-            {
-                return EnumActionResult.FAIL;
-            }
-            else if (worldIn.isRemote)
-            {
-                return EnumActionResult.SUCCESS;
+            if (player.canPlayerEdit(pos, facing, itemstack) && Blocks.SKULL.canPlaceBlockAt(worldIn, pos))
+            {
+                if (worldIn.isRemote)
+                {
+                    return EnumActionResult.SUCCESS;
+                }
+                else
+                {
+                    worldIn.setBlockState(pos, Blocks.SKULL.getDefaultState().withProperty(BlockSkull.FACING, facing), 11);
+                    int i = 0;
+
+                    if (facing == EnumFacing.UP)
+                    {
+                        i = MathHelper.floor((double)(player.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
+                    }
+
+                    TileEntity tileentity = worldIn.getTileEntity(pos);
+
+                    if (tileentity instanceof TileEntitySkull)
+                    {
+                        TileEntitySkull tileentityskull = (TileEntitySkull)tileentity;
+
+                        if (itemstack.getMetadata() == 3)
+                        {
+                            GameProfile gameprofile = null;
+
+                            if (itemstack.hasTagCompound())
+                            {
+                                NBTTagCompound nbttagcompound = itemstack.getTagCompound();
+
+                                if (nbttagcompound.hasKey("SkullOwner", 10))
+                                {
+                                    gameprofile = NBTUtil.readGameProfileFromNBT(nbttagcompound.getCompoundTag("SkullOwner"));
+                                }
+                                else if (nbttagcompound.hasKey("SkullOwner", 8) && !StringUtils.isBlank(nbttagcompound.getString("SkullOwner")))
+                                {
+                                    gameprofile = new GameProfile((UUID)null, nbttagcompound.getString("SkullOwner"));
+                                }
+                            }
+
+                            tileentityskull.setPlayerProfile(gameprofile);
+                        }
+                        else
+                        {
+                            tileentityskull.setType(itemstack.getMetadata());
+                        }
+
+                        tileentityskull.setSkullRotation(i);
+                        Blocks.SKULL.checkWitherSpawn(worldIn, pos, tileentityskull);
+                    }
+
+                    if (player instanceof EntityPlayerMP)
+                    {
+                        CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP)player, pos, itemstack);
+                    }
+
+                    itemstack.shrink(1);
+                    return EnumActionResult.SUCCESS;
+                }
             }
             else
             {
-                worldIn.setBlockState(pos, Blocks.SKULL.getDefaultState().withProperty(BlockSkull.FACING, facing), 11);
-                int i = 0;
-
-                if (facing == EnumFacing.UP)
-                {
-                    i = MathHelper.floor((double)(player.rotationYaw * 16.0F / 360.0F) + 0.5) & 15;
-                }
-
-                TileEntity tileentity = worldIn.getTileEntity(pos);
-
-                if (tileentity instanceof TileEntitySkull)
-                {
-                    TileEntitySkull tileentityskull = (TileEntitySkull)tileentity;
-
-                    if (itemstack.getMetadata() == 3)
-                    {
-                        GameProfile gameprofile = null;
-
-                        if (itemstack.hasTagCompound())
-                        {
-                            NBTTagCompound nbttagcompound = itemstack.getTagCompound();
-
-                            if (nbttagcompound.hasKey("SkullOwner", 10))
-                            {
-                                gameprofile = NBTUtil.readGameProfileFromNBT(nbttagcompound.getCompoundTag("SkullOwner"));
-                            }
-                            else if (nbttagcompound.hasKey("SkullOwner", 8) && !StringUtils.isBlank(nbttagcompound.getString("SkullOwner")))
-                            {
-                                gameprofile = new GameProfile(null, nbttagcompound.getString("SkullOwner"));
-                            }
-                        }
-
-                        tileentityskull.setPlayerProfile(gameprofile);
-                    }
-                    else
-                    {
-                        tileentityskull.setType(itemstack.getMetadata());
-                    }
-
-                    tileentityskull.setSkullRotation(i);
-                    Blocks.SKULL.checkWitherSpawn(worldIn, pos, tileentityskull);
-                }
-
-                if (player instanceof EntityPlayerMP)
-                {
-                    CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP)player, pos, itemstack);
-                }
-
-                itemstack.shrink(1);
-                return EnumActionResult.SUCCESS;
+                return EnumActionResult.FAIL;
             }
         }
     }
 
-    @Override
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> items)
     {
         if (this.isInCreativeTab(tab))
         {
-            for (int i = 0; i < SKULL_TYPES.length; i++)
+            for (int i = 0; i < SKULL_TYPES.length; ++i)
             {
                 items.add(new ItemStack(this, 1, i));
             }
         }
     }
 
-    @Override
     public int getMetadata(int damage)
     {
         return damage;
     }
 
-    @Override
     public String getTranslationKey(ItemStack stack)
     {
         int i = stack.getMetadata();
@@ -163,7 +159,6 @@
         return super.getTranslationKey() + "." + SKULL_TYPES[i];
     }
 
-    @Override
     public String getItemStackDisplayName(ItemStack stack)
     {
         if (stack.getMetadata() == 3 && stack.hasTagCompound())
@@ -187,14 +182,13 @@
         return super.getItemStackDisplayName(stack);
     }
 
-    @Override
     public boolean updateItemStackNBT(NBTTagCompound nbt)
     {
         super.updateItemStackNBT(nbt);
 
         if (nbt.hasKey("SkullOwner", 8) && !StringUtils.isBlank(nbt.getString("SkullOwner")))
         {
-            GameProfile gameprofile = new GameProfile(null, nbt.getString("SkullOwner"));
+            GameProfile gameprofile = new GameProfile((UUID)null, nbt.getString("SkullOwner"));
             gameprofile = TileEntitySkull.updateGameProfile(gameprofile);
             nbt.setTag("SkullOwner", NBTUtil.writeGameProfile(new NBTTagCompound(), gameprofile));
             return true;
