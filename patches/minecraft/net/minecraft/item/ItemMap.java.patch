--- before/net/minecraft/item/ItemMap.java
+++ after/net/minecraft/item/ItemMap.java
@@ -42,7 +42,7 @@
         worldIn.setData(s, mapdata);
         mapdata.scale = scale;
         mapdata.calculateMapCenter(worldX, worldZ, mapdata.scale);
-        mapdata.dimension = (byte)worldIn.provider.getDimensionType().getId();
+        mapdata.dimension = worldIn.provider.getDimension();
         mapdata.trackingPosition = trackingPosition;
         mapdata.unlimitedTracking = unlimitedTracking;
         mapdata.markDirty();
@@ -70,7 +70,7 @@
             mapdata = new MapData(s);
             mapdata.scale = 3;
             mapdata.calculateMapCenter((double)worldIn.getWorldInfo().getSpawnX(), (double)worldIn.getWorldInfo().getSpawnZ(), mapdata.scale);
-            mapdata.dimension = (byte)worldIn.provider.getDimensionType().getId();
+            mapdata.dimension = worldIn.provider.getDimension();
             mapdata.markDirty();
             worldIn.setData(s, mapdata);
         }
@@ -80,7 +80,7 @@
 
     public void updateMapData(World worldIn, Entity viewer, MapData data)
     {
-        if (worldIn.provider.getDimensionType().getId() == data.dimension && viewer instanceof EntityPlayer)
+        if (worldIn.provider.getDimension() == data.dimension && viewer instanceof EntityPlayer)
         {
             int i = 1 << data.scale;
             int j = data.xCenter;
@@ -95,17 +95,17 @@
             }
 
             MapData.MapInfo mapdata$mapinfo = data.getMapInfo((EntityPlayer)viewer);
-            mapdata$mapinfo.step++;
+            ++mapdata$mapinfo.step;
             boolean flag = false;
 
-            for (int k1 = l - j1 + 1; k1 < l + j1; k1++)
+            for (int k1 = l - j1 + 1; k1 < l + j1; ++k1)
             {
                 if ((k1 & 15) == (mapdata$mapinfo.step & 15) || flag)
                 {
                     flag = false;
-                    double d0 = 0.0;
+                    double d0 = 0.0D;
 
-                    for (int l1 = i1 - j1 - 1; l1 < i1 + j1; l1++)
+                    for (int l1 = i1 - j1 - 1; l1 < i1 + j1; ++l1)
                     {
                         if (k1 >= 0 && l1 >= -1 && k1 < 128 && l1 < 128)
                         {
@@ -114,7 +114,7 @@
                             boolean flag1 = i2 * i2 + j2 * j2 > (j1 - 2) * (j1 - 2);
                             int k2 = (j / i + k1 - 64) * i;
                             int l2 = (k / i + l1 - 64) * i;
-                            Multiset<MapColor> multiset = HashMultiset.create();
+                            Multiset<MapColor> multiset = HashMultiset.<MapColor>create();
                             Chunk chunk = worldIn.getChunk(new BlockPos(k2, 0, l2));
 
                             if (!chunk.isEmpty())
@@ -122,7 +122,7 @@
                                 int i3 = k2 & 15;
                                 int j3 = l2 & 15;
                                 int k3 = 0;
-                                double d1 = 0.0;
+                                double d1 = 0.0D;
 
                                 if (worldIn.provider.isNether())
                                 {
@@ -131,34 +131,22 @@
 
                                     if ((l3 >> 20 & 1) == 0)
                                     {
-                                        multiset.add(
-                                            Blocks.DIRT
-                                            .getDefaultState()
-                                            .withProperty(BlockDirt.VARIANT, BlockDirt.DirtType.DIRT)
-                                            .getMapColor(worldIn, BlockPos.ORIGIN),
-                                            10
-                                        );
+                                        multiset.add(Blocks.DIRT.getDefaultState().withProperty(BlockDirt.VARIANT, BlockDirt.DirtType.DIRT).getMapColor(worldIn, BlockPos.ORIGIN), 10);
                                     }
                                     else
                                     {
-                                        multiset.add(
-                                            Blocks.STONE
-                                            .getDefaultState()
-                                            .withProperty(BlockStone.VARIANT, BlockStone.EnumType.STONE)
-                                            .getMapColor(worldIn, BlockPos.ORIGIN),
-                                            100
-                                        );
+                                        multiset.add(Blocks.STONE.getDefaultState().withProperty(BlockStone.VARIANT, BlockStone.EnumType.STONE).getMapColor(worldIn, BlockPos.ORIGIN), 100);
                                     }
 
-                                    d1 = 100.0;
+                                    d1 = 100.0D;
                                 }
                                 else
                                 {
                                     BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-                                    for (int i4 = 0; i4 < i; i4++)
+                                    for (int i4 = 0; i4 < i; ++i4)
                                     {
-                                        for (int j4 = 0; j4 < i; j4++)
+                                        for (int j4 = 0; j4 < i; ++j4)
                                         {
                                             int k4 = chunk.getHeightValue(i4 + i3, j4 + j3) + 1;
                                             IBlockState iblockstate = Blocks.AIR.getDefaultState();
@@ -169,24 +157,35 @@
                                             }
                                             else
                                             {
-                                                do
-                                                {
-                                                    iblockstate = chunk.getBlockState(i4 + i3, --k4, j4 + j3);
-                                                    blockpos$mutableblockpos.setPos((chunk.x << 4) + i4 + i3, k4, (chunk.z << 4) + j4 + j3);
-                                                }
-                                                while (iblockstate.getMapColor(worldIn, blockpos$mutableblockpos) == MapColor.AIR && k4 > 0);
-
-                                                if (k4 > 0 && iblockstate.getMaterial().isLiquid())
-                                                {
-                                                    int l4 = k4 - 1;
-                                                    IBlockState iblockstate1;
-
-                                                    do
-                                                    {
-                                                        iblockstate1 = chunk.getBlockState(i4 + i3, l4--, j4 + j3);
-                                                        k3++;
-                                                    }
-                                                    while (l4 > 0 && iblockstate1.getMaterial().isLiquid());
+                                                label175:
+                                                {
+                                                    while (true)
+                                                    {
+                                                        --k4;
+                                                        iblockstate = chunk.getBlockState(i4 + i3, k4, j4 + j3);
+                                                        blockpos$mutableblockpos.setPos((chunk.x << 4) + i4 + i3, k4, (chunk.z << 4) + j4 + j3);
+
+                                                        if (iblockstate.getMapColor(worldIn, blockpos$mutableblockpos) != MapColor.AIR || k4 <= 0)
+                                                        {
+                                                            break;
+                                                        }
+                                                    }
+
+                                                    if (k4 > 0 && iblockstate.getMaterial().isLiquid())
+                                                    {
+                                                        int l4 = k4 - 1;
+
+                                                        while (true)
+                                                        {
+                                                            IBlockState iblockstate1 = chunk.getBlockState(i4 + i3, l4--, j4 + j3);
+                                                            ++k3;
+
+                                                            if (l4 <= 0 || !iblockstate1.getMaterial().isLiquid())
+                                                            {
+                                                                break label175;
+                                                            }
+                                                        }
+                                                    }
                                                 }
                                             }
 
@@ -196,33 +195,33 @@
                                     }
                                 }
 
-                                k3 /= i * i;
-                                double d2 = (d1 - d0) * 4.0 / (double)(i + 4) + ((double)(k1 + l1 & 1) - 0.5) * 0.4;
+                                k3 = k3 / (i * i);
+                                double d2 = (d1 - d0) * 4.0D / (double)(i + 4) + ((double)(k1 + l1 & 1) - 0.5D) * 0.4D;
                                 int i5 = 1;
 
-                                if (d2 > 0.6)
+                                if (d2 > 0.6D)
                                 {
                                     i5 = 2;
                                 }
 
-                                if (d2 < -0.6)
+                                if (d2 < -0.6D)
                                 {
                                     i5 = 0;
                                 }
 
-                                MapColor mapcolor = Iterables.getFirst(Multisets.copyHighestCountFirst(multiset), MapColor.AIR);
+                                MapColor mapcolor = (MapColor)Iterables.getFirst(Multisets.copyHighestCountFirst(multiset), MapColor.AIR);
 
                                 if (mapcolor == MapColor.WATER)
                                 {
-                                    d2 = (double)k3 * 0.1 + (double)(k1 + l1 & 1) * 0.2;
+                                    d2 = (double)k3 * 0.1D + (double)(k1 + l1 & 1) * 0.2D;
                                     i5 = 1;
 
-                                    if (d2 < 0.5)
+                                    if (d2 < 0.5D)
                                     {
                                         i5 = 2;
                                     }
 
-                                    if (d2 > 0.9)
+                                    if (d2 > 0.9D)
                                     {
                                         i5 = 0;
                                     }
@@ -252,22 +251,22 @@
 
     public static void renderBiomePreviewMap(World worldIn, ItemStack map)
     {
-        if (map.getItem() == Items.FILLED_MAP)
+        if (map.getItem() instanceof ItemMap)
         {
-            MapData mapdata = Items.FILLED_MAP.getMapData(map, worldIn);
+            MapData mapdata = ((ItemMap) map.getItem()).getMapData(map, worldIn);
 
             if (mapdata != null)
             {
-                if (worldIn.provider.getDimensionType().getId() == mapdata.dimension)
+                if (worldIn.provider.getDimension() == mapdata.dimension)
                 {
                     int i = 1 << mapdata.scale;
                     int j = mapdata.xCenter;
                     int k = mapdata.zCenter;
-                    Biome[] abiome = worldIn.getBiomeProvider().getBiomes(null, (j / i - 64) * i, (k / i - 64) * i, 128 * i, 128 * i, false);
+                    Biome[] abiome = worldIn.getBiomeProvider().getBiomes((Biome[])null, (j / i - 64) * i, (k / i - 64) * i, 128 * i, 128 * i, false);
 
-                    for (int l = 0; l < 128; l++)
+                    for (int l = 0; l < 128; ++l)
                     {
-                        for (int i1 = 0; i1 < 128; i1++)
+                        for (int i1 = 0; i1 < 128; ++i1)
                         {
                             int j1 = l * i;
                             int k1 = i1 * i;
@@ -280,42 +279,42 @@
                             {
                                 if (abiome[(l - 1) * i + (i1 - 1) * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (abiome[(l - 1) * i + (i1 + 1) * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (abiome[(l - 1) * i + i1 * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (abiome[(l + 1) * i + (i1 - 1) * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (abiome[(l + 1) * i + (i1 + 1) * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (abiome[(l + 1) * i + i1 * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (abiome[l * i + (i1 - 1) * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (abiome[l * i + (i1 + 1) * i * 128 * i].getBaseHeight() >= 0.0F)
                                 {
-                                    i2--;
+                                    --i2;
                                 }
 
                                 if (biome.getBaseHeight() < 0.0F)
@@ -379,7 +378,6 @@
         }
     }
 
-    @Override
     public void onUpdate(ItemStack stack, World worldIn, Entity entityIn, int itemSlot, boolean isSelected)
     {
         if (!worldIn.isRemote)
@@ -400,13 +398,11 @@
     }
 
     @Nullable
-    @Override
     public Packet<?> createMapDataPacket(ItemStack stack, World worldIn, EntityPlayer player)
     {
         return this.getMapData(stack, worldIn).getMapPacket(stack, worldIn, player);
     }
 
-    @Override
     public void onCreated(ItemStack stack, World worldIn, EntityPlayer playerIn)
     {
         NBTTagCompound nbttagcompound = stack.getTagCompound();
@@ -462,7 +458,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn)
     {
         if (flagIn.isAdvanced())
@@ -472,7 +467,7 @@
             if (mapdata != null)
             {
                 tooltip.add(I18n.translateToLocalFormatted("filled_map.scale", 1 << mapdata.scale));
-                tooltip.add(I18n.translateToLocalFormatted("filled_map.level", mapdata.scale, 4));
+                tooltip.add(I18n.translateToLocalFormatted("filled_map.level", mapdata.scale, Integer.valueOf(4)));
             }
             else
             {
@@ -489,7 +484,7 @@
         if (nbttagcompound != null && nbttagcompound.hasKey("MapColor", 99))
         {
             int i = nbttagcompound.getInteger("MapColor");
-            return 0xFF000000 | i & 16777215;
+            return -16777216 | i & 16777215;
         }
         else
         {
