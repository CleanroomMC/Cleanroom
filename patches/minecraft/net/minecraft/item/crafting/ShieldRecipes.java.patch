--- before/net/minecraft/item/crafting/ShieldRecipes.java
+++ after/net/minecraft/item/crafting/ShieldRecipes.java
@@ -6,20 +6,17 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
 public class ShieldRecipes
 {
-    public static class Decoration implements IRecipe
+    public static class Decoration extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
         {
-            @Override
             public boolean matches(InventoryCrafting inv, World worldIn)
             {
                 ItemStack itemstack = ItemStack.EMPTY;
                 ItemStack itemstack1 = ItemStack.EMPTY;
 
-                for (int i = 0; i < inv.getSizeInventory(); i++)
+                for (int i = 0; i < inv.getSizeInventory(); ++i)
                 {
                     ItemStack itemstack2 = inv.getStackInSlot(i);
 
@@ -56,16 +53,22 @@
                     }
                 }
 
-                return !itemstack.isEmpty() && !itemstack1.isEmpty();
+                if (!itemstack.isEmpty() && !itemstack1.isEmpty())
+                {
+                    return true;
+                }
+                else
+                {
+                    return false;
+                }
             }
 
-            @Override
             public ItemStack getCraftingResult(InventoryCrafting inv)
             {
                 ItemStack itemstack = ItemStack.EMPTY;
                 ItemStack itemstack1 = ItemStack.EMPTY;
 
-                for (int i = 0; i < inv.getSizeInventory(); i++)
+                for (int i = 0; i < inv.getSizeInventory(); ++i)
                 {
                     ItemStack itemstack2 = inv.getStackInSlot(i);
 
@@ -96,18 +99,16 @@
                 }
             }
 
-            @Override
             public ItemStack getRecipeOutput()
             {
                 return ItemStack.EMPTY;
             }
 
-            @Override
             public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
             {
-                NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+                NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-                for (int i = 0; i < nonnulllist.size(); i++)
+                for (int i = 0; i < nonnulllist.size(); ++i)
                 {
                     ItemStack itemstack = inv.getStackInSlot(i);
 
@@ -120,14 +121,11 @@
                 return nonnulllist;
             }
 
-            @Override
             public boolean isDynamic()
             {
                 return true;
             }
 
-            @SideOnly(Side.CLIENT)
-            @Override
             public boolean canFit(int width, int height)
             {
                 return width * height >= 2;
