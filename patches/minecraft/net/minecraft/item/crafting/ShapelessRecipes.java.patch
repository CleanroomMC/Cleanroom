--- before/net/minecraft/item/crafting/ShapelessRecipes.java
+++ after/net/minecraft/item/crafting/ShapelessRecipes.java
@@ -10,96 +10,86 @@
 import net.minecraft.util.JsonUtils;
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ShapelessRecipes implements IRecipe
+public class ShapelessRecipes extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
 {
     private final ItemStack recipeOutput;
     public final NonNullList<Ingredient> recipeItems;
     private final String group;
+    private final boolean isSimple;
 
     public ShapelessRecipes(String group, ItemStack output, NonNullList<Ingredient> ingredients)
     {
         this.group = group;
         this.recipeOutput = output;
         this.recipeItems = ingredients;
+        boolean simple = true;
+        for (Ingredient i : ingredients)
+            simple &= i.isSimple();
+        this.isSimple = simple;
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
     public String getGroup()
     {
         return this.group;
     }
 
-    @Override
     public ItemStack getRecipeOutput()
     {
         return this.recipeOutput;
     }
 
-    @Override
     public NonNullList<Ingredient> getIngredients()
     {
         return this.recipeItems;
     }
 
-    @Override
     public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
     {
-        NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+        NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-        for (int i = 0; i < nonnulllist.size(); i++)
+        for (int i = 0; i < nonnulllist.size(); ++i)
         {
             ItemStack itemstack = inv.getStackInSlot(i);
 
-            if (itemstack.getItem().hasContainerItem())
-            {
-                nonnulllist.set(i, new ItemStack(itemstack.getItem().getContainerItem()));
-            }
+            nonnulllist.set(i, net.minecraftforge.common.ForgeHooks.getContainerItem(itemstack));
         }
 
         return nonnulllist;
     }
 
-    @Override
     public boolean matches(InventoryCrafting inv, World worldIn)
     {
-        List<Ingredient> list = Lists.newArrayList(this.recipeItems);
+        int ingredientCount = 0;
+        net.minecraft.client.util.RecipeItemHelper recipeItemHelper = new net.minecraft.client.util.RecipeItemHelper();
+        List<ItemStack> inputs = Lists.newArrayList();
 
-        for (int i = 0; i < inv.getHeight(); i++)
+        for (int i = 0; i < inv.getHeight(); ++i)
         {
-            for (int j = 0; j < inv.getWidth(); j++)
+            for (int j = 0; j < inv.getWidth(); ++j)
             {
                 ItemStack itemstack = inv.getStackInRowAndColumn(j, i);
 
                 if (!itemstack.isEmpty())
                 {
-                    boolean flag = false;
-
-                    for (Ingredient ingredient : list)
-                    {
-                        if (ingredient.apply(itemstack))
-                        {
-                            flag = true;
-                            list.remove(ingredient);
-                            break;
-                        }
-                    }
-
-                    if (!flag)
-                    {
-                        return false;
-                    }
+                    ++ingredientCount;
+                    if (this.isSimple)
+                        recipeItemHelper.accountStack(itemstack, 1);
+                    else
+                        inputs.add(itemstack);
                 }
             }
         }
 
-        return list.isEmpty();
+        if (ingredientCount != this.recipeItems.size())
+            return false;
+
+        if (this.isSimple)
+            return recipeItemHelper.canCraft(this, null);
+
+        return net.minecraftforge.common.util.RecipeMatcher.findMatches(inputs, this.recipeItems) != null;
     }
 
-    @Override
     public ItemStack getCraftingResult(InventoryCrafting inv)
     {
         return this.recipeOutput.copy();
@@ -127,9 +117,9 @@
 
     private static NonNullList<Ingredient> deserializeIngredients(JsonArray array)
     {
-        NonNullList<Ingredient> nonnulllist = NonNullList.create();
+        NonNullList<Ingredient> nonnulllist = NonNullList.<Ingredient>create();
 
-        for (int i = 0; i < array.size(); i++)
+        for (int i = 0; i < array.size(); ++i)
         {
             Ingredient ingredient = ShapedRecipes.deserializeIngredient(array.get(i));
 
@@ -142,8 +132,6 @@
         return nonnulllist;
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
     public boolean canFit(int width, int height)
     {
         return width * height >= this.recipeItems.size();
