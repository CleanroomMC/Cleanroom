--- before/net/minecraft/item/crafting/RecipesBanners.java
+++ after/net/minecraft/item/crafting/RecipesBanners.java
@@ -12,19 +12,16 @@
 import net.minecraft.tileentity.TileEntityBanner;
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
 public class RecipesBanners
 {
-    public static class RecipeAddPattern implements IRecipe
+    public static class RecipeAddPattern extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
         {
-            @Override
             public boolean matches(InventoryCrafting inv, World worldIn)
             {
                 boolean flag = false;
 
-                for (int i = 0; i < inv.getSizeInventory(); i++)
+                for (int i = 0; i < inv.getSizeInventory(); ++i)
                 {
                     ItemStack itemstack = inv.getStackInSlot(i);
 
@@ -44,15 +41,21 @@
                     }
                 }
 
-                return !flag ? false : this.matchPatterns(inv) != null;
+                if (!flag)
+                {
+                    return false;
+                }
+                else
+                {
+                    return this.matchPatterns(inv) != null;
+                }
             }
 
-            @Override
             public ItemStack getCraftingResult(InventoryCrafting inv)
             {
                 ItemStack itemstack = ItemStack.EMPTY;
 
-                for (int i = 0; i < inv.getSizeInventory(); i++)
+                for (int i = 0; i < inv.getSizeInventory(); ++i)
                 {
                     ItemStack itemstack1 = inv.getStackInSlot(i);
 
@@ -70,13 +73,14 @@
                 {
                     int k = 0;
 
-                    for (int j = 0; j < inv.getSizeInventory(); j++)
+                    for (int j = 0; j < inv.getSizeInventory(); ++j)
                     {
                         ItemStack itemstack2 = inv.getStackInSlot(j);
 
-                        if (itemstack2.getItem() == Items.DYE)
+                        int color = net.minecraftforge.oredict.DyeUtils.rawDyeDamageFromStack(itemstack2);
+                        if (color != -1)
                         {
-                            k = itemstack2.getMetadata();
+                            k = color;
                             break;
                         }
                     }
@@ -103,25 +107,19 @@
                 return itemstack;
             }
 
-            @Override
             public ItemStack getRecipeOutput()
             {
                 return ItemStack.EMPTY;
             }
 
-            @Override
             public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
             {
-                NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+                NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-                for (int i = 0; i < nonnulllist.size(); i++)
+                for (int i = 0; i < nonnulllist.size(); ++i)
                 {
                     ItemStack itemstack = inv.getStackInSlot(i);
-
-                    if (itemstack.getItem().hasContainerItem())
-                    {
-                        nonnulllist.set(i, new ItemStack(itemstack.getItem().getContainerItem()));
-                    }
+                    nonnulllist.set(i, net.minecraftforge.common.ForgeHooks.getContainerItem(itemstack));
                 }
 
                 return nonnulllist;
@@ -141,13 +139,13 @@
                             boolean flag1 = false;
                             boolean flag2 = false;
 
-                            for (int i = 0; i < p_190933_1_.getSizeInventory() && flag; i++)
+                            for (int i = 0; i < p_190933_1_.getSizeInventory() && flag; ++i)
                             {
                                 ItemStack itemstack = p_190933_1_.getStackInSlot(i);
 
                                 if (!itemstack.isEmpty() && itemstack.getItem() != Items.BANNER)
                                 {
-                                    if (itemstack.getItem() == Items.DYE)
+                                    if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack))
                                     {
                                         if (flag2)
                                         {
@@ -179,7 +177,7 @@
                         {
                             int j = -1;
 
-                            for (int k = 0; k < p_190933_1_.getSizeInventory() && flag; k++)
+                            for (int k = 0; k < p_190933_1_.getSizeInventory() && flag; ++k)
                             {
                                 int l = k / 3;
                                 int i1 = k % 3;
@@ -187,7 +185,7 @@
 
                                 if (!itemstack1.isEmpty() && itemstack1.getItem() != Items.BANNER)
                                 {
-                                    if (itemstack1.getItem() != Items.DYE)
+                                    if (!net.minecraftforge.oredict.DyeUtils.isDye(itemstack1))
                                     {
                                         flag = false;
                                         break;
@@ -229,29 +227,25 @@
                 return null;
             }
 
-            @Override
             public boolean isDynamic()
             {
                 return true;
             }
 
-            @SideOnly(Side.CLIENT)
-            @Override
             public boolean canFit(int width, int height)
             {
                 return width >= 3 && height >= 3;
             }
         }
 
-    public static class RecipeDuplicatePattern implements IRecipe
+    public static class RecipeDuplicatePattern extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
         {
-            @Override
             public boolean matches(InventoryCrafting inv, World worldIn)
             {
                 ItemStack itemstack = ItemStack.EMPTY;
                 ItemStack itemstack1 = ItemStack.EMPTY;
 
-                for (int i = 0; i < inv.getSizeInventory(); i++)
+                for (int i = 0; i < inv.getSizeInventory(); ++i)
                 {
                     ItemStack itemstack2 = inv.getStackInSlot(i);
 
@@ -312,10 +306,9 @@
                 return !itemstack.isEmpty() && !itemstack1.isEmpty();
             }
 
-            @Override
             public ItemStack getCraftingResult(InventoryCrafting inv)
             {
-                for (int i = 0; i < inv.getSizeInventory(); i++)
+                for (int i = 0; i < inv.getSizeInventory(); ++i)
                 {
                     ItemStack itemstack = inv.getStackInSlot(i);
 
@@ -330,26 +323,24 @@
                 return ItemStack.EMPTY;
             }
 
-            @Override
             public ItemStack getRecipeOutput()
             {
                 return ItemStack.EMPTY;
             }
 
-            @Override
             public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
             {
-                NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+                NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-                for (int i = 0; i < nonnulllist.size(); i++)
+                for (int i = 0; i < nonnulllist.size(); ++i)
                 {
                     ItemStack itemstack = inv.getStackInSlot(i);
 
                     if (!itemstack.isEmpty())
                     {
-                        if (itemstack.getItem().hasContainerItem())
+                        if (itemstack.getItem().hasContainerItem(itemstack))
                         {
-                            nonnulllist.set(i, new ItemStack(itemstack.getItem().getContainerItem()));
+                            nonnulllist.set(i, net.minecraftforge.common.ForgeHooks.getContainerItem(itemstack));
                         }
                         else if (itemstack.hasTagCompound() && TileEntityBanner.getPatterns(itemstack) > 0)
                         {
@@ -363,14 +354,11 @@
                 return nonnulllist;
             }
 
-            @Override
             public boolean isDynamic()
             {
                 return true;
             }
 
-            @SideOnly(Side.CLIENT)
-            @Override
             public boolean canFit(int width, int height)
             {
                 return width * height >= 2;
