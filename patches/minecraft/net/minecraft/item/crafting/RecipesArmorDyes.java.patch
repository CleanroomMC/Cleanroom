--- before/net/minecraft/item/crafting/RecipesArmorDyes.java
+++ after/net/minecraft/item/crafting/RecipesArmorDyes.java
@@ -9,18 +9,15 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class RecipesArmorDyes implements IRecipe
+public class RecipesArmorDyes extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
 {
-    @Override
     public boolean matches(InventoryCrafting inv, World worldIn)
     {
         ItemStack itemstack = ItemStack.EMPTY;
-        List<ItemStack> list = Lists.newArrayList();
+        List<ItemStack> list = Lists.<ItemStack>newArrayList();
 
-        for (int i = 0; i < inv.getSizeInventory(); i++)
+        for (int i = 0; i < inv.getSizeInventory(); ++i)
         {
             ItemStack itemstack1 = inv.getStackInSlot(i);
 
@@ -39,7 +36,7 @@
                 }
                 else
                 {
-                    if (itemstack1.getItem() != Items.DYE)
+                    if (!net.minecraftforge.oredict.DyeUtils.isDye(itemstack1))
                     {
                         return false;
                     }
@@ -52,7 +49,6 @@
         return !itemstack.isEmpty() && !list.isEmpty();
     }
 
-    @Override
     public ItemStack getCraftingResult(InventoryCrafting inv)
     {
         ItemStack itemstack = ItemStack.EMPTY;
@@ -61,7 +57,7 @@
         int j = 0;
         ItemArmor itemarmor = null;
 
-        for (int k = 0; k < inv.getSizeInventory(); k++)
+        for (int k = 0; k < inv.getSizeInventory(); ++k)
         {
             ItemStack itemstack1 = inv.getStackInSlot(k);
 
@@ -82,24 +78,24 @@
                     if (itemarmor.hasColor(itemstack1))
                     {
                         int l = itemarmor.getColor(itemstack);
-                        float f = (float)(l >> 16 & 0xFF) / 255.0F;
-                        float f1 = (float)(l >> 8 & 0xFF) / 255.0F;
-                        float f2 = (float)(l & 0xFF) / 255.0F;
+                        float f = (float)(l >> 16 & 255) / 255.0F;
+                        float f1 = (float)(l >> 8 & 255) / 255.0F;
+                        float f2 = (float)(l & 255) / 255.0F;
                         i = (int)((float)i + Math.max(f, Math.max(f1, f2)) * 255.0F);
                         aint[0] = (int)((float)aint[0] + f * 255.0F);
                         aint[1] = (int)((float)aint[1] + f1 * 255.0F);
                         aint[2] = (int)((float)aint[2] + f2 * 255.0F);
-                        j++;
+                        ++j;
                     }
                 }
                 else
                 {
-                    if (itemstack1.getItem() != Items.DYE)
+                    if (!net.minecraftforge.oredict.DyeUtils.isDye(itemstack1))
                     {
                         return ItemStack.EMPTY;
                     }
 
-                    float[] afloat = EnumDyeColor.byDyeDamage(itemstack1.getMetadata()).getColorComponentValues();
+                    float[] afloat = net.minecraftforge.oredict.DyeUtils.colorFromStack(itemstack1).get().getColorComponentValues();
                     int l1 = (int)(afloat[0] * 255.0F);
                     int i2 = (int)(afloat[1] * 255.0F);
                     int j2 = (int)(afloat[2] * 255.0F);
@@ -107,7 +103,7 @@
                     aint[0] += l1;
                     aint[1] += i2;
                     aint[2] += j2;
-                    j++;
+                    ++j;
                 }
             }
         }
@@ -133,38 +129,29 @@
         }
     }
 
-    @Override
     public ItemStack getRecipeOutput()
     {
         return ItemStack.EMPTY;
     }
 
-    @Override
     public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
     {
-        NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+        NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-        for (int i = 0; i < nonnulllist.size(); i++)
+        for (int i = 0; i < nonnulllist.size(); ++i)
         {
             ItemStack itemstack = inv.getStackInSlot(i);
-
-            if (itemstack.getItem().hasContainerItem())
-            {
-                nonnulllist.set(i, new ItemStack(itemstack.getItem().getContainerItem()));
-            }
+            nonnulllist.set(i, net.minecraftforge.common.ForgeHooks.getContainerItem(itemstack));
         }
 
         return nonnulllist;
     }
 
-    @Override
     public boolean isDynamic()
     {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
     public boolean canFit(int width, int height)
     {
         return width * height >= 2;
