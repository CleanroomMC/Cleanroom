--- before/net/minecraft/item/crafting/RecipesMapCloning.java
+++ after/net/minecraft/item/crafting/RecipesMapCloning.java
@@ -5,18 +5,15 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class RecipesMapCloning implements IRecipe
+public class RecipesMapCloning extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
 {
-    @Override
     public boolean matches(InventoryCrafting inv, World worldIn)
     {
         int i = 0;
         ItemStack itemstack = ItemStack.EMPTY;
 
-        for (int j = 0; j < inv.getSizeInventory(); j++)
+        for (int j = 0; j < inv.getSizeInventory(); ++j)
         {
             ItemStack itemstack1 = inv.getStackInSlot(j);
 
@@ -38,7 +35,7 @@
                         return false;
                     }
 
-                    i++;
+                    ++i;
                 }
             }
         }
@@ -46,13 +43,12 @@
         return !itemstack.isEmpty() && i > 0;
     }
 
-    @Override
     public ItemStack getCraftingResult(InventoryCrafting inv)
     {
         int i = 0;
         ItemStack itemstack = ItemStack.EMPTY;
 
-        for (int j = 0; j < inv.getSizeInventory(); j++)
+        for (int j = 0; j < inv.getSizeInventory(); ++j)
         {
             ItemStack itemstack1 = inv.getStackInSlot(j);
 
@@ -74,7 +70,7 @@
                         return ItemStack.EMPTY;
                     }
 
-                    i++;
+                    ++i;
                 }
             }
         }
@@ -101,38 +97,29 @@
         }
     }
 
-    @Override
     public ItemStack getRecipeOutput()
     {
         return ItemStack.EMPTY;
     }
 
-    @Override
     public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
     {
-        NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+        NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-        for (int i = 0; i < nonnulllist.size(); i++)
+        for (int i = 0; i < nonnulllist.size(); ++i)
         {
             ItemStack itemstack = inv.getStackInSlot(i);
-
-            if (itemstack.getItem().hasContainerItem())
-            {
-                nonnulllist.set(i, new ItemStack(itemstack.getItem().getContainerItem()));
-            }
+            nonnulllist.set(i, net.minecraftforge.common.ForgeHooks.getContainerItem(itemstack));
         }
 
         return nonnulllist;
     }
 
-    @Override
     public boolean isDynamic()
     {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
     public boolean canFit(int width, int height)
     {
         return width >= 3 && height >= 3;
