--- before/net/minecraft/item/crafting/ShulkerBoxRecipes.java
+++ after/net/minecraft/item/crafting/ShulkerBoxRecipes.java
@@ -8,20 +8,17 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
 public class ShulkerBoxRecipes
 {
-    public static class ShulkerBoxColoring implements IRecipe
+    public static class ShulkerBoxColoring extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
         {
-            @Override
             public boolean matches(InventoryCrafting inv, World worldIn)
             {
                 int i = 0;
                 int j = 0;
 
-                for (int k = 0; k < inv.getSizeInventory(); k++)
+                for (int k = 0; k < inv.getSizeInventory(); ++k)
                 {
                     ItemStack itemstack = inv.getStackInSlot(k);
 
@@ -29,16 +26,16 @@
                     {
                         if (Block.getBlockFromItem(itemstack.getItem()) instanceof BlockShulkerBox)
                         {
-                            i++;
+                            ++i;
                         }
                         else
                         {
-                            if (itemstack.getItem() != Items.DYE)
+                            if (!net.minecraftforge.oredict.DyeUtils.isDye(itemstack))
                             {
                                 return false;
                             }
 
-                            j++;
+                            ++j;
                         }
 
                         if (j > 1 || i > 1)
@@ -51,13 +48,12 @@
                 return i == 1 && j == 1;
             }
 
-            @Override
             public ItemStack getCraftingResult(InventoryCrafting inv)
             {
                 ItemStack itemstack = ItemStack.EMPTY;
                 ItemStack itemstack1 = ItemStack.EMPTY;
 
-                for (int i = 0; i < inv.getSizeInventory(); i++)
+                for (int i = 0; i < inv.getSizeInventory(); ++i)
                 {
                     ItemStack itemstack2 = inv.getStackInSlot(i);
 
@@ -67,14 +63,14 @@
                         {
                             itemstack = itemstack2;
                         }
-                        else if (itemstack2.getItem() == Items.DYE)
+                        else if (net.minecraftforge.oredict.DyeUtils.isDye(itemstack2))
                         {
                             itemstack1 = itemstack2;
                         }
                     }
                 }
 
-                ItemStack itemstack3 = BlockShulkerBox.getColoredItemStack(EnumDyeColor.byDyeDamage(itemstack1.getMetadata()));
+                ItemStack itemstack3 = BlockShulkerBox.getColoredItemStack(net.minecraftforge.oredict.DyeUtils.colorFromStack(itemstack1).get());
 
                 if (itemstack.hasTagCompound())
                 {
@@ -84,18 +80,16 @@
                 return itemstack3;
             }
 
-            @Override
             public ItemStack getRecipeOutput()
             {
                 return ItemStack.EMPTY;
             }
 
-            @Override
             public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
             {
-                NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+                NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-                for (int i = 0; i < nonnulllist.size(); i++)
+                for (int i = 0; i < nonnulllist.size(); ++i)
                 {
                     ItemStack itemstack = inv.getStackInSlot(i);
 
@@ -108,14 +102,11 @@
                 return nonnulllist;
             }
 
-            @Override
             public boolean isDynamic()
             {
                 return true;
             }
 
-            @SideOnly(Side.CLIENT)
-            @Override
             public boolean canFit(int width, int height)
             {
                 return width * height >= 2;
