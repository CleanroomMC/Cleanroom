--- before/net/minecraft/item/crafting/RecipeRepairItem.java
+++ after/net/minecraft/item/crafting/RecipeRepairItem.java
@@ -7,17 +7,14 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.NonNullList;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class RecipeRepairItem implements IRecipe
+public class RecipeRepairItem extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<IRecipe> implements IRecipe
 {
-    @Override
     public boolean matches(InventoryCrafting inv, World worldIn)
     {
-        List<ItemStack> list = Lists.newArrayList();
+        List<ItemStack> list = Lists.<ItemStack>newArrayList();
 
-        for (int i = 0; i < inv.getSizeInventory(); i++)
+        for (int i = 0; i < inv.getSizeInventory(); ++i)
         {
             ItemStack itemstack = inv.getStackInSlot(i);
 
@@ -29,10 +26,7 @@
                 {
                     ItemStack itemstack1 = list.get(0);
 
-                    if (itemstack.getItem() != itemstack1.getItem()
-                            || itemstack1.getCount() != 1
-                            || itemstack.getCount() != 1
-                            || !itemstack1.getItem().isDamageable())
+                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.getCount() != 1 || itemstack.getCount() != 1 || !itemstack1.getItem().isRepairable())
                     {
                         return false;
                     }
@@ -43,12 +37,11 @@
         return list.size() == 2;
     }
 
-    @Override
     public ItemStack getCraftingResult(InventoryCrafting inv)
     {
-        List<ItemStack> list = Lists.newArrayList();
+        List<ItemStack> list = Lists.<ItemStack>newArrayList();
 
-        for (int i = 0; i < inv.getSizeInventory(); i++)
+        for (int i = 0; i < inv.getSizeInventory(); ++i)
         {
             ItemStack itemstack = inv.getStackInSlot(i);
 
@@ -60,10 +53,7 @@
                 {
                     ItemStack itemstack1 = list.get(0);
 
-                    if (itemstack.getItem() != itemstack1.getItem()
-                            || itemstack1.getCount() != 1
-                            || itemstack.getCount() != 1
-                            || !itemstack1.getItem().isDamageable())
+                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.getCount() != 1 || itemstack.getCount() != 1 || !itemstack1.getItem().isRepairable())
                     {
                         return ItemStack.EMPTY;
                     }
@@ -76,16 +66,13 @@
             ItemStack itemstack2 = list.get(0);
             ItemStack itemstack3 = list.get(1);
 
-            if (itemstack2.getItem() == itemstack3.getItem()
-                    && itemstack2.getCount() == 1
-                    && itemstack3.getCount() == 1
-                    && itemstack2.getItem().isDamageable())
+            if (itemstack2.getItem() == itemstack3.getItem() && itemstack2.getCount() == 1 && itemstack3.getCount() == 1 && itemstack2.getItem().isRepairable())
             {
-                Item item = itemstack2.getItem();
-                int j = item.getMaxDamage() - itemstack2.getItemDamage();
-                int k = item.getMaxDamage() - itemstack3.getItemDamage();
-                int l = j + k + item.getMaxDamage() * 5 / 100;
-                int i1 = item.getMaxDamage() - l;
+                // FORGE: Make itemstack sensitive // Item item = itemstack2.getItem();
+                int j = itemstack2.getMaxDamage() - itemstack2.getItemDamage();
+                int k = itemstack2.getMaxDamage() - itemstack3.getItemDamage();
+                int l = j + k + itemstack2.getMaxDamage() * 5 / 100;
+                int i1 = itemstack2.getMaxDamage() - l;
 
                 if (i1 < 0)
                 {
@@ -99,38 +86,29 @@
         return ItemStack.EMPTY;
     }
 
-    @Override
     public ItemStack getRecipeOutput()
     {
         return ItemStack.EMPTY;
     }
 
-    @Override
     public NonNullList<ItemStack> getRemainingItems(InventoryCrafting inv)
     {
-        NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inv.getSizeInventory(), ItemStack.EMPTY);
+        NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>withSize(inv.getSizeInventory(), ItemStack.EMPTY);
 
-        for (int i = 0; i < nonnulllist.size(); i++)
+        for (int i = 0; i < nonnulllist.size(); ++i)
         {
             ItemStack itemstack = inv.getStackInSlot(i);
-
-            if (itemstack.getItem().hasContainerItem())
-            {
-                nonnulllist.set(i, new ItemStack(itemstack.getItem().getContainerItem()));
-            }
+            nonnulllist.set(i, net.minecraftforge.common.ForgeHooks.getContainerItem(itemstack));
         }
 
         return nonnulllist;
     }
 
-    @Override
     public boolean isDynamic()
     {
         return true;
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
     public boolean canFit(int width, int height)
     {
         return width * height >= 2;
