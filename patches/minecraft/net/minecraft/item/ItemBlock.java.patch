--- before/net/minecraft/item/ItemBlock.java
+++ after/net/minecraft/item/ItemBlock.java
@@ -8,6 +8,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.creativetab.CreativeTabs;
+import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -33,17 +34,7 @@
         this.block = block;
     }
 
-    @Override
-    public EnumActionResult onItemUse(
-        EntityPlayer player,
-        World worldIn,
-        BlockPos pos,
-        EnumHand hand,
-        EnumFacing facing,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
+    public EnumActionResult onItemUse(EntityPlayer player, World worldIn, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
         IBlockState iblockstate = worldIn.getBlockState(pos);
         Block block = iblockstate.getBlock();
@@ -55,38 +46,16 @@
 
         ItemStack itemstack = player.getHeldItem(hand);
 
-        if (!itemstack.isEmpty()
-                && player.canPlayerEdit(pos, facing, itemstack)
-                && worldIn.mayPlace(this.block, pos, false, facing, null))
+        if (!itemstack.isEmpty() && player.canPlayerEdit(pos, facing, itemstack) && worldIn.mayPlace(this.block, pos, false, facing, player))
         {
             int i = this.getMetadata(itemstack.getMetadata());
-            IBlockState iblockstate1 = this.block
-                                       .getStateForPlacement(worldIn, pos, facing, hitX, hitY, hitZ, i, player);
+            IBlockState iblockstate1 = this.block.getStateForPlacement(worldIn, pos, facing, hitX, hitY, hitZ, i, player, hand);
 
-            if (worldIn.setBlockState(pos, iblockstate1, 11))
+            if (placeBlockAt(itemstack, player, worldIn, pos, facing, hitX, hitY, hitZ, iblockstate1))
             {
                 iblockstate1 = worldIn.getBlockState(pos);
-
-                if (iblockstate1.getBlock() == this.block)
-                {
-                    setTileEntityNBT(worldIn, player, pos, itemstack);
-                    this.block.onBlockPlacedBy(worldIn, pos, iblockstate1, player, itemstack);
-
-                    if (player instanceof EntityPlayerMP)
-                    {
-                        CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP)player, pos, itemstack);
-                    }
-                }
-
-                SoundType soundtype = this.block.getSoundType();
-                worldIn.playSound(
-                    player,
-                    pos,
-                    soundtype.getPlaceSound(),
-                    SoundCategory.BLOCKS,
-                    (soundtype.getVolume() + 1.0F) / 2.0F,
-                    soundtype.getPitch() * 0.8F
-                );
+                SoundType soundtype = iblockstate1.getBlock().getSoundType(iblockstate1, worldIn, pos, player);
+                worldIn.playSound(player, pos, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
                 itemstack.shrink(1);
             }
 
@@ -146,7 +115,7 @@
     {
         Block block = worldIn.getBlockState(pos).getBlock();
 
-        if (block == Blocks.SNOW_LAYER)
+        if (block == Blocks.SNOW_LAYER && block.isReplaceable(worldIn, pos))
         {
             side = EnumFacing.UP;
         }
@@ -155,28 +124,24 @@
             pos = pos.offset(side);
         }
 
-        return worldIn.mayPlace(this.block, pos, false, side, null);
+        return worldIn.mayPlace(this.block, pos, false, side, player);
     }
 
-    @Override
     public String getTranslationKey(ItemStack stack)
     {
         return this.block.getTranslationKey();
     }
 
-    @Override
     public String getTranslationKey()
     {
         return this.block.getTranslationKey();
     }
 
-    @Override
     public CreativeTabs getCreativeTab()
     {
         return this.block.getCreativeTab();
     }
 
-    @Override
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> items)
     {
         if (this.isInCreativeTab(tab))
@@ -186,7 +151,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> tooltip, ITooltipFlag flagIn)
     {
         super.addInformation(stack, worldIn, tooltip, flagIn);
@@ -195,6 +159,36 @@
 
     public Block getBlock()
     {
+        return this.getBlockRaw() == null ? null : this.getBlockRaw().delegate.get();
+    }
+
+    private Block getBlockRaw()
+    {
         return this.block;
+    }
+
+    /**
+     * Called to actually place the block, after the location is determined
+     * and all permission checks have been made.
+     *
+     * @param stack The item stack that was used to place the block. This can be changed inside the method.
+     * @param player The player who is placing the block. Can be null if the block is not being placed by a player.
+     * @param side The side the player (or machine) right-clicked on.
+     */
+    public boolean placeBlockAt(ItemStack stack, EntityPlayer player, World world, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ, IBlockState newState)
+    {
+        if (!world.setBlockState(pos, newState, 11)) return false;
+
+        IBlockState state = world.getBlockState(pos);
+        if (state.getBlock() == this.block)
+        {
+            setTileEntityNBT(world, player, pos, stack);
+            this.block.onBlockPlacedBy(world, pos, state, player, stack);
+
+            if (player instanceof EntityPlayerMP)
+                CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP)player, pos, stack);
+        }
+
+        return true;
     }
 }
