--- before/net/minecraft/item/ItemStack.java
+++ after/net/minecraft/item/ItemStack.java
@@ -50,7 +50,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public final class ItemStack
+public final class ItemStack implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
 {
     public static final ItemStack EMPTY = new ItemStack((Item)null);
     public static final DecimalFormat DECIMALFORMAT = new DecimalFormat("#.##");
@@ -66,6 +66,10 @@
     private Block canPlaceOnCacheBlock;
     private boolean canPlaceOnCacheResult;
 
+    private net.minecraftforge.registries.IRegistryDelegate<Item> delegate;
+    private net.minecraftforge.common.capabilities.CapabilityDispatcher capabilities;
+    private NBTTagCompound capNBT;
+
     public ItemStack(Block blockIn)
     {
         this(blockIn, 1);
@@ -91,8 +95,10 @@
         this(itemIn, amount, 0);
     }
 
-    public ItemStack(Item itemIn, int amount, int meta)
+    public ItemStack(Item itemIn, int amount, int meta){ this(itemIn, amount, meta, null); }
+    public ItemStack(Item itemIn, int amount, int meta, @Nullable NBTTagCompound capNBT)
     {
+        this.capNBT = capNBT;
         this.item = itemIn;
         this.itemDamage = meta;
         this.stackSize = amount;
@@ -103,6 +109,7 @@
         }
 
         this.updateEmptyState();
+        this.forgeInit();
     }
 
     private void updateEmptyState()
@@ -112,7 +119,8 @@
 
     public ItemStack(NBTTagCompound compound)
     {
-        this.item = Item.getByNameOrId(compound.getString("id"));
+        this.capNBT = compound.hasKey("ForgeCaps") ? compound.getCompoundTag("ForgeCaps") : null;
+        this.item = compound.hasKey("id", 8) ? Item.getByNameOrId(compound.getString("id")) : Items.AIR; //Forge fix tons of NumberFormatExceptions that are caused by deserializing EMPTY ItemStacks.
         this.stackSize = compound.getByte("Count");
         this.itemDamage = Math.max(0, compound.getShort("Damage"));
 
@@ -127,6 +135,11 @@
         }
 
         this.updateEmptyState();
+        this.forgeInit();
+    }
+
+    private ItemStack(Item item, Object unused) {
+        this.item = item;
     }
 
     public boolean isEmpty()
@@ -135,13 +148,20 @@
         {
             return true;
         }
-        else if (this.item == null || this.item == Item.getItemFromBlock(Blocks.AIR))
+        else if (this.getItemRaw() != null && this.getItemRaw() != Items.AIR)
         {
-            return true;
+            if (this.stackSize <= 0)
+            {
+                return true;
+            }
+            else
+            {
+                return this.itemDamage < -32768 || this.itemDamage > 65535;
+            }
         }
         else
         {
-            return this.stackSize <= 0 ? true : this.itemDamage < -32768 || this.itemDamage > 65535;
+            return true;
         }
     }
 
@@ -162,22 +182,26 @@
 
     public Item getItem()
     {
-        return this.isEmpty ? Item.getItemFromBlock(Blocks.AIR) : this.item;
-    }
-
-    public EnumActionResult onItemUse(
-        EntityPlayer playerIn,
-        World worldIn,
-        BlockPos pos,
-        EnumHand hand,
-        EnumFacing side,
-        float hitX,
-        float hitY,
-        float hitZ
-    )
-    {
-        EnumActionResult enumactionresult = this.getItem()
-                                            .onItemUse(playerIn, worldIn, pos, hand, side, hitX, hitY, hitZ);
+        return this.isEmpty || this.delegate == null ? Items.AIR : this.delegate.get();
+    }
+
+    public EnumActionResult onItemUse(EntityPlayer playerIn, World worldIn, BlockPos pos, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ)
+    {
+        if (!worldIn.isRemote) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(this, playerIn, worldIn, pos, side, hitX, hitY, hitZ, hand);
+        EnumActionResult enumactionresult = this.getItem().onItemUse(playerIn, worldIn, pos, hand, side, hitX, hitY, hitZ);
+
+        if (enumactionresult == EnumActionResult.SUCCESS)
+        {
+            playerIn.addStat(StatList.getObjectUseStats(this.item));
+        }
+
+        return enumactionresult;
+    }
+
+    public EnumActionResult onItemUseFirst(EntityPlayer playerIn, World worldIn, BlockPos pos, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ)
+    {
+        // copy of onitemuse but for onitemusefirst
+        EnumActionResult enumactionresult = this.getItem().onItemUseFirst(playerIn, worldIn, pos, side, hitX, hitY, hitZ, hand);
 
         if (enumactionresult == EnumActionResult.SUCCESS)
         {
@@ -214,12 +238,18 @@
             nbt.setTag("tag", this.stackTagCompound);
         }
 
+        if (this.capabilities != null)
+        {
+            NBTTagCompound cnbt = this.capabilities.serializeNBT();
+            if (!cnbt.isEmpty()) nbt.setTag("ForgeCaps", cnbt);
+        }
+
         return nbt;
     }
 
     public int getMaxStackSize()
     {
-        return this.getItem().getItemStackLimit();
+        return this.getItem().getItemStackLimit(this);
     }
 
     public boolean isStackable()
@@ -233,9 +263,13 @@
         {
             return false;
         }
+        else if (this.item.getMaxDamage(this) <= 0)
+        {
+            return false;
+        }
         else
         {
-            return this.item.getMaxDamage() <= 0 ? false : !this.hasTagCompound() || !this.getTagCompound().getBoolean("Unbreakable");
+            return !this.hasTagCompound() || !this.getTagCompound().getBoolean("Unbreakable");
         }
     }
 
@@ -246,32 +280,27 @@
 
     public boolean isItemDamaged()
     {
-        return this.isItemStackDamageable() && this.itemDamage > 0;
+        return this.isItemStackDamageable() && getItem().isDamaged(this);
     }
 
     public int getItemDamage()
     {
-        return this.itemDamage;
+        return getItem().getDamage(this);
     }
 
     public int getMetadata()
     {
-        return this.itemDamage;
+        return getItem().getMetadata(this);
     }
 
     public void setItemDamage(int meta)
     {
-        this.itemDamage = meta;
-
-        if (this.itemDamage < 0)
-        {
-            this.itemDamage = 0;
-        }
+        getItem().setDamage(this, meta);
     }
 
     public int getMaxDamage()
     {
-        return this.getItem().getMaxDamage();
+        return this.getItem().getMaxDamage(this);
     }
 
     public boolean attemptDamageItem(int amount, Random rand, @Nullable EntityPlayerMP damager)
@@ -287,11 +316,11 @@
                 int i = EnchantmentHelper.getEnchantmentLevel(Enchantments.UNBREAKING, this);
                 int j = 0;
 
-                for (int k = 0; i > 0 && k < amount; k++)
+                for (int k = 0; i > 0 && k < amount; ++k)
                 {
                     if (EnchantmentDurability.negateDamage(this, i, rand))
                     {
-                        j++;
+                        ++j;
                     }
                 }
 
@@ -308,8 +337,8 @@
                 CriteriaTriggers.ITEM_DURABILITY_CHANGED.trigger(damager, this, this.itemDamage + amount);
             }
 
-            this.itemDamage += amount;
-            return this.itemDamage > this.getMaxDamage();
+            setItemDamage(getItemDamage() + amount); //Redirect through Item's callback if applicable.
+            return getItemDamage() > getMaxDamage();
         }
     }
 
@@ -358,7 +387,7 @@
 
     public boolean canHarvestBlock(IBlockState blockIn)
     {
-        return this.getItem().canHarvestBlock(blockIn);
+        return this.getItem().canHarvestBlock(blockIn, this);
     }
 
     public boolean interactWithEntity(EntityPlayer playerIn, EntityLivingBase entityIn, EnumHand hand)
@@ -368,15 +397,30 @@
 
     public ItemStack copy()
     {
-        ItemStack itemstack = new ItemStack(this.item, this.stackSize, this.itemDamage);
-        itemstack.setAnimationsToGo(this.getAnimationsToGo());
-
+        if (this.isEmpty())
+        {
+            return EMPTY;
+        }
+        ItemStack copy = new ItemStack(this.item, null);
+        copy.stackSize = this.stackSize;
+        copy.itemDamage = this.itemDamage;
+        copy.animationsToGo = this.animationsToGo;
         if (this.stackTagCompound != null)
         {
-            itemstack.stackTagCompound = this.stackTagCompound.copy();
+            copy.stackTagCompound = this.stackTagCompound.copy();
+        }
+        if (this.capNBT != null && this.capabilities != null)
+        {
+            copy.capNBT = this.capabilities.serializeNBT();
+        }
+        copy.delegate = this.delegate;
+        net.minecraftforge.common.capabilities.ICapabilityProvider provider = copy.item.initCapabilities(copy, copy.capNBT);
+        copy.capabilities = net.minecraftforge.event.ForgeEventFactory.gatherCapabilities(copy, provider);
+        if (copy.capNBT != null && copy.capabilities != null) {
+            copy.capabilities.deserializeNBT(copy.capNBT);
         }
 
-        return itemstack;
+        return copy;
     }
 
     public static boolean areItemStackTagsEqual(ItemStack stackA, ItemStack stackB)
@@ -385,15 +429,20 @@
         {
             return true;
         }
-        else if (stackA.isEmpty() || stackB.isEmpty())
+        else if (!stackA.isEmpty() && !stackB.isEmpty())
         {
-            return false;
+            if (stackA.stackTagCompound == null && stackB.stackTagCompound != null)
+            {
+                return false;
+            }
+            else
+            {
+                return (stackA.stackTagCompound == null || stackA.stackTagCompound.equals(stackB.stackTagCompound)) && stackA.areCapsCompatible(stackB);
+            }
         }
         else
         {
-            return stackA.stackTagCompound == null && stackB.stackTagCompound != null
-                   ? false
-                   : stackA.stackTagCompound == null || stackA.stackTagCompound.equals(stackB.stackTagCompound);
+            return false;
         }
     }
 
@@ -423,11 +472,13 @@
         {
             return false;
         }
+        else if (this.stackTagCompound == null && other.stackTagCompound != null)
+        {
+            return false;
+        }
         else
         {
-            return this.stackTagCompound == null && other.stackTagCompound != null
-                   ? false
-                   : this.stackTagCompound == null || this.stackTagCompound.equals(other.stackTagCompound);
+            return (this.stackTagCompound == null || this.stackTagCompound.equals(other.stackTagCompound)) && this.areCapsCompatible(other);
         }
     }
 
@@ -462,7 +513,14 @@
 
     public boolean isItemEqualIgnoreDurability(ItemStack stack)
     {
-        return !this.isItemStackDamageable() ? this.isItemEqual(stack) : !stack.isEmpty() && this.item == stack.item;
+        if (!this.isItemStackDamageable())
+        {
+            return this.isItemEqual(stack);
+        }
+        else
+        {
+            return !stack.isEmpty() && this.item == stack.item;
+        }
     }
 
     public String getTranslationKey()
@@ -480,7 +538,7 @@
     {
         if (this.animationsToGo > 0)
         {
-            this.animationsToGo--;
+            --this.animationsToGo;
         }
 
         if (this.item != null)
@@ -675,7 +733,7 @@
             {
                 NBTTagList nbttaglist = this.getEnchantmentTagList();
 
-                for (int j = 0; j < nbttaglist.tagCount(); j++)
+                for (int j = 0; j < nbttaglist.tagCount(); ++j)
                 {
                     NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(j);
                     int k = nbttagcompound.getShort("id");
@@ -711,7 +769,7 @@
 
                     if (!nbttaglist3.isEmpty())
                     {
-                        for (int l1 = 0; l1 < nbttaglist3.tagCount(); l1++)
+                        for (int l1 = 0; l1 < nbttaglist3.tagCount(); ++l1)
                         {
                             list.add(TextFormatting.DARK_PURPLE + "" + TextFormatting.ITALIC + nbttaglist3.getStringTagAt(l1));
                         }
@@ -768,7 +826,7 @@
                             + I18n.translateToLocalFormatted(
                                 "attribute.modifier.equals." + attributemodifier.getOperation(),
                                 DECIMALFORMAT.format(d1),
-                                I18n.translateToLocal("attribute.name." + entry.getKey())
+                                I18n.translateToLocal("attribute.name." + (String)entry.getKey())
                             )
                         );
                     }
@@ -780,7 +838,7 @@
                             + I18n.translateToLocalFormatted(
                                 "attribute.modifier.plus." + attributemodifier.getOperation(),
                                 DECIMALFORMAT.format(d1),
-                                I18n.translateToLocal("attribute.name." + entry.getKey())
+                                I18n.translateToLocal("attribute.name." + (String)entry.getKey())
                             )
                         );
                     }
@@ -793,9 +851,10 @@
                             + I18n.translateToLocalFormatted(
                                 "attribute.modifier.take." + attributemodifier.getOperation(),
                                 DECIMALFORMAT.format(d1),
-                                I18n.translateToLocal("attribute.name." + entry.getKey())
+                                I18n.translateToLocal("attribute.name." + (String)entry.getKey())
                             )
                         );
+                        list.add(" " + I18n.translateToLocalFormatted("attribute.modifier.equals." + attributemodifier.getOperation(), DECIMALFORMAT.format(d1), I18n.translateToLocal("attribute.name." + (String)entry.getKey())));
                     }
                 }
             }
@@ -815,7 +874,7 @@
                 list.add("");
                 list.add(TextFormatting.GRAY + I18n.translateToLocal("item.canBreak"));
 
-                for (int j1 = 0; j1 < nbttaglist1.tagCount(); j1++)
+                for (int j1 = 0; j1 < nbttaglist1.tagCount(); ++j1)
                 {
                     Block block = Block.getBlockFromName(nbttaglist1.getStringTagAt(j1));
 
@@ -840,7 +899,7 @@
                 list.add("");
                 list.add(TextFormatting.GRAY + I18n.translateToLocal("item.canPlace"));
 
-                for (int k1 = 0; k1 < nbttaglist2.tagCount(); k1++)
+                for (int k1 = 0; k1 < nbttaglist2.tagCount(); ++k1)
                 {
                     Block block1 = Block.getBlockFromName(nbttaglist2.getStringTagAt(k1));
 
@@ -871,6 +930,7 @@
             }
         }
 
+        net.minecraftforge.event.ForgeEventFactory.onItemTooltip(this, playerIn, list, advanced);
         return list;
     }
 
@@ -880,6 +940,7 @@
         return this.getItem().hasEffect(this);
     }
 
+    @Deprecated // use Forge version on item
     public EnumRarity getRarity()
     {
         return this.getItem().getRarity(this);
@@ -887,7 +948,14 @@
 
     public boolean isItemEnchantable()
     {
-        return !this.getItem().isEnchantable(this) ? false : !this.isItemEnchanted();
+        if (!this.getItem().isEnchantable(this))
+        {
+            return false;
+        }
+        else
+        {
+            return !this.isItemEnchanted();
+        }
     }
 
     public void addEnchantment(Enchantment ench, int level)
@@ -911,7 +979,14 @@
 
     public boolean isItemEnchanted()
     {
-        return this.stackTagCompound != null && this.stackTagCompound.hasKey("ench", 9) ? !this.stackTagCompound.getTagList("ench", 10).isEmpty() : false;
+        if (this.stackTagCompound != null && this.stackTagCompound.hasKey("ench", 9))
+        {
+            return !this.stackTagCompound.getTagList("ench", 10).isEmpty();
+        }
+        else
+        {
+            return false;
+        }
     }
 
     public void setTagInfo(String key, NBTBase value)
@@ -969,7 +1044,7 @@
             multimap = HashMultimap.create();
             NBTTagList nbttaglist = this.stackTagCompound.getTagList("AttributeModifiers", 10);
 
-            for (int i = 0; i < nbttaglist.tagCount(); i++)
+            for (int i = 0; i < nbttaglist.tagCount(); ++i)
             {
                 NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
                 AttributeModifier attributemodifier = SharedMonsterAttributes.readAttributeModifierFromNBT(nbttagcompound);
@@ -985,7 +1060,7 @@
         }
         else
         {
-            multimap = this.getItem().getItemAttributeModifiers(equipmentSlot);
+            multimap = this.getItem().getAttributeModifiers(equipmentSlot, this);
         }
 
         return multimap;
@@ -1030,7 +1105,7 @@
         {
             NBTTagCompound nbttagcompound = this.writeToNBT(new NBTTagCompound());
             itextcomponent.getStyle().setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new TextComponentString(nbttagcompound.toString())));
-            itextcomponent.getStyle().setColor(this.getRarity().color);
+            itextcomponent.getStyle().setColor(this.getItem().getForgeRarity(this).getColor());
         }
 
         return itextcomponent;
@@ -1050,7 +1125,7 @@
             {
                 NBTTagList nbttaglist = this.stackTagCompound.getTagList("CanDestroy", 8);
 
-                for (int i = 0; i < nbttaglist.tagCount(); i++)
+                for (int i = 0; i < nbttaglist.tagCount(); ++i)
                 {
                     Block block = Block.getBlockFromName(nbttaglist.getStringTagAt(i));
 
@@ -1081,7 +1156,7 @@
             {
                 NBTTagList nbttaglist = this.stackTagCompound.getTagList("CanPlaceOn", 8);
 
-                for (int i = 0; i < nbttaglist.tagCount(); i++)
+                for (int i = 0; i < nbttaglist.tagCount(); ++i)
                 {
                     Block block = Block.getBlockFromName(nbttaglist.getStringTagAt(i));
 
@@ -1127,5 +1202,129 @@
     public void shrink(int quantity)
     {
         this.grow(-quantity);
+    }
+
+    @Override
+    public boolean hasCapability(net.minecraftforge.common.capabilities.Capability<?> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    {
+        return this.isEmpty  || this.capabilities == null ? false : this.capabilities.hasCapability(capability, facing);
+    }
+
+    @Override
+    @Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    {
+        return this.isEmpty  || this.capabilities == null ? null : this.capabilities.getCapability(capability, facing);
+    }
+
+    public void deserializeNBT(NBTTagCompound nbt)
+    {
+        // TODO do this better while respecting new rules
+        final ItemStack itemStack = new ItemStack(nbt);
+        this.stackTagCompound = itemStack.stackTagCompound;
+        this.capNBT = itemStack.capNBT;
+    }
+
+    public NBTTagCompound serializeNBT()
+    {
+        NBTTagCompound ret = new NBTTagCompound();
+        this.writeToNBT(ret);
+        return ret;
+    }
+
+    public boolean areCapsCompatible(ItemStack other)
+    {
+        if (this.capabilities == null)
+        {
+            if (other.capabilities == null)
+            {
+                return true;
+            }
+            else
+            {
+                return other.capabilities.areCompatible(null);
+            }
+        }
+        else
+        {
+            return this.capabilities.areCompatible(other.capabilities);
+        }
+    }
+
+    /**
+     * Set up forge's ItemStack additions.
+     */
+    private void forgeInit()
+    {
+        Item item = getItemRaw();
+        if (item != null)
+        {
+            this.delegate = item.delegate;
+            net.minecraftforge.common.capabilities.ICapabilityProvider provider = item.initCapabilities(this, this.capNBT);
+            this.capabilities = net.minecraftforge.event.ForgeEventFactory.gatherCapabilities(this, provider);
+            if (this.capNBT != null && this.capabilities != null) this.capabilities.deserializeNBT(this.capNBT);
+        }
+    }
+
+    /**
+     * Internal call to get the actual item, not the delegate.
+     * In all other methods, FML replaces calls to this.item with the item delegate.
+     */
+    @Nullable
+    private Item getItemRaw()
+    {
+        return this.item;
+    }
+
+    /**
+     * Modeled after ItemStack.areItemStacksEqual
+     * Uses Item.getNBTShareTag for comparison instead of NBT and capabilities.
+     * Only used for comparing itemStacks that were transferred from server to client using Item.getNBTShareTag.
+     */
+    public static boolean areItemStacksEqualUsingNBTShareTag(ItemStack stackA, ItemStack stackB)
+    {
+        if (stackA.isEmpty())
+            return stackB.isEmpty();
+        else
+            return !stackB.isEmpty() && stackA.isItemStackEqualUsingNBTShareTag(stackB);
+    }
+
+    /**
+     * Modeled after ItemStack.isItemStackEqual
+     * Uses Item.getNBTShareTag for comparison instead of NBT and capabilities.
+     * Only used for comparing itemStacks that were transferred from server to client using Item.getNBTShareTag.
+     */
+    private boolean isItemStackEqualUsingNBTShareTag(ItemStack other)
+    {
+        return this.stackSize == other.stackSize && this.getItem() == other.getItem() && this.itemDamage == other.itemDamage && areItemStackShareTagsEqual(this, other);
+    }
+
+    /**
+     * Modeled after ItemStack.areItemStackTagsEqual
+     * Uses Item.getNBTShareTag for comparison instead of NBT and capabilities.
+     * Only used for comparing itemStacks that were transferred from server to client using Item.getNBTShareTag.
+     */
+    public static boolean areItemStackShareTagsEqual(ItemStack stackA, ItemStack stackB)
+    {
+        NBTTagCompound shareTagA = stackA.getItem().getNBTShareTag(stackA);
+        NBTTagCompound shareTagB = stackB.getItem().getNBTShareTag(stackB);
+        if (shareTagA == null)
+            return shareTagB == null;
+        else
+            return shareTagB != null && shareTagA.equals(shareTagB);
+    }
+
+    /**
+     *
+     * Should this item, when held, allow sneak-clicks to pass through to the underlying block?
+     *
+     * @param world The world
+     * @param pos Block position in world
+     * @param player The Player that is wielding the item
+     * @return
+     */
+    public boolean doesSneakBypassUse(net.minecraft.world.IBlockAccess world, BlockPos pos, EntityPlayer player)
+    {
+        return this.isEmpty() || this.getItem().doesSneakBypassUse(this, world, pos, player);
     }
 }
