--- before/net/minecraft/item/ItemTool.java
+++ after/net/minecraft/item/ItemTool.java
@@ -17,13 +17,14 @@
 public class ItemTool extends Item
 {
     private final Set<Block> effectiveBlocks;
-    protected float efficiency = 4.0F;
+    protected float efficiency;
     protected float attackDamage;
     protected float attackSpeed;
     protected Item.ToolMaterial toolMaterial;
 
     protected ItemTool(float attackDamageIn, float attackSpeedIn, Item.ToolMaterial materialIn, Set<Block> effectiveBlocksIn)
     {
+        this.efficiency = 4.0F;
         this.toolMaterial = materialIn;
         this.effectiveBlocks = effectiveBlocksIn;
         this.maxStackSize = 1;
@@ -32,6 +33,18 @@
         this.attackDamage = attackDamageIn + materialIn.getAttackDamage();
         this.attackSpeed = attackSpeedIn;
         this.setCreativeTab(CreativeTabs.TOOLS);
+        if (this instanceof ItemPickaxe)
+        {
+            toolClass = "pickaxe";
+        }
+        else if (this instanceof ItemAxe)
+        {
+            toolClass = "axe";
+        }
+        else if (this instanceof ItemSpade)
+        {
+            toolClass = "shovel";
+        }
     }
 
     protected ItemTool(Item.ToolMaterial materialIn, Set<Block> effectiveBlocksIn)
@@ -39,23 +52,25 @@
         this(0.0F, 0.0F, materialIn, effectiveBlocksIn);
     }
 
-    @Override
     public float getDestroySpeed(ItemStack stack, IBlockState state)
     {
+        for (String type : getToolClasses(stack))
+        {
+            if (state.getBlock().isToolEffective(type, state))
+                return efficiency;
+        }
         return this.effectiveBlocks.contains(state.getBlock()) ? this.efficiency : 1.0F;
     }
 
-    @Override
     public boolean hitEntity(ItemStack stack, EntityLivingBase target, EntityLivingBase attacker)
     {
         stack.damageItem(2, attacker);
         return true;
     }
 
-    @Override
     public boolean onBlockDestroyed(ItemStack stack, World worldIn, IBlockState state, BlockPos pos, EntityLivingBase entityLiving)
     {
-        if (!worldIn.isRemote && (double)state.getBlockHardness(worldIn, pos) != 0.0)
+        if (!worldIn.isRemote && (double)state.getBlockHardness(worldIn, pos) != 0.0D)
         {
             stack.damageItem(1, entityLiving);
         }
@@ -64,13 +79,11 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean isFull3D()
     {
         return true;
     }
 
-    @Override
     public int getItemEnchantability()
     {
         return this.toolMaterial.getEnchantability();
@@ -81,27 +94,47 @@
         return this.toolMaterial.toString();
     }
 
-    @Override
     public boolean getIsRepairable(ItemStack toRepair, ItemStack repair)
     {
-        return this.toolMaterial.getRepairItem() == repair.getItem() ? true : super.getIsRepairable(toRepair, repair);
+        ItemStack mat = this.toolMaterial.getRepairItemStack();
+        if (!mat.isEmpty() && net.minecraftforge.oredict.OreDictionary.itemMatches(mat, repair, false)) return true;
+        return super.getIsRepairable(toRepair, repair);
     }
 
-    @Override
     public Multimap<String, AttributeModifier> getItemAttributeModifiers(EntityEquipmentSlot equipmentSlot)
     {
         Multimap<String, AttributeModifier> multimap = super.getItemAttributeModifiers(equipmentSlot);
 
         if (equipmentSlot == EntityEquipmentSlot.MAINHAND)
         {
-            multimap.put(
-                SharedMonsterAttributes.ATTACK_DAMAGE.getName(), new AttributeModifier(ATTACK_DAMAGE_MODIFIER, "Tool modifier", (double)this.attackDamage, 0)
-            );
-            multimap.put(
-                SharedMonsterAttributes.ATTACK_SPEED.getName(), new AttributeModifier(ATTACK_SPEED_MODIFIER, "Tool modifier", (double)this.attackSpeed, 0)
-            );
+            multimap.put(SharedMonsterAttributes.ATTACK_DAMAGE.getName(), new AttributeModifier(ATTACK_DAMAGE_MODIFIER, "Tool modifier", (double)this.attackDamage, 0));
+            multimap.put(SharedMonsterAttributes.ATTACK_SPEED.getName(), new AttributeModifier(ATTACK_SPEED_MODIFIER, "Tool modifier", (double)this.attackSpeed, 0));
         }
 
         return multimap;
     }
+
+    /*===================================== FORGE START =================================*/
+    @javax.annotation.Nullable
+    private String toolClass;
+    @Override
+    public int getHarvestLevel(ItemStack stack, String toolClass, @javax.annotation.Nullable net.minecraft.entity.player.EntityPlayer player, @javax.annotation.Nullable IBlockState blockState)
+    {
+        int level = super.getHarvestLevel(stack, toolClass,  player, blockState);
+        if (level == -1 && toolClass.equals(this.toolClass))
+        {
+            return this.toolMaterial.getHarvestLevel();
+        }
+        else
+        {
+            return level;
+        }
+    }
+
+    @Override
+    public Set<String> getToolClasses(ItemStack stack)
+    {
+        return toolClass != null ? com.google.common.collect.ImmutableSet.of(toolClass) : super.getToolClasses(stack);
+    }
+    /*===================================== FORGE END =================================*/
 }
