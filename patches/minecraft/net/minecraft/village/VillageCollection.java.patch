--- before/net/minecraft/village/VillageCollection.java
+++ after/net/minecraft/village/VillageCollection.java
@@ -19,9 +19,9 @@
 public class VillageCollection extends WorldSavedData
 {
     private World world;
-    private final List<BlockPos> villagerPositionsList = Lists.newArrayList();
-    private final List<VillageDoorInfo> newDoors = Lists.newArrayList();
-    private final List<Village> villageList = Lists.newArrayList();
+    private final List<BlockPos> villagerPositionsList = Lists.<BlockPos>newArrayList();
+    private final List<VillageDoorInfo> newDoors = Lists.<VillageDoorInfo>newArrayList();
+    private final List<Village> villageList = Lists.<Village>newArrayList();
     private int tickCounter;
 
     public VillageCollection(String name)
@@ -59,7 +59,7 @@
 
     public void tick()
     {
-        this.tickCounter++;
+        ++this.tickCounter;
 
         for (Village village : this.villageList)
         {
@@ -100,17 +100,17 @@
     public Village getNearestVillage(BlockPos doorBlock, int radius)
     {
         Village village = null;
-        double d0 = Float.MAX_VALUE;
+        double d0 = 3.4028234663852886E38D;
 
         for (Village village1 : this.villageList)
         {
             double d1 = village1.getCenter().distanceSq(doorBlock);
 
-            if (!(d1 >= d0))
+            if (d1 < d0)
             {
                 float f = (float)(radius + village1.getVillageRadius());
 
-                if (!(d1 > (double)(f * f)))
+                if (d1 <= (double)(f * f))
                 {
                     village = village1;
                     d0 = d1;
@@ -131,7 +131,7 @@
 
     private void addNewDoorsToVillageOrCreateVillage()
     {
-        for (int i = 0; i < this.newDoors.size(); i++)
+        for (int i = 0; i < this.newDoors.size(); ++i)
         {
             VillageDoorInfo villagedoorinfo = this.newDoors.get(i);
             Village village = this.getNearestVillage(villagedoorinfo.getDoorBlockPos(), 32);
@@ -151,15 +151,16 @@
 
     private void addDoorsAround(BlockPos central)
     {
+        if (!this.world.isAreaLoaded(central, 16)) return; // Forge: prevent loading unloaded chunks when checking for doors
         int i = 16;
         int j = 4;
         int k = 16;
 
-        for (int l = -16; l < 16; l++)
+        for (int l = -16; l < 16; ++l)
         {
-            for (int i1 = -4; i1 < 4; i1++)
+            for (int i1 = -4; i1 < 4; ++i1)
             {
-                for (int j1 = -16; j1 < 16; j1++)
+                for (int j1 = -16; j1 < 16; ++j1)
                 {
                     BlockPos blockpos = central.add(l, i1, j1);
 
@@ -186,9 +187,7 @@
     {
         for (VillageDoorInfo villagedoorinfo : this.newDoors)
         {
-            if (villagedoorinfo.getDoorBlockPos().getX() == doorBlock.getX()
-                    && villagedoorinfo.getDoorBlockPos().getZ() == doorBlock.getZ()
-                    && Math.abs(villagedoorinfo.getDoorBlockPos().getY() - doorBlock.getY()) <= 1)
+            if (villagedoorinfo.getDoorBlockPos().getX() == doorBlock.getX() && villagedoorinfo.getDoorBlockPos().getZ() == doorBlock.getZ() && Math.abs(villagedoorinfo.getDoorBlockPos().getY() - doorBlock.getY()) <= 1)
             {
                 return villagedoorinfo;
             }
@@ -224,11 +223,13 @@
     {
         int i = 0;
 
-        for (int j = 1; j <= 5; j++)
+        for (int j = 1; j <= 5; ++j)
         {
             if (this.world.canSeeSky(centerPos.offset(direction, j)))
             {
-                if (++i >= limitation)
+                ++i;
+
+                if (i >= limitation)
                 {
                     return i;
                 }
@@ -255,16 +256,23 @@
     {
         IBlockState iblockstate = this.world.getBlockState(doorPos);
         Block block = iblockstate.getBlock();
-        return block instanceof BlockDoor ? iblockstate.getMaterial() == Material.WOOD : false;
+
+        if (block instanceof BlockDoor)
+        {
+            return iblockstate.getMaterial() == Material.WOOD;
+        }
+        else
+        {
+            return false;
+        }
     }
 
-    @Override
     public void readFromNBT(NBTTagCompound nbt)
     {
         this.tickCounter = nbt.getInteger("Tick");
         NBTTagList nbttaglist = nbt.getTagList("Villages", 10);
 
-        for (int i = 0; i < nbttaglist.tagCount(); i++)
+        for (int i = 0; i < nbttaglist.tagCount(); ++i)
         {
             NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
             Village village = new Village();
@@ -273,7 +281,6 @@
         }
     }
 
-    @Override
     public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
         compound.setInteger("Tick", this.tickCounter);
