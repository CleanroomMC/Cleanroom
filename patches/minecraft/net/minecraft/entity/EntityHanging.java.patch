--- before/net/minecraft/entity/EntityHanging.java
+++ after/net/minecraft/entity/EntityHanging.java
@@ -45,7 +45,6 @@
         this.hangingPosition = hangingPositionIn;
     }
 
-    @Override
     protected void entityInit()
     {
     }
@@ -64,18 +63,18 @@
     {
         if (this.facingDirection != null)
         {
-            double d0 = (double)this.hangingPosition.getX() + 0.5;
-            double d1 = (double)this.hangingPosition.getY() + 0.5;
-            double d2 = (double)this.hangingPosition.getZ() + 0.5;
-            double d3 = 0.46875;
+            double d0 = (double)this.hangingPosition.getX() + 0.5D;
+            double d1 = (double)this.hangingPosition.getY() + 0.5D;
+            double d2 = (double)this.hangingPosition.getZ() + 0.5D;
+            double d3 = 0.46875D;
             double d4 = this.offs(this.getWidthPixels());
             double d5 = this.offs(this.getHeightPixels());
-            d0 -= (double)this.facingDirection.getXOffset() * 0.46875;
-            d2 -= (double)this.facingDirection.getZOffset() * 0.46875;
-            d1 += d5;
+            d0 = d0 - (double)this.facingDirection.getXOffset() * 0.46875D;
+            d2 = d2 - (double)this.facingDirection.getZOffset() * 0.46875D;
+            d1 = d1 + d5;
             EnumFacing enumfacing = this.facingDirection.rotateYCCW();
-            d0 += d4 * (double)enumfacing.getXOffset();
-            d2 += d4 * (double)enumfacing.getZOffset();
+            d0 = d0 + d4 * (double)enumfacing.getXOffset();
+            d2 = d2 + d4 * (double)enumfacing.getZOffset();
             this.posX = d0;
             this.posY = d1;
             this.posZ = d2;
@@ -85,26 +84,25 @@
 
             if (this.facingDirection.getAxis() == EnumFacing.Axis.Z)
             {
-                d8 = 1.0;
+                d8 = 1.0D;
             }
             else
             {
-                d6 = 1.0;
+                d6 = 1.0D;
             }
 
-            d6 /= 32.0;
-            d7 /= 32.0;
-            d8 /= 32.0;
+            d6 = d6 / 32.0D;
+            d7 = d7 / 32.0D;
+            d8 = d8 / 32.0D;
             this.setEntityBoundingBox(new AxisAlignedBB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8));
         }
     }
 
     private double offs(int p_190202_1_)
     {
-        return p_190202_1_ % 32 == 0 ? 0.5 : 0.0;
+        return p_190202_1_ % 32 == 0 ? 0.5D : 0.0D;
     }
 
-    @Override
     public void onUpdate()
     {
         this.prevPosX = this.posX;
@@ -118,7 +116,7 @@
             if (!this.isDead && !this.onValidSurface())
             {
                 this.setDead();
-                this.onBroken(null);
+                this.onBroken((Entity)null);
             }
         }
     }
@@ -137,15 +135,18 @@
             EnumFacing enumfacing = this.facingDirection.rotateYCCW();
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-            for (int k = 0; k < i; k++)
+            for (int k = 0; k < i; ++k)
             {
-                for (int l = 0; l < j; l++)
+                for (int l = 0; l < j; ++l)
                 {
                     int i1 = (i - 1) / -2;
                     int j1 = (j - 1) / -2;
                     blockpos$mutableblockpos.setPos(blockpos).move(enumfacing, k + i1).move(EnumFacing.UP, l + j1);
                     IBlockState iblockstate = this.world.getBlockState(blockpos$mutableblockpos);
 
+                    if (iblockstate.isSideSolid(this.world, blockpos$mutableblockpos, this.facingDirection))
+                        continue;
+
                     if (!iblockstate.getMaterial().isSolid() && !BlockRedstoneDiode.isDiode(iblockstate))
                     {
                         return false;
@@ -157,25 +158,21 @@
         }
     }
 
-    @Override
     public boolean canBeCollidedWith()
     {
         return true;
     }
 
-    @Override
     public boolean hitByEntity(Entity entityIn)
     {
         return entityIn instanceof EntityPlayer ? this.attackEntityFrom(DamageSource.causePlayerDamage((EntityPlayer)entityIn), 0.0F) : false;
     }
 
-    @Override
     public EnumFacing getHorizontalFacing()
     {
         return this.facingDirection;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -195,27 +192,24 @@
         }
     }
 
-    @Override
     public void move(MoverType type, double x, double y, double z)
     {
-        if (!this.world.isRemote && !this.isDead && x * x + y * y + z * z > 0.0)
+        if (!this.world.isRemote && !this.isDead && x * x + y * y + z * z > 0.0D)
         {
             this.setDead();
-            this.onBroken(null);
+            this.onBroken((Entity)null);
         }
     }
 
-    @Override
     public void addVelocity(double x, double y, double z)
     {
-        if (!this.world.isRemote && !this.isDead && x * x + y * y + z * z > 0.0)
+        if (!this.world.isRemote && !this.isDead && x * x + y * y + z * z > 0.0D)
         {
             this.setDead();
-            this.onBroken(null);
+            this.onBroken((Entity)null);
         }
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         compound.setByte("Facing", (byte)this.facingDirection.getHorizontalIndex());
@@ -225,7 +219,6 @@
         compound.setInteger("TileZ", blockpos.getZ());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         this.hangingPosition = new BlockPos(compound.getInteger("TileX"), compound.getInteger("TileY"), compound.getInteger("TileZ"));
@@ -240,28 +233,19 @@
 
     public abstract void playPlaceSound();
 
-    @Override
     public EntityItem entityDropItem(ItemStack stack, float offsetY)
     {
-        EntityItem entityitem = new EntityItem(
-            this.world,
-            this.posX + (double)((float)this.facingDirection.getXOffset() * 0.15F),
-            this.posY + (double)offsetY,
-            this.posZ + (double)((float)this.facingDirection.getZOffset() * 0.15F),
-            stack
-        );
+        EntityItem entityitem = new EntityItem(this.world, this.posX + (double)((float)this.facingDirection.getXOffset() * 0.15F), this.posY + (double)offsetY, this.posZ + (double)((float)this.facingDirection.getZOffset() * 0.15F), stack);
         entityitem.setDefaultPickupDelay();
         this.world.spawnEntity(entityitem);
         return entityitem;
     }
 
-    @Override
     protected boolean shouldSetPosAfterLoading()
     {
         return false;
     }
 
-    @Override
     public void setPosition(double x, double y, double z)
     {
         this.hangingPosition = new BlockPos(x, y, z);
@@ -274,7 +258,7 @@
         return this.hangingPosition;
     }
 
-    @Override
+    @SuppressWarnings("incomplete-switch")
     public float getRotatedYaw(Rotation transformRotation)
     {
         if (this.facingDirection != null && this.facingDirection.getAxis() != EnumFacing.Axis.Y)
@@ -307,13 +291,11 @@
         }
     }
 
-    @Override
     public float getMirroredYaw(Mirror transformMirror)
     {
         return this.getRotatedYaw(transformMirror.toRotation(this.facingDirection));
     }
 
-    @Override
     public void onStruckByLightning(EntityLightningBolt lightningBolt)
     {
     }
