--- before/net/minecraft/entity/monster/EntityIronGolem.java
+++ after/net/minecraft/entity/monster/EntityIronGolem.java
@@ -41,7 +41,7 @@
 
 public class EntityIronGolem extends EntityGolem
 {
-    protected static final DataParameter<Byte> PLAYER_CREATED = EntityDataManager.createKey(EntityIronGolem.class, DataSerializers.BYTE);
+    protected static final DataParameter<Byte> PLAYER_CREATED = EntityDataManager.<Byte>createKey(EntityIronGolem.class, DataSerializers.BYTE);
     private int homeCheckTimer;
     @Nullable
     Village village;
@@ -54,20 +54,19 @@
         this.setSize(1.4F, 2.7F);
     }
 
-    @Override
     protected void initEntityAI()
     {
-        this.tasks.addTask(1, new EntityAIAttackMelee(this, 1.0, true));
-        this.tasks.addTask(2, new EntityAIMoveTowardsTarget(this, 0.9, 32.0F));
-        this.tasks.addTask(3, new EntityAIMoveThroughVillage(this, 0.6, true));
-        this.tasks.addTask(4, new EntityAIMoveTowardsRestriction(this, 1.0));
+        this.tasks.addTask(1, new EntityAIAttackMelee(this, 1.0D, true));
+        this.tasks.addTask(2, new EntityAIMoveTowardsTarget(this, 0.9D, 32.0F));
+        this.tasks.addTask(3, new EntityAIMoveThroughVillage(this, 0.6D, true));
+        this.tasks.addTask(4, new EntityAIMoveTowardsRestriction(this, 1.0D));
         this.tasks.addTask(5, new EntityAILookAtVillager(this));
-        this.tasks.addTask(6, new EntityAIWanderAvoidWater(this, 0.6));
+        this.tasks.addTask(6, new EntityAIWanderAvoidWater(this, 0.6D));
         this.tasks.addTask(7, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
         this.tasks.addTask(8, new EntityAILookIdle(this));
         this.targetTasks.addTask(1, new EntityAIDefendVillage(this));
-        this.targetTasks.addTask(2, new EntityAIHurtByTarget(this, false));
-        this.targetTasks.addTask(3, new EntityAINearestAttackableTarget<>(this, EntityLiving.class, 10, false, true, new Predicate<EntityLiving>()
+        this.targetTasks.addTask(2, new EntityAIHurtByTarget(this, false, new Class[0]));
+        this.targetTasks.addTask(3, new EntityAINearestAttackableTarget(this, EntityLiving.class, 10, false, true, new Predicate<EntityLiving>()
         {
             public boolean apply(@Nullable EntityLiving p_apply_1_)
             {
@@ -76,14 +75,12 @@
         }));
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(PLAYER_CREATED, (byte)0);
+        this.dataManager.register(PLAYER_CREATED, Byte.valueOf((byte)0));
     }
 
-    @Override
     protected void updateAITasks()
     {
         if (--this.homeCheckTimer <= 0)
@@ -105,22 +102,19 @@
         super.updateAITasks();
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25);
-        this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(100.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
+        this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue(1.0D);
     }
 
-    @Override
     protected int decreaseAirSupply(int air)
     {
         return air;
     }
 
-    @Override
     protected void collideWithEntity(Entity entityIn)
     {
         if (entityIn instanceof IMob && !(entityIn instanceof EntityCreeper) && this.getRNG().nextInt(20) == 0)
@@ -131,46 +125,34 @@
         super.collideWithEntity(entityIn);
     }
 
-    @Override
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
 
         if (this.attackTimer > 0)
         {
-            this.attackTimer--;
+            --this.attackTimer;
         }
 
         if (this.holdRoseTick > 0)
         {
-            this.holdRoseTick--;
+            --this.holdRoseTick;
         }
 
-        if (this.motionX * this.motionX + this.motionZ * this.motionZ > 2.5000003E-7F && this.rand.nextInt(5) == 0)
+        if (this.motionX * this.motionX + this.motionZ * this.motionZ > 2.500000277905201E-7D && this.rand.nextInt(5) == 0)
         {
             int i = MathHelper.floor(this.posX);
-            int j = MathHelper.floor(this.posY - 0.2F);
+            int j = MathHelper.floor(this.posY - 0.20000000298023224D);
             int k = MathHelper.floor(this.posZ);
             IBlockState iblockstate = this.world.getBlockState(new BlockPos(i, j, k));
 
             if (iblockstate.getMaterial() != Material.AIR)
             {
-                this.world
-                .spawnParticle(
-                    EnumParticleTypes.BLOCK_CRACK,
-                    this.posX + ((double)this.rand.nextFloat() - 0.5) * (double)this.width,
-                    this.getEntityBoundingBox().minY + 0.1,
-                    this.posZ + ((double)this.rand.nextFloat() - 0.5) * (double)this.width,
-                    4.0 * ((double)this.rand.nextFloat() - 0.5),
-                    0.5,
-                    ((double)this.rand.nextFloat() - 0.5) * 4.0,
-                    Block.getStateId(iblockstate)
-                );
+                this.world.spawnParticle(EnumParticleTypes.BLOCK_CRACK, this.posX + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, this.getEntityBoundingBox().minY + 0.1D, this.posZ + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, 4.0D * ((double)this.rand.nextFloat() - 0.5D), 0.5D, ((double)this.rand.nextFloat() - 0.5D) * 4.0D, Block.getStateId(iblockstate));
             }
         }
     }
 
-    @Override
     public boolean canAttackClass(Class <? extends EntityLivingBase > cls)
     {
         if (this.isPlayerCreated() && EntityPlayer.class.isAssignableFrom(cls))
@@ -188,21 +170,18 @@
         EntityLiving.registerFixesMob(fixer, EntityIronGolem.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
         compound.setBoolean("PlayerCreated", this.isPlayerCreated());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
         this.setPlayerCreated(compound.getBoolean("PlayerCreated"));
     }
 
-    @Override
     public boolean attackEntityAsMob(Entity entityIn)
     {
         this.attackTimer = 10;
@@ -211,7 +190,7 @@
 
         if (flag)
         {
-            entityIn.motionY += 0.4F;
+            entityIn.motionY += 0.4000000059604645D;
             this.applyEnchantments(this, entityIn);
         }
 
@@ -220,7 +199,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void handleStatusUpdate(byte id)
     {
         if (id == 4)
@@ -267,26 +245,22 @@
         }
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_IRONGOLEM_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_IRONGOLEM_DEATH;
     }
 
-    @Override
     protected void playStepSound(BlockPos pos, Block blockIn)
     {
         this.playSound(SoundEvents.ENTITY_IRONGOLEM_STEP, 1.0F, 1.0F);
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_IRON_GOLEM;
@@ -299,29 +273,28 @@
 
     public boolean isPlayerCreated()
     {
-        return (this.dataManager.get(PLAYER_CREATED) & 1) != 0;
+        return (((Byte)this.dataManager.get(PLAYER_CREATED)).byteValue() & 1) != 0;
     }
 
     public void setPlayerCreated(boolean playerCreated)
     {
-        byte b0 = this.dataManager.get(PLAYER_CREATED);
+        byte b0 = ((Byte)this.dataManager.get(PLAYER_CREATED)).byteValue();
 
         if (playerCreated)
         {
-            this.dataManager.set(PLAYER_CREATED, (byte)(b0 | 1));
+            this.dataManager.set(PLAYER_CREATED, Byte.valueOf((byte)(b0 | 1)));
         }
         else
         {
-            this.dataManager.set(PLAYER_CREATED, (byte)(b0 & -2));
+            this.dataManager.set(PLAYER_CREATED, Byte.valueOf((byte)(b0 & -2)));
         }
     }
 
-    @Override
     public void onDeath(DamageSource cause)
     {
         if (!this.isPlayerCreated() && this.attackingPlayer != null && this.village != null)
         {
-            this.village.modifyPlayerReputation(this.attackingPlayer.getName(), -5);
+            this.village.modifyPlayerReputation(this.attackingPlayer.getUniqueID(), -5);
         }
 
         super.onDeath(cause);
