--- before/net/minecraft/entity/monster/EntityIllusionIllager.java
+++ after/net/minecraft/entity/monster/EntityIllusionIllager.java
@@ -51,14 +51,13 @@
         this.experienceValue = 5;
         this.renderLocations = new Vec3d[2][4];
 
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
-            this.renderLocations[0][i] = new Vec3d(0.0, 0.0, 0.0);
-            this.renderLocations[1][i] = new Vec3d(0.0, 0.0, 0.0);
+            this.renderLocations[0][i] = new Vec3d(0.0D, 0.0D, 0.0D);
+            this.renderLocations[1][i] = new Vec3d(0.0D, 0.0D, 0.0D);
         }
     }
 
-    @Override
     protected void initEntityAI()
     {
         super.initEntityAI();
@@ -66,107 +65,90 @@
         this.tasks.addTask(1, new EntitySpellcasterIllager.AICastingApell());
         this.tasks.addTask(4, new EntityIllusionIllager.AIMirriorSpell());
         this.tasks.addTask(5, new EntityIllusionIllager.AIBlindnessSpell());
-        this.tasks.addTask(6, new EntityAIAttackRangedBow<>(this, 0.5, 20, 15.0F));
-        this.tasks.addTask(8, new EntityAIWander(this, 0.6));
+        this.tasks.addTask(6, new EntityAIAttackRangedBow(this, 0.5D, 20, 15.0F));
+        this.tasks.addTask(8, new EntityAIWander(this, 0.6D));
         this.tasks.addTask(9, new EntityAIWatchClosest(this, EntityPlayer.class, 3.0F, 1.0F));
         this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityLiving.class, 8.0F));
-        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true, EntityIllusionIllager.class));
-        this.targetTasks.addTask(2, new EntityAINearestAttackableTarget<>(this, EntityPlayer.class, true).setUnseenMemoryTicks(300));
-        this.targetTasks.addTask(3, new EntityAINearestAttackableTarget<>(this, EntityVillager.class, false).setUnseenMemoryTicks(300));
-        this.targetTasks.addTask(3, new EntityAINearestAttackableTarget<>(this, EntityIronGolem.class, false).setUnseenMemoryTicks(300));
+        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true, new Class[] {EntityIllusionIllager.class}));
+        this.targetTasks.addTask(2, (new EntityAINearestAttackableTarget(this, EntityPlayer.class, true)).setUnseenMemoryTicks(300));
+        this.targetTasks.addTask(3, (new EntityAINearestAttackableTarget(this, EntityVillager.class, false)).setUnseenMemoryTicks(300));
+        this.targetTasks.addTask(3, (new EntityAINearestAttackableTarget(this, EntityIronGolem.class, false)).setUnseenMemoryTicks(300));
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.5);
-        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(18.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(32.0);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.5D);
+        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(18.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(32.0D);
     }
 
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, IEntityLivingData livingdata)
     {
         this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, new ItemStack(Items.BOW));
         return super.onInitialSpawn(difficulty, livingdata);
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
     }
 
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.EMPTY;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public AxisAlignedBB getRenderBoundingBox()
     {
-        return this.getEntityBoundingBox().grow(3.0, 0.0, 3.0);
+        return this.getEntityBoundingBox().grow(3.0D, 0.0D, 3.0D);
     }
 
-    @Override
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
 
         if (this.world.isRemote && this.isInvisible())
         {
-            this.ghostTime--;
+            --this.ghostTime;
 
             if (this.ghostTime < 0)
             {
                 this.ghostTime = 0;
             }
 
-            if (this.hurtTime == 1 || this.ticksExisted % 1200 == 0)
+            if (this.hurtTime != 1 && this.ticksExisted % 1200 != 0)
+            {
+                if (this.hurtTime == this.maxHurtTime - 1)
+                {
+                    this.ghostTime = 3;
+
+                    for (int k = 0; k < 4; ++k)
+                    {
+                        this.renderLocations[0][k] = this.renderLocations[1][k];
+                        this.renderLocations[1][k] = new Vec3d(0.0D, 0.0D, 0.0D);
+                    }
+                }
+            }
+            else
             {
                 this.ghostTime = 3;
                 float f = -6.0F;
-                int j = 13;
-
-                for (int k = 0; k < 4; k++)
-                {
-                    this.renderLocations[0][k] = this.renderLocations[1][k];
-                    this.renderLocations[1][k] = new Vec3d(
-                        (double)(-6.0F + (float)this.rand.nextInt(13)) * 0.5,
-                        (double)Math.max(0, this.rand.nextInt(6) - 4),
-                        (double)(-6.0F + (float)this.rand.nextInt(13)) * 0.5
-                    );
-                }
-
-                for (int l = 0; l < 16; l++)
-                {
-                    this.world
-                    .spawnParticle(
-                        EnumParticleTypes.CLOUD,
-                        this.posX + (this.rand.nextDouble() - 0.5) * (double)this.width,
-                        this.posY + this.rand.nextDouble() * (double)this.height,
-                        this.posZ + (this.rand.nextDouble() - 0.5) * (double)this.width,
-                        0.0,
-                        0.0,
-                        0.0
-                    );
-                }
-
-                this.world
-                .playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ILLAGER_MIRROR_MOVE, this.getSoundCategory(), 1.0F, 1.0F, false);
-            }
-            else if (this.hurtTime == this.maxHurtTime - 1)
-            {
-                this.ghostTime = 3;
-
-                for (int i = 0; i < 4; i++)
-                {
-                    this.renderLocations[0][i] = this.renderLocations[1][i];
-                    this.renderLocations[1][i] = new Vec3d(0.0, 0.0, 0.0);
-                }
+                int i = 13;
+
+                for (int j = 0; j < 4; ++j)
+                {
+                    this.renderLocations[0][j] = this.renderLocations[1][j];
+                    this.renderLocations[1][j] = new Vec3d((double)(-6.0F + (float)this.rand.nextInt(13)) * 0.5D, (double)Math.max(0, this.rand.nextInt(6) - 4), (double)(-6.0F + (float)this.rand.nextInt(13)) * 0.5D);
+                }
+
+                for (int l = 0; l < 16; ++l)
+                {
+                    this.world.spawnParticle(EnumParticleTypes.CLOUD, this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, 0.0D, 0.0D, 0.0D);
+                }
+
+                this.world.playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ILLAGER_MIRROR_MOVE, this.getSoundCategory(), 1.0F, 1.0F, false);
             }
         }
     }
@@ -181,66 +163,64 @@
         else
         {
             double d0 = (double)(((float)this.ghostTime - p_193098_1_) / 3.0F);
-            d0 = Math.pow(d0, 0.25);
+            d0 = Math.pow(d0, 0.25D);
             Vec3d[] avec3d = new Vec3d[4];
 
-            for (int i = 0; i < 4; i++)
+            for (int i = 0; i < 4; ++i)
             {
-                avec3d[i] = this.renderLocations[1][i].scale(1.0 - d0).add(this.renderLocations[0][i].scale(d0));
+                avec3d[i] = this.renderLocations[1][i].scale(1.0D - d0).add(this.renderLocations[0][i].scale(d0));
             }
 
             return avec3d;
         }
     }
 
-    @Override
     public boolean isOnSameTeam(Entity entityIn)
     {
         if (super.isOnSameTeam(entityIn))
         {
             return true;
         }
+        else if (entityIn instanceof EntityLivingBase && ((EntityLivingBase)entityIn).getCreatureAttribute() == EnumCreatureAttribute.ILLAGER)
+        {
+            return this.getTeam() == null && entityIn.getTeam() == null;
+        }
         else
         {
-            return entityIn instanceof EntityLivingBase && ((EntityLivingBase)entityIn).getCreatureAttribute() == EnumCreatureAttribute.ILLAGER
-                   ? this.getTeam() == null && entityIn.getTeam() == null
-                   : false;
+            return false;
         }
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         return SoundEvents.ENTITY_ILLUSION_ILLAGER_AMBIENT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_ILLAGER_DEATH;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_ILLUSION_ILLAGER_HURT;
     }
 
-    @Override
     protected SoundEvent getSpellSound()
     {
         return SoundEvents.ENTITY_ILLAGER_CAST_SPELL;
     }
 
-    @Override
     public void attackEntityWithRangedAttack(EntityLivingBase target, float distanceFactor)
     {
         EntityArrow entityarrow = this.createArrowEntity(distanceFactor);
+        if (this.getHeldItemMainhand().getItem() instanceof net.minecraft.item.ItemBow)
+            entityarrow = ((net.minecraft.item.ItemBow) this.getHeldItemMainhand().getItem()).customizeArrow(entityarrow);
         double d0 = target.posX - this.posX;
         double d1 = target.getEntityBoundingBox().minY + (double)(target.height / 3.0F) - entityarrow.posY;
         double d2 = target.posZ - this.posZ;
         double d3 = (double)MathHelper.sqrt(d0 * d0 + d2 * d2);
-        entityarrow.shoot(d0, d1 + d3 * 0.2F, d2, 1.6F, (float)(14 - this.world.getDifficulty().getId() * 4));
+        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float)(14 - this.world.getDifficulty().getId() * 4));
         this.playSound(SoundEvents.ENTITY_SKELETON_SHOOT, 1.0F, 1.0F / (this.getRNG().nextFloat() * 0.4F + 0.8F));
         this.world.spawnEntity(entityarrow);
     }
@@ -258,14 +238,12 @@
         return this.isAggressive(1);
     }
 
-    @Override
     public void setSwingingArms(boolean swingingArms)
     {
         this.setAggressive(1, swingingArms);
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public AbstractIllager.IllagerArmPose getArmPose()
     {
         if (this.isSpellcasting())
@@ -286,7 +264,6 @@
         {
         }
 
-        @Override
         public boolean shouldExecute()
         {
             if (!super.shouldExecute())
@@ -297,48 +274,42 @@
             {
                 return false;
             }
+            else if (EntityIllusionIllager.this.getAttackTarget().getEntityId() == this.lastTargetId)
+            {
+                return false;
+            }
             else
             {
-                return EntityIllusionIllager.this.getAttackTarget().getEntityId() == this.lastTargetId
-                       ? false
-                       : EntityIllusionIllager.this.world
-                       .getDifficultyForLocation(new BlockPos(EntityIllusionIllager.this))
-                       .isHarderThan((float)EnumDifficulty.NORMAL.ordinal());
+                return EntityIllusionIllager.this.world.getDifficultyForLocation(new BlockPos(EntityIllusionIllager.this)).isHarderThan((float)EnumDifficulty.NORMAL.ordinal());
             }
         }
 
-        @Override
         public void startExecuting()
         {
             super.startExecuting();
             this.lastTargetId = EntityIllusionIllager.this.getAttackTarget().getEntityId();
         }
 
-        @Override
         protected int getCastingTime()
         {
             return 20;
         }
 
-        @Override
         protected int getCastingInterval()
         {
             return 180;
         }
 
-        @Override
         protected void castSpell()
         {
             EntityIllusionIllager.this.getAttackTarget().addPotionEffect(new PotionEffect(MobEffects.BLINDNESS, 400));
         }
 
-        @Override
         protected SoundEvent getSpellPrepareSound()
         {
             return SoundEvents.ENTITY_ILLAGER_PREPARE_BLINDNESS;
         }
 
-        @Override
         protected EntitySpellcasterIllager.SpellType getSpellType()
         {
             return EntitySpellcasterIllager.SpellType.BLINDNESS;
@@ -351,38 +322,39 @@
         {
         }
 
-        @Override
         public boolean shouldExecute()
         {
-            return !super.shouldExecute() ? false : !EntityIllusionIllager.this.isPotionActive(MobEffects.INVISIBILITY);
+            if (!super.shouldExecute())
+            {
+                return false;
+            }
+            else
+            {
+                return !EntityIllusionIllager.this.isPotionActive(MobEffects.INVISIBILITY);
+            }
         }
 
-        @Override
         protected int getCastingTime()
         {
             return 20;
         }
 
-        @Override
         protected int getCastingInterval()
         {
             return 340;
         }
 
-        @Override
         protected void castSpell()
         {
             EntityIllusionIllager.this.addPotionEffect(new PotionEffect(MobEffects.INVISIBILITY, 1200));
         }
 
         @Nullable
-        @Override
         protected SoundEvent getSpellPrepareSound()
         {
             return SoundEvents.ENTITY_ILLAGER_PREPARE_MIRROR;
         }
 
-        @Override
         protected EntitySpellcasterIllager.SpellType getSpellType()
         {
             return EntitySpellcasterIllager.SpellType.DISAPPEAR;
