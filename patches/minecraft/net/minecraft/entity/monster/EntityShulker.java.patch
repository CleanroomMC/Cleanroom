--- before/net/minecraft/entity/monster/EntityShulker.java
+++ after/net/minecraft/entity/monster/EntityShulker.java
@@ -51,13 +51,11 @@
 public class EntityShulker extends EntityGolem implements IMob
 {
     private static final UUID COVERED_ARMOR_BONUS_ID = UUID.fromString("7E0292F2-9434-48D5-A29F-9583AF7DF27F");
-    private static final AttributeModifier COVERED_ARMOR_BONUS_MODIFIER = new AttributeModifier(COVERED_ARMOR_BONUS_ID, "Covered armor bonus", 20.0, 0).setSaved(false);
-    protected static final DataParameter<EnumFacing> ATTACHED_FACE = EntityDataManager.createKey(EntityShulker.class, DataSerializers.FACING);
-    protected static final DataParameter<Optional<BlockPos>> ATTACHED_BLOCK_POS = EntityDataManager.createKey(
-                    EntityShulker.class, DataSerializers.OPTIONAL_BLOCK_POS
-                );
-    protected static final DataParameter<Byte> PEEK_TICK = EntityDataManager.createKey(EntityShulker.class, DataSerializers.BYTE);
-    protected static final DataParameter<Byte> COLOR = EntityDataManager.createKey(EntityShulker.class, DataSerializers.BYTE);
+    private static final AttributeModifier COVERED_ARMOR_BONUS_MODIFIER = (new AttributeModifier(COVERED_ARMOR_BONUS_ID, "Covered armor bonus", 20.0D, 0)).setSaved(false);
+    protected static final DataParameter<EnumFacing> ATTACHED_FACE = EntityDataManager.<EnumFacing>createKey(EntityShulker.class, DataSerializers.FACING);
+    protected static final DataParameter<Optional<BlockPos>> ATTACHED_BLOCK_POS = EntityDataManager.<Optional<BlockPos>>createKey(EntityShulker.class, DataSerializers.OPTIONAL_BLOCK_POS);
+    protected static final DataParameter<Byte> PEEK_TICK = EntityDataManager.<Byte>createKey(EntityShulker.class, DataSerializers.BYTE);
+    protected static final DataParameter<Byte> COLOR = EntityDataManager.<Byte>createKey(EntityShulker.class, DataSerializers.BYTE);
     public static final EnumDyeColor DEFAULT_COLOR = EnumDyeColor.PURPLE;
     private float prevPeekAmount;
     private float peekAmount;
@@ -76,7 +74,6 @@
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         this.renderYawOffset = 180.0F;
@@ -88,37 +85,32 @@
         return super.onInitialSpawn(difficulty, livingdata);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(1, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
         this.tasks.addTask(4, new EntityShulker.AIAttack());
         this.tasks.addTask(7, new EntityShulker.AIPeek());
         this.tasks.addTask(8, new EntityAILookIdle(this));
-        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true));
+        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true, new Class[0]));
         this.targetTasks.addTask(2, new EntityShulker.AIAttackNearest(this));
         this.targetTasks.addTask(3, new EntityShulker.AIDefenseAttack(this));
     }
 
-    @Override
     protected boolean canTriggerWalking()
     {
         return false;
     }
 
-    @Override
     public SoundCategory getSoundCategory()
     {
         return SoundCategory.HOSTILE;
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         return SoundEvents.ENTITY_SHULKER_AMBIENT;
     }
 
-    @Override
     public void playLivingSound()
     {
         if (!this.isClosed())
@@ -127,36 +119,31 @@
         }
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_SHULKER_DEATH;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return this.isClosed() ? SoundEvents.ENTITY_SHULKER_HURT_CLOSED : SoundEvents.ENTITY_SHULKER_HURT;
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
         this.dataManager.register(ATTACHED_FACE, EnumFacing.DOWN);
         this.dataManager.register(ATTACHED_BLOCK_POS, Optional.absent());
-        this.dataManager.register(PEEK_TICK, (byte)0);
-        this.dataManager.register(COLOR, (byte)DEFAULT_COLOR.getMetadata());
+        this.dataManager.register(PEEK_TICK, Byte.valueOf((byte)0));
+        this.dataManager.register(COLOR, Byte.valueOf((byte)DEFAULT_COLOR.getMetadata()));
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(30.0);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(30.0D);
     }
 
-    @Override
     protected EntityBodyHelper createBodyHelper()
     {
         return new EntityShulker.BodyHelper(this);
@@ -167,13 +154,12 @@
         EntityLiving.registerFixesMob(fixer, EntityShulker.class);
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
         this.dataManager.set(ATTACHED_FACE, EnumFacing.byIndex(compound.getByte("AttachFace")));
-        this.dataManager.set(PEEK_TICK, compound.getByte("Peek"));
-        this.dataManager.set(COLOR, compound.getByte("Color"));
+        this.dataManager.set(PEEK_TICK, Byte.valueOf(compound.getByte("Peek")));
+        this.dataManager.set(COLOR, Byte.valueOf(compound.getByte("Color")));
 
         if (compound.hasKey("APX"))
         {
@@ -188,13 +174,12 @@
         }
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
-        compound.setByte("AttachFace", (byte)this.dataManager.get(ATTACHED_FACE).getIndex());
-        compound.setByte("Peek", this.dataManager.get(PEEK_TICK));
-        compound.setByte("Color", this.dataManager.get(COLOR));
+        compound.setByte("AttachFace", (byte)((EnumFacing)this.dataManager.get(ATTACHED_FACE)).getIndex());
+        compound.setByte("Peek", ((Byte)this.dataManager.get(PEEK_TICK)).byteValue());
+        compound.setByte("Color", ((Byte)this.dataManager.get(COLOR)).byteValue());
         BlockPos blockpos = this.getAttachmentPos();
 
         if (blockpos != null)
@@ -205,11 +190,10 @@
         }
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
-        BlockPos blockpos = this.dataManager.get(ATTACHED_BLOCK_POS).orNull();
+        BlockPos blockpos = (BlockPos)((Optional)this.dataManager.get(ATTACHED_BLOCK_POS)).orNull();
 
         if (blockpos == null && !this.world.isRemote)
         {
@@ -234,7 +218,7 @@
             {
                 if (iblockstate.getBlock() == Blocks.PISTON_EXTENSION)
                 {
-                    EnumFacing enumfacing = iblockstate.getValue(BlockPistonBase.FACING);
+                    EnumFacing enumfacing = (EnumFacing)iblockstate.getValue(BlockPistonBase.FACING);
 
                     if (this.world.isAirBlock(blockpos.offset(enumfacing)))
                     {
@@ -248,7 +232,7 @@
                 }
                 else if (iblockstate.getBlock() == Blocks.PISTON_HEAD)
                 {
-                    EnumFacing enumfacing3 = iblockstate.getValue(BlockPistonExtension.FACING);
+                    EnumFacing enumfacing3 = (EnumFacing)iblockstate.getValue(BlockPistonExtension.FACING);
 
                     if (this.world.isAirBlock(blockpos.offset(enumfacing3)))
                     {
@@ -316,7 +300,7 @@
             {
                 if (this.clientSideTeleportInterpolation > 0 && this.currentAttachmentPosition != null)
                 {
-                    this.clientSideTeleportInterpolation--;
+                    --this.clientSideTeleportInterpolation;
                 }
                 else
                 {
@@ -324,105 +308,52 @@
                 }
             }
 
-            this.posX = (double)blockpos.getX() + 0.5;
+            this.posX = (double)blockpos.getX() + 0.5D;
             this.posY = (double)blockpos.getY();
-            this.posZ = (double)blockpos.getZ() + 0.5;
+            this.posZ = (double)blockpos.getZ() + 0.5D;
+            if (this.isAddedToWorld() && !this.world.isRemote) this.world.updateEntityWithOptionalForce(this, false); // Forge - Process chunk registration after moving.
             this.prevPosX = this.posX;
             this.prevPosY = this.posY;
             this.prevPosZ = this.posZ;
             this.lastTickPosX = this.posX;
             this.lastTickPosY = this.posY;
             this.lastTickPosZ = this.posZ;
-            double d3 = 0.5 - (double)MathHelper.sin((0.5F + this.peekAmount) * (float) Math.PI) * 0.5;
-            double d4 = 0.5 - (double)MathHelper.sin((0.5F + this.prevPeekAmount) * (float) Math.PI) * 0.5;
+            double d3 = 0.5D - (double)MathHelper.sin((0.5F + this.peekAmount) * (float)Math.PI) * 0.5D;
+            double d4 = 0.5D - (double)MathHelper.sin((0.5F + this.prevPeekAmount) * (float)Math.PI) * 0.5D;
             double d5 = d3 - d4;
-            double d0 = 0.0;
-            double d1 = 0.0;
-            double d2 = 0.0;
+            double d0 = 0.0D;
+            double d1 = 0.0D;
+            double d2 = 0.0D;
             EnumFacing enumfacing2 = this.getAttachmentFacing();
 
             switch (enumfacing2)
             {
                 case DOWN:
-                    this.setEntityBoundingBox(
-                        new AxisAlignedBB(
-                            this.posX - 0.5,
-                            this.posY,
-                            this.posZ - 0.5,
-                            this.posX + 0.5,
-                            this.posY + 1.0 + d3,
-                            this.posZ + 0.5
-                        )
-                    );
+                    this.setEntityBoundingBox(new AxisAlignedBB(this.posX - 0.5D, this.posY, this.posZ - 0.5D, this.posX + 0.5D, this.posY + 1.0D + d3, this.posZ + 0.5D));
                     d1 = d5;
                     break;
                 case UP:
-                    this.setEntityBoundingBox(
-                        new AxisAlignedBB(
-                            this.posX - 0.5,
-                            this.posY - d3,
-                            this.posZ - 0.5,
-                            this.posX + 0.5,
-                            this.posY + 1.0,
-                            this.posZ + 0.5
-                        )
-                    );
+                    this.setEntityBoundingBox(new AxisAlignedBB(this.posX - 0.5D, this.posY - d3, this.posZ - 0.5D, this.posX + 0.5D, this.posY + 1.0D, this.posZ + 0.5D));
                     d1 = -d5;
                     break;
                 case NORTH:
-                    this.setEntityBoundingBox(
-                        new AxisAlignedBB(
-                            this.posX - 0.5,
-                            this.posY,
-                            this.posZ - 0.5,
-                            this.posX + 0.5,
-                            this.posY + 1.0,
-                            this.posZ + 0.5 + d3
-                        )
-                    );
+                    this.setEntityBoundingBox(new AxisAlignedBB(this.posX - 0.5D, this.posY, this.posZ - 0.5D, this.posX + 0.5D, this.posY + 1.0D, this.posZ + 0.5D + d3));
                     d2 = d5;
                     break;
                 case SOUTH:
-                    this.setEntityBoundingBox(
-                        new AxisAlignedBB(
-                            this.posX - 0.5,
-                            this.posY,
-                            this.posZ - 0.5 - d3,
-                            this.posX + 0.5,
-                            this.posY + 1.0,
-                            this.posZ + 0.5
-                        )
-                    );
+                    this.setEntityBoundingBox(new AxisAlignedBB(this.posX - 0.5D, this.posY, this.posZ - 0.5D - d3, this.posX + 0.5D, this.posY + 1.0D, this.posZ + 0.5D));
                     d2 = -d5;
                     break;
                 case WEST:
-                    this.setEntityBoundingBox(
-                        new AxisAlignedBB(
-                            this.posX - 0.5,
-                            this.posY,
-                            this.posZ - 0.5,
-                            this.posX + 0.5 + d3,
-                            this.posY + 1.0,
-                            this.posZ + 0.5
-                        )
-                    );
+                    this.setEntityBoundingBox(new AxisAlignedBB(this.posX - 0.5D, this.posY, this.posZ - 0.5D, this.posX + 0.5D + d3, this.posY + 1.0D, this.posZ + 0.5D));
                     d0 = d5;
                     break;
                 case EAST:
-                    this.setEntityBoundingBox(
-                        new AxisAlignedBB(
-                            this.posX - 0.5 - d3,
-                            this.posY,
-                            this.posZ - 0.5,
-                            this.posX + 0.5,
-                            this.posY + 1.0,
-                            this.posZ + 0.5
-                        )
-                    );
+                    this.setEntityBoundingBox(new AxisAlignedBB(this.posX - 0.5D - d3, this.posY, this.posZ - 0.5D, this.posX + 0.5D, this.posY + 1.0D, this.posZ + 0.5D));
                     d0 = -d5;
             }
 
-            if (d5 > 0.0)
+            if (d5 > 0.0D)
             {
                 List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox());
 
@@ -440,7 +371,6 @@
         }
     }
 
-    @Override
     public void move(MoverType type, double x, double y, double z)
     {
         if (type == MoverType.SHULKER_BOX)
@@ -453,20 +383,19 @@
         }
     }
 
-    @Override
     public void setPosition(double x, double y, double z)
     {
         super.setPosition(x, y, z);
 
         if (this.dataManager != null && this.ticksExisted != 0)
         {
-            Optional<BlockPos> optional = this.dataManager.get(ATTACHED_BLOCK_POS);
-            Optional<BlockPos> optional1 = Optional.of(new BlockPos(x, y, z));
+            Optional<BlockPos> optional = (Optional)this.dataManager.get(ATTACHED_BLOCK_POS);
+            Optional<BlockPos> optional1 = Optional.<BlockPos>of(new BlockPos(x, y, z));
 
             if (!optional1.equals(optional))
             {
                 this.dataManager.set(ATTACHED_BLOCK_POS, optional1);
-                this.dataManager.set(PEEK_TICK, (byte)0);
+                this.dataManager.set(PEEK_TICK, Byte.valueOf((byte)0));
                 this.isAirBorne = true;
             }
         }
@@ -478,16 +407,11 @@
         {
             BlockPos blockpos = new BlockPos(this);
 
-            for (int i = 0; i < 5; i++)
+            for (int i = 0; i < 5; ++i)
             {
-                BlockPos blockpos1 = blockpos.add(
-                                         8 - this.rand.nextInt(17), 8 - this.rand.nextInt(17), 8 - this.rand.nextInt(17)
-                                     );
+                BlockPos blockpos1 = blockpos.add(8 - this.rand.nextInt(17), 8 - this.rand.nextInt(17), 8 - this.rand.nextInt(17));
 
-                if (blockpos1.getY() > 0
-                        && this.world.isAirBlock(blockpos1)
-                        && this.world.isInsideWorldBorder(this)
-                        && this.world.getCollisionBoxes(this, new AxisAlignedBB(blockpos1)).isEmpty())
+                if (blockpos1.getY() > 0 && this.world.isAirBlock(blockpos1) && this.world.isInsideWorldBorder(this) && this.world.getCollisionBoxes(this, new AxisAlignedBB(blockpos1)).isEmpty())
                 {
                     boolean flag = false;
 
@@ -503,10 +427,17 @@
 
                     if (flag)
                     {
+                        net.minecraftforge.event.entity.living.EnderTeleportEvent event = new net.minecraftforge.event.entity.living.EnderTeleportEvent(this, blockpos1.getX(), blockpos1.getY(), blockpos1.getZ(), 0);
+                        if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) flag = false;
+                        blockpos1 = new BlockPos(event.getTargetX(), event.getTargetY(), event.getTargetZ());
+                    }
+
+                    if (flag)
+                    {
                         this.playSound(SoundEvents.ENTITY_SHULKER_TELEPORT, 1.0F, 1.0F);
                         this.dataManager.set(ATTACHED_BLOCK_POS, Optional.of(blockpos1));
-                        this.dataManager.set(PEEK_TICK, (byte)0);
-                        this.setAttackTarget(null);
+                        this.dataManager.set(PEEK_TICK, Byte.valueOf((byte)0));
+                        this.setAttackTarget((EntityLivingBase)null);
                         return true;
                     }
                 }
@@ -520,19 +451,17 @@
         }
     }
 
-    @Override
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
-        this.motionX = 0.0;
-        this.motionY = 0.0;
-        this.motionZ = 0.0;
+        this.motionX = 0.0D;
+        this.motionY = 0.0D;
+        this.motionZ = 0.0D;
         this.prevRenderYawOffset = 180.0F;
         this.renderYawOffset = 180.0F;
         this.rotationYaw = 180.0F;
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         if (ATTACHED_BLOCK_POS.equals(key) && this.world.isRemote && !this.isRiding())
@@ -550,9 +479,9 @@
                     this.clientSideTeleportInterpolation = 6;
                 }
 
-                this.posX = (double)blockpos.getX() + 0.5;
+                this.posX = (double)blockpos.getX() + 0.5D;
                 this.posY = (double)blockpos.getY();
-                this.posZ = (double)blockpos.getZ() + 0.5;
+                this.posZ = (double)blockpos.getZ() + 0.5D;
                 this.prevPosX = this.posX;
                 this.prevPosY = this.posY;
                 this.prevPosZ = this.posZ;
@@ -566,15 +495,11 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
-    public void setPositionAndRotationDirect(
-        double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport
-    )
+    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport)
     {
         this.newPosRotationIncrements = 0;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isClosed())
@@ -589,7 +514,7 @@
 
         if (super.attackEntityFrom(source, amount))
         {
-            if ((double)this.getHealth() < (double)this.getMaxHealth() * 0.5 && this.rand.nextInt(4) == 0)
+            if ((double)this.getHealth() < (double)this.getMaxHealth() * 0.5D && this.rand.nextInt(4) == 0)
             {
                 this.tryTeleportToNewPosition();
             }
@@ -608,7 +533,6 @@
     }
 
     @Nullable
-    @Override
     public AxisAlignedBB getCollisionBoundingBox()
     {
         return this.isEntityAlive() ? this.getEntityBoundingBox() : null;
@@ -616,13 +540,13 @@
 
     public EnumFacing getAttachmentFacing()
     {
-        return this.dataManager.get(ATTACHED_FACE);
+        return (EnumFacing)this.dataManager.get(ATTACHED_FACE);
     }
 
     @Nullable
     public BlockPos getAttachmentPos()
     {
-        return this.dataManager.get(ATTACHED_BLOCK_POS).orNull();
+        return (BlockPos)((Optional)this.dataManager.get(ATTACHED_BLOCK_POS)).orNull();
     }
 
     public void setAttachmentPos(@Nullable BlockPos pos)
@@ -632,7 +556,7 @@
 
     public int getPeekTick()
     {
-        return this.dataManager.get(PEEK_TICK);
+        return ((Byte)this.dataManager.get(PEEK_TICK)).byteValue();
     }
 
     public void updateArmorModifier(int p_184691_1_)
@@ -652,7 +576,7 @@
             }
         }
 
-        this.dataManager.set(PEEK_TICK, (byte)p_184691_1_);
+        this.dataManager.set(PEEK_TICK, Byte.valueOf((byte)p_184691_1_));
     }
 
     @SideOnly(Side.CLIENT)
@@ -673,30 +597,25 @@
         return this.currentAttachmentPosition;
     }
 
-    @Override
     public float getEyeHeight()
     {
         return 0.5F;
     }
 
-    @Override
     public int getVerticalFaceSpeed()
     {
         return 180;
     }
 
-    @Override
     public int getHorizontalFaceSpeed()
     {
         return 180;
     }
 
-    @Override
     public void applyEntityCollision(Entity entityIn)
     {
     }
 
-    @Override
     public float getCollisionBorderSize()
     {
         return 0.0F;
@@ -709,7 +628,6 @@
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_SHULKER;
@@ -718,7 +636,7 @@
     @SideOnly(Side.CLIENT)
     public EnumDyeColor getColor()
     {
-        return EnumDyeColor.byMetadata(this.dataManager.get(COLOR));
+        return EnumDyeColor.byMetadata(((Byte)this.dataManager.get(COLOR)).byteValue());
     }
 
     class AIAttack extends EntityAIBase
@@ -730,57 +648,53 @@
             this.setMutexBits(3);
         }
 
-        @Override
         public boolean shouldExecute()
         {
             EntityLivingBase entitylivingbase = EntityShulker.this.getAttackTarget();
-            return entitylivingbase != null && entitylivingbase.isEntityAlive()
-                   ? EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL
-                   : false;
+
+            if (entitylivingbase != null && entitylivingbase.isEntityAlive())
+            {
+                return EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL;
+            }
+            else
+            {
+                return false;
+            }
         }
 
-        @Override
         public void startExecuting()
         {
             this.attackTime = 20;
             EntityShulker.this.updateArmorModifier(100);
         }
 
-        @Override
         public void resetTask()
         {
             EntityShulker.this.updateArmorModifier(0);
         }
 
-        @Override
         public void updateTask()
         {
             if (EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL)
             {
-                this.attackTime--;
+                --this.attackTime;
                 EntityLivingBase entitylivingbase = EntityShulker.this.getAttackTarget();
                 EntityShulker.this.getLookHelper().setLookPositionWithEntity(entitylivingbase, 180.0F, 180.0F);
                 double d0 = EntityShulker.this.getDistanceSq(entitylivingbase);
 
-                if (d0 < 400.0)
+                if (d0 < 400.0D)
                 {
                     if (this.attackTime <= 0)
                     {
                         this.attackTime = 20 + EntityShulker.this.rand.nextInt(10) * 20 / 2;
-                        EntityShulkerBullet entityshulkerbullet = new EntityShulkerBullet(
-                            EntityShulker.this.world, EntityShulker.this, entitylivingbase, EntityShulker.this.getAttachmentFacing().getAxis()
-                        );
+                        EntityShulkerBullet entityshulkerbullet = new EntityShulkerBullet(EntityShulker.this.world, EntityShulker.this, entitylivingbase, EntityShulker.this.getAttachmentFacing().getAxis());
                         EntityShulker.this.world.spawnEntity(entityshulkerbullet);
-                        EntityShulker.this.playSound(
-                            SoundEvents.ENTITY_SHULKER_SHOOT,
-                            2.0F,
-                            (EntityShulker.this.rand.nextFloat() - EntityShulker.this.rand.nextFloat()) * 0.2F + 1.0F
-                        );
+                        EntityShulker.this.playSound(SoundEvents.ENTITY_SHULKER_SHOOT, 2.0F, (EntityShulker.this.rand.nextFloat() - EntityShulker.this.rand.nextFloat()) * 0.2F + 1.0F);
                     }
                 }
                 else
                 {
-                    EntityShulker.this.setAttackTarget(null);
+                    EntityShulker.this.setAttackTarget((EntityLivingBase)null);
                 }
 
                 super.updateTask();
@@ -795,26 +709,22 @@
             super(shulker, EntityPlayer.class, true);
         }
 
-        @Override
         public boolean shouldExecute()
         {
             return EntityShulker.this.world.getDifficulty() == EnumDifficulty.PEACEFUL ? false : super.shouldExecute();
         }
 
-        @Override
         protected AxisAlignedBB getTargetableArea(double targetDistance)
         {
             EnumFacing enumfacing = ((EntityShulker)this.taskOwner).getAttachmentFacing();
 
             if (enumfacing.getAxis() == EnumFacing.Axis.X)
             {
-                return this.taskOwner.getEntityBoundingBox().grow(4.0, targetDistance, targetDistance);
+                return this.taskOwner.getEntityBoundingBox().grow(4.0D, targetDistance, targetDistance);
             }
             else
             {
-                return enumfacing.getAxis() == EnumFacing.Axis.Z
-                       ? this.taskOwner.getEntityBoundingBox().grow(targetDistance, targetDistance, 4.0)
-                       : this.taskOwner.getEntityBoundingBox().grow(targetDistance, 4.0, targetDistance);
+                return enumfacing.getAxis() == EnumFacing.Axis.Z ? this.taskOwner.getEntityBoundingBox().grow(targetDistance, targetDistance, 4.0D) : this.taskOwner.getEntityBoundingBox().grow(targetDistance, 4.0D, targetDistance);
             }
         }
     }
@@ -832,26 +742,22 @@
                 });
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 return this.taskOwner.getTeam() == null ? false : super.shouldExecute();
             }
 
-            @Override
             protected AxisAlignedBB getTargetableArea(double targetDistance)
             {
                 EnumFacing enumfacing = ((EntityShulker)this.taskOwner).getAttachmentFacing();
 
                 if (enumfacing.getAxis() == EnumFacing.Axis.X)
                 {
-                    return this.taskOwner.getEntityBoundingBox().grow(4.0, targetDistance, targetDistance);
+                    return this.taskOwner.getEntityBoundingBox().grow(4.0D, targetDistance, targetDistance);
                 }
                 else
                 {
-                    return enumfacing.getAxis() == EnumFacing.Axis.Z
-                           ? this.taskOwner.getEntityBoundingBox().grow(targetDistance, targetDistance, 4.0)
-                           : this.taskOwner.getEntityBoundingBox().grow(targetDistance, 4.0, targetDistance);
+                    return enumfacing.getAxis() == EnumFacing.Axis.Z ? this.taskOwner.getEntityBoundingBox().grow(targetDistance, targetDistance, 4.0D) : this.taskOwner.getEntityBoundingBox().grow(targetDistance, 4.0D, targetDistance);
                 }
             }
         }
@@ -864,26 +770,22 @@
         {
         }
 
-        @Override
         public boolean shouldExecute()
         {
             return EntityShulker.this.getAttackTarget() == null && EntityShulker.this.rand.nextInt(40) == 0;
         }
 
-        @Override
         public boolean shouldContinueExecuting()
         {
             return EntityShulker.this.getAttackTarget() == null && this.peekTime > 0;
         }
 
-        @Override
         public void startExecuting()
         {
             this.peekTime = 20 * (1 + EntityShulker.this.rand.nextInt(3));
             EntityShulker.this.updateArmorModifier(30);
         }
 
-        @Override
         public void resetTask()
         {
             if (EntityShulker.this.getAttackTarget() == null)
@@ -892,10 +794,9 @@
             }
         }
 
-        @Override
         public void updateTask()
         {
-            this.peekTime--;
+            --this.peekTime;
         }
     }
 
@@ -906,7 +807,6 @@
             super(theEntity);
         }
 
-        @Override
         public void updateRenderAngles()
         {
         }
