--- before/net/minecraft/entity/monster/EntityEnderman.java
+++ after/net/minecraft/entity/monster/EntityEnderman.java
@@ -1,5 +1,6 @@
 package net.minecraft.entity.monster;
 
+import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Sets;
@@ -50,12 +51,10 @@
 public class EntityEnderman extends EntityMob
 {
     private static final UUID ATTACKING_SPEED_BOOST_ID = UUID.fromString("020E0DFB-87AE-4653-9556-831010E291A0");
-    private static final AttributeModifier ATTACKING_SPEED_BOOST = new AttributeModifier(ATTACKING_SPEED_BOOST_ID, "Attacking speed boost", 0.15F, 0).setSaved(false);
-    private static final Set<Block> CARRIABLE_BLOCKS = Sets.newIdentityHashSet();
-    private static final DataParameter<Optional<IBlockState>> CARRIED_BLOCK = EntityDataManager.createKey(
-                    EntityEnderman.class, DataSerializers.OPTIONAL_BLOCK_STATE
-                );
-    private static final DataParameter<Boolean> SCREAMING = EntityDataManager.createKey(EntityEnderman.class, DataSerializers.BOOLEAN);
+    private static final AttributeModifier ATTACKING_SPEED_BOOST = (new AttributeModifier(ATTACKING_SPEED_BOOST_ID, "Attacking speed boost", 0.15000000596046448D, 0)).setSaved(false);
+    private static final Set<Block> CARRIABLE_BLOCKS = Sets.<Block>newIdentityHashSet();
+    private static final DataParameter<Optional<IBlockState>> CARRIED_BLOCK = EntityDataManager.<Optional<IBlockState>>createKey(EntityEnderman.class, DataSerializers.OPTIONAL_BLOCK_STATE);
+    private static final DataParameter<Boolean> SCREAMING = EntityDataManager.<Boolean>createKey(EntityEnderman.class, DataSerializers.BOOLEAN);
     private int lastCreepySound;
     private int targetChangeTime;
 
@@ -67,20 +66,18 @@
         this.setPathPriority(PathNodeType.WATER, -1.0F);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(0, new EntityAISwimming(this));
-        this.tasks.addTask(2, new EntityAIAttackMelee(this, 1.0, false));
-        this.tasks.addTask(7, new EntityAIWanderAvoidWater(this, 1.0, 0.0F));
+        this.tasks.addTask(2, new EntityAIAttackMelee(this, 1.0D, false));
+        this.tasks.addTask(7, new EntityAIWanderAvoidWater(this, 1.0D, 0.0F));
         this.tasks.addTask(8, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
         this.tasks.addTask(8, new EntityAILookIdle(this));
         this.tasks.addTask(10, new EntityEnderman.AIPlaceBlock(this));
         this.tasks.addTask(11, new EntityEnderman.AITakeBlock(this));
         this.targetTasks.addTask(1, new EntityEnderman.AIFindPlayer(this));
-        this.targetTasks.addTask(2, new EntityAIHurtByTarget(this, false));
-        this.targetTasks
-        .addTask(3, new EntityAINearestAttackableTarget<>(this, EntityEndermite.class, 10, true, false, new Predicate<EntityEndermite>()
+        this.targetTasks.addTask(2, new EntityAIHurtByTarget(this, false, new Class[0]));
+        this.targetTasks.addTask(3, new EntityAINearestAttackableTarget(this, EntityEndermite.class, 10, true, false, new Predicate<EntityEndermite>()
         {
             public boolean apply(@Nullable EntityEndermite p_apply_1_)
             {
@@ -89,17 +86,15 @@
         }));
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3F);
-        this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(7.0);
-        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(64.0);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(40.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
+        this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(7.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(64.0D);
     }
 
-    @Override
     public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn)
     {
         super.setAttackTarget(entitylivingbaseIn);
@@ -108,13 +103,13 @@
         if (entitylivingbaseIn == null)
         {
             this.targetChangeTime = 0;
-            this.dataManager.set(SCREAMING, false);
+            this.dataManager.set(SCREAMING, Boolean.valueOf(false));
             iattributeinstance.removeModifier(ATTACKING_SPEED_BOOST);
         }
         else
         {
             this.targetChangeTime = this.ticksExisted;
-            this.dataManager.set(SCREAMING, true);
+            this.dataManager.set(SCREAMING, Boolean.valueOf(true));
 
             if (!iattributeinstance.hasModifier(ATTACKING_SPEED_BOOST))
             {
@@ -123,12 +118,11 @@
         }
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
         this.dataManager.register(CARRIED_BLOCK, Optional.absent());
-        this.dataManager.register(SCREAMING, false);
+        this.dataManager.register(SCREAMING, Boolean.valueOf(false));
     }
 
     public void playEndermanSound()
@@ -139,22 +133,11 @@
 
             if (!this.isSilent())
             {
-                this.world
-                .playSound(
-                    this.posX,
-                    this.posY + (double)this.getEyeHeight(),
-                    this.posZ,
-                    SoundEvents.ENTITY_ENDERMEN_STARE,
-                    this.getSoundCategory(),
-                    2.5F,
-                    1.0F,
-                    false
-                );
+                this.world.playSound(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, SoundEvents.ENTITY_ENDERMEN_STARE, this.getSoundCategory(), 2.5F, 1.0F, false);
             }
         }
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         if (SCREAMING.equals(key) && this.isScreaming() && this.world.isRemote)
@@ -170,7 +153,6 @@
         EntityLiving.registerFixesMob(fixer, EntityEnderman.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -183,7 +165,6 @@
         }
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -217,41 +198,26 @@
         else
         {
             Vec3d vec3d = player.getLook(1.0F).normalize();
-            Vec3d vec3d1 = new Vec3d(
-                this.posX - player.posX,
-                this.getEntityBoundingBox().minY + (double)this.getEyeHeight() - (player.posY + (double)player.getEyeHeight()),
-                this.posZ - player.posZ
-            );
+            Vec3d vec3d1 = new Vec3d(this.posX - player.posX, this.getEntityBoundingBox().minY + (double)this.getEyeHeight() - (player.posY + (double)player.getEyeHeight()), this.posZ - player.posZ);
             double d0 = vec3d1.length();
             vec3d1 = vec3d1.normalize();
             double d1 = vec3d.dotProduct(vec3d1);
-            return d1 > 1.0 - 0.025 / d0 ? player.canEntityBeSeen(this) : false;
+            return d1 > 1.0D - 0.025D / d0 ? player.canEntityBeSeen(this) : false;
         }
     }
 
-    @Override
     public float getEyeHeight()
     {
         return 2.55F;
     }
 
-    @Override
     public void onLivingUpdate()
     {
         if (this.world.isRemote)
         {
-            for (int i = 0; i < 2; i++)
+            for (int i = 0; i < 2; ++i)
             {
-                this.world
-                .spawnParticle(
-                    EnumParticleTypes.PORTAL,
-                    this.posX + (this.rand.nextDouble() - 0.5) * (double)this.width,
-                    this.posY + this.rand.nextDouble() * (double)this.height - 0.25,
-                    this.posZ + (this.rand.nextDouble() - 0.5) * (double)this.width,
-                    (this.rand.nextDouble() - 0.5) * 2.0,
-                    -this.rand.nextDouble(),
-                    (this.rand.nextDouble() - 0.5) * 2.0
-                );
+                this.world.spawnParticle(EnumParticleTypes.PORTAL, this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height - 0.25D, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, (this.rand.nextDouble() - 0.5D) * 2.0D, -this.rand.nextDouble(), (this.rand.nextDouble() - 0.5D) * 2.0D);
             }
         }
 
@@ -259,7 +225,6 @@
         super.onLivingUpdate();
     }
 
-    @Override
     protected void updateAITasks()
     {
         if (this.isWet())
@@ -273,7 +238,7 @@
 
             if (f > 0.5F && this.world.canSeeSky(new BlockPos(this)) && this.rand.nextFloat() * 30.0F < (f - 0.4F) * 2.0F)
             {
-                this.setAttackTarget(null);
+                this.setAttackTarget((EntityLivingBase)null);
                 this.teleportRandomly();
             }
         }
@@ -283,60 +248,53 @@
 
     protected boolean teleportRandomly()
     {
-        double d0 = this.posX + (this.rand.nextDouble() - 0.5) * 64.0;
+        double d0 = this.posX + (this.rand.nextDouble() - 0.5D) * 64.0D;
         double d1 = this.posY + (double)(this.rand.nextInt(64) - 32);
-        double d2 = this.posZ + (this.rand.nextDouble() - 0.5) * 64.0;
+        double d2 = this.posZ + (this.rand.nextDouble() - 0.5D) * 64.0D;
         return this.teleportTo(d0, d1, d2);
     }
 
     protected boolean teleportToEntity(Entity p_70816_1_)
     {
-        Vec3d vec3d = new Vec3d(
-            this.posX - p_70816_1_.posX,
-            this.getEntityBoundingBox().minY + (double)(this.height / 2.0F) - p_70816_1_.posY + (double)p_70816_1_.getEyeHeight(),
-            this.posZ - p_70816_1_.posZ
-        );
+        Vec3d vec3d = new Vec3d(this.posX - p_70816_1_.posX, this.getEntityBoundingBox().minY + (double)(this.height / 2.0F) - p_70816_1_.posY + (double)p_70816_1_.getEyeHeight(), this.posZ - p_70816_1_.posZ);
         vec3d = vec3d.normalize();
-        double d0 = 16.0;
-        double d1 = this.posX + (this.rand.nextDouble() - 0.5) * 8.0 - vec3d.x * 16.0;
-        double d2 = this.posY + (double)(this.rand.nextInt(16) - 8) - vec3d.y * 16.0;
-        double d3 = this.posZ + (this.rand.nextDouble() - 0.5) * 8.0 - vec3d.z * 16.0;
+        double d0 = 16.0D;
+        double d1 = this.posX + (this.rand.nextDouble() - 0.5D) * 8.0D - vec3d.x * 16.0D;
+        double d2 = this.posY + (double)(this.rand.nextInt(16) - 8) - vec3d.y * 16.0D;
+        double d3 = this.posZ + (this.rand.nextDouble() - 0.5D) * 8.0D - vec3d.z * 16.0D;
         return this.teleportTo(d1, d2, d3);
     }
 
     private boolean teleportTo(double x, double y, double z)
     {
-        boolean flag = this.attemptTeleport(x, y, z);
+        net.minecraftforge.event.entity.living.EnderTeleportEvent event = new net.minecraftforge.event.entity.living.EnderTeleportEvent(this, x, y, z, 0);
+        if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return false;
+        boolean flag = this.attemptTeleport(event.getTargetX(), event.getTargetY(), event.getTargetZ());
 
         if (flag)
         {
-            this.world
-            .playSound(null, this.prevPosX, this.prevPosY, this.prevPosZ, SoundEvents.ENTITY_ENDERMEN_TELEPORT, this.getSoundCategory(), 1.0F, 1.0F);
+            this.world.playSound((EntityPlayer)null, this.prevPosX, this.prevPosY, this.prevPosZ, SoundEvents.ENTITY_ENDERMEN_TELEPORT, this.getSoundCategory(), 1.0F, 1.0F);
             this.playSound(SoundEvents.ENTITY_ENDERMEN_TELEPORT, 1.0F, 1.0F);
         }
 
         return flag;
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         return this.isScreaming() ? SoundEvents.ENTITY_ENDERMEN_SCREAM : SoundEvents.ENTITY_ENDERMEN_AMBIENT;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_ENDERMEN_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_ENDERMEN_DEATH;
     }
 
-    @Override
     protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier)
     {
         super.dropEquipment(wasRecentlyHit, lootingModifier);
@@ -351,7 +309,6 @@
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_ENDERMAN;
@@ -365,10 +322,9 @@
     @Nullable
     public IBlockState getHeldBlockState()
     {
-        return this.dataManager.get(CARRIED_BLOCK).orNull();
+        return (IBlockState)((Optional)this.dataManager.get(CARRIED_BLOCK)).orNull();
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -377,7 +333,7 @@
         }
         else if (source instanceof EntityDamageSourceIndirect)
         {
-            for (int i = 0; i < 64; i++)
+            for (int i = 0; i < 64; ++i)
             {
                 if (this.teleportRandomly())
                 {
@@ -400,9 +356,21 @@
         }
     }
 
+    /*===================================== Forge Start ==============================*/
+    public static void setCarriable(Block block, boolean canCarry)
+    {
+        if (canCarry) CARRIABLE_BLOCKS.add(block);
+        else          CARRIABLE_BLOCKS.remove(block);
+    }
+    public static boolean getCarriable(Block block)
+    {
+        return CARRIABLE_BLOCKS.contains(block);
+    }
+    /*===================================== Forge End ==============================*/
+
     public boolean isScreaming()
     {
-        return this.dataManager.get(SCREAMING);
+        return ((Boolean)this.dataManager.get(SCREAMING)).booleanValue();
     }
 
     static
@@ -437,45 +405,31 @@
                 this.enderman = p_i45842_1_;
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 double d0 = this.getTargetDistance();
-                this.player = this.enderman
-                                      .world
-                                      .getNearestAttackablePlayer(
-                                          this.enderman.posX,
-                                          this.enderman.posY,
-                                          this.enderman.posZ,
-                                          d0,
-                                          d0,
-                                          null,
-                                          new Predicate<EntityPlayer>()
+                this.player = this.enderman.world.getNearestAttackablePlayer(this.enderman.posX, this.enderman.posY, this.enderman.posZ, d0, d0, (Function)null, new Predicate<EntityPlayer>()
                 {
                     public boolean apply(@Nullable EntityPlayer p_apply_1_)
                     {
                         return p_apply_1_ != null && AIFindPlayer.this.enderman.shouldAttackPlayer(p_apply_1_);
                     }
-                }
-                                      );
+                });
                 return this.player != null;
             }
 
-            @Override
             public void startExecuting()
             {
                 this.aggroTime = 5;
                 this.teleportTime = 0;
             }
 
-            @Override
             public void resetTask()
             {
                 this.player = null;
                 super.resetTask();
             }
 
-            @Override
             public boolean shouldContinueExecuting()
             {
                 if (this.player != null)
@@ -492,11 +446,10 @@
                 }
                 else
                 {
-                    return this.targetEntity != null && this.targetEntity.isEntityAlive() ? true : super.shouldContinueExecuting();
+                    return this.targetEntity != null && ((EntityPlayer)this.targetEntity).isEntityAlive() ? true : super.shouldContinueExecuting();
                 }
             }
 
-            @Override
             public void updateTask()
             {
                 if (this.player != null)
@@ -512,18 +465,16 @@
                 {
                     if (this.targetEntity != null)
                     {
-                        if (this.enderman.shouldAttackPlayer(this.targetEntity))
+                        if (this.enderman.shouldAttackPlayer((EntityPlayer)this.targetEntity))
                         {
-                            if (this.targetEntity.getDistanceSq(this.enderman) < 16.0)
+                            if (((EntityPlayer)this.targetEntity).getDistanceSq(this.enderman) < 16.0D)
                             {
                                 this.enderman.teleportRandomly();
                             }
 
                             this.teleportTime = 0;
                         }
-                        else if (this.targetEntity.getDistanceSq(this.enderman) > 256.0
-                                 && this.teleportTime++ >= 30
-                                 && this.enderman.teleportToEntity(this.targetEntity))
+                        else if (((EntityPlayer)this.targetEntity).getDistanceSq(this.enderman) > 256.0D && this.teleportTime++ >= 30 && this.enderman.teleportToEntity(this.targetEntity))
                         {
                             this.teleportTime = 0;
                         }
@@ -543,38 +494,38 @@
                 this.enderman = p_i45843_1_;
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 if (this.enderman.getHeldBlockState() == null)
                 {
                     return false;
                 }
+                else if (!net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.enderman.world, this.enderman))
+                {
+                    return false;
+                }
                 else
                 {
-                    return !this.enderman.world.getGameRules().getBoolean("mobGriefing")
-                           ? false
-                           : this.enderman.getRNG().nextInt(2000) == 0;
+                    return this.enderman.getRNG().nextInt(2000) == 0;
                 }
             }
 
-            @Override
             public void updateTask()
             {
                 Random random = this.enderman.getRNG();
                 World world = this.enderman.world;
-                int i = MathHelper.floor(this.enderman.posX - 1.0 + random.nextDouble() * 2.0);
-                int j = MathHelper.floor(this.enderman.posY + random.nextDouble() * 2.0);
-                int k = MathHelper.floor(this.enderman.posZ - 1.0 + random.nextDouble() * 2.0);
+                int i = MathHelper.floor(this.enderman.posX - 1.0D + random.nextDouble() * 2.0D);
+                int j = MathHelper.floor(this.enderman.posY + random.nextDouble() * 2.0D);
+                int k = MathHelper.floor(this.enderman.posZ - 1.0D + random.nextDouble() * 2.0D);
                 BlockPos blockpos = new BlockPos(i, j, k);
                 IBlockState iblockstate = world.getBlockState(blockpos);
                 IBlockState iblockstate1 = world.getBlockState(blockpos.down());
                 IBlockState iblockstate2 = this.enderman.getHeldBlockState();
 
-                if (iblockstate2 != null && this.canPlaceBlock(world, blockpos, iblockstate2.getBlock(), iblockstate, iblockstate1))
+                if (iblockstate2 != null && this.canPlaceBlock(world, blockpos, iblockstate2.getBlock(), iblockstate, iblockstate1) && net.minecraftforge.event.ForgeEventFactory.onBlockPlace(enderman, new net.minecraftforge.common.util.BlockSnapshot(world, blockpos, iblockstate2), net.minecraft.util.EnumFacing.UP).isCanceled())
                 {
                     world.setBlockState(blockpos, iblockstate2, 3);
-                    this.enderman.setHeldBlockState(null);
+                    this.enderman.setHeldBlockState((IBlockState)null);
                 }
             }
 
@@ -588,9 +539,13 @@
                 {
                     return false;
                 }
+                else if (p_188518_5_.getMaterial() == Material.AIR)
+                {
+                    return false;
+                }
                 else
                 {
-                    return p_188518_5_.getMaterial() == Material.AIR ? false : p_188518_5_.isFullCube();
+                    return p_188518_5_.isFullCube();
                 }
             }
         }
@@ -604,41 +559,33 @@
                 this.enderman = p_i45841_1_;
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 if (this.enderman.getHeldBlockState() != null)
                 {
                     return false;
                 }
+                else if (!net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.enderman.world, this.enderman))
+                {
+                    return false;
+                }
                 else
                 {
-                    return !this.enderman.world.getGameRules().getBoolean("mobGriefing") ? false : this.enderman.getRNG().nextInt(20) == 0;
+                    return this.enderman.getRNG().nextInt(20) == 0;
                 }
             }
 
-            @Override
             public void updateTask()
             {
                 Random random = this.enderman.getRNG();
                 World world = this.enderman.world;
-                int i = MathHelper.floor(this.enderman.posX - 2.0 + random.nextDouble() * 4.0);
-                int j = MathHelper.floor(this.enderman.posY + random.nextDouble() * 3.0);
-                int k = MathHelper.floor(this.enderman.posZ - 2.0 + random.nextDouble() * 4.0);
+                int i = MathHelper.floor(this.enderman.posX - 2.0D + random.nextDouble() * 4.0D);
+                int j = MathHelper.floor(this.enderman.posY + random.nextDouble() * 3.0D);
+                int k = MathHelper.floor(this.enderman.posZ - 2.0D + random.nextDouble() * 4.0D);
                 BlockPos blockpos = new BlockPos(i, j, k);
                 IBlockState iblockstate = world.getBlockState(blockpos);
                 Block block = iblockstate.getBlock();
-                RayTraceResult raytraceresult = world.rayTraceBlocks(
-                                                    new Vec3d(
-                                                        (double)((float)MathHelper.floor(this.enderman.posX) + 0.5F),
-                                                        (double)((float)j + 0.5F),
-                                                        (double)((float)MathHelper.floor(this.enderman.posZ) + 0.5F)
-                                                    ),
-                                                    new Vec3d((double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F)),
-                                                    false,
-                                                    true,
-                                                    false
-                                                );
+                RayTraceResult raytraceresult = world.rayTraceBlocks(new Vec3d((double)((float)MathHelper.floor(this.enderman.posX) + 0.5F), (double)((float)j + 0.5F), (double)((float)MathHelper.floor(this.enderman.posZ) + 0.5F)), new Vec3d((double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F)), false, true, false);
                 boolean flag = raytraceresult != null && raytraceresult.getBlockPos().equals(blockpos);
 
                 if (EntityEnderman.CARRIABLE_BLOCKS.contains(block) && flag)
