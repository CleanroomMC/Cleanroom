--- before/net/minecraft/entity/monster/EntitySpider.java
+++ after/net/minecraft/entity/monster/EntitySpider.java
@@ -38,7 +38,7 @@
 
 public class EntitySpider extends EntityMob
 {
-    private static final DataParameter<Byte> CLIMBING = EntityDataManager.createKey(EntitySpider.class, DataSerializers.BYTE);
+    private static final DataParameter<Byte> CLIMBING = EntityDataManager.<Byte>createKey(EntitySpider.class, DataSerializers.BYTE);
 
     public EntitySpider(World worldIn)
     {
@@ -51,40 +51,35 @@
         EntityLiving.registerFixesMob(fixer, EntitySpider.class);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(3, new EntityAILeapAtTarget(this, 0.4F));
         this.tasks.addTask(4, new EntitySpider.AISpiderAttack(this));
-        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 0.8));
+        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 0.8D));
         this.tasks.addTask(6, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
         this.tasks.addTask(6, new EntityAILookIdle(this));
-        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false));
-        this.targetTasks.addTask(2, new EntitySpider.AISpiderTarget<>(this, EntityPlayer.class));
-        this.targetTasks.addTask(3, new EntitySpider.AISpiderTarget<>(this, EntityIronGolem.class));
+        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false, new Class[0]));
+        this.targetTasks.addTask(2, new EntitySpider.AISpiderTarget(this, EntityPlayer.class));
+        this.targetTasks.addTask(3, new EntitySpider.AISpiderTarget(this, EntityIronGolem.class));
     }
 
-    @Override
     public double getMountedYOffset()
     {
         return (double)(this.height * 0.5F);
     }
 
-    @Override
     protected PathNavigate createNavigator(World worldIn)
     {
         return new PathNavigateClimber(this, worldIn);
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(CLIMBING, (byte)0);
+        this.dataManager.register(CLIMBING, Byte.valueOf((byte)0));
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
@@ -95,76 +90,72 @@
         }
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(16.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3F);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(16.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         return SoundEvents.ENTITY_SPIDER_AMBIENT;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_SPIDER_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_SPIDER_DEATH;
     }
 
-    @Override
     protected void playStepSound(BlockPos pos, Block blockIn)
     {
         this.playSound(SoundEvents.ENTITY_SPIDER_STEP, 0.15F, 1.0F);
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_SPIDER;
     }
 
-    @Override
     public boolean isOnLadder()
     {
         return this.isBesideClimbableBlock();
     }
 
-    @Override
     public void setInWeb()
     {
     }
 
-    @Override
     public EnumCreatureAttribute getCreatureAttribute()
     {
         return EnumCreatureAttribute.ARTHROPOD;
     }
 
-    @Override
     public boolean isPotionApplicable(PotionEffect potioneffectIn)
     {
-        return potioneffectIn.getPotion() == MobEffects.POISON ? false : super.isPotionApplicable(potioneffectIn);
+        if(potioneffectIn.getPotion() == MobEffects.POISON)
+        {
+        	net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent event = new net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent(this, potioneffectIn);
+        	net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        	return event.getResult() == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW;
+        }	
+        return super.isPotionApplicable(potioneffectIn);
     }
 
     public boolean isBesideClimbableBlock()
     {
-        return (this.dataManager.get(CLIMBING) & 1) != 0;
+        return (((Byte)this.dataManager.get(CLIMBING)).byteValue() & 1) != 0;
     }
 
     public void setBesideClimbableBlock(boolean climbing)
     {
-        byte b0 = this.dataManager.get(CLIMBING);
+        byte b0 = ((Byte)this.dataManager.get(CLIMBING)).byteValue();
 
         if (climbing)
         {
@@ -175,11 +166,10 @@
             b0 = (byte)(b0 & -2);
         }
 
-        this.dataManager.set(CLIMBING, b0);
+        this.dataManager.set(CLIMBING, Byte.valueOf(b0));
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
@@ -188,7 +178,7 @@
         {
             EntitySkeleton entityskeleton = new EntitySkeleton(this.world);
             entityskeleton.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
-            entityskeleton.onInitialSpawn(difficulty, null);
+            entityskeleton.onInitialSpawn(difficulty, (IEntityLivingData)null);
             this.world.spawnEntity(entityskeleton);
             entityskeleton.startRiding(this);
         }
@@ -216,7 +206,6 @@
         return livingdata;
     }
 
-    @Override
     public float getEyeHeight()
     {
         return 0.65F;
@@ -226,17 +215,16 @@
         {
             public AISpiderAttack(EntitySpider spider)
             {
-                super(spider, 1.0, true);
+                super(spider, 1.0D, true);
             }
 
-            @Override
             public boolean shouldContinueExecuting()
             {
                 float f = this.attacker.getBrightness();
 
                 if (f >= 0.5F && this.attacker.getRNG().nextInt(100) == 0)
                 {
-                    this.attacker.setAttackTarget(null);
+                    this.attacker.setAttackTarget((EntityLivingBase)null);
                     return false;
                 }
                 else
@@ -245,7 +233,6 @@
                 }
             }
 
-            @Override
             protected double getAttackReachSqr(EntityLivingBase attackTarget)
             {
                 return (double)(4.0F + attackTarget.width);
@@ -259,7 +246,6 @@
                 super(spider, classTarget, true);
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 float f = this.taskOwner.getBrightness();
