--- before/net/minecraft/entity/monster/EntityCreeper.java
+++ after/net/minecraft/entity/monster/EntityCreeper.java
@@ -39,9 +39,9 @@
 
 public class EntityCreeper extends EntityMob
 {
-    private static final DataParameter<Integer> STATE = EntityDataManager.createKey(EntityCreeper.class, DataSerializers.VARINT);
-    private static final DataParameter<Boolean> POWERED = EntityDataManager.createKey(EntityCreeper.class, DataSerializers.BOOLEAN);
-    private static final DataParameter<Boolean> IGNITED = EntityDataManager.createKey(EntityCreeper.class, DataSerializers.BOOLEAN);
+    private static final DataParameter<Integer> STATE = EntityDataManager.<Integer>createKey(EntityCreeper.class, DataSerializers.VARINT);
+    private static final DataParameter<Boolean> POWERED = EntityDataManager.<Boolean>createKey(EntityCreeper.class, DataSerializers.BOOLEAN);
+    private static final DataParameter<Boolean> IGNITED = EntityDataManager.<Boolean>createKey(EntityCreeper.class, DataSerializers.BOOLEAN);
     private int lastActiveTime;
     private int timeSinceIgnited;
     private int fuseTime = 30;
@@ -54,34 +54,30 @@
         this.setSize(0.6F, 1.7F);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(2, new EntityAICreeperSwell(this));
-        this.tasks.addTask(3, new EntityAIAvoidEntity<>(this, EntityOcelot.class, 6.0F, 1.0, 1.2));
-        this.tasks.addTask(4, new EntityAIAttackMelee(this, 1.0, false));
-        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 0.8));
+        this.tasks.addTask(3, new EntityAIAvoidEntity(this, EntityOcelot.class, 6.0F, 1.0D, 1.2D));
+        this.tasks.addTask(4, new EntityAIAttackMelee(this, 1.0D, false));
+        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 0.8D));
         this.tasks.addTask(6, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
         this.tasks.addTask(6, new EntityAILookIdle(this));
-        this.targetTasks.addTask(1, new EntityAINearestAttackableTarget<>(this, EntityPlayer.class, true));
-        this.targetTasks.addTask(2, new EntityAIHurtByTarget(this, false));
+        this.targetTasks.addTask(1, new EntityAINearestAttackableTarget(this, EntityPlayer.class, true));
+        this.targetTasks.addTask(2, new EntityAIHurtByTarget(this, false, new Class[0]));
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
     }
 
-    @Override
     public int getMaxFallHeight()
     {
         return this.getAttackTarget() == null ? 3 : 3 + (int)(this.getHealth() - 1.0F);
     }
 
-    @Override
     public void fall(float distance, float damageMultiplier)
     {
         super.fall(distance, damageMultiplier);
@@ -93,13 +89,12 @@
         }
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(STATE, -1);
-        this.dataManager.register(POWERED, false);
-        this.dataManager.register(IGNITED, false);
+        this.dataManager.register(STATE, Integer.valueOf(-1));
+        this.dataManager.register(POWERED, Boolean.valueOf(false));
+        this.dataManager.register(IGNITED, Boolean.valueOf(false));
     }
 
     public static void registerFixesCreeper(DataFixer fixer)
@@ -107,12 +102,11 @@
         EntityLiving.registerFixesMob(fixer, EntityCreeper.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
 
-        if (this.dataManager.get(POWERED))
+        if (((Boolean)this.dataManager.get(POWERED)).booleanValue())
         {
             compound.setBoolean("powered", true);
         }
@@ -122,11 +116,10 @@
         compound.setBoolean("ignited", this.hasIgnited());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
-        this.dataManager.set(POWERED, compound.getBoolean("powered"));
+        this.dataManager.set(POWERED, Boolean.valueOf(compound.getBoolean("powered")));
 
         if (compound.hasKey("Fuse", 99))
         {
@@ -144,7 +137,6 @@
         }
     }
 
-    @Override
     public void onUpdate()
     {
         if (this.isEntityAlive())
@@ -180,19 +172,16 @@
         super.onUpdate();
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_CREEPER_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_CREEPER_DEATH;
     }
 
-    @Override
     public void onDeath(DamageSource cause)
     {
         super.onDeath(cause);
@@ -206,10 +195,7 @@
                 int k = i + this.rand.nextInt(j - i + 1);
                 this.dropItem(Item.getItemById(k), 1);
             }
-            else if (cause.getTrueSource() instanceof EntityCreeper
-                     && cause.getTrueSource() != this
-                     && ((EntityCreeper)cause.getTrueSource()).getPowered()
-                     && ((EntityCreeper)cause.getTrueSource()).ableToCauseSkullDrop())
+            else if (cause.getTrueSource() instanceof EntityCreeper && cause.getTrueSource() != this && ((EntityCreeper)cause.getTrueSource()).getPowered() && ((EntityCreeper)cause.getTrueSource()).ableToCauseSkullDrop())
             {
                 ((EntityCreeper)cause.getTrueSource()).incrementDroppedSkulls();
                 this.entityDropItem(new ItemStack(Items.SKULL, 1, 4), 0.0F);
@@ -217,7 +203,6 @@
         }
     }
 
-    @Override
     public boolean attackEntityAsMob(Entity entityIn)
     {
         return true;
@@ -225,7 +210,7 @@
 
     public boolean getPowered()
     {
-        return this.dataManager.get(POWERED);
+        return ((Boolean)this.dataManager.get(POWERED)).booleanValue();
     }
 
     @SideOnly(Side.CLIENT)
@@ -235,7 +220,6 @@
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_CREEPER;
@@ -243,39 +227,27 @@
 
     public int getCreeperState()
     {
-        return this.dataManager.get(STATE);
+        return ((Integer)this.dataManager.get(STATE)).intValue();
     }
 
     public void setCreeperState(int state)
     {
-        this.dataManager.set(STATE, state);
+        this.dataManager.set(STATE, Integer.valueOf(state));
     }
 
-    @Override
     public void onStruckByLightning(EntityLightningBolt lightningBolt)
     {
         super.onStruckByLightning(lightningBolt);
-        this.dataManager.set(POWERED, true);
+        this.dataManager.set(POWERED, Boolean.valueOf(true));
     }
 
-    @Override
     protected boolean processInteract(EntityPlayer player, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
 
         if (itemstack.getItem() == Items.FLINT_AND_STEEL)
         {
-            this.world
-            .playSound(
-                player,
-                this.posX,
-                this.posY,
-                this.posZ,
-                SoundEvents.ITEM_FLINTANDSTEEL_USE,
-                this.getSoundCategory(),
-                1.0F,
-                this.rand.nextFloat() * 0.4F + 0.8F
-            );
+            this.world.playSound(player, this.posX, this.posY, this.posZ, SoundEvents.ITEM_FLINTANDSTEEL_USE, this.getSoundCategory(), 1.0F, this.rand.nextFloat() * 0.4F + 0.8F);
             player.swingArm(hand);
 
             if (!this.world.isRemote)
@@ -293,7 +265,7 @@
     {
         if (!this.world.isRemote)
         {
-            boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
+            boolean flag = net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this);
             float f = this.getPowered() ? 2.0F : 1.0F;
             this.dead = true;
             this.world.createExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius * f, flag);
@@ -326,12 +298,12 @@
 
     public boolean hasIgnited()
     {
-        return this.dataManager.get(IGNITED);
+        return ((Boolean)this.dataManager.get(IGNITED)).booleanValue();
     }
 
     public void ignite()
     {
-        this.dataManager.set(IGNITED, true);
+        this.dataManager.set(IGNITED, Boolean.valueOf(true));
     }
 
     public boolean ableToCauseSkullDrop()
@@ -341,6 +313,6 @@
 
     public void incrementDroppedSkulls()
     {
-        this.droppedSkulls++;
+        ++this.droppedSkulls;
     }
 }
