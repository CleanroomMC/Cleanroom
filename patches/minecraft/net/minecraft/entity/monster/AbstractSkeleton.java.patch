--- before/net/minecraft/entity/monster/AbstractSkeleton.java
+++ after/net/minecraft/entity/monster/AbstractSkeleton.java
@@ -45,17 +45,15 @@
 
 public abstract class AbstractSkeleton extends EntityMob implements IRangedAttackMob
 {
-    private static final DataParameter<Boolean> SWINGING_ARMS = EntityDataManager.createKey(AbstractSkeleton.class, DataSerializers.BOOLEAN);
-    private final EntityAIAttackRangedBow<AbstractSkeleton> aiArrowAttack = new EntityAIAttackRangedBow<>(this, 1.0, 20, 15.0F);
-    private final EntityAIAttackMelee aiAttackOnCollide = new EntityAIAttackMelee(this, 1.2, false)
+    private static final DataParameter<Boolean> SWINGING_ARMS = EntityDataManager.<Boolean>createKey(AbstractSkeleton.class, DataSerializers.BOOLEAN);
+    private final EntityAIAttackRangedBow<AbstractSkeleton> aiArrowAttack = new EntityAIAttackRangedBow<AbstractSkeleton>(this, 1.0D, 20, 15.0F);
+    private final EntityAIAttackMelee aiAttackOnCollide = new EntityAIAttackMelee(this, 1.2D, false)
     {
-        @Override
         public void resetTask()
         {
             super.resetTask();
             AbstractSkeleton.this.setSwingingArms(false);
         }
-        @Override
         public void startExecuting()
         {
             super.startExecuting();
@@ -70,36 +68,32 @@
         this.setCombatTask();
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(2, new EntityAIRestrictSun(this));
-        this.tasks.addTask(3, new EntityAIFleeSun(this, 1.0));
-        this.tasks.addTask(3, new EntityAIAvoidEntity<>(this, EntityWolf.class, 6.0F, 1.0, 1.2));
-        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 1.0));
+        this.tasks.addTask(3, new EntityAIFleeSun(this, 1.0D));
+        this.tasks.addTask(3, new EntityAIAvoidEntity(this, EntityWolf.class, 6.0F, 1.0D, 1.2D));
+        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 1.0D));
         this.tasks.addTask(6, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
         this.tasks.addTask(6, new EntityAILookIdle(this));
-        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false));
-        this.targetTasks.addTask(2, new EntityAINearestAttackableTarget<>(this, EntityPlayer.class, true));
-        this.targetTasks.addTask(3, new EntityAINearestAttackableTarget<>(this, EntityIronGolem.class, true));
+        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false, new Class[0]));
+        this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, true));
+        this.targetTasks.addTask(3, new EntityAINearestAttackableTarget(this, EntityIronGolem.class, true));
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.25D);
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(SWINGING_ARMS, false);
+        this.dataManager.register(SWINGING_ARMS, Boolean.valueOf(false));
     }
 
-    @Override
     protected void playStepSound(BlockPos pos, Block blockIn)
     {
         this.playSound(this.getStepSound(), 0.15F, 1.0F);
@@ -107,21 +101,17 @@
 
     protected abstract SoundEvent getStepSound();
 
-    @Override
     public EnumCreatureAttribute getCreatureAttribute()
     {
         return EnumCreatureAttribute.UNDEAD;
     }
 
-    @Override
     public void onLivingUpdate()
     {
         if (this.world.isDaytime() && !this.world.isRemote)
         {
             float f = this.getBrightness();
-            BlockPos blockpos = this.getRidingEntity() instanceof EntityBoat
-                                ? new BlockPos(this.posX, (double)Math.round(this.posY), this.posZ).up()
-                                : new BlockPos(this.posX, (double)Math.round(this.posY), this.posZ);
+            BlockPos blockpos = this.getRidingEntity() instanceof EntityBoat ? (new BlockPos(this.posX, (double)Math.round(this.posY), this.posZ)).up() : new BlockPos(this.posX, (double)Math.round(this.posY), this.posZ);
 
             if (f > 0.5F && this.rand.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.canSeeSky(blockpos))
             {
@@ -154,7 +144,6 @@
         super.onLivingUpdate();
     }
 
-    @Override
     public void updateRidden()
     {
         super.updateRidden();
@@ -166,7 +155,6 @@
         }
     }
 
-    @Override
     protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty)
     {
         super.setEquipmentBasedOnDifficulty(difficulty);
@@ -174,7 +162,6 @@
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
@@ -205,7 +192,7 @@
             this.tasks.removeTask(this.aiArrowAttack);
             ItemStack itemstack = this.getHeldItemMainhand();
 
-            if (itemstack.getItem() == Items.BOW)
+            if (itemstack.getItem() instanceof net.minecraft.item.ItemBow)
             {
                 int i = 20;
 
@@ -224,15 +211,16 @@
         }
     }
 
-    @Override
     public void attackEntityWithRangedAttack(EntityLivingBase target, float distanceFactor)
     {
         EntityArrow entityarrow = this.getArrow(distanceFactor);
+        if (this.getHeldItemMainhand().getItem() instanceof net.minecraft.item.ItemBow)
+            entityarrow = ((net.minecraft.item.ItemBow) this.getHeldItemMainhand().getItem()).customizeArrow(entityarrow);
         double d0 = target.posX - this.posX;
         double d1 = target.getEntityBoundingBox().minY + (double)(target.height / 3.0F) - entityarrow.posY;
         double d2 = target.posZ - this.posZ;
         double d3 = (double)MathHelper.sqrt(d0 * d0 + d2 * d2);
-        entityarrow.shoot(d0, d1 + d3 * 0.2F, d2, 1.6F, (float)(14 - this.world.getDifficulty().getId() * 4));
+        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float)(14 - this.world.getDifficulty().getId() * 4));
         this.playSound(SoundEvents.ENTITY_SKELETON_SHOOT, 1.0F, 1.0F / (this.getRNG().nextFloat() * 0.4F + 0.8F));
         this.world.spawnEntity(entityarrow);
     }
@@ -244,14 +232,12 @@
         return entitytippedarrow;
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
         this.setCombatTask();
     }
 
-    @Override
     public void setItemStackToSlot(EntityEquipmentSlot slotIn, ItemStack stack)
     {
         super.setItemStackToSlot(slotIn, stack);
@@ -262,27 +248,24 @@
         }
     }
 
-    @Override
     public float getEyeHeight()
     {
         return 1.74F;
     }
 
-    @Override
     public double getYOffset()
     {
-        return -0.6;
+        return -0.6D;
     }
 
     @SideOnly(Side.CLIENT)
     public boolean isSwingingArms()
     {
-        return this.dataManager.get(SWINGING_ARMS);
+        return ((Boolean)this.dataManager.get(SWINGING_ARMS)).booleanValue();
     }
 
-    @Override
     public void setSwingingArms(boolean swingingArms)
     {
-        this.dataManager.set(SWINGING_ARMS, swingingArms);
+        this.dataManager.set(SWINGING_ARMS, Boolean.valueOf(swingingArms));
     }
 }
