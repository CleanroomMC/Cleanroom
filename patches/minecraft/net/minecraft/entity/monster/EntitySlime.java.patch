--- before/net/minecraft/entity/monster/EntitySlime.java
+++ after/net/minecraft/entity/monster/EntitySlime.java
@@ -38,7 +38,7 @@
 
 public class EntitySlime extends EntityLiving implements IMob
 {
-    private static final DataParameter<Integer> SLIME_SIZE = EntityDataManager.createKey(EntitySlime.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> SLIME_SIZE = EntityDataManager.<Integer>createKey(EntitySlime.class, DataSerializers.VARINT);
     public float squishAmount;
     public float squishFactor;
     public float prevSquishFactor;
@@ -50,7 +50,6 @@
         this.moveHelper = new EntitySlime.SlimeMoveHelper(this);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(1, new EntitySlime.AISlimeFloat(this));
@@ -61,16 +60,15 @@
         this.targetTasks.addTask(3, new EntityAIFindEntityNearest(this, EntityIronGolem.class));
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(SLIME_SIZE, 1);
+        this.dataManager.register(SLIME_SIZE, Integer.valueOf(1));
     }
 
     protected void setSlimeSize(int size, boolean resetHealth)
     {
-        this.dataManager.set(SLIME_SIZE, size);
+        this.dataManager.set(SLIME_SIZE, Integer.valueOf(size));
         this.setSize(0.51000005F * (float)size, 0.51000005F * (float)size);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue((double)(size * size));
@@ -86,7 +84,7 @@
 
     public int getSlimeSize()
     {
-        return this.dataManager.get(SLIME_SIZE);
+        return ((Integer)this.dataManager.get(SLIME_SIZE)).intValue();
     }
 
     public static void registerFixesSlime(DataFixer fixer)
@@ -94,7 +92,6 @@
         EntityLiving.registerFixesMob(fixer, EntitySlime.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -102,7 +99,6 @@
         compound.setBoolean("wasOnGround", this.wasOnGround);
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -127,7 +123,6 @@
         return EnumParticleTypes.SLIME;
     }
 
-    @Override
     public void onUpdate()
     {
         if (!this.world.isRemote && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSlimeSize() > 0)
@@ -135,17 +130,17 @@
             this.isDead = true;
         }
 
-        this.squishFactor = this.squishFactor + (this.squishAmount - this.squishFactor) * 0.5F;
+        this.squishFactor += (this.squishAmount - this.squishFactor) * 0.5F;
         this.prevSquishFactor = this.squishFactor;
         super.onUpdate();
 
         if (this.onGround && !this.wasOnGround)
         {
             int i = this.getSlimeSize();
-
-            for (int j = 0; j < i * 8; j++)
+            if (spawnCustomParticles()) { i = 0; } // don't spawn particles if it's handled by the implementation itself
+            for (int j = 0; j < i * 8; ++j)
             {
-                float f = this.rand.nextFloat() * (float)(Math.PI * 2);
+                float f = this.rand.nextFloat() * ((float)Math.PI * 2F);
                 float f1 = this.rand.nextFloat() * 0.5F + 0.5F;
                 float f2 = MathHelper.sin(f) * (float)i * 0.5F * f1;
                 float f3 = MathHelper.cos(f) * (float)i * 0.5F * f1;
@@ -153,12 +148,10 @@
                 EnumParticleTypes enumparticletypes = this.getParticleType();
                 double d0 = this.posX + (double)f2;
                 double d1 = this.posZ + (double)f3;
-                world.spawnParticle(enumparticletypes, d0, this.getEntityBoundingBox().minY, d1, 0.0, 0.0, 0.0);
+                world.spawnParticle(enumparticletypes, d0, this.getEntityBoundingBox().minY, d1, 0.0D, 0.0D, 0.0D);
             }
 
-            this.playSound(
-                this.getSquishSound(), this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) / 0.8F
-            );
+            this.playSound(this.getSquishSound(), this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             this.squishAmount = -0.5F;
         }
         else if (!this.onGround && this.wasOnGround)
@@ -185,7 +178,6 @@
         return new EntitySlime(this.world);
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         if (SLIME_SIZE.equals(key))
@@ -204,7 +196,6 @@
         super.notifyDataManagerChange(key);
     }
 
-    @Override
     public void setDead()
     {
         int i = this.getSlimeSize();
@@ -213,7 +204,7 @@
         {
             int j = 2 + this.rand.nextInt(3);
 
-            for (int k = 0; k < j; k++)
+            for (int k = 0; k < j; ++k)
             {
                 float f = ((float)(k % 2) - 0.5F) * (float)i / 4.0F;
                 float f1 = ((float)(k / 2) - 0.5F) * (float)i / 4.0F;
@@ -230,9 +221,7 @@
                 }
 
                 entityslime.setSlimeSize(i / 2, true);
-                entityslime.setLocationAndAngles(
-                    this.posX + (double)f, this.posY + 0.5, this.posZ + (double)f1, this.rand.nextFloat() * 360.0F, 0.0F
-                );
+                entityslime.setLocationAndAngles(this.posX + (double)f, this.posY + 0.5D, this.posZ + (double)f1, this.rand.nextFloat() * 360.0F, 0.0F);
                 this.world.spawnEntity(entityslime);
             }
         }
@@ -240,7 +229,6 @@
         super.setDead();
     }
 
-    @Override
     public void applyEntityCollision(Entity entityIn)
     {
         super.applyEntityCollision(entityIn);
@@ -251,7 +239,6 @@
         }
     }
 
-    @Override
     public void onCollideWithPlayer(EntityPlayer entityIn)
     {
         if (this.canDamagePlayer())
@@ -264,16 +251,13 @@
     {
         int i = this.getSlimeSize();
 
-        if (this.canEntityBeSeen(entityIn)
-                && this.getDistanceSq(entityIn) < 0.6 * (double)i * 0.6 * (double)i
-                && entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), (float)this.getAttackStrength()))
+        if (this.canEntityBeSeen(entityIn) && this.getDistanceSq(entityIn) < 0.6D * (double)i * 0.6D * (double)i && entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), (float)this.getAttackStrength()))
         {
             this.playSound(SoundEvents.ENTITY_SLIME_ATTACK, 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
             this.applyEnchantments(this, entityIn);
         }
     }
 
-    @Override
     public float getEyeHeight()
     {
         return 0.625F * this.height;
@@ -289,13 +273,11 @@
         return this.getSlimeSize();
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return this.isSmallSlime() ? SoundEvents.ENTITY_SMALL_SLIME_HURT : SoundEvents.ENTITY_SLIME_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return this.isSmallSlime() ? SoundEvents.ENTITY_SMALL_SLIME_DEATH : SoundEvents.ENTITY_SLIME_DEATH;
@@ -306,26 +288,23 @@
         return this.isSmallSlime() ? SoundEvents.ENTITY_SMALL_SLIME_SQUISH : SoundEvents.ENTITY_SLIME_SQUISH;
     }
 
-    @Override
     protected Item getDropItem()
     {
         return this.getSlimeSize() == 1 ? Items.SLIME_BALL : null;
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return this.getSlimeSize() == 1 ? LootTableList.ENTITIES_SLIME : LootTableList.EMPTY;
     }
 
-    @Override
     public boolean getCanSpawnHere()
     {
         BlockPos blockpos = new BlockPos(MathHelper.floor(this.posX), 0, MathHelper.floor(this.posZ));
         Chunk chunk = this.world.getChunk(blockpos);
 
-        if (this.world.getWorldInfo().getTerrainType() == WorldType.FLAT && this.rand.nextInt(4) != 1)
+        if (this.world.getWorldInfo().getTerrainType().handleSlimeSpawnReduction(rand, world))
         {
             return false;
         }
@@ -335,17 +314,12 @@
             {
                 Biome biome = this.world.getBiome(blockpos);
 
-                if (biome == Biomes.SWAMPLAND
-                        && this.posY > 50.0
-                        && this.posY < 70.0
-                        && this.rand.nextFloat() < 0.5F
-                        && this.rand.nextFloat() < this.world.getCurrentMoonPhaseFactor()
-                        && this.world.getLightFromNeighbors(new BlockPos(this)) <= this.rand.nextInt(8))
+                if (biome == Biomes.SWAMPLAND && this.posY > 50.0D && this.posY < 70.0D && this.rand.nextFloat() < 0.5F && this.rand.nextFloat() < this.world.getCurrentMoonPhaseFactor() && this.world.getLightFromNeighbors(new BlockPos(this)) <= this.rand.nextInt(8))
                 {
                     return super.getCanSpawnHere();
                 }
 
-                if (this.rand.nextInt(10) == 0 && chunk.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 40.0)
+                if (this.rand.nextInt(10) == 0 && chunk.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 40.0D)
                 {
                     return super.getCanSpawnHere();
                 }
@@ -355,13 +329,11 @@
         }
     }
 
-    @Override
     protected float getSoundVolume()
     {
         return 0.4F * (float)this.getSlimeSize();
     }
 
-    @Override
     public int getVerticalFaceSpeed()
     {
         return 0;
@@ -372,22 +344,21 @@
         return this.getSlimeSize() > 0;
     }
 
-    @Override
     protected void jump()
     {
         this.motionY = 0.42F;
         this.isAirBorne = true;
+        net.minecraftforge.common.ForgeHooks.onLivingJump(this);
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         int i = this.rand.nextInt(3);
 
         if (i < 2 && this.rand.nextFloat() < 0.5F * difficulty.getClampedAdditionalDifficulty())
         {
-            i++;
+            ++i;
         }
 
         int j = 1 << i;
@@ -400,6 +371,14 @@
         return this.isSmallSlime() ? SoundEvents.ENTITY_SMALL_SLIME_JUMP : SoundEvents.ENTITY_SLIME_JUMP;
     }
 
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * Called when the slime spawns particles on landing, see onUpdate.
+     * Return true to prevent the spawning of the default particles.
+     */
+    protected boolean spawnCustomParticles() { return false; }
+    /* ======================================== FORGE END   =====================================*/
+
     static class AISlimeAttack extends EntityAIBase
         {
             private final EntitySlime slime;
@@ -411,7 +390,6 @@
                 this.setMutexBits(2);
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 EntityLivingBase entitylivingbase = this.slime.getAttackTarget();
@@ -420,22 +398,22 @@
                 {
                     return false;
                 }
+                else if (!entitylivingbase.isEntityAlive())
+                {
+                    return false;
+                }
                 else
                 {
-                    return !entitylivingbase.isEntityAlive()
-                           ? false
-                           : !(entitylivingbase instanceof EntityPlayer) || !((EntityPlayer)entitylivingbase).capabilities.disableDamage;
+                    return !(entitylivingbase instanceof EntityPlayer) || !((EntityPlayer)entitylivingbase).capabilities.disableDamage;
                 }
             }
 
-            @Override
             public void startExecuting()
             {
                 this.growTieredTimer = 300;
                 super.startExecuting();
             }
 
-            @Override
             public boolean shouldContinueExecuting()
             {
                 EntityLivingBase entitylivingbase = this.slime.getAttackTarget();
@@ -448,20 +426,20 @@
                 {
                     return false;
                 }
+                else if (entitylivingbase instanceof EntityPlayer && ((EntityPlayer)entitylivingbase).capabilities.disableDamage)
+                {
+                    return false;
+                }
                 else
                 {
-                    return entitylivingbase instanceof EntityPlayer && ((EntityPlayer)entitylivingbase).capabilities.disableDamage
-                           ? false
-                           : --this.growTieredTimer > 0;
+                    return --this.growTieredTimer > 0;
                 }
             }
 
-            @Override
             public void updateTask()
             {
                 this.slime.faceEntity(this.slime.getAttackTarget(), 10.0F, 10.0F);
-                ((EntitySlime.SlimeMoveHelper)this.slime.getMoveHelper())
-                .setDirection(this.slime.rotationYaw, this.slime.canDamagePlayer());
+                ((EntitySlime.SlimeMoveHelper)this.slime.getMoveHelper()).setDirection(this.slime.rotationYaw, this.slime.canDamagePlayer());
             }
         }
 
@@ -477,19 +455,11 @@
                 this.setMutexBits(2);
             }
 
-            @Override
             public boolean shouldExecute()
             {
-                return this.slime.getAttackTarget() == null
-                       && (
-                           this.slime.onGround
-                           || this.slime.isInWater()
-                           || this.slime.isInLava()
-                           || this.slime.isPotionActive(MobEffects.LEVITATION)
-                       );
+                return this.slime.getAttackTarget() == null && (this.slime.onGround || this.slime.isInWater() || this.slime.isInLava() || this.slime.isPotionActive(MobEffects.LEVITATION));
             }
 
-            @Override
             public void updateTask()
             {
                 if (--this.nextRandomizeTime <= 0)
@@ -513,13 +483,11 @@
                 ((PathNavigateGround)slimeIn.getNavigator()).setCanSwim(true);
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 return this.slime.isInWater() || this.slime.isInLava();
             }
 
-            @Override
             public void updateTask()
             {
                 if (this.slime.getRNG().nextFloat() < 0.8F)
@@ -527,7 +495,7 @@
                     this.slime.getJumpHelper().setJumping();
                 }
 
-                ((EntitySlime.SlimeMoveHelper)this.slime.getMoveHelper()).setSpeed(1.2);
+                ((EntitySlime.SlimeMoveHelper)this.slime.getMoveHelper()).setSpeed(1.2D);
             }
         }
 
@@ -541,16 +509,14 @@
                 this.setMutexBits(5);
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 return true;
             }
 
-            @Override
             public void updateTask()
             {
-                ((EntitySlime.SlimeMoveHelper)this.slime.getMoveHelper()).setSpeed(1.0);
+                ((EntitySlime.SlimeMoveHelper)this.slime.getMoveHelper()).setSpeed(1.0D);
             }
         }
 
@@ -565,7 +531,7 @@
             {
                 super(slimeIn);
                 this.slime = slimeIn;
-                this.yRot = 180.0F * slimeIn.rotationYaw / (float) Math.PI;
+                this.yRot = 180.0F * slimeIn.rotationYaw / (float)Math.PI;
             }
 
             public void setDirection(float p_179920_1_, boolean p_179920_2_)
@@ -580,7 +546,6 @@
                 this.action = EntityMoveHelper.Action.MOVE_TO;
             }
 
-            @Override
             public void onUpdateMoveHelper()
             {
                 this.entity.rotationYaw = this.limitAngle(this.entity.rotationYaw, this.yRot, 90.0F);
@@ -597,8 +562,7 @@
 
                     if (this.entity.onGround)
                     {
-                        this.entity
-                        .setAIMoveSpeed((float)(this.speed * this.entity.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getAttributeValue()));
+                        this.entity.setAIMoveSpeed((float)(this.speed * this.entity.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getAttributeValue()));
 
                         if (this.jumpDelay-- <= 0)
                         {
@@ -613,12 +577,7 @@
 
                             if (this.slime.makesSoundOnJump())
                             {
-                                this.slime
-                                .playSound(
-                                    this.slime.getJumpSound(),
-                                    this.slime.getSoundVolume(),
-                                    ((this.slime.getRNG().nextFloat() - this.slime.getRNG().nextFloat()) * 0.2F + 1.0F) * 0.8F
-                                );
+                                this.slime.playSound(this.slime.getJumpSound(), this.slime.getSoundVolume(), ((this.slime.getRNG().nextFloat() - this.slime.getRNG().nextFloat()) * 0.2F + 1.0F) * 0.8F);
                             }
                         }
                         else
@@ -630,8 +589,7 @@
                     }
                     else
                     {
-                        this.entity
-                        .setAIMoveSpeed((float)(this.speed * this.entity.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getAttributeValue()));
+                        this.entity.setAIMoveSpeed((float)(this.speed * this.entity.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getAttributeValue()));
                     }
                 }
             }
