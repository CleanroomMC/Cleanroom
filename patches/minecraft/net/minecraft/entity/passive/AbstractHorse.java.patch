--- before/net/minecraft/entity/passive/AbstractHorse.java
+++ after/net/minecraft/entity/passive/AbstractHorse.java
@@ -66,11 +66,9 @@
             return p_apply_1_ instanceof AbstractHorse && ((AbstractHorse)p_apply_1_).isBreeding();
         }
     };
-    protected static final IAttribute JUMP_STRENGTH = new RangedAttribute(null, "horse.jumpStrength", 0.7, 0.0, 2.0)
-        .setDescription("Jump Strength")
-        .setShouldWatch(true);
-    private static final DataParameter<Byte> STATUS = EntityDataManager.createKey(AbstractHorse.class, DataSerializers.BYTE);
-    private static final DataParameter<Optional<UUID>> OWNER_UNIQUE_ID = EntityDataManager.createKey(AbstractHorse.class, DataSerializers.OPTIONAL_UNIQUE_ID);
+    protected static final IAttribute JUMP_STRENGTH = (new RangedAttribute((IAttribute)null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).setDescription("Jump Strength").setShouldWatch(true);
+    private static final DataParameter<Byte> STATUS = EntityDataManager.<Byte>createKey(AbstractHorse.class, DataSerializers.BYTE);
+    private static final DataParameter<Optional<UUID>> OWNER_UNIQUE_ID = EntityDataManager.<Optional<UUID>>createKey(AbstractHorse.class, DataSerializers.OPTIONAL_UNIQUE_ID);
     private int eatingCounter;
     private int openMouthCounter;
     private int jumpRearingCounter;
@@ -98,43 +96,41 @@
         this.initHorseChest();
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(0, new EntityAISwimming(this));
-        this.tasks.addTask(1, new EntityAIPanic(this, 1.2));
-        this.tasks.addTask(1, new EntityAIRunAroundLikeCrazy(this, 1.2));
-        this.tasks.addTask(2, new EntityAIMate(this, 1.0, AbstractHorse.class));
-        this.tasks.addTask(4, new EntityAIFollowParent(this, 1.0));
-        this.tasks.addTask(6, new EntityAIWanderAvoidWater(this, 0.7));
+        this.tasks.addTask(1, new EntityAIPanic(this, 1.2D));
+        this.tasks.addTask(1, new EntityAIRunAroundLikeCrazy(this, 1.2D));
+        this.tasks.addTask(2, new EntityAIMate(this, 1.0D, AbstractHorse.class));
+        this.tasks.addTask(4, new EntityAIFollowParent(this, 1.0D));
+        this.tasks.addTask(6, new EntityAIWanderAvoidWater(this, 0.7D));
         this.tasks.addTask(7, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
         this.tasks.addTask(8, new EntityAILookIdle(this));
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(STATUS, (byte)0);
+        this.dataManager.register(STATUS, Byte.valueOf((byte)0));
         this.dataManager.register(OWNER_UNIQUE_ID, Optional.absent());
     }
 
     protected boolean getHorseWatchableBoolean(int p_110233_1_)
     {
-        return (this.dataManager.get(STATUS) & p_110233_1_) != 0;
+        return (((Byte)this.dataManager.get(STATUS)).byteValue() & p_110233_1_) != 0;
     }
 
     protected void setHorseWatchableBoolean(int p_110208_1_, boolean p_110208_2_)
     {
-        byte b0 = this.dataManager.get(STATUS);
+        byte b0 = ((Byte)this.dataManager.get(STATUS)).byteValue();
 
         if (p_110208_2_)
         {
-            this.dataManager.set(STATUS, (byte)(b0 | p_110208_1_));
+            this.dataManager.set(STATUS, Byte.valueOf((byte)(b0 | p_110208_1_)));
         }
         else
         {
-            this.dataManager.set(STATUS, (byte)(b0 & ~p_110208_1_));
+            this.dataManager.set(STATUS, Byte.valueOf((byte)(b0 & ~p_110208_1_)));
         }
     }
 
@@ -146,7 +142,7 @@
     @Nullable
     public UUID getOwnerUniqueId()
     {
-        return this.dataManager.get(OWNER_UNIQUE_ID).orNull();
+        return (UUID)((Optional)this.dataManager.get(OWNER_UNIQUE_ID)).orNull();
     }
 
     public void setOwnerUniqueId(@Nullable UUID uniqueId)
@@ -159,7 +155,6 @@
         return 0.5F;
     }
 
-    @Override
     public void setScaleForAge(boolean child)
     {
         this.setScale(child ? this.getHorseSize() : 1.0F);
@@ -180,13 +175,11 @@
         this.horseJumping = jumping;
     }
 
-    @Override
     public boolean canBeLeashedTo(EntityPlayer player)
     {
         return super.canBeLeashedTo(player) && this.getCreatureAttribute() != EnumCreatureAttribute.UNDEAD;
     }
 
-    @Override
     protected void onLeashDistance(float p_142017_1_)
     {
         if (p_142017_1_ > 6.0F && this.isEatingHaystack())
@@ -237,14 +230,12 @@
         return i;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         Entity entity = source.getTrueSource();
         return this.isBeingRidden() && entity != null && this.isRidingOrBeingRiddenBy(entity) ? false : super.attackEntityFrom(source, amount);
     }
 
-    @Override
     public boolean canBePushed()
     {
         return !this.isBeingRidden();
@@ -256,23 +247,15 @@
 
         if (!this.isSilent())
         {
-            this.world
-            .playSound(
-                null,
-                this.posX,
-                this.posY,
-                this.posZ,
-                SoundEvents.ENTITY_HORSE_EAT,
-                this.getSoundCategory(),
-                1.0F,
-                1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F
-            );
+            this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_HORSE_EAT, this.getSoundCategory(), 1.0F, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
         }
     }
 
-    @Override
     public void fall(float distance, float damageMultiplier)
     {
+        float[] ret = net.minecraftforge.common.ForgeHooks.onLivingFall(this, distance, damageMultiplier);
+        if (ret == null) return;
+        distance = ret[0]; damageMultiplier = ret[1];
         if (distance > 1.0F)
         {
             this.playSound(SoundEvents.ENTITY_HORSE_LAND, 0.4F, 1.0F);
@@ -292,24 +275,13 @@
                 }
             }
 
-            IBlockState iblockstate = this.world
-                                      .getBlockState(new BlockPos(this.posX, this.posY - 0.2 - (double)this.prevRotationYaw, this.posZ));
+            IBlockState iblockstate = this.world.getBlockState(new BlockPos(this.posX, this.posY - 0.2D - (double)this.prevRotationYaw, this.posZ));
             Block block = iblockstate.getBlock();
 
             if (iblockstate.getMaterial() != Material.AIR && !this.isSilent())
             {
                 SoundType soundtype = block.getSoundType();
-                this.world
-                .playSound(
-                    null,
-                    this.posX,
-                    this.posY,
-                    this.posZ,
-                    soundtype.getStepSound(),
-                    this.getSoundCategory(),
-                    soundtype.getVolume() * 0.5F,
-                    soundtype.getPitch() * 0.75F
-                );
+                this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, soundtype.getStepSound(), this.getSoundCategory(), soundtype.getVolume() * 0.5F, soundtype.getPitch() * 0.75F);
             }
         }
     }
@@ -330,7 +302,7 @@
             containerhorsechest.removeInventoryChangeListener(this);
             int i = Math.min(containerhorsechest.getSizeInventory(), this.horseChest.getSizeInventory());
 
-            for (int j = 0; j < i; j++)
+            for (int j = 0; j < i; ++j)
             {
                 ItemStack itemstack = containerhorsechest.getStackInSlot(j);
 
@@ -343,6 +315,7 @@
 
         this.horseChest.addInventoryChangeListener(this);
         this.updateHorseSlots();
+        this.itemHandler = new net.minecraftforge.items.wrapper.InvWrapper(this.horseChest);
     }
 
     protected void updateHorseSlots()
@@ -353,7 +326,6 @@
         }
     }
 
-    @Override
     public void onInventoryChanged(IInventory invBasic)
     {
         boolean flag = this.isHorseSaddled();
@@ -371,8 +343,7 @@
         double d0 = Double.MAX_VALUE;
         Entity entity = null;
 
-        for (Entity entity1 : this.world
-                .getEntitiesInAABBexcluding(entityIn, entityIn.getEntityBoundingBox().expand(distance, distance, distance), IS_HORSE_BREEDING))
+        for (Entity entity1 : this.world.getEntitiesInAABBexcluding(entityIn, entityIn.getEntityBoundingBox().expand(distance, distance, distance), IS_HORSE_BREEDING))
         {
             double d1 = entity1.getDistanceSq(entityIn.posX, entityIn.posY, entityIn.posZ);
 
@@ -392,7 +363,6 @@
     }
 
     @Nullable
-    @Override
     protected SoundEvent getDeathSound()
     {
         this.openHorseMouth();
@@ -400,7 +370,6 @@
     }
 
     @Nullable
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         this.openHorseMouth();
@@ -414,7 +383,6 @@
     }
 
     @Nullable
-    @Override
     protected SoundEvent getAmbientSound()
     {
         this.openHorseMouth();
@@ -445,7 +413,6 @@
         return null;
     }
 
-    @Override
     protected void playStepSound(BlockPos pos, Block blockIn)
     {
         if (!blockIn.getDefaultState().getMaterial().isLiquid())
@@ -459,7 +426,7 @@
 
             if (this.isBeingRidden() && this.canGallop)
             {
-                this.gallopTime++;
+                ++this.gallopTime;
 
                 if (this.gallopTime > 5 && this.gallopTime % 3 == 0)
                 {
@@ -486,16 +453,14 @@
         this.playSound(SoundEvents.ENTITY_HORSE_GALLOP, p_190680_1_.getVolume() * 0.15F, p_190680_1_.getPitch());
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
         this.getAttributeMap().registerAttribute(JUMP_STRENGTH);
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(53.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.225F);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(53.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.22499999403953552D);
     }
 
-    @Override
     public int getMaxSpawnedInChunk()
     {
         return 6;
@@ -506,13 +471,11 @@
         return 100;
     }
 
-    @Override
     protected float getSoundVolume()
     {
         return 0.8F;
     }
 
-    @Override
     public int getTalkInterval()
     {
         return 400;
@@ -591,16 +554,7 @@
 
         if (this.isChild() && i > 0)
         {
-            this.world
-            .spawnParticle(
-                EnumParticleTypes.VILLAGER_HAPPY,
-                this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-                this.posY + 0.5 + (double)(this.rand.nextFloat() * this.height),
-                this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-                0.0,
-                0.0,
-                0.0
-            );
+            this.world.spawnParticle(EnumParticleTypes.VILLAGER_HAPPY, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, 0.0D, 0.0D, 0.0D);
 
             if (!this.world.isRemote)
             {
@@ -641,13 +595,11 @@
         }
     }
 
-    @Override
     protected boolean isMovementBlocked()
     {
         return super.isMovementBlocked() && this.isBeingRidden() && this.isHorseSaddled() || this.isEatingHaystack() || this.isRearing();
     }
 
-    @Override
     public boolean isBreedingItem(ItemStack stack)
     {
         return false;
@@ -658,14 +610,13 @@
         this.tailCounter = 1;
     }
 
-    @Override
     public void onDeath(DamageSource cause)
     {
         super.onDeath(cause);
 
         if (!this.world.isRemote && this.horseChest != null)
         {
-            for (int i = 0; i < this.horseChest.getSizeInventory(); i++)
+            for (int i = 0; i < this.horseChest.getSizeInventory(); ++i)
             {
                 ItemStack itemstack = this.horseChest.getStackInSlot(i);
 
@@ -677,7 +628,6 @@
         }
     }
 
-    @Override
     public void onLivingUpdate()
     {
         if (this.rand.nextInt(200) == 0)
@@ -696,19 +646,7 @@
 
             if (this.canEatGrass())
             {
-                if (!this.isEatingHaystack()
-                        && !this.isBeingRidden()
-                        && this.rand.nextInt(300) == 0
-                        && this.world
-                        .getBlockState(
-                            new BlockPos(
-                                MathHelper.floor(this.posX),
-                                MathHelper.floor(this.posY) - 1,
-                                MathHelper.floor(this.posZ)
-                            )
-                        )
-                        .getBlock()
-                        == Blocks.GRASS)
+                if (!this.isEatingHaystack() && !this.isBeingRidden() && this.rand.nextInt(300) == 0 && this.world.getBlockState(new BlockPos(MathHelper.floor(this.posX), MathHelper.floor(this.posY) - 1, MathHelper.floor(this.posZ))).getBlock() == Blocks.GRASS)
                 {
                     this.setEatingHaystack(true);
                 }
@@ -728,9 +666,9 @@
     {
         if (this.isBreeding() && this.isChild() && !this.isEatingHaystack())
         {
-            AbstractHorse abstracthorse = this.getClosestHorse(this, 16.0);
+            AbstractHorse abstracthorse = this.getClosestHorse(this, 16.0D);
 
-            if (abstracthorse != null && this.getDistanceSq(abstracthorse) > 4.0)
+            if (abstracthorse != null && this.getDistanceSq(abstracthorse) > 4.0D)
             {
                 this.navigator.getPathToEntityLiving(abstracthorse);
             }
@@ -742,7 +680,6 @@
         return true;
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
@@ -766,7 +703,7 @@
 
         if (this.sprintCounter > 0)
         {
-            this.sprintCounter++;
+            ++this.sprintCounter;
 
             if (this.sprintCounter > 300)
             {
@@ -778,7 +715,7 @@
 
         if (this.isEatingHaystack())
         {
-            this.headLean = this.headLean + (1.0F - this.headLean) * 0.4F + 0.05F;
+            this.headLean += (1.0F - this.headLean) * 0.4F + 0.05F;
 
             if (this.headLean > 1.0F)
             {
@@ -787,7 +724,7 @@
         }
         else
         {
-            this.headLean = this.headLean + ((0.0F - this.headLean) * 0.4F - 0.05F);
+            this.headLean += (0.0F - this.headLean) * 0.4F - 0.05F;
 
             if (this.headLean < 0.0F)
             {
@@ -801,7 +738,7 @@
         {
             this.headLean = 0.0F;
             this.prevHeadLean = this.headLean;
-            this.rearingAmount = this.rearingAmount + (1.0F - this.rearingAmount) * 0.4F + 0.05F;
+            this.rearingAmount += (1.0F - this.rearingAmount) * 0.4F + 0.05F;
 
             if (this.rearingAmount > 1.0F)
             {
@@ -811,8 +748,7 @@
         else
         {
             this.allowStandSliding = false;
-            this.rearingAmount = this.rearingAmount
-                                   + ((0.8F * this.rearingAmount * this.rearingAmount * this.rearingAmount - this.rearingAmount) * 0.6F - 0.05F);
+            this.rearingAmount += (0.8F * this.rearingAmount * this.rearingAmount * this.rearingAmount - this.rearingAmount) * 0.6F - 0.05F;
 
             if (this.rearingAmount < 0.0F)
             {
@@ -824,7 +760,7 @@
 
         if (this.getHorseWatchableBoolean(64))
         {
-            this.mouthOpenness = this.mouthOpenness + (1.0F - this.mouthOpenness) * 0.7F + 0.05F;
+            this.mouthOpenness += (1.0F - this.mouthOpenness) * 0.7F + 0.05F;
 
             if (this.mouthOpenness > 1.0F)
             {
@@ -833,7 +769,7 @@
         }
         else
         {
-            this.mouthOpenness = this.mouthOpenness + ((0.0F - this.mouthOpenness) * 0.7F - 0.05F);
+            this.mouthOpenness += (0.0F - this.mouthOpenness) * 0.7F - 0.05F;
 
             if (this.mouthOpenness < 0.0F)
             {
@@ -900,7 +836,6 @@
         return true;
     }
 
-    @Override
     public void travel(float strafe, float vertical, float forward)
     {
         if (this.isBeingRidden() && this.canBeSteered() && this.isHorseSaddled())
@@ -933,7 +868,7 @@
 
                 if (this.isPotionActive(MobEffects.JUMP_BOOST))
                 {
-                    this.motionY = this.motionY + (double)((float)(this.getActivePotionEffect(MobEffects.JUMP_BOOST).getAmplifier() + 1) * 0.1F);
+                    this.motionY += (double)((float)(this.getActivePotionEffect(MobEffects.JUMP_BOOST).getAmplifier() + 1) * 0.1F);
                 }
 
                 this.setHorseJumping(true);
@@ -941,10 +876,10 @@
 
                 if (forward > 0.0F)
                 {
-                    float f = MathHelper.sin(this.rotationYaw * (float)(Math.PI / 180.0));
-                    float f1 = MathHelper.cos(this.rotationYaw * (float)(Math.PI / 180.0));
-                    this.motionX = this.motionX + (double)(-0.4F * f * this.jumpPower);
-                    this.motionZ = this.motionZ + (double)(0.4F * f1 * this.jumpPower);
+                    float f = MathHelper.sin(this.rotationYaw * 0.017453292F);
+                    float f1 = MathHelper.cos(this.rotationYaw * 0.017453292F);
+                    this.motionX += (double)(-0.4F * f * this.jumpPower);
+                    this.motionZ += (double)(0.4F * f1 * this.jumpPower);
                     this.playSound(SoundEvents.ENTITY_HORSE_JUMP, 0.4F, 1.0F);
                 }
 
@@ -960,9 +895,9 @@
             }
             else if (entitylivingbase instanceof EntityPlayer)
             {
-                this.motionX = 0.0;
-                this.motionY = 0.0;
-                this.motionZ = 0.0;
+                this.motionX = 0.0D;
+                this.motionY = 0.0D;
+                this.motionZ = 0.0D;
             }
 
             if (this.onGround)
@@ -981,8 +916,8 @@
                 f2 = 1.0F;
             }
 
-            this.limbSwingAmount = this.limbSwingAmount + (f2 - this.limbSwingAmount) * 0.4F;
-            this.limbSwing = this.limbSwing + this.limbSwingAmount;
+            this.limbSwingAmount += (f2 - this.limbSwingAmount) * 0.4F;
+            this.limbSwing += this.limbSwingAmount;
         }
         else
         {
@@ -994,10 +929,9 @@
     public static void registerFixesAbstractHorse(DataFixer fixer, Class<?> entityClass)
     {
         EntityLiving.registerFixesMob(fixer, entityClass);
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(entityClass, "SaddleItem"));
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(entityClass, new String[] {"SaddleItem"}));
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -1017,7 +951,6 @@
         }
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -1046,7 +979,7 @@
 
         if (iattributeinstance != null)
         {
-            this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(iattributeinstance.getBaseValue() * 0.25);
+            this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(iattributeinstance.getBaseValue() * 0.25D);
         }
 
         if (compound.hasKey("SaddleItem", 10))
@@ -1062,7 +995,6 @@
         this.updateHorseSlots();
     }
 
-    @Override
     public boolean canMateWith(EntityAnimal otherAnimal)
     {
         return false;
@@ -1070,16 +1002,10 @@
 
     protected boolean canMate()
     {
-        return !this.isBeingRidden()
-               && !this.isRiding()
-               && this.isTame()
-               && !this.isChild()
-               && this.getHealth() >= this.getMaxHealth()
-               && this.isInLove();
+        return !this.isBeingRidden() && !this.isRiding() && this.isTame() && !this.isChild() && this.getHealth() >= this.getMaxHealth() && this.isInLove();
     }
 
     @Nullable
-    @Override
     public EntityAgeable createChild(EntityAgeable ageable)
     {
         return null;
@@ -1087,19 +1013,14 @@
 
     protected void setOffspringAttributes(EntityAgeable p_190681_1_, AbstractHorse p_190681_2_)
     {
-        double d0 = this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue()
-                    + p_190681_1_.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue()
-                    + (double)this.getModifiedMaxHealth();
-        p_190681_2_.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(d0 / 3.0);
+        double d0 = this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue() + p_190681_1_.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue() + (double)this.getModifiedMaxHealth();
+        p_190681_2_.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(d0 / 3.0D);
         double d1 = this.getEntityAttribute(JUMP_STRENGTH).getBaseValue() + p_190681_1_.getEntityAttribute(JUMP_STRENGTH).getBaseValue() + this.getModifiedJumpStrength();
-        p_190681_2_.getEntityAttribute(JUMP_STRENGTH).setBaseValue(d1 / 3.0);
-        double d2 = this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getBaseValue()
-                    + p_190681_1_.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getBaseValue()
-                    + this.getModifiedMovementSpeed();
-        p_190681_2_.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(d2 / 3.0);
+        p_190681_2_.getEntityAttribute(JUMP_STRENGTH).setBaseValue(d1 / 3.0D);
+        double d2 = this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getBaseValue() + p_190681_1_.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getBaseValue() + this.getModifiedMovementSpeed();
+        p_190681_2_.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(d2 / 3.0D);
     }
 
-    @Override
     public boolean canBeSteered()
     {
         return this.getControllingPassenger() instanceof EntityLivingBase;
@@ -1124,7 +1045,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void setJumpPower(int jumpPowerIn)
     {
         if (this.isHorseSaddled())
@@ -1150,20 +1070,17 @@
         }
     }
 
-    @Override
     public boolean canJump()
     {
         return this.isHorseSaddled();
     }
 
-    @Override
     public void handleStartJump(int p_184775_1_)
     {
         this.allowStandSliding = true;
         this.makeHorseRear();
     }
 
-    @Override
     public void handleStopJump()
     {
     }
@@ -1173,26 +1090,16 @@
     {
         EnumParticleTypes enumparticletypes = p_110216_1_ ? EnumParticleTypes.HEART : EnumParticleTypes.SMOKE_NORMAL;
 
-        for (int i = 0; i < 7; i++)
+        for (int i = 0; i < 7; ++i)
         {
-            double d0 = this.rand.nextGaussian() * 0.02;
-            double d1 = this.rand.nextGaussian() * 0.02;
-            double d2 = this.rand.nextGaussian() * 0.02;
-            this.world
-            .spawnParticle(
-                enumparticletypes,
-                this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-                this.posY + 0.5 + (double)(this.rand.nextFloat() * this.height),
-                this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-                d0,
-                d1,
-                d2
-            );
+            double d0 = this.rand.nextGaussian() * 0.02D;
+            double d1 = this.rand.nextGaussian() * 0.02D;
+            double d2 = this.rand.nextGaussian() * 0.02D;
+            this.world.spawnParticle(enumparticletypes, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d0, d1, d2);
         }
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void handleStatusUpdate(byte id)
     {
         if (id == 7)
@@ -1209,7 +1116,6 @@
         }
     }
 
-    @Override
     public void updatePassenger(Entity passenger)
     {
         super.updatePassenger(passenger);
@@ -1222,15 +1128,11 @@
 
         if (this.prevRearingAmount > 0.0F)
         {
-            float f3 = MathHelper.sin(this.renderYawOffset * (float)(Math.PI / 180.0));
-            float f = MathHelper.cos(this.renderYawOffset * (float)(Math.PI / 180.0));
+            float f3 = MathHelper.sin(this.renderYawOffset * 0.017453292F);
+            float f = MathHelper.cos(this.renderYawOffset * 0.017453292F);
             float f1 = 0.7F * this.prevRearingAmount;
             float f2 = 0.15F * this.prevRearingAmount;
-            passenger.setPosition(
-                this.posX + (double)(f1 * f3),
-                this.posY + this.getMountedYOffset() + passenger.getYOffset() + (double)f2,
-                this.posZ - (double)(f1 * f)
-            );
+            passenger.setPosition(this.posX + (double)(f1 * f3), this.posY + this.getMountedYOffset() + passenger.getYOffset() + (double)f2, this.posZ - (double)(f1 * f));
 
             if (passenger instanceof EntityLivingBase)
             {
@@ -1246,21 +1148,19 @@
 
     protected double getModifiedJumpStrength()
     {
-        return 0.4F + this.rand.nextDouble() * 0.2 + this.rand.nextDouble() * 0.2 + this.rand.nextDouble() * 0.2;
+        return 0.4000000059604645D + this.rand.nextDouble() * 0.2D + this.rand.nextDouble() * 0.2D + this.rand.nextDouble() * 0.2D;
     }
 
     protected double getModifiedMovementSpeed()
     {
-        return (0.45F + this.rand.nextDouble() * 0.3 + this.rand.nextDouble() * 0.3 + this.rand.nextDouble() * 0.3) * 0.25;
+        return (0.44999998807907104D + this.rand.nextDouble() * 0.3D + this.rand.nextDouble() * 0.3D + this.rand.nextDouble() * 0.3D) * 0.25D;
     }
 
-    @Override
     public boolean isOnLadder()
     {
         return false;
     }
 
-    @Override
     public float getEyeHeight()
     {
         return this.height;
@@ -1276,7 +1176,6 @@
         return false;
     }
 
-    @Override
     public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn)
     {
         int i = inventorySlot - 400;
@@ -1315,14 +1214,12 @@
     }
 
     @Nullable
-    @Override
     public Entity getControllingPassenger()
     {
-        return this.getPassengers().isEmpty() ? null : this.getPassengers().get(0);
+        return this.getPassengers().isEmpty() ? null : (Entity)this.getPassengers().get(0);
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
@@ -1333,5 +1230,23 @@
         }
 
         return livingdata;
+    }
+
+    // FORGE
+    private net.minecraftforge.items.IItemHandler itemHandler = null; // Initialized by initHorseChest above.
+
+    @SuppressWarnings("unchecked")
+    @Override
+    @Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    {
+        if (capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) return (T) itemHandler;
+        return super.getCapability(capability, facing);
+    }
+
+    @Override
+    public boolean hasCapability(net.minecraftforge.common.capabilities.Capability<?> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    {
+        return capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY || super.hasCapability(capability, facing);
     }
 }
