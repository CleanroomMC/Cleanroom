--- before/net/minecraft/entity/passive/EntityOcelot.java
+++ after/net/minecraft/entity/passive/EntityOcelot.java
@@ -1,5 +1,6 @@
 package net.minecraft.entity.passive;
 
+import com.google.common.base.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
@@ -43,7 +44,7 @@
 
 public class EntityOcelot extends EntityTameable
 {
-    private static final DataParameter<Integer> OCELOT_VARIANT = EntityDataManager.createKey(EntityOcelot.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> OCELOT_VARIANT = EntityDataManager.<Integer>createKey(EntityOcelot.class, DataSerializers.VARINT);
     private EntityAIAvoidEntity<EntityPlayer> avoidEntity;
     private EntityAITempt aiTempt;
 
@@ -53,44 +54,41 @@
         this.setSize(0.6F, 0.7F);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.aiSit = new EntityAISit(this);
-        this.aiTempt = new EntityAITempt(this, 0.6, Items.FISH, true);
+        this.aiTempt = new EntityAITempt(this, 0.6D, Items.FISH, true);
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(2, this.aiSit);
         this.tasks.addTask(3, this.aiTempt);
-        this.tasks.addTask(5, new EntityAIFollowOwner(this, 1.0, 10.0F, 5.0F));
-        this.tasks.addTask(6, new EntityAIOcelotSit(this, 0.8));
+        this.tasks.addTask(5, new EntityAIFollowOwner(this, 1.0D, 10.0F, 5.0F));
+        this.tasks.addTask(6, new EntityAIOcelotSit(this, 0.8D));
         this.tasks.addTask(7, new EntityAILeapAtTarget(this, 0.3F));
         this.tasks.addTask(8, new EntityAIOcelotAttack(this));
-        this.tasks.addTask(9, new EntityAIMate(this, 0.8));
-        this.tasks.addTask(10, new EntityAIWanderAvoidWater(this, 0.8, 1.0000001E-5F));
+        this.tasks.addTask(9, new EntityAIMate(this, 0.8D));
+        this.tasks.addTask(10, new EntityAIWanderAvoidWater(this, 0.8D, 1.0000001E-5F));
         this.tasks.addTask(11, new EntityAIWatchClosest(this, EntityPlayer.class, 10.0F));
-        this.targetTasks.addTask(1, new EntityAITargetNonTamed<>(this, EntityChicken.class, false, null));
+        this.targetTasks.addTask(1, new EntityAITargetNonTamed(this, EntityChicken.class, false, (Predicate)null));
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(OCELOT_VARIANT, 0);
+        this.dataManager.register(OCELOT_VARIANT, Integer.valueOf(0));
     }
 
-    @Override
     public void updateAITasks()
     {
         if (this.getMoveHelper().isUpdating())
         {
             double d0 = this.getMoveHelper().getSpeed();
 
-            if (d0 == 0.6)
+            if (d0 == 0.6D)
             {
                 this.setSneaking(true);
                 this.setSprinting(false);
             }
-            else if (d0 == 1.33)
+            else if (d0 == 1.33D)
             {
                 this.setSneaking(false);
                 this.setSprinting(true);
@@ -108,21 +106,18 @@
         }
     }
 
-    @Override
     protected boolean canDespawn()
     {
         return !this.isTamed() && this.ticksExisted > 2400;
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3F);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(10.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
     }
 
-    @Override
     public void fall(float distance, float damageMultiplier)
     {
     }
@@ -132,14 +127,12 @@
         EntityLiving.registerFixesMob(fixer, EntityOcelot.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
         compound.setInteger("CatType", this.getTameSkin());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -147,7 +140,6 @@
     }
 
     @Nullable
-    @Override
     protected SoundEvent getAmbientSound()
     {
         if (this.isTamed())
@@ -167,31 +159,26 @@
         }
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_CAT_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_CAT_DEATH;
     }
 
-    @Override
     protected float getSoundVolume()
     {
         return 0.4F;
     }
 
-    @Override
     public boolean attackEntityAsMob(Entity entityIn)
     {
         return entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), 3.0F);
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -210,13 +197,11 @@
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_OCELOT;
     }
 
-    @Override
     public boolean processInteract(EntityPlayer player, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
@@ -228,9 +213,7 @@
                 this.aiSit.setSitting(!this.isSitting());
             }
         }
-        else if ((this.aiTempt == null || this.aiTempt.isRunning())
-                 && itemstack.getItem() == Items.FISH
-                 && player.getDistanceSq(this) < 9.0)
+        else if ((this.aiTempt == null || this.aiTempt.isRunning()) && itemstack.getItem() == Items.FISH && player.getDistanceSq(this) < 9.0D)
         {
             if (!player.capabilities.isCreativeMode)
             {
@@ -239,7 +222,7 @@
 
             if (!this.world.isRemote)
             {
-                if (this.rand.nextInt(3) == 0)
+                if (this.rand.nextInt(3) == 0 && !net.minecraftforge.event.ForgeEventFactory.onAnimalTame(this, player))
                 {
                     this.setTamedBy(player);
                     this.setTameSkin(1 + this.world.rand.nextInt(3));
@@ -274,13 +257,11 @@
         return entityocelot;
     }
 
-    @Override
     public boolean isBreedingItem(ItemStack stack)
     {
         return stack.getItem() == Items.FISH;
     }
 
-    @Override
     public boolean canMateWith(EntityAnimal otherAnimal)
     {
         if (otherAnimal == this)
@@ -298,32 +279,36 @@
         else
         {
             EntityOcelot entityocelot = (EntityOcelot)otherAnimal;
-            return !entityocelot.isTamed() ? false : this.isInLove() && entityocelot.isInLove();
+
+            if (!entityocelot.isTamed())
+            {
+                return false;
+            }
+            else
+            {
+                return this.isInLove() && entityocelot.isInLove();
+            }
         }
     }
 
     public int getTameSkin()
     {
-        return this.dataManager.get(OCELOT_VARIANT);
+        return ((Integer)this.dataManager.get(OCELOT_VARIANT)).intValue();
     }
 
     public void setTameSkin(int skinId)
     {
-        this.dataManager.set(OCELOT_VARIANT, skinId);
+        this.dataManager.set(OCELOT_VARIANT, Integer.valueOf(skinId));
     }
 
-    @Override
     public boolean getCanSpawnHere()
     {
         return this.world.rand.nextInt(3) != 0;
     }
 
-    @Override
     public boolean isNotColliding()
     {
-        if (this.world.checkNoEntityCollision(this.getEntityBoundingBox(), this)
-                && this.world.getCollisionBoxes(this, this.getEntityBoundingBox()).isEmpty()
-                && !this.world.containsAnyLiquid(this.getEntityBoundingBox()))
+        if (this.world.checkNoEntityCollision(this.getEntityBoundingBox(), this) && this.world.getCollisionBoxes(this, this.getEntityBoundingBox()).isEmpty() && !this.world.containsAnyLiquid(this.getEntityBoundingBox()))
         {
             BlockPos blockpos = new BlockPos(this.posX, this.getEntityBoundingBox().minY, this.posZ);
 
@@ -335,7 +320,7 @@
             IBlockState iblockstate = this.world.getBlockState(blockpos.down());
             Block block = iblockstate.getBlock();
 
-            if (block == Blocks.GRASS || iblockstate.getMaterial() == Material.LEAVES)
+            if (block == Blocks.GRASS || block.isLeaves(iblockstate, this.world, blockpos.down()))
             {
                 return true;
             }
@@ -344,7 +329,6 @@
         return false;
     }
 
-    @Override
     public String getName()
     {
         if (this.hasCustomName())
@@ -357,12 +341,11 @@
         }
     }
 
-    @Override
     protected void setupTamedAI()
     {
         if (this.avoidEntity == null)
         {
-            this.avoidEntity = new EntityAIAvoidEntity<>(this, EntityPlayer.class, 16.0F, 0.8, 1.33);
+            this.avoidEntity = new EntityAIAvoidEntity<EntityPlayer>(this, EntityPlayer.class, 16.0F, 0.8D, 1.33D);
         }
 
         this.tasks.removeTask(this.avoidEntity);
@@ -374,14 +357,13 @@
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
 
         if (this.getTameSkin() == 0 && this.world.rand.nextInt(7) == 0)
         {
-            for (int i = 0; i < 2; i++)
+            for (int i = 0; i < 2; ++i)
             {
                 EntityOcelot entityocelot = new EntityOcelot(this.world);
                 entityocelot.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
