--- before/net/minecraft/entity/passive/EntityRabbit.java
+++ after/net/minecraft/entity/passive/EntityRabbit.java
@@ -55,7 +55,7 @@
 
 public class EntityRabbit extends EntityAnimal
 {
-    private static final DataParameter<Integer> RABBIT_TYPE = EntityDataManager.createKey(EntityRabbit.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> RABBIT_TYPE = EntityDataManager.<Integer>createKey(EntityRabbit.class, DataSerializers.VARINT);
     private int jumpTicks;
     private int jumpDuration;
     private boolean wasOnGround;
@@ -68,30 +68,28 @@
         this.setSize(0.4F, 0.5F);
         this.jumpHelper = new EntityRabbit.RabbitJumpHelper(this);
         this.moveHelper = new EntityRabbit.RabbitMoveHelper(this);
-        this.setMovementSpeed(0.0);
+        this.setMovementSpeed(0.0D);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(1, new EntityAISwimming(this));
-        this.tasks.addTask(1, new EntityRabbit.AIPanic(this, 2.2));
-        this.tasks.addTask(2, new EntityAIMate(this, 0.8));
-        this.tasks.addTask(3, new EntityAITempt(this, 1.0, Items.CARROT, false));
-        this.tasks.addTask(3, new EntityAITempt(this, 1.0, Items.GOLDEN_CARROT, false));
-        this.tasks.addTask(3, new EntityAITempt(this, 1.0, Item.getItemFromBlock(Blocks.YELLOW_FLOWER), false));
-        this.tasks.addTask(4, new EntityRabbit.AIAvoidEntity<>(this, EntityPlayer.class, 8.0F, 2.2, 2.2));
-        this.tasks.addTask(4, new EntityRabbit.AIAvoidEntity<>(this, EntityWolf.class, 10.0F, 2.2, 2.2));
-        this.tasks.addTask(4, new EntityRabbit.AIAvoidEntity<>(this, EntityMob.class, 4.0F, 2.2, 2.2));
+        this.tasks.addTask(1, new EntityRabbit.AIPanic(this, 2.2D));
+        this.tasks.addTask(2, new EntityAIMate(this, 0.8D));
+        this.tasks.addTask(3, new EntityAITempt(this, 1.0D, Items.CARROT, false));
+        this.tasks.addTask(3, new EntityAITempt(this, 1.0D, Items.GOLDEN_CARROT, false));
+        this.tasks.addTask(3, new EntityAITempt(this, 1.0D, Item.getItemFromBlock(Blocks.YELLOW_FLOWER), false));
+        this.tasks.addTask(4, new EntityRabbit.AIAvoidEntity(this, EntityPlayer.class, 8.0F, 2.2D, 2.2D));
+        this.tasks.addTask(4, new EntityRabbit.AIAvoidEntity(this, EntityWolf.class, 10.0F, 2.2D, 2.2D));
+        this.tasks.addTask(4, new EntityRabbit.AIAvoidEntity(this, EntityMob.class, 4.0F, 2.2D, 2.2D));
         this.tasks.addTask(5, new EntityRabbit.AIRaidFarm(this));
-        this.tasks.addTask(6, new EntityAIWanderAvoidWater(this, 0.6));
+        this.tasks.addTask(6, new EntityAIWanderAvoidWater(this, 0.6D));
         this.tasks.addTask(11, new EntityAIWatchClosest(this, EntityPlayer.class, 10.0F));
     }
 
-    @Override
     protected float getJumpUpwardsMotion()
     {
-        if (!this.collidedHorizontally && (!this.moveHelper.isUpdating() || !(this.moveHelper.getY() > this.posY + 0.5)))
+        if (!this.collidedHorizontally && (!this.moveHelper.isUpdating() || this.moveHelper.getY() <= this.posY + 0.5D))
         {
             Path path = this.navigator.getPath();
 
@@ -99,13 +97,13 @@
             {
                 Vec3d vec3d = path.getPosition(this);
 
-                if (vec3d.y > this.posY + 0.5)
+                if (vec3d.y > this.posY + 0.5D)
                 {
                     return 0.5F;
                 }
             }
 
-            return this.moveHelper.getSpeed() <= 0.6 ? 0.2F : 0.3F;
+            return this.moveHelper.getSpeed() <= 0.6D ? 0.2F : 0.3F;
         }
         else
         {
@@ -113,17 +111,16 @@
         }
     }
 
-    @Override
     protected void jump()
     {
         super.jump();
         double d0 = this.moveHelper.getSpeed();
 
-        if (d0 > 0.0)
+        if (d0 > 0.0D)
         {
             double d1 = this.motionX * this.motionX + this.motionZ * this.motionZ;
 
-            if (d1 < 0.010000000000000002)
+            if (d1 < 0.010000000000000002D)
             {
                 this.moveRelative(0.0F, 0.0F, 1.0F, 0.1F);
             }
@@ -147,16 +144,13 @@
         this.moveHelper.setMoveTo(this.moveHelper.getX(), this.moveHelper.getY(), this.moveHelper.getZ(), newSpeed);
     }
 
-    @Override
     public void setJumping(boolean jumping)
     {
         super.setJumping(jumping);
 
         if (jumping)
         {
-            this.playSound(
-                this.getJumpSound(), this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) * 0.8F
-            );
+            this.playSound(this.getJumpSound(), this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) * 0.8F);
         }
     }
 
@@ -167,24 +161,22 @@
         this.jumpTicks = 0;
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(RABBIT_TYPE, 0);
+        this.dataManager.register(RABBIT_TYPE, Integer.valueOf(0));
     }
 
-    @Override
     public void updateAITasks()
     {
         if (this.currentMoveTypeDuration > 0)
         {
-            this.currentMoveTypeDuration--;
+            --this.currentMoveTypeDuration;
         }
 
         if (this.carrotTicks > 0)
         {
-            this.carrotTicks = this.carrotTicks - this.rand.nextInt(3);
+            this.carrotTicks -= this.rand.nextInt(3);
 
             if (this.carrotTicks < 0)
             {
@@ -204,13 +196,10 @@
             {
                 EntityLivingBase entitylivingbase = this.getAttackTarget();
 
-                if (entitylivingbase != null && this.getDistanceSq(entitylivingbase) < 16.0)
+                if (entitylivingbase != null && this.getDistanceSq(entitylivingbase) < 16.0D)
                 {
                     this.calculateRotationYaw(entitylivingbase.posX, entitylivingbase.posZ);
-                    this.moveHelper
-                    .setMoveTo(
-                        entitylivingbase.posX, entitylivingbase.posY, entitylivingbase.posZ, this.moveHelper.getSpeed()
-                    );
+                    this.moveHelper.setMoveTo(entitylivingbase.posX, entitylivingbase.posY, entitylivingbase.posZ, this.moveHelper.getSpeed());
                     this.startJumping();
                     this.wasOnGround = true;
                 }
@@ -243,15 +232,13 @@
         this.wasOnGround = this.onGround;
     }
 
-    @Override
     public void spawnRunningParticles()
     {
     }
 
     private void calculateRotationYaw(double x, double z)
     {
-        this.rotationYaw = (float)(MathHelper.atan2(z - this.posZ, x - this.posX) * 180.0F / (float)Math.PI)
-                             - 90.0F;
+        this.rotationYaw = (float)(MathHelper.atan2(z - this.posZ, x - this.posX) * (180D / Math.PI)) - 90.0F;
     }
 
     private void enableJumpControl()
@@ -266,7 +253,7 @@
 
     private void updateMoveTypeDuration()
     {
-        if (this.moveHelper.getSpeed() < 2.2)
+        if (this.moveHelper.getSpeed() < 2.2D)
         {
             this.currentMoveTypeDuration = 10;
         }
@@ -282,14 +269,13 @@
         this.disableJumpControl();
     }
 
-    @Override
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
 
         if (this.jumpTicks != this.jumpDuration)
         {
-            this.jumpTicks++;
+            ++this.jumpTicks;
         }
         else if (this.jumpDuration != 0)
         {
@@ -299,12 +285,11 @@
         }
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(3.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3F);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(3.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
     }
 
     public static void registerFixesRabbit(DataFixer fixer)
@@ -312,7 +297,6 @@
         EntityLiving.registerFixesMob(fixer, EntityRabbit.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -320,7 +304,6 @@
         compound.setInteger("MoreCarrotTicks", this.carrotTicks);
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -333,25 +316,21 @@
         return SoundEvents.ENTITY_RABBIT_JUMP;
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         return SoundEvents.ENTITY_RABBIT_AMBIENT;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_RABBIT_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_RABBIT_DEATH;
     }
 
-    @Override
     public boolean attackEntityAsMob(Entity entityIn)
     {
         if (this.getRabbitType() == 99)
@@ -365,20 +344,17 @@
         }
     }
 
-    @Override
     public SoundCategory getSoundCategory()
     {
         return this.getRabbitType() == 99 ? SoundCategory.HOSTILE : SoundCategory.NEUTRAL;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         return this.isEntityInvulnerable(source) ? false : super.attackEntityFrom(source, amount);
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_RABBIT;
@@ -410,7 +386,6 @@
         return entityrabbit;
     }
 
-    @Override
     public boolean isBreedingItem(ItemStack stack)
     {
         return this.isRabbitBreedingItem(stack.getItem());
@@ -418,18 +393,18 @@
 
     public int getRabbitType()
     {
-        return this.dataManager.get(RABBIT_TYPE);
+        return ((Integer)this.dataManager.get(RABBIT_TYPE)).intValue();
     }
 
     public void setRabbitType(int rabbitTypeId)
     {
         if (rabbitTypeId == 99)
         {
-            this.getEntityAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(8.0);
+            this.getEntityAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(8.0D);
             this.tasks.addTask(4, new EntityRabbit.AIEvilAttack(this));
-            this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false));
-            this.targetTasks.addTask(2, new EntityAINearestAttackableTarget<>(this, EntityPlayer.class, true));
-            this.targetTasks.addTask(2, new EntityAINearestAttackableTarget<>(this, EntityWolf.class, true));
+            this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false, new Class[0]));
+            this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, true));
+            this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityWolf.class, true));
 
             if (!this.hasCustomName())
             {
@@ -437,11 +412,10 @@
             }
         }
 
-        this.dataManager.set(RABBIT_TYPE, rabbitTypeId);
+        this.dataManager.set(RABBIT_TYPE, Integer.valueOf(rabbitTypeId));
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
@@ -496,22 +470,11 @@
     {
         BlockCarrot blockcarrot = (BlockCarrot)Blocks.CARROTS;
         IBlockState iblockstate = blockcarrot.withAge(blockcarrot.getMaxAge());
-        this.world
-        .spawnParticle(
-            EnumParticleTypes.BLOCK_DUST,
-            this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-            this.posY + 0.5 + (double)(this.rand.nextFloat() * this.height),
-            this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-            0.0,
-            0.0,
-            0.0,
-            Block.getStateId(iblockstate)
-        );
+        this.world.spawnParticle(EnumParticleTypes.BLOCK_DUST, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, 0.0D, 0.0D, 0.0D, Block.getStateId(iblockstate));
         this.carrotTicks = 40;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void handleStatusUpdate(byte id)
     {
         if (id == 1)
@@ -536,7 +499,6 @@
                 this.rabbit = rabbit;
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 return this.rabbit.getRabbitType() != 99 && super.shouldExecute();
@@ -547,10 +509,9 @@
         {
             public AIEvilAttack(EntityRabbit rabbit)
             {
-                super(rabbit, 1.4, true);
+                super(rabbit, 1.4D, true);
             }
 
-            @Override
             protected double getAttackReachSqr(EntityLivingBase attackTarget)
             {
                 return (double)(4.0F + attackTarget.width);
@@ -567,7 +528,6 @@
                 this.rabbit = rabbit;
             }
 
-            @Override
             public void updateTask()
             {
                 super.updateTask();
@@ -583,16 +543,15 @@
 
             public AIRaidFarm(EntityRabbit rabbitIn)
             {
-                super(rabbitIn, 0.7F, 16);
+                super(rabbitIn, 0.699999988079071D, 16);
                 this.rabbit = rabbitIn;
             }
 
-            @Override
             public boolean shouldExecute()
             {
                 if (this.runDelay <= 0)
                 {
-                    if (!this.rabbit.world.getGameRules().getBoolean("mobGriefing"))
+                    if (!net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.rabbit.world, this.rabbit))
                     {
                         return false;
                     }
@@ -605,25 +564,15 @@
                 return super.shouldExecute();
             }
 
-            @Override
             public boolean shouldContinueExecuting()
             {
                 return this.canRaid && super.shouldContinueExecuting();
             }
 
-            @Override
             public void updateTask()
             {
                 super.updateTask();
-                this.rabbit
-                .getLookHelper()
-                .setLookPosition(
-                    (double)this.destinationBlock.getX() + 0.5,
-                    (double)(this.destinationBlock.getY() + 1),
-                    (double)this.destinationBlock.getZ() + 0.5,
-                    10.0F,
-                    (float)this.rabbit.getVerticalFaceSpeed()
-                );
+                this.rabbit.getLookHelper().setLookPosition((double)this.destinationBlock.getX() + 0.5D, (double)(this.destinationBlock.getY() + 1), (double)this.destinationBlock.getZ() + 0.5D, 10.0F, (float)this.rabbit.getVerticalFaceSpeed());
 
                 if (this.getIsAboveDestination())
                 {
@@ -634,16 +583,16 @@
 
                     if (this.canRaid && block instanceof BlockCarrot)
                     {
-                        Integer integer = iblockstate.getValue(BlockCarrot.AGE);
+                        Integer integer = (Integer)iblockstate.getValue(BlockCarrot.AGE);
 
-                        if (integer == 0)
+                        if (integer.intValue() == 0)
                         {
                             world.setBlockState(blockpos, Blocks.AIR.getDefaultState(), 2);
                             world.destroyBlock(blockpos, true);
                         }
                         else
                         {
-                            world.setBlockState(blockpos, iblockstate.withProperty(BlockCarrot.AGE, integer - 1), 2);
+                            world.setBlockState(blockpos, iblockstate.withProperty(BlockCarrot.AGE, Integer.valueOf(integer.intValue() - 1)), 2);
                             world.playEvent(2001, blockpos, Block.getStateId(iblockstate));
                         }
 
@@ -655,7 +604,6 @@
                 }
             }
 
-            @Override
             protected boolean shouldMoveTo(World worldIn, BlockPos pos)
             {
                 Block block = worldIn.getBlockState(pos).getBlock();
@@ -703,7 +651,6 @@
             this.canJump = canJumpIn;
         }
 
-        @Override
         public void doJump()
         {
             if (this.isJumping)
@@ -725,14 +672,11 @@
                 this.rabbit = rabbit;
             }
 
-            @Override
             public void onUpdateMoveHelper()
             {
-                if (this.rabbit.onGround
-                        && !this.rabbit.isJumping
-                        && !((EntityRabbit.RabbitJumpHelper)this.rabbit.jumpHelper).getIsJumping())
+                if (this.rabbit.onGround && !this.rabbit.isJumping && !((EntityRabbit.RabbitJumpHelper)this.rabbit.jumpHelper).getIsJumping())
                 {
-                    this.rabbit.setMovementSpeed(0.0);
+                    this.rabbit.setMovementSpeed(0.0D);
                 }
                 else if (this.isUpdating())
                 {
@@ -742,17 +686,16 @@
                 super.onUpdateMoveHelper();
             }
 
-            @Override
             public void setMoveTo(double x, double y, double z, double speedIn)
             {
                 if (this.rabbit.isInWater())
                 {
-                    speedIn = 1.5;
+                    speedIn = 1.5D;
                 }
 
                 super.setMoveTo(x, y, z, speedIn);
 
-                if (speedIn > 0.0)
+                if (speedIn > 0.0D)
                 {
                     this.nextJumpSpeed = speedIn;
                 }
