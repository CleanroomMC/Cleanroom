--- before/net/minecraft/entity/passive/EntityHorse.java
+++ after/net/minecraft/entity/passive/EntityHorse.java
@@ -32,27 +32,12 @@
 public class EntityHorse extends AbstractHorse
 {
     private static final UUID ARMOR_MODIFIER_UUID = UUID.fromString("556E1665-8B10-40C8-8F9D-CF9B1667F295");
-    private static final DataParameter<Integer> HORSE_VARIANT = EntityDataManager.createKey(EntityHorse.class, DataSerializers.VARINT);
-    private static final DataParameter<Integer> HORSE_ARMOR = EntityDataManager.createKey(EntityHorse.class, DataSerializers.VARINT);
-    private static final String[] HORSE_TEXTURES = new String[]
-        {
-            "textures/entity/horse/horse_white.png",
-            "textures/entity/horse/horse_creamy.png",
-            "textures/entity/horse/horse_chestnut.png",
-            "textures/entity/horse/horse_brown.png",
-            "textures/entity/horse/horse_black.png",
-            "textures/entity/horse/horse_gray.png",
-            "textures/entity/horse/horse_darkbrown.png"
-        };
+    private static final DataParameter<Integer> HORSE_VARIANT = EntityDataManager.<Integer>createKey(EntityHorse.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> HORSE_ARMOR = EntityDataManager.<Integer>createKey(EntityHorse.class, DataSerializers.VARINT);
+    private static final DataParameter<ItemStack> HORSE_ARMOR_STACK = EntityDataManager.<ItemStack>createKey(EntityHorse.class, DataSerializers.ITEM_STACK);
+    private static final String[] HORSE_TEXTURES = new String[] {"textures/entity/horse/horse_white.png", "textures/entity/horse/horse_creamy.png", "textures/entity/horse/horse_chestnut.png", "textures/entity/horse/horse_brown.png", "textures/entity/horse/horse_black.png", "textures/entity/horse/horse_gray.png", "textures/entity/horse/horse_darkbrown.png"};
     private static final String[] HORSE_TEXTURES_ABBR = new String[] {"hwh", "hcr", "hch", "hbr", "hbl", "hgr", "hdb"};
-    private static final String[] HORSE_MARKING_TEXTURES = new String[]
-        {
-            null,
-            "textures/entity/horse/horse_markings_white.png",
-            "textures/entity/horse/horse_markings_whitefield.png",
-            "textures/entity/horse/horse_markings_whitedots.png",
-            "textures/entity/horse/horse_markings_blackdots.png"
-        };
+    private static final String[] HORSE_MARKING_TEXTURES = new String[] {null, "textures/entity/horse/horse_markings_white.png", "textures/entity/horse/horse_markings_whitefield.png", "textures/entity/horse/horse_markings_whitedots.png", "textures/entity/horse/horse_markings_blackdots.png"};
     private static final String[] HORSE_MARKING_TEXTURES_ABBR = new String[] {"", "wo_", "wmo", "wdo", "bdo"};
     private String texturePrefix;
     private final String[] horseTexturesArray = new String[3];
@@ -62,21 +47,20 @@
         super(worldIn);
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(HORSE_VARIANT, 0);
-        this.dataManager.register(HORSE_ARMOR, HorseArmorType.NONE.getOrdinal());
+        this.dataManager.register(HORSE_VARIANT, Integer.valueOf(0));
+        this.dataManager.register(HORSE_ARMOR, Integer.valueOf(HorseArmorType.NONE.getOrdinal()));
+        this.dataManager.register(HORSE_ARMOR_STACK, ItemStack.EMPTY);
     }
 
     public static void registerFixesHorse(DataFixer fixer)
     {
         AbstractHorse.registerFixesAbstractHorse(fixer, EntityHorse.class);
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(EntityHorse.class, "ArmorItem"));
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(EntityHorse.class, new String[] {"ArmorItem"}));
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -88,7 +72,6 @@
         }
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -98,7 +81,7 @@
         {
             ItemStack itemstack = new ItemStack(compound.getCompoundTag("ArmorItem"));
 
-            if (!itemstack.isEmpty() && HorseArmorType.isHorseArmor(itemstack.getItem()))
+            if (!itemstack.isEmpty() && isArmor(itemstack))
             {
                 this.horseChest.setInventorySlotContents(1, itemstack);
             }
@@ -109,13 +92,13 @@
 
     public void setHorseVariant(int variant)
     {
-        this.dataManager.set(HORSE_VARIANT, variant);
+        this.dataManager.set(HORSE_VARIANT, Integer.valueOf(variant));
         this.resetTexturePrefix();
     }
 
     public int getHorseVariant()
     {
-        return this.dataManager.get(HORSE_VARIANT);
+        return ((Integer)this.dataManager.get(HORSE_VARIANT)).intValue();
     }
 
     private void resetTexturePrefix()
@@ -127,13 +110,14 @@
     private void setHorseTexturePaths()
     {
         int i = this.getHorseVariant();
-        int j = (i & 0xFF) % 7;
-        int k = ((i & 0xFF00) >> 8) % 5;
-        HorseArmorType horsearmortype = this.getHorseArmorType();
+        int j = (i & 255) % 7;
+        int k = ((i & 65280) >> 8) % 5;
+        ItemStack armorStack = this.dataManager.get(HORSE_ARMOR_STACK);
+        String texture = !armorStack.isEmpty() ? armorStack.getItem().getHorseArmorTexture(this, armorStack) : HorseArmorType.getByOrdinal(this.dataManager.get(HORSE_ARMOR)).getTextureName(); //If armorStack is empty, the server is vanilla so the texture should be determined the vanilla way
         this.horseTexturesArray[0] = HORSE_TEXTURES[j];
         this.horseTexturesArray[1] = HORSE_MARKING_TEXTURES[k];
-        this.horseTexturesArray[2] = horsearmortype.getTextureName();
-        this.texturePrefix = "horse/" + HORSE_TEXTURES_ABBR[j] + HORSE_MARKING_TEXTURES_ABBR[k] + horsearmortype.getHash();
+        this.horseTexturesArray[2] = texture;
+        this.texturePrefix = "horse/" + HORSE_TEXTURES_ABBR[j] + HORSE_MARKING_TEXTURES_ABBR[k] + texture;
     }
 
     @SideOnly(Side.CLIENT)
@@ -158,7 +142,6 @@
         return this.horseTexturesArray;
     }
 
-    @Override
     protected void updateHorseSlots()
     {
         super.updateHorseSlots();
@@ -168,7 +151,8 @@
     public void setHorseArmorStack(ItemStack itemStackIn)
     {
         HorseArmorType horsearmortype = HorseArmorType.getByItemStack(itemStackIn);
-        this.dataManager.set(HORSE_ARMOR, horsearmortype.getOrdinal());
+        this.dataManager.set(HORSE_ARMOR, Integer.valueOf(horsearmortype.getOrdinal()));
+        this.dataManager.set(HORSE_ARMOR_STACK, itemStackIn);
         this.resetTexturePrefix();
 
         if (!this.world.isRemote)
@@ -178,18 +162,18 @@
 
             if (i != 0)
             {
-                this.getEntityAttribute(SharedMonsterAttributes.ARMOR)
-                .applyModifier(new AttributeModifier(ARMOR_MODIFIER_UUID, "Horse armor bonus", (double)i, 0).setSaved(false));
+                this.getEntityAttribute(SharedMonsterAttributes.ARMOR).applyModifier((new AttributeModifier(ARMOR_MODIFIER_UUID, "Horse armor bonus", (double)i, 0)).setSaved(false));
             }
         }
     }
 
     public HorseArmorType getHorseArmorType()
     {
-        return HorseArmorType.getByOrdinal(this.dataManager.get(HORSE_ARMOR));
+        HorseArmorType armor = HorseArmorType.getByItemStack(this.dataManager.get(HORSE_ARMOR_STACK)); //First check the Forge armor DataParameter
+        if (armor == HorseArmorType.NONE) armor = HorseArmorType.getByOrdinal(this.dataManager.get(HORSE_ARMOR)); //If the Forge armor DataParameter returns NONE, fallback to the vanilla armor DataParameter. This is necessary to prevent issues with Forge clients connected to vanilla servers.
+        return armor;
     }
 
-    @Override
     public void onInventoryChanged(IInventory invBasic)
     {
         HorseArmorType horsearmortype = this.getHorseArmorType();
@@ -202,7 +186,6 @@
         }
     }
 
-    @Override
     protected void playGallopSound(SoundType p_190680_1_)
     {
         super.playGallopSound(p_190680_1_);
@@ -213,7 +196,6 @@
         }
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
@@ -222,7 +204,6 @@
         this.getEntityAttribute(JUMP_STRENGTH).setBaseValue(this.getModifiedJumpStrength());
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
@@ -232,43 +213,39 @@
             this.dataManager.setClean();
             this.resetTexturePrefix();
         }
+        ItemStack armor = this.horseChest.getStackInSlot(1);
+        if (isArmor(armor)) armor.getItem().onHorseArmorTick(world, this, armor);
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         super.getAmbientSound();
         return SoundEvents.ENTITY_HORSE_AMBIENT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         super.getDeathSound();
         return SoundEvents.ENTITY_HORSE_DEATH;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         super.getHurtSound(damageSourceIn);
         return SoundEvents.ENTITY_HORSE_HURT;
     }
 
-    @Override
     protected SoundEvent getAngrySound()
     {
         super.getAngrySound();
         return SoundEvents.ENTITY_HORSE_ANGRY;
     }
 
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_HORSE;
     }
 
-    @Override
     public boolean processInteract(EntityPlayer player, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
@@ -339,22 +316,22 @@
         }
     }
 
-    @Override
     public boolean canMateWith(EntityAnimal otherAnimal)
     {
         if (otherAnimal == this)
         {
             return false;
         }
+        else if (!(otherAnimal instanceof EntityDonkey) && !(otherAnimal instanceof EntityHorse))
+        {
+            return false;
+        }
         else
         {
-            return !(otherAnimal instanceof EntityDonkey) && !(otherAnimal instanceof EntityHorse)
-                   ? false
-                   : this.canMate() && ((AbstractHorse)otherAnimal).canMate();
+            return this.canMate() && ((AbstractHorse)otherAnimal).canMate();
         }
     }
 
-    @Override
     public EntityAgeable createChild(EntityAgeable ageable)
     {
         AbstractHorse abstracthorse;
@@ -372,11 +349,11 @@
 
             if (j < 4)
             {
-                i = this.getHorseVariant() & 0xFF;
+                i = this.getHorseVariant() & 255;
             }
             else if (j < 8)
             {
-                i = entityhorse.getHorseVariant() & 0xFF;
+                i = entityhorse.getHorseVariant() & 255;
             }
             else
             {
@@ -387,15 +364,15 @@
 
             if (k < 2)
             {
-                i |= this.getHorseVariant() & 0xFF00;
+                i = i | this.getHorseVariant() & 65280;
             }
             else if (k < 4)
             {
-                i |= entityhorse.getHorseVariant() & 0xFF00;
+                i = i | entityhorse.getHorseVariant() & 65280;
             }
             else
             {
-                i |= this.rand.nextInt(5) << 8 & 0xFF00;
+                i = i | this.rand.nextInt(5) << 8 & 65280;
             }
 
             ((EntityHorse)abstracthorse).setHorseVariant(i);
@@ -405,20 +382,17 @@
         return abstracthorse;
     }
 
-    @Override
     public boolean wearsArmor()
     {
         return true;
     }
 
-    @Override
     public boolean isArmor(ItemStack stack)
     {
-        return HorseArmorType.isHorseArmor(stack.getItem());
+        return HorseArmorType.isHorseArmor(stack);
     }
 
     @Nullable
-    @Override
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
         livingdata = super.onInitialSpawn(difficulty, livingdata);
