--- before/net/minecraft/entity/passive/EntityWolf.java
+++ after/net/minecraft/entity/passive/EntityWolf.java
@@ -54,9 +54,9 @@
 
 public class EntityWolf extends EntityTameable
 {
-    private static final DataParameter<Float> DATA_HEALTH_ID = EntityDataManager.createKey(EntityWolf.class, DataSerializers.FLOAT);
-    private static final DataParameter<Boolean> BEGGING = EntityDataManager.createKey(EntityWolf.class, DataSerializers.BOOLEAN);
-    private static final DataParameter<Integer> COLLAR_COLOR = EntityDataManager.createKey(EntityWolf.class, DataSerializers.VARINT);
+    private static final DataParameter<Float> DATA_HEALTH_ID = EntityDataManager.<Float>createKey(EntityWolf.class, DataSerializers.FLOAT);
+    private static final DataParameter<Boolean> BEGGING = EntityDataManager.<Boolean>createKey(EntityWolf.class, DataSerializers.BOOLEAN);
+    private static final DataParameter<Integer> COLLAR_COLOR = EntityDataManager.<Integer>createKey(EntityWolf.class, DataSerializers.VARINT);
     private float headRotationCourse;
     private float headRotationCourseOld;
     private boolean isWet;
@@ -71,53 +71,50 @@
         this.setTamed(false);
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.aiSit = new EntityAISit(this);
         this.tasks.addTask(1, new EntityAISwimming(this));
         this.tasks.addTask(2, this.aiSit);
-        this.tasks.addTask(3, new EntityWolf.AIAvoidEntity<>(this, EntityLlama.class, 24.0F, 1.5, 1.5));
+        this.tasks.addTask(3, new EntityWolf.AIAvoidEntity(this, EntityLlama.class, 24.0F, 1.5D, 1.5D));
         this.tasks.addTask(4, new EntityAILeapAtTarget(this, 0.4F));
-        this.tasks.addTask(5, new EntityAIAttackMelee(this, 1.0, true));
-        this.tasks.addTask(6, new EntityAIFollowOwner(this, 1.0, 10.0F, 2.0F));
-        this.tasks.addTask(7, new EntityAIMate(this, 1.0));
-        this.tasks.addTask(8, new EntityAIWanderAvoidWater(this, 1.0));
+        this.tasks.addTask(5, new EntityAIAttackMelee(this, 1.0D, true));
+        this.tasks.addTask(6, new EntityAIFollowOwner(this, 1.0D, 10.0F, 2.0F));
+        this.tasks.addTask(7, new EntityAIMate(this, 1.0D));
+        this.tasks.addTask(8, new EntityAIWanderAvoidWater(this, 1.0D));
         this.tasks.addTask(9, new EntityAIBeg(this, 8.0F));
         this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
         this.tasks.addTask(10, new EntityAILookIdle(this));
         this.targetTasks.addTask(1, new EntityAIOwnerHurtByTarget(this));
         this.targetTasks.addTask(2, new EntityAIOwnerHurtTarget(this));
-        this.targetTasks.addTask(3, new EntityAIHurtByTarget(this, true));
-        this.targetTasks.addTask(4, new EntityAITargetNonTamed<>(this, EntityAnimal.class, false, new Predicate<Entity>()
+        this.targetTasks.addTask(3, new EntityAIHurtByTarget(this, true, new Class[0]));
+        this.targetTasks.addTask(4, new EntityAITargetNonTamed(this, EntityAnimal.class, false, new Predicate<Entity>()
         {
             public boolean apply(@Nullable Entity p_apply_1_)
             {
                 return p_apply_1_ instanceof EntitySheep || p_apply_1_ instanceof EntityRabbit;
             }
         }));
-        this.targetTasks.addTask(5, new EntityAINearestAttackableTarget<>(this, AbstractSkeleton.class, false));
+        this.targetTasks.addTask(5, new EntityAINearestAttackableTarget(this, AbstractSkeleton.class, false));
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.3F);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.30000001192092896D);
 
         if (this.isTamed())
         {
-            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0);
+            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0D);
         }
         else
         {
-            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0);
+            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0D);
         }
 
-        this.getAttributeMap().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(2.0);
+        this.getAttributeMap().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(2.0D);
     }
 
-    @Override
     public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn)
     {
         super.setAttackTarget(entitylivingbaseIn);
@@ -132,22 +129,19 @@
         }
     }
 
-    @Override
     protected void updateAITasks()
     {
-        this.dataManager.set(DATA_HEALTH_ID, this.getHealth());
+        this.dataManager.set(DATA_HEALTH_ID, Float.valueOf(this.getHealth()));
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(DATA_HEALTH_ID, this.getHealth());
-        this.dataManager.register(BEGGING, false);
-        this.dataManager.register(COLLAR_COLOR, EnumDyeColor.RED.getDyeDamage());
+        this.dataManager.register(DATA_HEALTH_ID, Float.valueOf(this.getHealth()));
+        this.dataManager.register(BEGGING, Boolean.valueOf(false));
+        this.dataManager.register(COLLAR_COLOR, Integer.valueOf(EnumDyeColor.RED.getDyeDamage()));
     }
 
-    @Override
     protected void playStepSound(BlockPos pos, Block blockIn)
     {
         this.playSound(SoundEvents.ENTITY_WOLF_STEP, 0.15F, 1.0F);
@@ -158,7 +152,6 @@
         EntityLiving.registerFixesMob(fixer, EntityWolf.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -166,7 +159,6 @@
         compound.setByte("CollarColor", (byte)this.getCollarColor().getDyeDamage());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -178,7 +170,6 @@
         }
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         if (this.isAngry())
@@ -187,7 +178,7 @@
         }
         else if (this.rand.nextInt(3) == 0)
         {
-            return this.isTamed() && this.dataManager.get(DATA_HEALTH_ID) < 10.0F ? SoundEvents.ENTITY_WOLF_WHINE : SoundEvents.ENTITY_WOLF_PANT;
+            return this.isTamed() && ((Float)this.dataManager.get(DATA_HEALTH_ID)).floatValue() < 10.0F ? SoundEvents.ENTITY_WOLF_WHINE : SoundEvents.ENTITY_WOLF_PANT;
         }
         else
         {
@@ -195,32 +186,27 @@
         }
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_WOLF_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_WOLF_DEATH;
     }
 
-    @Override
     protected float getSoundVolume()
     {
         return 0.4F;
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_WOLF;
     }
 
-    @Override
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
@@ -239,7 +225,6 @@
         }
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
@@ -247,11 +232,11 @@
 
         if (this.isBegging())
         {
-            this.headRotationCourse = this.headRotationCourse + (1.0F - this.headRotationCourse) * 0.4F;
+            this.headRotationCourse += (1.0F - this.headRotationCourse) * 0.4F;
         }
         else
         {
-            this.headRotationCourse = this.headRotationCourse + (0.0F - this.headRotationCourse) * 0.4F;
+            this.headRotationCourse += (0.0F - this.headRotationCourse) * 0.4F;
         }
 
         if (this.isWet())
@@ -265,9 +250,7 @@
         {
             if (this.timeWolfIsShaking == 0.0F)
             {
-                this.playSound(
-                    SoundEvents.ENTITY_WOLF_SHAKE, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F
-                );
+                this.playSound(SoundEvents.ENTITY_WOLF_SHAKE, this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
             }
 
             this.prevTimeWolfIsShaking = this.timeWolfIsShaking;
@@ -284,22 +267,13 @@
             if (this.timeWolfIsShaking > 0.4F)
             {
                 float f = (float)this.getEntityBoundingBox().minY;
-                int i = (int)(MathHelper.sin((this.timeWolfIsShaking - 0.4F) * (float) Math.PI) * 7.0F);
+                int i = (int)(MathHelper.sin((this.timeWolfIsShaking - 0.4F) * (float)Math.PI) * 7.0F);
 
-                for (int j = 0; j < i; j++)
+                for (int j = 0; j < i; ++j)
                 {
                     float f1 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
                     float f2 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
-                    this.world
-                    .spawnParticle(
-                        EnumParticleTypes.WATER_SPLASH,
-                        this.posX + (double)f1,
-                        (double)(f + 0.8F),
-                        this.posZ + (double)f2,
-                        this.motionX,
-                        this.motionY,
-                        this.motionZ
-                    );
+                    this.world.spawnParticle(EnumParticleTypes.WATER_SPLASH, this.posX + (double)f1, (double)(f + 0.8F), this.posZ + (double)f2, this.motionX, this.motionY, this.motionZ);
                 }
             }
         }
@@ -331,28 +305,25 @@
             f = 1.0F;
         }
 
-        return MathHelper.sin(f * (float) Math.PI) * MathHelper.sin(f * (float) Math.PI * 11.0F) * 0.15F * (float) Math.PI;
+        return MathHelper.sin(f * (float)Math.PI) * MathHelper.sin(f * (float)Math.PI * 11.0F) * 0.15F * (float)Math.PI;
     }
 
     @SideOnly(Side.CLIENT)
     public float getInterestedAngle(float p_70917_1_)
     {
-        return (this.headRotationCourseOld + (this.headRotationCourse - this.headRotationCourseOld) * p_70917_1_) * 0.15F * (float) Math.PI;
+        return (this.headRotationCourseOld + (this.headRotationCourse - this.headRotationCourseOld) * p_70917_1_) * 0.15F * (float)Math.PI;
     }
 
-    @Override
     public float getEyeHeight()
     {
         return this.height * 0.8F;
     }
 
-    @Override
     public int getVerticalFaceSpeed()
     {
         return this.isSitting() ? 20 : super.getVerticalFaceSpeed();
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -377,12 +348,9 @@
         }
     }
 
-    @Override
     public boolean attackEntityAsMob(Entity entityIn)
     {
-        boolean flag = entityIn.attackEntityFrom(
-                           DamageSource.causeMobDamage(this), (float)((int)this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue())
-                       );
+        boolean flag = entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), (float)((int)this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue()));
 
         if (flag)
         {
@@ -392,24 +360,22 @@
         return flag;
     }
 
-    @Override
     public void setTamed(boolean tamed)
     {
         super.setTamed(tamed);
 
         if (tamed)
         {
-            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0);
+            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0D);
         }
         else
         {
-            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0);
+            this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(8.0D);
         }
 
-        this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(4.0);
+        this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(4.0D);
     }
 
-    @Override
     public boolean processInteract(EntityPlayer player, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
@@ -422,7 +388,7 @@
                 {
                     ItemFood itemfood = (ItemFood)itemstack.getItem();
 
-                    if (itemfood.isWolfsFavoriteMeat() && this.dataManager.get(DATA_HEALTH_ID) < 20.0F)
+                    if (itemfood.isWolfsFavoriteMeat() && ((Float)this.dataManager.get(DATA_HEALTH_ID)).floatValue() < 20.0F)
                     {
                         if (!player.capabilities.isCreativeMode)
                         {
@@ -456,7 +422,7 @@
                 this.aiSit.setSitting(!this.isSitting());
                 this.isJumping = false;
                 this.navigator.clearPath();
-                this.setAttackTarget(null);
+                this.setAttackTarget((EntityLivingBase)null);
             }
         }
         else if (itemstack.getItem() == Items.BONE && !this.isAngry())
@@ -468,11 +434,11 @@
 
             if (!this.world.isRemote)
             {
-                if (this.rand.nextInt(3) == 0)
+                if (this.rand.nextInt(3) == 0 && !net.minecraftforge.event.ForgeEventFactory.onAnimalTame(this, player))
                 {
                     this.setTamedBy(player);
                     this.navigator.clearPath();
-                    this.setAttackTarget(null);
+                    this.setAttackTarget((EntityLivingBase)null);
                     this.aiSit.setSitting(true);
                     this.setHealth(20.0F);
                     this.playTameEffect(true);
@@ -492,7 +458,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void handleStatusUpdate(byte id)
     {
         if (id == 8)
@@ -516,19 +481,15 @@
         }
         else
         {
-            return this.isTamed()
-                   ? (0.55F - (this.getMaxHealth() - this.dataManager.get(DATA_HEALTH_ID)) * 0.02F) * (float) Math.PI
-                   : (float)(Math.PI / 5);
+            return this.isTamed() ? (0.55F - (this.getMaxHealth() - ((Float)this.dataManager.get(DATA_HEALTH_ID)).floatValue()) * 0.02F) * (float)Math.PI : ((float)Math.PI / 5F);
         }
     }
 
-    @Override
     public boolean isBreedingItem(ItemStack stack)
     {
         return stack.getItem() instanceof ItemFood && ((ItemFood)stack.getItem()).isWolfsFavoriteMeat();
     }
 
-    @Override
     public int getMaxSpawnedInChunk()
     {
         return 8;
@@ -536,31 +497,31 @@
 
     public boolean isAngry()
     {
-        return (this.dataManager.get(TAMED) & 2) != 0;
+        return (((Byte)this.dataManager.get(TAMED)).byteValue() & 2) != 0;
     }
 
     public void setAngry(boolean angry)
     {
-        byte b0 = this.dataManager.get(TAMED);
+        byte b0 = ((Byte)this.dataManager.get(TAMED)).byteValue();
 
         if (angry)
         {
-            this.dataManager.set(TAMED, (byte)(b0 | 2));
+            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 | 2)));
         }
         else
         {
-            this.dataManager.set(TAMED, (byte)(b0 & -3));
+            this.dataManager.set(TAMED, Byte.valueOf((byte)(b0 & -3)));
         }
     }
 
     public EnumDyeColor getCollarColor()
     {
-        return EnumDyeColor.byDyeDamage(this.dataManager.get(COLLAR_COLOR) & 15);
+        return EnumDyeColor.byDyeDamage(((Integer)this.dataManager.get(COLLAR_COLOR)).intValue() & 15);
     }
 
     public void setCollarColor(EnumDyeColor collarcolor)
     {
-        this.dataManager.set(COLLAR_COLOR, collarcolor.getDyeDamage());
+        this.dataManager.set(COLLAR_COLOR, Integer.valueOf(collarcolor.getDyeDamage()));
     }
 
     public EntityWolf createChild(EntityAgeable ageable)
@@ -579,10 +540,9 @@
 
     public void setBegging(boolean beg)
     {
-        this.dataManager.set(BEGGING, beg);
+        this.dataManager.set(BEGGING, Boolean.valueOf(beg));
     }
 
-    @Override
     public boolean canMateWith(EntityAnimal otherAnimal)
     {
         if (otherAnimal == this)
@@ -605,19 +565,22 @@
             {
                 return false;
             }
+            else if (entitywolf.isSitting())
+            {
+                return false;
+            }
             else
             {
-                return entitywolf.isSitting() ? false : this.isInLove() && entitywolf.isInLove();
+                return this.isInLove() && entitywolf.isInLove();
             }
         }
     }
 
     public boolean isBegging()
     {
-        return this.dataManager.get(BEGGING);
+        return ((Boolean)this.dataManager.get(BEGGING)).booleanValue();
     }
 
-    @Override
     public boolean shouldAttackEntity(EntityLivingBase target, EntityLivingBase owner)
     {
         if (!(target instanceof EntityCreeper) && !(target instanceof EntityGhast))
@@ -632,11 +595,14 @@
                 }
             }
 
-            return target instanceof EntityPlayer
-                   && owner instanceof EntityPlayer
-                   && !((EntityPlayer)owner).canAttackPlayer((EntityPlayer)target)
-                   ? false
-                   : !(target instanceof AbstractHorse) || !((AbstractHorse)target).isTame();
+            if (target instanceof EntityPlayer && owner instanceof EntityPlayer && !((EntityPlayer)owner).canAttackPlayer((EntityPlayer)target))
+            {
+                return false;
+            }
+            else
+            {
+                return !(target instanceof AbstractHorse) || !((AbstractHorse)target).isTame();
+            }
         }
         else
         {
@@ -644,7 +610,6 @@
         }
     }
 
-    @Override
     public boolean canBeLeashedTo(EntityPlayer player)
     {
         return !this.isAngry() && super.canBeLeashedTo(player);
@@ -660,12 +625,16 @@
             this.wolf = wolfIn;
         }
 
-        @Override
         public boolean shouldExecute()
         {
-            return super.shouldExecute() && this.closestLivingEntity instanceof EntityLlama
-                   ? !this.wolf.isTamed() && this.avoidLlama((EntityLlama)this.closestLivingEntity)
-                   : false;
+            if (super.shouldExecute() && this.closestLivingEntity instanceof EntityLlama)
+            {
+                return !this.wolf.isTamed() && this.avoidLlama((EntityLlama)this.closestLivingEntity);
+            }
+            else
+            {
+                return false;
+            }
         }
 
         private boolean avoidLlama(EntityLlama p_190854_1_)
@@ -673,17 +642,15 @@
             return p_190854_1_.getStrength() >= EntityWolf.this.rand.nextInt(5);
         }
 
-        @Override
         public void startExecuting()
         {
-            EntityWolf.this.setAttackTarget(null);
+            EntityWolf.this.setAttackTarget((EntityLivingBase)null);
             super.startExecuting();
         }
 
-        @Override
         public void updateTask()
         {
-            EntityWolf.this.setAttackTarget(null);
+            EntityWolf.this.setAttackTarget((EntityLivingBase)null);
             super.updateTask();
         }
     }
