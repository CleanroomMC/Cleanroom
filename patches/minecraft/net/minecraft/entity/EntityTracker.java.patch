--- before/net/minecraft/entity/EntityTracker.java
+++ after/net/minecraft/entity/EntityTracker.java
@@ -52,8 +52,8 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer world;
-    private final Set<EntityTrackerEntry> entries = Sets.newHashSet();
-    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<>();
+    private final Set<EntityTrackerEntry> entries = Sets.<EntityTrackerEntry>newHashSet();
+    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
     private int maxTrackingDistanceThreshold;
 
     public EntityTracker(WorldServer theWorldIn)
@@ -64,7 +64,7 @@
 
     public static long getPositionLong(double value)
     {
-        return MathHelper.lfloor(value * 4096.0);
+        return MathHelper.lfloor(value * 4096.0D);
     }
 
     @SideOnly(Side.CLIENT)
@@ -77,6 +77,8 @@
 
     public void track(Entity entityIn)
     {
+        if (net.minecraftforge.fml.common.registry.EntityRegistry.instance().tryTrackingEntity(this, entityIn)) return;
+
         if (entityIn instanceof EntityPlayerMP)
         {
             this.track(entityIn, 512, 2);
@@ -247,7 +249,7 @@
                 }
             });
             entityIn.addEntityCrashInfo(crashreportcategory);
-            this.trackedEntityHashTable.lookup(entityIn.getEntityId()).getTrackedEntity().addEntityCrashInfo(crashreport.makeCategory("Entity That Is Already Tracked"));
+            ((EntityTrackerEntry)this.trackedEntityHashTable.lookup(entityIn.getEntityId())).getTrackedEntity().addEntityCrashInfo(crashreport.makeCategory("Entity That Is Already Tracked"));
 
             try
             {
@@ -283,7 +285,7 @@
 
     public void tick()
     {
-        List<EntityPlayerMP> list = Lists.newArrayList();
+        List<EntityPlayerMP> list = Lists.<EntityPlayerMP>newArrayList();
 
         for (EntityTrackerEntry entitytrackerentry : this.entries)
         {
@@ -300,7 +302,7 @@
             }
         }
 
-        for (int i = 0; i < list.size(); i++)
+        for (int i = 0; i < list.size(); ++i)
         {
             EntityPlayerMP entityplayermp = list.get(i);
 
@@ -339,6 +341,25 @@
         }
     }
 
+    /* ======================================== FORGE START =====================================*/
+
+    // don't expose the EntityTrackerEntry directly so mods can't mess with the data in there as easily
+    /**
+     * Get all players tracking the given Entity. The Entity must be part of the World that this Tracker belongs to.
+     * @param entity the Entity
+     * @return all players tracking the Entity
+     */
+    public Set<? extends net.minecraft.entity.player.EntityPlayer> getTrackingPlayers(Entity entity)
+    {
+        EntityTrackerEntry entry = (EntityTrackerEntry) trackedEntityHashTable.lookup(entity.getEntityId());
+        if (entry == null)
+            return java.util.Collections.emptySet();
+        else
+            return java.util.Collections.unmodifiableSet(entry.trackingPlayers);
+    }
+
+    /* ======================================== FORGE END   =====================================*/
+
     public void sendToTrackingAndSelf(Entity entityIn, Packet<?> packetIn)
     {
         EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
@@ -359,8 +380,8 @@
 
     public void sendLeashedEntitiesInChunk(EntityPlayerMP player, Chunk chunkIn)
     {
-        List<Entity> list = Lists.newArrayList();
-        List<Entity> list1 = Lists.newArrayList();
+        List<Entity> list = Lists.<Entity>newArrayList();
+        List<Entity> list1 = Lists.<Entity>newArrayList();
 
         for (EntityTrackerEntry entitytrackerentry : this.entries)
         {
