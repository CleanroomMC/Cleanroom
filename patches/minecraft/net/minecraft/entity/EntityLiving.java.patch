--- before/net/minecraft/entity/EntityLiving.java
+++ after/net/minecraft/entity/EntityLiving.java
@@ -60,7 +60,7 @@
 
 public abstract class EntityLiving extends EntityLivingBase
 {
-    private static final DataParameter<Byte> AI_FLAGS = EntityDataManager.createKey(EntityLiving.class, DataSerializers.BYTE);
+    private static final DataParameter<Byte> AI_FLAGS = EntityDataManager.<Byte>createKey(EntityLiving.class, DataSerializers.BYTE);
     public int livingSoundTime;
     protected int experienceValue;
     private final EntityLookHelper lookHelper;
@@ -72,9 +72,9 @@
     public final EntityAITasks targetTasks;
     private EntityLivingBase attackTarget;
     private final EntitySenses senses;
-    private final NonNullList<ItemStack> inventoryHands = NonNullList.withSize(2, ItemStack.EMPTY);
+    private final NonNullList<ItemStack> inventoryHands = NonNullList.<ItemStack>withSize(2, ItemStack.EMPTY);
     protected float[] inventoryHandsDropChances = new float[2];
-    private final NonNullList<ItemStack> inventoryArmor = NonNullList.withSize(4, ItemStack.EMPTY);
+    private final NonNullList<ItemStack> inventoryArmor = NonNullList.<ItemStack>withSize(4, ItemStack.EMPTY);
     protected float[] inventoryArmorDropChances = new float[4];
     private boolean canPickUpLoot;
     private boolean persistenceRequired;
@@ -109,11 +109,10 @@
     {
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getAttributeMap().registerAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(16.0);
+        this.getAttributeMap().registerAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(16.0D);
     }
 
     protected PathNavigate createNavigator(World worldIn)
@@ -124,12 +123,12 @@
     public float getPathPriority(PathNodeType nodeType)
     {
         Float f = this.mapPathPriority.get(nodeType);
-        return f == null ? nodeType.getPriority() : f;
+        return f == null ? nodeType.getPriority() : f.floatValue();
     }
 
     public void setPathPriority(PathNodeType nodeType, float priority)
     {
-        this.mapPathPriority.put(nodeType, priority);
+        this.mapPathPriority.put(nodeType, Float.valueOf(priority));
     }
 
     protected EntityBodyHelper createBodyHelper()
@@ -171,6 +170,7 @@
     public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn)
     {
         this.attackTarget = entitylivingbaseIn;
+        net.minecraftforge.common.ForgeHooks.onLivingSetAttackTarget(this, entitylivingbaseIn);
     }
 
     public boolean canAttackClass(Class <? extends EntityLivingBase > cls)
@@ -182,11 +182,10 @@
     {
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(AI_FLAGS, (byte)0);
+        this.dataManager.register(AI_FLAGS, Byte.valueOf((byte)0));
     }
 
     public int getTalkInterval()
@@ -204,7 +203,6 @@
         }
     }
 
-    @Override
     public void onEntityUpdate()
     {
         super.onEntityUpdate();
@@ -219,7 +217,6 @@
         this.world.profiler.endSection();
     }
 
-    @Override
     protected void playHurtSound(DamageSource source)
     {
         this.applyEntityAI();
@@ -231,24 +228,23 @@
         this.livingSoundTime = -this.getTalkInterval();
     }
 
-    @Override
     protected int getExperiencePoints(EntityPlayer player)
     {
         if (this.experienceValue > 0)
         {
             int i = this.experienceValue;
 
-            for (int j = 0; j < this.inventoryArmor.size(); j++)
+            for (int j = 0; j < this.inventoryArmor.size(); ++j)
             {
-                if (!this.inventoryArmor.get(j).isEmpty() && this.inventoryArmorDropChances[j] <= 1.0F)
+                if (!((ItemStack)this.inventoryArmor.get(j)).isEmpty() && this.inventoryArmorDropChances[j] <= 1.0F)
                 {
                     i += 1 + this.rand.nextInt(3);
                 }
             }
 
-            for (int k = 0; k < this.inventoryHands.size(); k++)
+            for (int k = 0; k < this.inventoryHands.size(); ++k)
             {
-                if (!this.inventoryHands.get(k).isEmpty() && this.inventoryHandsDropChances[k] <= 1.0F)
+                if (!((ItemStack)this.inventoryHands.get(k)).isEmpty() && this.inventoryHandsDropChances[k] <= 1.0F)
                 {
                     i += 1 + this.rand.nextInt(3);
                 }
@@ -266,22 +262,13 @@
     {
         if (this.world.isRemote)
         {
-            for (int i = 0; i < 20; i++)
+            for (int i = 0; i < 20; ++i)
             {
-                double d0 = this.rand.nextGaussian() * 0.02;
-                double d1 = this.rand.nextGaussian() * 0.02;
-                double d2 = this.rand.nextGaussian() * 0.02;
-                double d3 = 10.0;
-                this.world
-                .spawnParticle(
-                    EnumParticleTypes.EXPLOSION_NORMAL,
-                    this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d0 * 10.0,
-                    this.posY + (double)(this.rand.nextFloat() * this.height) - d1 * 10.0,
-                    this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d2 * 10.0,
-                    d0,
-                    d1,
-                    d2
-                );
+                double d0 = this.rand.nextGaussian() * 0.02D;
+                double d1 = this.rand.nextGaussian() * 0.02D;
+                double d2 = this.rand.nextGaussian() * 0.02D;
+                double d3 = 10.0D;
+                this.world.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d0 * 10.0D, this.posY + (double)(this.rand.nextFloat() * this.height) - d1 * 10.0D, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d2 * 10.0D, d0, d1, d2);
             }
         }
         else
@@ -291,7 +278,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void handleStatusUpdate(byte id)
     {
         if (id == 20)
@@ -304,7 +290,6 @@
         }
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
@@ -324,7 +309,6 @@
         }
     }
 
-    @Override
     protected float updateDistance(float p_110146_1_, float p_110146_2_)
     {
         this.bodyHelper.updateRenderAngles();
@@ -343,7 +327,6 @@
         return null;
     }
 
-    @Override
     protected void dropFewItems(boolean wasRecentlyHit, int lootingModifier)
     {
         Item item = this.getDropItem();
@@ -357,7 +340,7 @@
                 i += this.rand.nextInt(lootingModifier + 1);
             }
 
-            for (int j = 0; j < i; j++)
+            for (int j = 0; j < i; ++j)
             {
                 this.dropItem(item, 1);
             }
@@ -366,10 +349,9 @@
 
     public static void registerFixesMob(DataFixer fixer, Class<?> name)
     {
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(name, "ArmorItems", "HandItems"));
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(name, new String[] {"ArmorItems", "HandItems"}));
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -461,7 +443,6 @@
         }
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -477,7 +458,7 @@
         {
             NBTTagList nbttaglist = compound.getTagList("ArmorItems", 10);
 
-            for (int i = 0; i < this.inventoryArmor.size(); i++)
+            for (int i = 0; i < this.inventoryArmor.size(); ++i)
             {
                 this.inventoryArmor.set(i, new ItemStack(nbttaglist.getCompoundTagAt(i)));
             }
@@ -487,7 +468,7 @@
         {
             NBTTagList nbttaglist1 = compound.getTagList("HandItems", 10);
 
-            for (int j = 0; j < this.inventoryHands.size(); j++)
+            for (int j = 0; j < this.inventoryHands.size(); ++j)
             {
                 this.inventoryHands.set(j, new ItemStack(nbttaglist1.getCompoundTagAt(j)));
             }
@@ -497,7 +478,7 @@
         {
             NBTTagList nbttaglist2 = compound.getTagList("ArmorDropChances", 5);
 
-            for (int k = 0; k < nbttaglist2.tagCount(); k++)
+            for (int k = 0; k < nbttaglist2.tagCount(); ++k)
             {
                 this.inventoryArmorDropChances[k] = nbttaglist2.getFloatAt(k);
             }
@@ -507,7 +488,7 @@
         {
             NBTTagList nbttaglist3 = compound.getTagList("HandDropChances", 5);
 
-            for (int l = 0; l < nbttaglist3.tagCount(); l++)
+            for (int l = 0; l < nbttaglist3.tagCount(); ++l)
             {
                 this.inventoryHandsDropChances[l] = nbttaglist3.getFloatAt(l);
             }
@@ -537,7 +518,6 @@
         return null;
     }
 
-    @Override
     protected void dropLoot(boolean wasRecentlyHit, int lootingModifier, DamageSource source)
     {
         ResourceLocation resourcelocation = this.deathLootTable;
@@ -551,16 +531,14 @@
         {
             LootTable loottable = this.world.getLootTableManager().getLootTableFromLocation(resourcelocation);
             this.deathLootTable = null;
-            LootContext.Builder lootcontext$builder = new LootContext.Builder((WorldServer)this.world).withLootedEntity(this).withDamageSource(source);
+            LootContext.Builder lootcontext$builder = (new LootContext.Builder((WorldServer)this.world)).withLootedEntity(this).withDamageSource(source);
 
             if (wasRecentlyHit && this.attackingPlayer != null)
             {
                 lootcontext$builder = lootcontext$builder.withPlayer(this.attackingPlayer).withLuck(this.attackingPlayer.getLuck());
             }
 
-            for (ItemStack itemstack : loottable.generateLootForPools(
-                        this.deathLootTableSeed == 0L ? this.rand : new Random(this.deathLootTableSeed), lootcontext$builder.build()
-                    ))
+            for (ItemStack itemstack : loottable.generateLootForPools(this.deathLootTableSeed == 0L ? this.rand : new Random(this.deathLootTableSeed), lootcontext$builder.build()))
             {
                 this.entityDropItem(itemstack, 0.0F);
             }
@@ -588,22 +566,20 @@
         this.moveStrafing = amount;
     }
 
-    @Override
     public void setAIMoveSpeed(float speedIn)
     {
         super.setAIMoveSpeed(speedIn);
         this.setMoveForward(speedIn);
     }
 
-    @Override
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
         this.world.profiler.startSection("looting");
 
-        if (!this.world.isRemote && this.canPickUpLoot() && !this.dead && this.world.getGameRules().getBoolean("mobGriefing"))
+        if (!this.world.isRemote && this.canPickUpLoot() && !this.dead && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this))
         {
-            for (EntityItem entityitem : this.world.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().grow(1.0, 0.0, 1.0)))
+            for (EntityItem entityitem : this.world.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().grow(1.0D, 0.0D, 1.0D)))
             {
                 if (!entityitem.isDead && !entityitem.getItem().isEmpty() && !entityitem.cannotPickup())
                 {
@@ -657,9 +633,7 @@
             {
                 flag = true;
             }
-            else if (itemstack.getItem() instanceof ItemArmor
-                     && itemstack1.getItem() instanceof ItemArmor
-                     && !EnchantmentHelper.hasBindingCurse(itemstack1))
+            else if (itemstack.getItem() instanceof ItemArmor && itemstack1.getItem() instanceof ItemArmor && !EnchantmentHelper.hasBindingCurse(itemstack1))
             {
                 ItemArmor itemarmor = (ItemArmor)itemstack.getItem();
                 ItemArmor itemarmor1 = (ItemArmor)itemstack1.getItem();
@@ -692,7 +666,7 @@
                     d0 = (double)this.inventoryArmorDropChances[entityequipmentslot.getIndex()];
                     break;
                 default:
-                    d0 = 0.0;
+                    d0 = 0.0D;
             }
 
             if (!itemstack1.isEmpty() && (double)(this.rand.nextFloat() - 0.1F) < d0)
@@ -729,13 +703,25 @@
 
     protected void despawnEntity()
     {
+        net.minecraftforge.fml.common.eventhandler.Event.Result result = null;
         if (this.persistenceRequired)
         {
             this.idleTime = 0;
         }
+        else if ((this.idleTime & 0x1F) == 0x1F && (result = net.minecraftforge.event.ForgeEventFactory.canEntityDespawn(this)) != net.minecraftforge.fml.common.eventhandler.Event.Result.DEFAULT)
+        {
+            if (result == net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
+            {
+                this.idleTime = 0;
+            }
+            else
+            {
+                this.setDead();
+            }
+        }
         else
         {
-            Entity entity = this.world.getClosestPlayerToEntity(this, -1.0);
+            Entity entity = this.world.getClosestPlayerToEntity(this, -1.0D);
 
             if (entity != null)
             {
@@ -744,16 +730,16 @@
                 double d2 = entity.posZ - this.posZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (this.canDespawn() && d3 > 16384.0)
+                if (this.canDespawn() && d3 > 16384.0D)
                 {
                     this.setDead();
                 }
 
-                if (this.idleTime > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0 && this.canDespawn())
+                if (this.idleTime > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D && this.canDespawn())
                 {
                     this.setDead();
                 }
-                else if (d3 < 1024.0)
+                else if (d3 < 1024.0D)
                 {
                     this.idleTime = 0;
                 }
@@ -761,10 +747,9 @@
         }
     }
 
-    @Override
     protected final void updateEntityActionState()
     {
-        this.idleTime++;
+        ++this.idleTime;
         this.world.profiler.startSection("checkDespawn");
         this.despawnEntity();
         this.world.profiler.endSection();
@@ -787,7 +772,7 @@
         if (this.isRiding() && this.getRidingEntity() instanceof EntityLiving)
         {
             EntityLiving entityliving = (EntityLiving)this.getRidingEntity();
-            entityliving.getNavigator().setPath(this.getNavigator().getPath(), 1.5);
+            entityliving.getNavigator().setPath(this.getNavigator().getPath(), 1.5D);
             entityliving.getMoveHelper().read(this.getMoveHelper());
         }
 
@@ -829,13 +814,12 @@
         }
         else
         {
-            d1 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0
-                 - (this.posY + (double)this.getEyeHeight());
+            d1 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
         }
 
         double d3 = (double)MathHelper.sqrt(d0 * d0 + d2 * d2);
-        float f = (float)(MathHelper.atan2(d2, d0) * 180.0F / (float)Math.PI) - 90.0F;
-        float f1 = (float)(-(MathHelper.atan2(d1, d3) * 180.0F / (float)Math.PI));
+        float f = (float)(MathHelper.atan2(d2, d0) * (180D / Math.PI)) - 90.0F;
+        float f1 = (float)(-(MathHelper.atan2(d1, d3) * (180D / Math.PI)));
         this.rotationPitch = this.updateRotation(this.rotationPitch, f1, maxPitchIncrease);
         this.rotationYaw = this.updateRotation(this.rotationYaw, f, maxYawIncrease);
     }
@@ -859,18 +843,15 @@
 
     public boolean getCanSpawnHere()
     {
-        IBlockState iblockstate = this.world.getBlockState(new BlockPos(this).down());
+        IBlockState iblockstate = this.world.getBlockState((new BlockPos(this)).down());
         return iblockstate.canEntitySpawn(this);
     }
 
     public boolean isNotColliding()
     {
-        return !this.world.containsAnyLiquid(this.getEntityBoundingBox())
-               && this.world.getCollisionBoxes(this, this.getEntityBoundingBox()).isEmpty()
-               && this.world.checkNoEntityCollision(this.getEntityBoundingBox(), this);
+        return !this.world.containsAnyLiquid(this.getEntityBoundingBox()) && this.world.getCollisionBoxes(this, this.getEntityBoundingBox()).isEmpty() && this.world.checkNoEntityCollision(this.getEntityBoundingBox(), this);
     }
 
-    @SideOnly(Side.CLIENT)
     public float getRenderSizeModifier()
     {
         return 1.0F;
@@ -881,7 +862,6 @@
         return 4;
     }
 
-    @Override
     public int getMaxFallHeight()
     {
         if (this.getAttackTarget() == null)
@@ -891,7 +871,7 @@
         else
         {
             int i = (int)(this.getHealth() - this.getMaxHealth() * 0.33F);
-            i -= (3 - this.world.getDifficulty().getId()) * 4;
+            i = i - (3 - this.world.getDifficulty().getId()) * 4;
 
             if (i < 0)
             {
@@ -902,19 +882,16 @@
         }
     }
 
-    @Override
     public Iterable<ItemStack> getHeldEquipment()
     {
         return this.inventoryHands;
     }
 
-    @Override
     public Iterable<ItemStack> getArmorInventoryList()
     {
         return this.inventoryArmor;
     }
 
-    @Override
     public ItemStack getItemStackFromSlot(EntityEquipmentSlot slotIn)
     {
         switch (slotIn.getSlotType())
@@ -928,7 +905,6 @@
         }
     }
 
-    @Override
     public void setItemStackToSlot(EntityEquipmentSlot slotIn, ItemStack stack)
     {
         switch (slotIn.getSlotType())
@@ -941,7 +917,6 @@
         }
     }
 
-    @Override
     protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier)
     {
         for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
@@ -958,21 +933,16 @@
                     d0 = (double)this.inventoryArmorDropChances[entityequipmentslot.getIndex()];
                     break;
                 default:
-                    d0 = 0.0;
+                    d0 = 0.0D;
             }
 
-            boolean flag = d0 > 1.0;
+            boolean flag = d0 > 1.0D;
 
-            if (!itemstack.isEmpty()
-                    && !EnchantmentHelper.hasVanishingCurse(itemstack)
-                    && (wasRecentlyHit || flag)
-                    && (double)(this.rand.nextFloat() - (float)lootingModifier * 0.01F) < d0)
+            if (!itemstack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemstack) && (wasRecentlyHit || flag) && (double)(this.rand.nextFloat() - (float)lootingModifier * 0.01F) < d0)
             {
                 if (!flag && itemstack.isItemStackDamageable())
                 {
-                    itemstack.setItemDamage(
-                        itemstack.getMaxDamage() - this.rand.nextInt(1 + this.rand.nextInt(Math.max(itemstack.getMaxDamage() - 3, 1)))
-                    );
+                    itemstack.setItemDamage(itemstack.getMaxDamage() - this.rand.nextInt(1 + this.rand.nextInt(Math.max(itemstack.getMaxDamage() - 3, 1))));
                 }
 
                 this.entityDropItem(itemstack, 0.0F);
@@ -989,17 +959,17 @@
 
             if (this.rand.nextFloat() < 0.095F)
             {
-                i++;
-            }
-
-            if (this.rand.nextFloat() < 0.095F)
-            {
-                i++;
-            }
-
-            if (this.rand.nextFloat() < 0.095F)
-            {
-                i++;
+                ++i;
+            }
+
+            if (this.rand.nextFloat() < 0.095F)
+            {
+                ++i;
+            }
+
+            if (this.rand.nextFloat() < 0.095F)
+            {
+                ++i;
             }
 
             boolean flag = true;
@@ -1033,22 +1003,27 @@
 
     public static EntityEquipmentSlot getSlotForItemStack(ItemStack stack)
     {
-        if (stack.getItem() == Item.getItemFromBlock(Blocks.PUMPKIN) || stack.getItem() == Items.SKULL)
+        final EntityEquipmentSlot slot = stack.getItem().getEquipmentSlot(stack);
+        if (slot != null) return slot; // FORGE: Allow modders to set a non-default equipment slot for a stack; e.g. a non-armor chestplate-slot item
+        if (stack.getItem() != Item.getItemFromBlock(Blocks.PUMPKIN) && stack.getItem() != Items.SKULL)
+        {
+            if (stack.getItem() instanceof ItemArmor)
+            {
+                return ((ItemArmor)stack.getItem()).armorType;
+            }
+            else if (stack.getItem() == Items.ELYTRA)
+            {
+                return EntityEquipmentSlot.CHEST;
+            }
+            else
+            {
+                return stack.getItem().isShield(stack, null) ? EntityEquipmentSlot.OFFHAND : EntityEquipmentSlot.MAINHAND;
+            }
+        }
+        else
         {
             return EntityEquipmentSlot.HEAD;
         }
-        else if (stack.getItem() instanceof ItemArmor)
-        {
-            return ((ItemArmor)stack.getItem()).armorType;
-        }
-        else if (stack.getItem() == Items.ELYTRA)
-        {
-            return EntityEquipmentSlot.CHEST;
-        }
-        else
-        {
-            return stack.getItem() == Items.SHIELD ? EntityEquipmentSlot.OFFHAND : EntityEquipmentSlot.MAINHAND;
-        }
     }
 
     @Nullable
@@ -1159,10 +1134,7 @@
 
         if (!this.getHeldItemMainhand().isEmpty() && this.rand.nextFloat() < 0.25F * f)
         {
-            this.setItemStackToSlot(
-                EntityEquipmentSlot.MAINHAND,
-                EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItemMainhand(), (int)(5.0F + f * (float)this.rand.nextInt(18)), false)
-            );
+            this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItemMainhand(), (int)(5.0F + f * (float)this.rand.nextInt(18)), false));
         }
 
         for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
@@ -1173,10 +1145,7 @@
 
                 if (!itemstack.isEmpty() && this.rand.nextFloat() < 0.5F * f)
                 {
-                    this.setItemStackToSlot(
-                        entityequipmentslot,
-                        EnchantmentHelper.addRandomEnchantment(this.rand, itemstack, (int)(5.0F + f * (float)this.rand.nextInt(18)), false)
-                    );
+                    this.setItemStackToSlot(entityequipmentslot, EnchantmentHelper.addRandomEnchantment(this.rand, itemstack, (int)(5.0F + f * (float)this.rand.nextInt(18)), false));
                 }
             }
         }
@@ -1185,8 +1154,7 @@
     @Nullable
     public IEntityLivingData onInitialSpawn(DifficultyInstance difficulty, @Nullable IEntityLivingData livingdata)
     {
-        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE)
-        .applyModifier(new AttributeModifier("Random spawn bonus", this.rand.nextGaussian() * 0.05, 1));
+        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).applyModifier(new AttributeModifier("Random spawn bonus", this.rand.nextGaussian() * 0.05D, 1));
 
         if (this.rand.nextFloat() < 0.05F)
         {
@@ -1237,7 +1205,6 @@
         return this.persistenceRequired;
     }
 
-    @Override
     public final boolean processInitialInteract(EntityPlayer player, EnumHand hand)
     {
         if (this.getLeashed() && this.getLeashHolder() == player)
@@ -1302,7 +1269,7 @@
 
             if (!this.world.isRemote && sendPacket && this.world instanceof WorldServer)
             {
-                ((WorldServer)this.world).getEntityTracker().sendToTracking(this, new SPacketEntityAttach(this, null));
+                ((WorldServer)this.world).getEntityTracker().sendToTracking(this, new SPacketEntityAttach(this, (Entity)null));
             }
         }
     }
@@ -1338,7 +1305,6 @@
         }
     }
 
-    @Override
     public boolean startRiding(Entity entityIn, boolean force)
     {
         boolean flag = super.startRiding(entityIn, force);
@@ -1359,7 +1325,7 @@
             {
                 UUID uuid = this.leashNBTTag.getUniqueId("UUID");
 
-                for (EntityLivingBase entitylivingbase : this.world.getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(10.0)))
+                for (EntityLivingBase entitylivingbase : this.world.getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(10.0D)))
                 {
                     if (entitylivingbase.getUniqueID().equals(uuid))
                     {
@@ -1370,9 +1336,7 @@
             }
             else if (this.leashNBTTag.hasKey("X", 99) && this.leashNBTTag.hasKey("Y", 99) && this.leashNBTTag.hasKey("Z", 99))
             {
-                BlockPos blockpos = new BlockPos(
-                    this.leashNBTTag.getInteger("X"), this.leashNBTTag.getInteger("Y"), this.leashNBTTag.getInteger("Z")
-                );
+                BlockPos blockpos = new BlockPos(this.leashNBTTag.getInteger("X"), this.leashNBTTag.getInteger("Y"), this.leashNBTTag.getInteger("Z"));
                 EntityLeashKnot entityleashknot = EntityLeashKnot.getKnotForPosition(this.world, blockpos);
 
                 if (entityleashknot == null)
@@ -1391,7 +1355,6 @@
         this.leashNBTTag = null;
     }
 
-    @Override
     public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn)
     {
         EntityEquipmentSlot entityequipmentslot;
@@ -1437,7 +1400,6 @@
         }
     }
 
-    @Override
     public boolean canPassengerSteer()
     {
         return this.canBeSteered() && super.canPassengerSteer();
@@ -1446,12 +1408,9 @@
     public static boolean isItemStackInSlot(EntityEquipmentSlot slotIn, ItemStack stack)
     {
         EntityEquipmentSlot entityequipmentslot = getSlotForItemStack(stack);
-        return entityequipmentslot == slotIn
-               || entityequipmentslot == EntityEquipmentSlot.MAINHAND && slotIn == EntityEquipmentSlot.OFFHAND
-               || entityequipmentslot == EntityEquipmentSlot.OFFHAND && slotIn == EntityEquipmentSlot.MAINHAND;
+        return entityequipmentslot == slotIn || entityequipmentslot == EntityEquipmentSlot.MAINHAND && slotIn == EntityEquipmentSlot.OFFHAND || entityequipmentslot == EntityEquipmentSlot.OFFHAND && slotIn == EntityEquipmentSlot.MAINHAND;
     }
 
-    @Override
     public boolean isServerWorld()
     {
         return super.isServerWorld() && !this.isAIDisabled();
@@ -1459,27 +1418,26 @@
 
     public void setNoAI(boolean disable)
     {
-        byte b0 = this.dataManager.get(AI_FLAGS);
-        this.dataManager.set(AI_FLAGS, disable ? (byte)(b0 | 1) : (byte)(b0 & -2));
+        byte b0 = ((Byte)this.dataManager.get(AI_FLAGS)).byteValue();
+        this.dataManager.set(AI_FLAGS, Byte.valueOf(disable ? (byte)(b0 | 1) : (byte)(b0 & -2)));
     }
 
     public void setLeftHanded(boolean leftHanded)
     {
-        byte b0 = this.dataManager.get(AI_FLAGS);
-        this.dataManager.set(AI_FLAGS, leftHanded ? (byte)(b0 | 2) : (byte)(b0 & -3));
+        byte b0 = ((Byte)this.dataManager.get(AI_FLAGS)).byteValue();
+        this.dataManager.set(AI_FLAGS, Byte.valueOf(leftHanded ? (byte)(b0 | 2) : (byte)(b0 & -3)));
     }
 
     public boolean isAIDisabled()
     {
-        return (this.dataManager.get(AI_FLAGS) & 1) != 0;
+        return (((Byte)this.dataManager.get(AI_FLAGS)).byteValue() & 1) != 0;
     }
 
     public boolean isLeftHanded()
     {
-        return (this.dataManager.get(AI_FLAGS) & 2) != 0;
+        return (((Byte)this.dataManager.get(AI_FLAGS)).byteValue() & 2) != 0;
     }
 
-    @Override
     public EnumHandSide getPrimaryHand()
     {
         return this.isLeftHanded() ? EnumHandSide.LEFT : EnumHandSide.RIGHT;
@@ -1490,5 +1448,19 @@
         ON_GROUND,
         IN_AIR,
         IN_WATER;
+
+        private final java.util.function.BiPredicate<net.minecraft.world.IBlockAccess, BlockPos> spawnPredicate;
+
+        SpawnPlacementType() { this.spawnPredicate = null; }
+
+        SpawnPlacementType(java.util.function.BiPredicate<net.minecraft.world.IBlockAccess, BlockPos> spawnPredicate)
+        {
+            this.spawnPredicate = spawnPredicate;
+        }
+
+        public boolean canSpawnAt(World world, BlockPos pos)
+        {
+            return this.spawnPredicate != null ? this.spawnPredicate.test(world, pos) : net.minecraft.world.WorldEntitySpawner.canCreatureTypeSpawnBody(this, world, pos);
+        }
     }
 }
