--- before/net/minecraft/entity/player/InventoryPlayer.java
+++ after/net/minecraft/entity/player/InventoryPlayer.java
@@ -1,6 +1,7 @@
 package net.minecraft.entity.player;
 
 import java.util.Arrays;
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
@@ -28,23 +29,25 @@
 
 public class InventoryPlayer implements IInventory
 {
-    public final NonNullList<ItemStack> mainInventory = NonNullList.withSize(36, ItemStack.EMPTY);
-    public final NonNullList<ItemStack> armorInventory = NonNullList.withSize(4, ItemStack.EMPTY);
-    public final NonNullList<ItemStack> offHandInventory = NonNullList.withSize(1, ItemStack.EMPTY);
-    private final List<NonNullList<ItemStack>> allInventories = Arrays.asList(this.mainInventory, this.armorInventory, this.offHandInventory);
+    public final NonNullList<ItemStack> mainInventory = NonNullList.<ItemStack>withSize(36, ItemStack.EMPTY);
+    public final NonNullList<ItemStack> armorInventory = NonNullList.<ItemStack>withSize(4, ItemStack.EMPTY);
+    public final NonNullList<ItemStack> offHandInventory = NonNullList.<ItemStack>withSize(1, ItemStack.EMPTY);
+    private final List<NonNullList<ItemStack>> allInventories;
     public int currentItem;
     public EntityPlayer player;
-    private ItemStack itemStack = ItemStack.EMPTY;
+    private ItemStack itemStack;
     private int timesChanged;
 
     public InventoryPlayer(EntityPlayer playerIn)
     {
+        this.allInventories = Arrays.<NonNullList<ItemStack>>asList(this.mainInventory, this.armorInventory, this.offHandInventory);
+        this.itemStack = ItemStack.EMPTY;
         this.player = playerIn;
     }
 
     public ItemStack getCurrentItem()
     {
-        return isHotbar(this.currentItem) ? this.mainInventory.get(this.currentItem) : ItemStack.EMPTY;
+        return isHotbar(this.currentItem) ? (ItemStack)this.mainInventory.get(this.currentItem) : ItemStack.EMPTY;
     }
 
     public static int getHotbarSize()
@@ -54,25 +57,19 @@
 
     private boolean canMergeStacks(ItemStack stack1, ItemStack stack2)
     {
-        return !stack1.isEmpty()
-               && this.stackEqualExact(stack1, stack2)
-               && stack1.isStackable()
-               && stack1.getCount() < stack1.getMaxStackSize()
-               && stack1.getCount() < this.getInventoryStackLimit();
+        return !stack1.isEmpty() && this.stackEqualExact(stack1, stack2) && stack1.isStackable() && stack1.getCount() < stack1.getMaxStackSize() && stack1.getCount() < this.getInventoryStackLimit();
     }
 
     private boolean stackEqualExact(ItemStack stack1, ItemStack stack2)
     {
-        return stack1.getItem() == stack2.getItem()
-               && (!stack1.getHasSubtypes() || stack1.getMetadata() == stack2.getMetadata())
-               && ItemStack.areItemStackTagsEqual(stack1, stack2);
+        return stack1.getItem() == stack2.getItem() && (!stack1.getHasSubtypes() || stack1.getMetadata() == stack2.getMetadata()) && ItemStack.areItemStackTagsEqual(stack1, stack2);
     }
 
     public int getFirstEmptyStack()
     {
-        for (int i = 0; i < this.mainInventory.size(); i++)
+        for (int i = 0; i < this.mainInventory.size(); ++i)
         {
-            if (this.mainInventory.get(i).isEmpty())
+            if (((ItemStack)this.mainInventory.get(i)).isEmpty())
             {
                 return i;
             }
@@ -96,7 +93,7 @@
             {
                 this.currentItem = this.getBestHotbarSlot();
 
-                if (!this.mainInventory.get(this.currentItem).isEmpty())
+                if (!((ItemStack)this.mainInventory.get(this.currentItem)).isEmpty())
                 {
                     int j = this.getFirstEmptyStack();
 
@@ -131,9 +128,9 @@
     @SideOnly(Side.CLIENT)
     public int getSlotFor(ItemStack stack)
     {
-        for (int i = 0; i < this.mainInventory.size(); i++)
+        for (int i = 0; i < this.mainInventory.size(); ++i)
         {
-            if (!this.mainInventory.get(i).isEmpty() && this.stackEqualExact(stack, this.mainInventory.get(i)))
+            if (!((ItemStack)this.mainInventory.get(i)).isEmpty() && this.stackEqualExact(stack, this.mainInventory.get(i)))
             {
                 return i;
             }
@@ -144,15 +141,11 @@
 
     public int findSlotMatchingUnusedItem(ItemStack p_194014_1_)
     {
-        for (int i = 0; i < this.mainInventory.size(); i++)
+        for (int i = 0; i < this.mainInventory.size(); ++i)
         {
             ItemStack itemstack = this.mainInventory.get(i);
 
-            if (!this.mainInventory.get(i).isEmpty()
-                    && this.stackEqualExact(p_194014_1_, this.mainInventory.get(i))
-                    && !this.mainInventory.get(i).isItemDamaged()
-                    && !itemstack.isItemEnchanted()
-                    && !itemstack.hasDisplayName())
+            if (!((ItemStack)this.mainInventory.get(i)).isEmpty() && this.stackEqualExact(p_194014_1_, this.mainInventory.get(i)) && !((ItemStack)this.mainInventory.get(i)).isItemDamaged() && !itemstack.isItemEnchanted() && !itemstack.hasDisplayName())
             {
                 return i;
             }
@@ -163,21 +156,21 @@
 
     public int getBestHotbarSlot()
     {
-        for (int i = 0; i < 9; i++)
+        for (int i = 0; i < 9; ++i)
         {
             int j = (this.currentItem + i) % 9;
 
-            if (this.mainInventory.get(j).isEmpty())
+            if (((ItemStack)this.mainInventory.get(j)).isEmpty())
             {
                 return j;
             }
         }
 
-        for (int k = 0; k < 9; k++)
+        for (int k = 0; k < 9; ++k)
         {
             int l = (this.currentItem + k) % 9;
 
-            if (!this.mainInventory.get(l).isItemEnchanted())
+            if (!((ItemStack)this.mainInventory.get(l)).isItemEnchanted())
             {
                 return l;
             }
@@ -199,11 +192,9 @@
             direction = -1;
         }
 
-        this.currentItem -= direction;
-
-        while (this.currentItem < 0)
+        for (this.currentItem -= direction; this.currentItem < 0; this.currentItem += 9)
         {
-            this.currentItem += 9;
+            ;
         }
 
         while (this.currentItem >= 9)
@@ -216,14 +207,11 @@
     {
         int i = 0;
 
-        for (int j = 0; j < this.getSizeInventory(); j++)
+        for (int j = 0; j < this.getSizeInventory(); ++j)
         {
             ItemStack itemstack = this.getStackInSlot(j);
 
-            if (!itemstack.isEmpty()
-                    && (itemIn == null || itemstack.getItem() == itemIn)
-                    && (metadataIn <= -1 || itemstack.getMetadata() == metadataIn)
-                    && (itemNBT == null || NBTUtil.areNBTEquals(itemNBT, itemstack.getTagCompound(), true)))
+            if (!itemstack.isEmpty() && (itemIn == null || itemstack.getItem() == itemIn) && (metadataIn <= -1 || itemstack.getMetadata() == metadataIn) && (itemNBT == null || NBTUtil.areNBTEquals(itemNBT, itemstack.getTagCompound(), true)))
             {
                 int k = removeCount <= 0 ? itemstack.getCount() : Math.min(removeCount - i, itemstack.getCount());
                 i += k;
@@ -304,7 +292,8 @@
 
         if (itemstack.isEmpty())
         {
-            itemstack = new ItemStack(item, 0, p_191973_2_.getMetadata());
+            itemstack = p_191973_2_.copy(); // Forge: Replace Item clone above to preserve item capabilities when picking the item up.
+            itemstack.setCount(0);
 
             if (p_191973_2_.hasTagCompound())
             {
@@ -332,7 +321,7 @@
         }
         else
         {
-            i -= j;
+            i = i - j;
             itemstack.grow(j);
             itemstack.setAnimationsToGo(5);
             return i;
@@ -351,7 +340,7 @@
         }
         else
         {
-            for (int i = 0; i < this.mainInventory.size(); i++)
+            for (int i = 0; i < this.mainInventory.size(); ++i)
             {
                 if (this.canMergeStacks(this.mainInventory.get(i), itemStackIn))
                 {
@@ -367,12 +356,19 @@
     {
         for (NonNullList<ItemStack> nonnulllist : this.allInventories)
         {
-            for (int i = 0; i < nonnulllist.size(); i++)
+            for (int i = 0; i < nonnulllist.size(); ++i)
             {
-                if (!nonnulllist.get(i).isEmpty())
+                if (!((ItemStack)nonnulllist.get(i)).isEmpty())
                 {
-                    nonnulllist.get(i).updateAnimation(this.player.world, this.player, i, this.currentItem == i);
+                    ((ItemStack)nonnulllist.get(i)).updateAnimation(this.player.world, this.player, i, this.currentItem == i);
                 }
+            }
+        }
+        for (ItemStack is : armorInventory) // FORGE: Tick armor on animation ticks
+        {
+            if (!is.isEmpty())
+            {
+                is.getItem().onArmorTick(player.world, player, is);
             }
         }
     }
@@ -402,7 +398,7 @@
                     if (p_191971_1_ >= 0)
                     {
                         this.mainInventory.set(p_191971_1_, p_191971_2_.copy());
-                        this.mainInventory.get(p_191971_1_).setAnimationsToGo(5);
+                        ((ItemStack)this.mainInventory.get(p_191971_1_)).setAnimationsToGo(5);
                         p_191971_2_.setCount(0);
                         return true;
                     }
@@ -420,7 +416,7 @@
                 {
                     int i;
 
-                    do
+                    while (true)
                     {
                         i = p_191971_2_.getCount();
 
@@ -432,8 +428,12 @@
                         {
                             p_191971_2_.setCount(this.addResource(p_191971_1_, p_191971_2_));
                         }
+
+                        if (p_191971_2_.isEmpty() || p_191971_2_.getCount() >= i)
+                        {
+                            break;
+                        }
                     }
-                    while (!p_191971_2_.isEmpty() && p_191971_2_.getCount() < i);
 
                     if (p_191971_2_.getCount() == i && this.player.capabilities.isCreativeMode)
                     {
@@ -450,8 +450,10 @@
             {
                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Adding item to inventory");
                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Item being added");
-                crashreportcategory.addCrashSection("Item ID", Item.getIdFromItem(p_191971_2_.getItem()));
-                crashreportcategory.addCrashSection("Item data", p_191971_2_.getMetadata());
+                crashreportcategory.addCrashSection("Item ID", Integer.valueOf(Item.getIdFromItem(p_191971_2_.getItem())));
+                crashreportcategory.addCrashSection("Item data", Integer.valueOf(p_191971_2_.getMetadata()));
+                crashreportcategory.addDetail("Registry Name", () -> String.valueOf(p_191971_2_.getItem().getRegistryName()));
+                crashreportcategory.addDetail("Item Class", () -> p_191971_2_.getItem().getClass().getName());
                 crashreportcategory.addDetail("Item name", new ICrashReportDetail<String>()
                 {
                     public String call() throws Exception
@@ -493,7 +495,6 @@
         }
     }
 
-    @Override
     public ItemStack decrStackSize(int index, int count)
     {
         List<ItemStack> list = null;
@@ -509,14 +510,14 @@
             index -= nonnulllist.size();
         }
 
-        return list != null && !list.get(index).isEmpty() ? ItemStackHelper.getAndSplit(list, index, count) : ItemStack.EMPTY;
+        return list != null && !((ItemStack)list.get(index)).isEmpty() ? ItemStackHelper.getAndSplit(list, index, count) : ItemStack.EMPTY;
     }
 
     public void deleteStack(ItemStack stack)
     {
         for (NonNullList<ItemStack> nonnulllist : this.allInventories)
         {
-            for (int i = 0; i < nonnulllist.size(); i++)
+            for (int i = 0; i < nonnulllist.size(); ++i)
             {
                 if (nonnulllist.get(i) == stack)
                 {
@@ -527,7 +528,6 @@
         }
     }
 
-    @Override
     public ItemStack removeStackFromSlot(int index)
     {
         NonNullList<ItemStack> nonnulllist = null;
@@ -543,7 +543,7 @@
             index -= nonnulllist1.size();
         }
 
-        if (nonnulllist != null && !nonnulllist.get(index).isEmpty())
+        if (nonnulllist != null && !((ItemStack)nonnulllist.get(index)).isEmpty())
         {
             ItemStack itemstack = nonnulllist.get(index);
             nonnulllist.set(index, ItemStack.EMPTY);
@@ -555,7 +555,6 @@
         }
     }
 
-    @Override
     public void setInventorySlotContents(int index, ItemStack stack)
     {
         NonNullList<ItemStack> nonnulllist = null;
@@ -581,9 +580,9 @@
     {
         float f = 1.0F;
 
-        if (!this.mainInventory.get(this.currentItem).isEmpty())
+        if (!((ItemStack)this.mainInventory.get(this.currentItem)).isEmpty())
         {
-            f *= this.mainInventory.get(this.currentItem).getDestroySpeed(state);
+            f *= ((ItemStack)this.mainInventory.get(this.currentItem)).getDestroySpeed(state);
         }
 
         return f;
@@ -591,35 +590,35 @@
 
     public NBTTagList writeToNBT(NBTTagList nbtTagListIn)
     {
-        for (int i = 0; i < this.mainInventory.size(); i++)
+        for (int i = 0; i < this.mainInventory.size(); ++i)
         {
-            if (!this.mainInventory.get(i).isEmpty())
+            if (!((ItemStack)this.mainInventory.get(i)).isEmpty())
             {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
                 nbttagcompound.setByte("Slot", (byte)i);
-                this.mainInventory.get(i).writeToNBT(nbttagcompound);
+                ((ItemStack)this.mainInventory.get(i)).writeToNBT(nbttagcompound);
                 nbtTagListIn.appendTag(nbttagcompound);
             }
         }
 
-        for (int j = 0; j < this.armorInventory.size(); j++)
+        for (int j = 0; j < this.armorInventory.size(); ++j)
         {
-            if (!this.armorInventory.get(j).isEmpty())
+            if (!((ItemStack)this.armorInventory.get(j)).isEmpty())
             {
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
                 nbttagcompound1.setByte("Slot", (byte)(j + 100));
-                this.armorInventory.get(j).writeToNBT(nbttagcompound1);
+                ((ItemStack)this.armorInventory.get(j)).writeToNBT(nbttagcompound1);
                 nbtTagListIn.appendTag(nbttagcompound1);
             }
         }
 
-        for (int k = 0; k < this.offHandInventory.size(); k++)
+        for (int k = 0; k < this.offHandInventory.size(); ++k)
         {
-            if (!this.offHandInventory.get(k).isEmpty())
+            if (!((ItemStack)this.offHandInventory.get(k)).isEmpty())
             {
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
                 nbttagcompound2.setByte("Slot", (byte)(k + 150));
-                this.offHandInventory.get(k).writeToNBT(nbttagcompound2);
+                ((ItemStack)this.offHandInventory.get(k)).writeToNBT(nbttagcompound2);
                 nbtTagListIn.appendTag(nbttagcompound2);
             }
         }
@@ -633,7 +632,7 @@
         this.armorInventory.clear();
         this.offHandInventory.clear();
 
-        for (int i = 0; i < nbtTagListIn.tagCount(); i++)
+        for (int i = 0; i < nbtTagListIn.tagCount(); ++i)
         {
             NBTTagCompound nbttagcompound = nbtTagListIn.getCompoundTagAt(i);
             int j = nbttagcompound.getByte("Slot") & 255;
@@ -657,13 +656,11 @@
         }
     }
 
-    @Override
     public int getSizeInventory()
     {
         return this.mainInventory.size() + this.armorInventory.size() + this.offHandInventory.size();
     }
 
-    @Override
     public boolean isEmpty()
     {
         for (ItemStack itemstack : this.mainInventory)
@@ -693,7 +690,6 @@
         return true;
     }
 
-    @Override
     public ItemStack getStackInSlot(int index)
     {
         List<ItemStack> list = null;
@@ -709,28 +705,24 @@
             index -= nonnulllist.size();
         }
 
-        return list == null ? ItemStack.EMPTY : list.get(index);
+        return list == null ? ItemStack.EMPTY : (ItemStack)list.get(index);
     }
 
-    @Override
     public String getName()
     {
         return "container.inventory";
     }
 
-    @Override
     public boolean hasCustomName()
     {
         return false;
     }
 
-    @Override
     public ITextComponent getDisplayName()
     {
-        return (ITextComponent)(this.hasCustomName() ? new TextComponentString(this.getName()) : new TextComponentTranslation(this.getName()));
+        return (ITextComponent)(this.hasCustomName() ? new TextComponentString(this.getName()) : new TextComponentTranslation(this.getName(), new Object[0]));
     }
 
-    @Override
     public int getInventoryStackLimit()
     {
         return 64;
@@ -757,14 +749,14 @@
 
     public void damageArmor(float damage)
     {
-        damage /= 4.0F;
+        damage = damage / 4.0F;
 
         if (damage < 1.0F)
         {
             damage = 1.0F;
         }
 
-        for (int i = 0; i < this.armorInventory.size(); i++)
+        for (int i = 0; i < this.armorInventory.size(); ++i)
         {
             ItemStack itemstack = this.armorInventory.get(i);
 
@@ -779,7 +771,7 @@
     {
         for (List<ItemStack> list : this.allInventories)
         {
-            for (int i = 0; i < list.size(); i++)
+            for (int i = 0; i < list.size(); ++i)
             {
                 ItemStack itemstack = list.get(i);
 
@@ -792,10 +784,9 @@
         }
     }
 
-    @Override
     public void markDirty()
     {
-        this.timesChanged++;
+        ++this.timesChanged;
     }
 
     @SideOnly(Side.CLIENT)
@@ -814,39 +805,55 @@
         return this.itemStack;
     }
 
-    @Override
     public boolean isUsableByPlayer(EntityPlayer player)
     {
-        return this.player.isDead ? false : !(player.getDistanceSq(this.player) > 64.0);
+        if (this.player.isDead)
+        {
+            return false;
+        }
+        else
+        {
+            return player.getDistanceSq(this.player) <= 64.0D;
+        }
     }
 
     public boolean hasItemStack(ItemStack itemStackIn)
     {
+        label23:
+
         for (List<ItemStack> list : this.allInventories)
         {
-            for (ItemStack itemstack : list)
+            Iterator iterator = list.iterator();
+
+            while (true)
             {
+                if (!iterator.hasNext())
+                {
+                    continue label23;
+                }
+
+                ItemStack itemstack = (ItemStack)iterator.next();
+
                 if (!itemstack.isEmpty() && itemstack.isItemEqual(itemStackIn))
                 {
-                    return true;
+                    break;
                 }
             }
+
+            return true;
         }
 
         return false;
     }
 
-    @Override
     public void openInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public void closeInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         return true;
@@ -854,7 +861,7 @@
 
     public void copyInventory(InventoryPlayer playerInventory)
     {
-        for (int i = 0; i < this.getSizeInventory(); i++)
+        for (int i = 0; i < this.getSizeInventory(); ++i)
         {
             this.setInventorySlotContents(i, playerInventory.getStackInSlot(i));
         }
@@ -862,24 +869,20 @@
         this.currentItem = playerInventory.currentItem;
     }
 
-    @Override
     public int getField(int id)
     {
         return 0;
     }
 
-    @Override
     public void setField(int id, int value)
     {
     }
 
-    @Override
     public int getFieldCount()
     {
         return 0;
     }
 
-    @Override
     public void clear()
     {
         for (List<ItemStack> list : this.allInventories)
