--- before/net/minecraft/entity/item/EntityMinecartCommandBlock.java
+++ after/net/minecraft/entity/item/EntityMinecartCommandBlock.java
@@ -29,55 +29,41 @@
 
 public class EntityMinecartCommandBlock extends EntityMinecart
 {
-    private static final DataParameter<String> COMMAND = EntityDataManager.createKey(EntityMinecartCommandBlock.class, DataSerializers.STRING);
-    private static final DataParameter<ITextComponent> LAST_OUTPUT = EntityDataManager.createKey(
-                    EntityMinecartCommandBlock.class, DataSerializers.TEXT_COMPONENT
-                );
+    private static final DataParameter<String> COMMAND = EntityDataManager.<String>createKey(EntityMinecartCommandBlock.class, DataSerializers.STRING);
+    private static final DataParameter<ITextComponent> LAST_OUTPUT = EntityDataManager.<ITextComponent>createKey(EntityMinecartCommandBlock.class, DataSerializers.TEXT_COMPONENT);
     private final CommandBlockBaseLogic commandBlockLogic = new CommandBlockBaseLogic()
     {
-        @Override
         public void updateCommand()
         {
             EntityMinecartCommandBlock.this.getDataManager().set(EntityMinecartCommandBlock.COMMAND, this.getCommand());
             EntityMinecartCommandBlock.this.getDataManager().set(EntityMinecartCommandBlock.LAST_OUTPUT, this.getLastOutput());
         }
         @SideOnly(Side.CLIENT)
-        @Override
         public int getCommandBlockType()
         {
             return 1;
         }
         @SideOnly(Side.CLIENT)
-        @Override
         public void fillInInfo(ByteBuf buf)
         {
             buf.writeInt(EntityMinecartCommandBlock.this.getEntityId());
         }
-        @Override
         public BlockPos getPosition()
         {
-            return new BlockPos(
-                       EntityMinecartCommandBlock.this.posX, EntityMinecartCommandBlock.this.posY + 0.5, EntityMinecartCommandBlock.this.posZ
-                   );
+            return new BlockPos(EntityMinecartCommandBlock.this.posX, EntityMinecartCommandBlock.this.posY + 0.5D, EntityMinecartCommandBlock.this.posZ);
         }
-        @Override
         public Vec3d getPositionVector()
         {
-            return new Vec3d(
-                       EntityMinecartCommandBlock.this.posX, EntityMinecartCommandBlock.this.posY, EntityMinecartCommandBlock.this.posZ
-                   );
+            return new Vec3d(EntityMinecartCommandBlock.this.posX, EntityMinecartCommandBlock.this.posY, EntityMinecartCommandBlock.this.posZ);
         }
-        @Override
         public World getEntityWorld()
         {
             return EntityMinecartCommandBlock.this.world;
         }
-        @Override
         public Entity getCommandSenderEntity()
         {
             return EntityMinecartCommandBlock.this;
         }
-        @Override
         public MinecraftServer getServer()
         {
             return EntityMinecartCommandBlock.this.world.getMinecraftServer();
@@ -100,7 +86,6 @@
         EntityMinecart.registerFixesMinecart(fixer, EntityMinecartCommandBlock.class);
         fixer.registerWalker(FixTypes.ENTITY, new IDataWalker()
         {
-            @Override
             public NBTTagCompound process(IDataFixer fixer, NBTTagCompound compound, int versionIn)
             {
                 if (TileEntity.getKey(TileEntityCommandBlock.class).equals(new ResourceLocation(compound.getString("id"))))
@@ -115,7 +100,6 @@
         });
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
@@ -123,7 +107,6 @@
         this.getDataManager().register(LAST_OUTPUT, new TextComponentString(""));
     }
 
-    @Override
     protected void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -132,20 +115,17 @@
         this.getDataManager().set(LAST_OUTPUT, this.getCommandBlockLogic().getLastOutput());
     }
 
-    @Override
     protected void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
         this.commandBlockLogic.writeToNBT(compound);
     }
 
-    @Override
     public EntityMinecart.Type getType()
     {
         return EntityMinecart.Type.COMMAND_BLOCK;
     }
 
-    @Override
     public IBlockState getDefaultDisplayTile()
     {
         return Blocks.COMMAND_BLOCK.getDefaultState();
@@ -156,7 +136,6 @@
         return this.commandBlockLogic;
     }
 
-    @Override
     public void onActivatorRailPass(int x, int y, int z, boolean receivingPower)
     {
         if (receivingPower && this.ticksExisted - this.activatorRailCooldown >= 4)
@@ -166,14 +145,13 @@
         }
     }
 
-    @Override
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand)
     {
+        if (super.processInitialInteract(player, hand)) return true;
         this.commandBlockLogic.tryOpenEditCommandBlock(player);
         return false;
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         super.notifyDataManagerChange(key);
@@ -182,19 +160,19 @@
         {
             try
             {
-                this.commandBlockLogic.setLastOutput(this.getDataManager().get(LAST_OUTPUT));
+                this.commandBlockLogic.setLastOutput((ITextComponent)this.getDataManager().get(LAST_OUTPUT));
             }
-            catch (Throwable throwable)
+            catch (Throwable var3)
             {
+                ;
             }
         }
         else if (COMMAND.equals(key))
         {
-            this.commandBlockLogic.setCommand(this.getDataManager().get(COMMAND));
+            this.commandBlockLogic.setCommand((String)this.getDataManager().get(COMMAND));
         }
     }
 
-    @Override
     public boolean ignoreItemEntityData()
     {
         return true;
