--- before/net/minecraft/entity/item/EntityFallingBlock.java
+++ after/net/minecraft/entity/item/EntityFallingBlock.java
@@ -42,7 +42,7 @@
     private int fallHurtMax = 40;
     private float fallHurtAmount = 2.0F;
     public NBTTagCompound tileEntityData;
-    protected static final DataParameter<BlockPos> ORIGIN = EntityDataManager.createKey(EntityFallingBlock.class, DataSerializers.BLOCK_POS);
+    protected static final DataParameter<BlockPos> ORIGIN = EntityDataManager.<BlockPos>createKey(EntityFallingBlock.class, DataSerializers.BLOCK_POS);
 
     public EntityFallingBlock(World worldIn)
     {
@@ -56,16 +56,15 @@
         this.preventEntitySpawning = true;
         this.setSize(0.98F, 0.98F);
         this.setPosition(x, y + (double)((1.0F - this.height) / 2.0F), z);
-        this.motionX = 0.0;
-        this.motionY = 0.0;
-        this.motionZ = 0.0;
+        this.motionX = 0.0D;
+        this.motionY = 0.0D;
+        this.motionZ = 0.0D;
         this.prevPosX = x;
         this.prevPosY = y;
         this.prevPosZ = z;
         this.setOrigin(new BlockPos(this));
     }
 
-    @Override
     public boolean canBeAttackedWithItem()
     {
         return false;
@@ -79,28 +78,24 @@
     @SideOnly(Side.CLIENT)
     public BlockPos getOrigin()
     {
-        return this.dataManager.get(ORIGIN);
+        return (BlockPos)this.dataManager.get(ORIGIN);
     }
 
-    @Override
     protected boolean canTriggerWalking()
     {
         return false;
     }
 
-    @Override
     protected void entityInit()
     {
         this.dataManager.register(ORIGIN, BlockPos.ORIGIN);
     }
 
-    @Override
     public boolean canBeCollidedWith()
     {
         return !this.isDead;
     }
 
-    @Override
     public void onUpdate()
     {
         Block block = this.fallTile.getBlock();
@@ -132,7 +127,7 @@
 
             if (!this.hasNoGravity())
             {
-                this.motionY -= 0.04F;
+                this.motionY -= 0.03999999910593033D;
             }
 
             this.move(MoverType.SELF, this.motionX, this.motionY, this.motionZ);
@@ -144,14 +139,9 @@
                 boolean flag1 = flag && this.world.getBlockState(blockpos1).getMaterial() == Material.WATER;
                 double d0 = this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ;
 
-                if (flag && d0 > 1.0)
+                if (flag && d0 > 1.0D)
                 {
-                    RayTraceResult raytraceresult = this.world
-                                                    .rayTraceBlocks(
-                                                        new Vec3d(this.prevPosX, this.prevPosY, this.prevPosZ),
-                                                        new Vec3d(this.posX, this.posY, this.posZ),
-                                                        true
-                                                    );
+                    RayTraceResult raytraceresult = this.world.rayTraceBlocks(new Vec3d(this.prevPosX, this.prevPosY, this.prevPosZ), new Vec3d(this.posX, this.posY, this.posZ), true);
 
                     if (raytraceresult != null && this.world.getBlockState(raytraceresult.getBlockPos()).getMaterial() == Material.WATER)
                     {
@@ -162,8 +152,7 @@
 
                 if (!this.onGround && !flag1)
                 {
-                    if (this.fallTime > 100 && !this.world.isRemote && (blockpos1.getY() < 1 || blockpos1.getY() > 256)
-                            || this.fallTime > 600)
+                    if (this.fallTime > 100 && !this.world.isRemote && (blockpos1.getY() < 1 || blockpos1.getY() > 256) || this.fallTime > 600)
                     {
                         if (this.shouldDropItem && this.world.getGameRules().getBoolean("doEntityDrops"))
                         {
@@ -177,18 +166,16 @@
                 {
                     IBlockState iblockstate = this.world.getBlockState(blockpos1);
 
-                    if (!flag1
-                            && BlockFalling.canFallThrough(
-                                this.world.getBlockState(new BlockPos(this.posX, this.posY - 0.01F, this.posZ))
-                            ))
+                    if (this.world.isAirBlock(new BlockPos(this.posX, this.posY - 0.009999999776482582D, this.posZ))) //Forge: Don't indent below.
+                    if (!flag1 && BlockFalling.canFallThrough(this.world.getBlockState(new BlockPos(this.posX, this.posY - 0.009999999776482582D, this.posZ))))
                     {
                         this.onGround = false;
                         return;
                     }
 
-                    this.motionX *= 0.7F;
-                    this.motionZ *= 0.7F;
-                    this.motionY *= -0.5;
+                    this.motionX *= 0.699999988079071D;
+                    this.motionZ *= 0.699999988079071D;
+                    this.motionY *= -0.5D;
 
                     if (iblockstate.getBlock() != Blocks.PISTON_EXTENSION)
                     {
@@ -196,16 +183,14 @@
 
                         if (!this.dontSetBlock)
                         {
-                            if (this.world.mayPlace(block, blockpos1, true, EnumFacing.UP, null)
-                                    && (flag1 || !BlockFalling.canFallThrough(this.world.getBlockState(blockpos1.down())))
-                                    && this.world.setBlockState(blockpos1, this.fallTile, 3))
+                            if (this.world.mayPlace(block, blockpos1, true, EnumFacing.UP, this) && (flag1 || !BlockFalling.canFallThrough(this.world.getBlockState(blockpos1.down()))) && this.world.setBlockState(blockpos1, this.fallTile, 3))
                             {
                                 if (block instanceof BlockFalling)
                                 {
                                     ((BlockFalling)block).onEndFalling(this.world, blockpos1, this.fallTile, iblockstate);
                                 }
 
-                                if (this.tileEntityData != null && block instanceof ITileEntityProvider)
+                                if (this.tileEntityData != null && block.hasTileEntity(this.fallTile))
                                 {
                                     TileEntity tileentity = this.world.getTileEntity(blockpos1);
 
@@ -241,13 +226,12 @@
                 }
             }
 
-            this.motionX *= 0.98F;
-            this.motionY *= 0.98F;
-            this.motionZ *= 0.98F;
+            this.motionX *= 0.9800000190734863D;
+            this.motionY *= 0.9800000190734863D;
+            this.motionZ *= 0.9800000190734863D;
         }
     }
 
-    @Override
     public void fall(float distance, float damageMultiplier)
     {
         Block block = this.fallTile.getBlock();
@@ -267,17 +251,18 @@
                     entity.attackEntityFrom(damagesource, (float)Math.min(MathHelper.floor((float)i * this.fallHurtAmount), this.fallHurtMax));
                 }
 
-                if (flag && (double)this.rand.nextFloat() < 0.05F + (double)i * 0.05)
+                if (flag && (double)this.rand.nextFloat() < 0.05000000074505806D + (double)i * 0.05D)
                 {
-                    int j = this.fallTile.getValue(BlockAnvil.DAMAGE);
+                    int j = ((Integer)this.fallTile.getValue(BlockAnvil.DAMAGE)).intValue();
+                    ++j;
 
-                    if (++j > 2)
+                    if (j > 2)
                     {
                         this.dontSetBlock = true;
                     }
                     else
                     {
-                        this.fallTile = this.fallTile.withProperty(BlockAnvil.DAMAGE, j);
+                        this.fallTile = this.fallTile.withProperty(BlockAnvil.DAMAGE, Integer.valueOf(j));
                     }
                 }
             }
@@ -288,7 +273,6 @@
     {
     }
 
-    @Override
     protected void writeEntityToNBT(NBTTagCompound compound)
     {
         Block block = this.fallTile != null ? this.fallTile.getBlock() : Blocks.AIR;
@@ -307,7 +291,6 @@
         }
     }
 
-    @Override
     protected void readEntityFromNBT(NBTTagCompound compound)
     {
         int i = compound.getByte("Data") & 255;
@@ -355,25 +338,11 @@
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public World getWorldObj()
-    {
-        return this.world;
-    }
-
     public void setHurtEntities(boolean p_145806_1_)
     {
         this.hurtEntities = p_145806_1_;
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
-    public boolean canRenderOnFire()
-    {
-        return false;
-    }
-
-    @Override
     public void addEntityCrashInfo(CrashReportCategory category)
     {
         super.addEntityCrashInfo(category);
@@ -381,9 +350,21 @@
         if (this.fallTile != null)
         {
             Block block = this.fallTile.getBlock();
-            category.addCrashSection("Immitating block ID", Block.getIdFromBlock(block));
-            category.addCrashSection("Immitating block data", block.getMetaFromState(this.fallTile));
+            category.addCrashSection("Immitating block ID", Integer.valueOf(Block.getIdFromBlock(block)));
+            category.addCrashSection("Immitating block data", Integer.valueOf(block.getMetaFromState(this.fallTile)));
         }
+    }
+
+    @SideOnly(Side.CLIENT)
+    public World getWorldObj()
+    {
+        return this.world;
+    }
+
+    @SideOnly(Side.CLIENT)
+    public boolean canRenderOnFire()
+    {
+        return false;
     }
 
     @Nullable
@@ -392,7 +373,6 @@
         return this.fallTile;
     }
 
-    @Override
     public boolean ignoreItemEntityData()
     {
         return true;
