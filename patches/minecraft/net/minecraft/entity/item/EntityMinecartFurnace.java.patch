--- before/net/minecraft/entity/item/EntityMinecartFurnace.java
+++ after/net/minecraft/entity/item/EntityMinecartFurnace.java
@@ -21,7 +21,7 @@
 
 public class EntityMinecartFurnace extends EntityMinecart
 {
-    private static final DataParameter<Boolean> POWERED = EntityDataManager.createKey(EntityMinecartFurnace.class, DataSerializers.BOOLEAN);
+    private static final DataParameter<Boolean> POWERED = EntityDataManager.<Boolean>createKey(EntityMinecartFurnace.class, DataSerializers.BOOLEAN);
     private int fuel;
     public double pushX;
     public double pushZ;
@@ -41,50 +41,45 @@
         EntityMinecart.registerFixesMinecart(fixer, EntityMinecartFurnace.class);
     }
 
-    @Override
     public EntityMinecart.Type getType()
     {
         return EntityMinecart.Type.FURNACE;
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(POWERED, false);
+        this.dataManager.register(POWERED, Boolean.valueOf(false));
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
 
         if (this.fuel > 0)
         {
-            this.fuel--;
+            --this.fuel;
         }
 
         if (this.fuel <= 0)
         {
-            this.pushX = 0.0;
-            this.pushZ = 0.0;
+            this.pushX = 0.0D;
+            this.pushZ = 0.0D;
         }
 
         this.setMinecartPowered(this.fuel > 0);
 
         if (this.isMinecartPowered() && this.rand.nextInt(4) == 0)
         {
-            this.world.spawnParticle(EnumParticleTypes.SMOKE_LARGE, this.posX, this.posY + 0.8, this.posZ, 0.0, 0.0, 0.0);
+            this.world.spawnParticle(EnumParticleTypes.SMOKE_LARGE, this.posX, this.posY + 0.8D, this.posZ, 0.0D, 0.0D, 0.0D);
         }
     }
 
-    @Override
     protected double getMaximumSpeed()
     {
-        return 0.2;
+        return 0.2D;
     }
 
-    @Override
     public void killMinecart(DamageSource source)
     {
         super.killMinecart(source);
@@ -95,22 +90,21 @@
         }
     }
 
-    @Override
     protected void moveAlongTrack(BlockPos pos, IBlockState state)
     {
         super.moveAlongTrack(pos, state);
         double d0 = this.pushX * this.pushX + this.pushZ * this.pushZ;
 
-        if (d0 > 1.0E-4 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.001)
+        if (d0 > 1.0E-4D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.001D)
         {
             d0 = (double)MathHelper.sqrt(d0);
             this.pushX /= d0;
             this.pushZ /= d0;
 
-            if (this.pushX * this.motionX + this.pushZ * this.motionZ < 0.0)
+            if (this.pushX * this.motionX + this.pushZ * this.motionZ < 0.0D)
             {
-                this.pushX = 0.0;
-                this.pushZ = 0.0;
+                this.pushX = 0.0D;
+                this.pushZ = 0.0D;
             }
             else
             {
@@ -121,38 +115,38 @@
         }
     }
 
-    @Override
     protected void applyDrag()
     {
         double d0 = this.pushX * this.pushX + this.pushZ * this.pushZ;
 
-        if (d0 > 1.0E-4)
+        if (d0 > 1.0E-4D)
         {
             d0 = (double)MathHelper.sqrt(d0);
             this.pushX /= d0;
             this.pushZ /= d0;
-            double d1 = 1.0;
-            this.motionX *= 0.8F;
-            this.motionY *= 0.0;
-            this.motionZ *= 0.8F;
-            this.motionX = this.motionX + this.pushX * 1.0;
-            this.motionZ = this.motionZ + this.pushZ * 1.0;
+            double d1 = 1.0D;
+            this.motionX *= 0.800000011920929D;
+            this.motionY *= 0.0D;
+            this.motionZ *= 0.800000011920929D;
+            this.motionX += this.pushX * 1.0D;
+            this.motionZ += this.pushZ * 1.0D;
         }
         else
         {
-            this.motionX *= 0.98F;
-            this.motionY *= 0.0;
-            this.motionZ *= 0.98F;
+            this.motionX *= 0.9800000190734863D;
+            this.motionY *= 0.0D;
+            this.motionZ *= 0.9800000190734863D;
         }
 
         super.applyDrag();
     }
 
-    @Override
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
 
+        if (super.processInitialInteract(player, hand)) return true;
+
         if (itemstack.getItem() == Items.COAL && this.fuel + 3600 <= 32000)
         {
             if (!player.capabilities.isCreativeMode)
@@ -168,7 +162,6 @@
         return true;
     }
 
-    @Override
     protected void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -177,7 +170,6 @@
         compound.setShort("Fuel", (short)this.fuel);
     }
 
-    @Override
     protected void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -188,19 +180,16 @@
 
     protected boolean isMinecartPowered()
     {
-        return this.dataManager.get(POWERED);
+        return ((Boolean)this.dataManager.get(POWERED)).booleanValue();
     }
 
     protected void setMinecartPowered(boolean p_94107_1_)
     {
-        this.dataManager.set(POWERED, p_94107_1_);
+        this.dataManager.set(POWERED, Boolean.valueOf(p_94107_1_));
     }
 
-    @Override
     public IBlockState getDefaultDisplayTile()
     {
-        return (this.isMinecartPowered() ? Blocks.LIT_FURNACE : Blocks.FURNACE)
-               .getDefaultState()
-               .withProperty(BlockFurnace.FACING, EnumFacing.NORTH);
+        return (this.isMinecartPowered() ? Blocks.LIT_FURNACE : Blocks.FURNACE).getDefaultState().withProperty(BlockFurnace.FACING, EnumFacing.NORTH);
     }
 }
