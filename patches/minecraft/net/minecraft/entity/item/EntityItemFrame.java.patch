--- before/net/minecraft/entity/item/EntityItemFrame.java
+++ after/net/minecraft/entity/item/EntityItemFrame.java
@@ -27,8 +27,8 @@
 
 public class EntityItemFrame extends EntityHanging
 {
-    private static final DataParameter<ItemStack> ITEM = EntityDataManager.createKey(EntityItemFrame.class, DataSerializers.ITEM_STACK);
-    private static final DataParameter<Integer> ROTATION = EntityDataManager.createKey(EntityItemFrame.class, DataSerializers.VARINT);
+    private static final DataParameter<ItemStack> ITEM = EntityDataManager.<ItemStack>createKey(EntityItemFrame.class, DataSerializers.ITEM_STACK);
+    private static final DataParameter<Integer> ROTATION = EntityDataManager.<Integer>createKey(EntityItemFrame.class, DataSerializers.VARINT);
     private float itemDropChance = 1.0F;
 
     public EntityItemFrame(World worldIn)
@@ -42,20 +42,17 @@
         this.updateFacingWithBoundingBox(p_i45852_3_);
     }
 
-    @Override
     protected void entityInit()
     {
         this.getDataManager().register(ITEM, ItemStack.EMPTY);
-        this.getDataManager().register(ROTATION, 0);
+        this.getDataManager().register(ROTATION, Integer.valueOf(0));
     }
 
-    @Override
     public float getCollisionBorderSize()
     {
         return 0.0F;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -79,35 +76,30 @@
         }
     }
 
-    @Override
     public int getWidthPixels()
     {
         return 12;
     }
 
-    @Override
     public int getHeightPixels()
     {
         return 12;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean isInRangeToRenderDist(double distance)
     {
-        double d0 = 16.0;
-        d0 *= 64.0 * getRenderDistanceWeight();
+        double d0 = 16.0D;
+        d0 = d0 * 64.0D * getRenderDistanceWeight();
         return distance < d0 * d0;
     }
 
-    @Override
     public void onBroken(@Nullable Entity brokenEntity)
     {
         this.playSound(SoundEvents.ENTITY_ITEMFRAME_BREAK, 1.0F, 1.0F);
         this.dropItemOrSelf(brokenEntity, true);
     }
 
-    @Override
     public void playPlaceSound()
     {
         this.playSound(SoundEvents.ENTITY_ITEMFRAME_PLACE, 1.0F, 1.0F);
@@ -148,19 +140,20 @@
     {
         if (!stack.isEmpty())
         {
-            if (stack.getItem() == Items.FILLED_MAP)
+            if (stack.getItem() instanceof net.minecraft.item.ItemMap)
             {
                 MapData mapdata = ((ItemMap)stack.getItem()).getMapData(stack, this.world);
                 mapdata.mapDecorations.remove("frame-" + this.getEntityId());
             }
 
-            stack.setItemFrame(null);
+            stack.setItemFrame((EntityItemFrame)null);
+            this.setDisplayedItem(ItemStack.EMPTY); //Forge: Fix MC-124833 Pistons duplicating Items.
         }
     }
 
     public ItemStack getDisplayedItem()
     {
-        return this.getDataManager().get(ITEM);
+        return (ItemStack)this.getDataManager().get(ITEM);
     }
 
     public void setDisplayedItem(ItemStack stack)
@@ -191,7 +184,6 @@
         }
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         if (key.equals(ITEM))
@@ -207,7 +199,7 @@
 
     public int getRotation()
     {
-        return this.getDataManager().get(ROTATION);
+        return ((Integer)this.getDataManager().get(ROTATION)).intValue();
     }
 
     public void setItemRotation(int rotationIn)
@@ -217,7 +209,7 @@
 
     private void setRotation(int rotationIn, boolean p_174865_2_)
     {
-        this.getDataManager().set(ROTATION, rotationIn % 8);
+        this.getDataManager().set(ROTATION, Integer.valueOf(rotationIn % 8));
 
         if (p_174865_2_ && this.hangingPosition != null)
         {
@@ -227,10 +219,9 @@
 
     public static void registerFixesItemFrame(DataFixer fixer)
     {
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(EntityItemFrame.class, "Item"));
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackData(EntityItemFrame.class, new String[] {"Item"}));
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         if (!this.getDisplayedItem().isEmpty())
@@ -243,7 +234,6 @@
         super.writeEntityToNBT(compound);
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         NBTTagCompound nbttagcompound = compound.getCompoundTag("Item");
@@ -262,7 +252,6 @@
         super.readEntityFromNBT(compound);
     }
 
-    @Override
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
