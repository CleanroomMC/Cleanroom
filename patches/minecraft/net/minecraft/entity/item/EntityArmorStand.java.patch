--- before/net/minecraft/entity/item/EntityArmorStand.java
+++ after/net/minecraft/entity/item/EntityArmorStand.java
@@ -47,36 +47,44 @@
     private static final Rotations DEFAULT_RIGHTARM_ROTATION = new Rotations(-15.0F, 0.0F, 10.0F);
     private static final Rotations DEFAULT_LEFTLEG_ROTATION = new Rotations(-1.0F, 0.0F, -1.0F);
     private static final Rotations DEFAULT_RIGHTLEG_ROTATION = new Rotations(1.0F, 0.0F, 1.0F);
-    public static final DataParameter<Byte> STATUS = EntityDataManager.createKey(EntityArmorStand.class, DataSerializers.BYTE);
-    public static final DataParameter<Rotations> HEAD_ROTATION = EntityDataManager.createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
-    public static final DataParameter<Rotations> BODY_ROTATION = EntityDataManager.createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
-    public static final DataParameter<Rotations> LEFT_ARM_ROTATION = EntityDataManager.createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
-    public static final DataParameter<Rotations> RIGHT_ARM_ROTATION = EntityDataManager.createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
-    public static final DataParameter<Rotations> LEFT_LEG_ROTATION = EntityDataManager.createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
-    public static final DataParameter<Rotations> RIGHT_LEG_ROTATION = EntityDataManager.createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
+    public static final DataParameter<Byte> STATUS = EntityDataManager.<Byte>createKey(EntityArmorStand.class, DataSerializers.BYTE);
+    public static final DataParameter<Rotations> HEAD_ROTATION = EntityDataManager.<Rotations>createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
+    public static final DataParameter<Rotations> BODY_ROTATION = EntityDataManager.<Rotations>createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
+    public static final DataParameter<Rotations> LEFT_ARM_ROTATION = EntityDataManager.<Rotations>createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
+    public static final DataParameter<Rotations> RIGHT_ARM_ROTATION = EntityDataManager.<Rotations>createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
+    public static final DataParameter<Rotations> LEFT_LEG_ROTATION = EntityDataManager.<Rotations>createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
+    public static final DataParameter<Rotations> RIGHT_LEG_ROTATION = EntityDataManager.<Rotations>createKey(EntityArmorStand.class, DataSerializers.ROTATIONS);
     private static final Predicate<Entity> IS_RIDEABLE_MINECART = new Predicate<Entity>()
     {
         public boolean apply(@Nullable Entity p_apply_1_)
         {
-            return p_apply_1_ instanceof EntityMinecart && ((EntityMinecart)p_apply_1_).getType() == EntityMinecart.Type.RIDEABLE;
+            return p_apply_1_ instanceof EntityMinecart && ((EntityMinecart)p_apply_1_).canBeRidden();
         }
     };
-    private final NonNullList<ItemStack> handItems = NonNullList.withSize(2, ItemStack.EMPTY);
-    private final NonNullList<ItemStack> armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
+    private final NonNullList<ItemStack> handItems;
+    private final NonNullList<ItemStack> armorItems;
     private boolean canInteract;
     public long punchCooldown;
     private int disabledSlots;
     private boolean wasMarker;
-    private Rotations headRotation = DEFAULT_HEAD_ROTATION;
-    private Rotations bodyRotation = DEFAULT_BODY_ROTATION;
-    private Rotations leftArmRotation = DEFAULT_LEFTARM_ROTATION;
-    private Rotations rightArmRotation = DEFAULT_RIGHTARM_ROTATION;
-    private Rotations leftLegRotation = DEFAULT_LEFTLEG_ROTATION;
-    private Rotations rightLegRotation = DEFAULT_RIGHTLEG_ROTATION;
+    private Rotations headRotation;
+    private Rotations bodyRotation;
+    private Rotations leftArmRotation;
+    private Rotations rightArmRotation;
+    private Rotations leftLegRotation;
+    private Rotations rightLegRotation;
 
     public EntityArmorStand(World worldIn)
     {
         super(worldIn);
+        this.handItems = NonNullList.<ItemStack>withSize(2, ItemStack.EMPTY);
+        this.armorItems = NonNullList.<ItemStack>withSize(4, ItemStack.EMPTY);
+        this.headRotation = DEFAULT_HEAD_ROTATION;
+        this.bodyRotation = DEFAULT_BODY_ROTATION;
+        this.leftArmRotation = DEFAULT_LEFTARM_ROTATION;
+        this.rightArmRotation = DEFAULT_RIGHTARM_ROTATION;
+        this.leftLegRotation = DEFAULT_LEFTLEG_ROTATION;
+        this.rightLegRotation = DEFAULT_RIGHTLEG_ROTATION;
         this.noClip = this.hasNoGravity();
         this.setSize(0.5F, 1.975F);
     }
@@ -87,7 +95,6 @@
         this.setPosition(posX, posY, posZ);
     }
 
-    @Override
     protected final void setSize(float width, float height)
     {
         double d0 = this.posX;
@@ -98,17 +105,15 @@
         this.setPosition(d0, d1, d2);
     }
 
-    @Override
     public boolean isServerWorld()
     {
         return super.isServerWorld() && !this.hasNoGravity();
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(STATUS, (byte)0);
+        this.dataManager.register(STATUS, Byte.valueOf((byte)0));
         this.dataManager.register(HEAD_ROTATION, DEFAULT_HEAD_ROTATION);
         this.dataManager.register(BODY_ROTATION, DEFAULT_BODY_ROTATION);
         this.dataManager.register(LEFT_ARM_ROTATION, DEFAULT_LEFTARM_ROTATION);
@@ -117,19 +122,16 @@
         this.dataManager.register(RIGHT_LEG_ROTATION, DEFAULT_RIGHTLEG_ROTATION);
     }
 
-    @Override
     public Iterable<ItemStack> getHeldEquipment()
     {
         return this.handItems;
     }
 
-    @Override
     public Iterable<ItemStack> getArmorInventoryList()
     {
         return this.armorItems;
     }
 
-    @Override
     public ItemStack getItemStackFromSlot(EntityEquipmentSlot slotIn)
     {
         switch (slotIn.getSlotType())
@@ -143,7 +145,6 @@
         }
     }
 
-    @Override
     public void setItemStackToSlot(EntityEquipmentSlot slotIn, ItemStack stack)
     {
         switch (slotIn.getSlotType())
@@ -158,7 +159,6 @@
         }
     }
 
-    @Override
     public boolean replaceItemInInventory(int inventorySlot, ItemStack itemStackIn)
     {
         EntityEquipmentSlot entityequipmentslot;
@@ -206,10 +206,9 @@
 
     public static void registerFixesArmorStand(DataFixer fixer)
     {
-        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(EntityArmorStand.class, "ArmorItems", "HandItems"));
+        fixer.registerWalker(FixTypes.ENTITY, new ItemStackDataLists(EntityArmorStand.class, new String[] {"ArmorItems", "HandItems"}));
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -257,7 +256,6 @@
         compound.setTag("Pose", this.readPoseFromNBT());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -266,7 +264,7 @@
         {
             NBTTagList nbttaglist = compound.getTagList("ArmorItems", 10);
 
-            for (int i = 0; i < this.armorItems.size(); i++)
+            for (int i = 0; i < this.armorItems.size(); ++i)
             {
                 this.armorItems.set(i, new ItemStack(nbttaglist.getCompoundTagAt(i)));
             }
@@ -276,7 +274,7 @@
         {
             NBTTagList nbttaglist1 = compound.getTagList("HandItems", 10);
 
-            for (int j = 0; j < this.handItems.size(); j++)
+            for (int j = 0; j < this.handItems.size(); ++j)
             {
                 this.handItems.set(j, new ItemStack(nbttaglist1.getCompoundTagAt(j)));
             }
@@ -347,99 +345,98 @@
         return nbttagcompound;
     }
 
-    @Override
     public boolean canBePushed()
     {
         return false;
     }
 
-    @Override
     protected void collideWithEntity(Entity entityIn)
     {
     }
 
-    @Override
     protected void collideWithNearbyEntities()
     {
         List<Entity> list = this.world.getEntitiesInAABBexcluding(this, this.getEntityBoundingBox(), IS_RIDEABLE_MINECART);
 
-        for (int i = 0; i < list.size(); i++)
+        for (int i = 0; i < list.size(); ++i)
         {
             Entity entity = list.get(i);
 
-            if (this.getDistanceSq(entity) <= 0.2)
+            if (this.getDistanceSq(entity) <= 0.2D)
             {
                 entity.applyEntityCollision(this);
             }
         }
     }
 
-    @Override
     public EnumActionResult applyPlayerInteraction(EntityPlayer player, Vec3d vec, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
 
-        if (this.hasMarker() || itemstack.getItem() == Items.NAME_TAG)
+        if (!this.hasMarker() && itemstack.getItem() != Items.NAME_TAG)
+        {
+            if (!this.world.isRemote && !player.isSpectator())
+            {
+                EntityEquipmentSlot entityequipmentslot = EntityLiving.getSlotForItemStack(itemstack);
+
+                if (itemstack.isEmpty())
+                {
+                    EntityEquipmentSlot entityequipmentslot1 = this.getClickedSlot(vec);
+                    EntityEquipmentSlot entityequipmentslot2 = this.isDisabled(entityequipmentslot1) ? entityequipmentslot : entityequipmentslot1;
+
+                    if (this.hasItemInSlot(entityequipmentslot2))
+                    {
+                        this.swapItem(player, entityequipmentslot2, itemstack, hand);
+                    }
+                }
+                else
+                {
+                    if (this.isDisabled(entityequipmentslot))
+                    {
+                        return EnumActionResult.FAIL;
+                    }
+
+                    if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.HAND && !this.getShowArms())
+                    {
+                        return EnumActionResult.FAIL;
+                    }
+
+                    this.swapItem(player, entityequipmentslot, itemstack, hand);
+                }
+
+                return EnumActionResult.SUCCESS;
+            }
+            else
+            {
+                return EnumActionResult.SUCCESS;
+            }
+        }
+        else
         {
             return EnumActionResult.PASS;
         }
-        else if (!this.world.isRemote && !player.isSpectator())
-        {
-            EntityEquipmentSlot entityequipmentslot = EntityLiving.getSlotForItemStack(itemstack);
-
-            if (itemstack.isEmpty())
-            {
-                EntityEquipmentSlot entityequipmentslot1 = this.getClickedSlot(vec);
-                EntityEquipmentSlot entityequipmentslot2 = this.isDisabled(entityequipmentslot1) ? entityequipmentslot : entityequipmentslot1;
-
-                if (this.hasItemInSlot(entityequipmentslot2))
-                {
-                    this.swapItem(player, entityequipmentslot2, itemstack, hand);
-                }
-            }
-            else
-            {
-                if (this.isDisabled(entityequipmentslot))
-                {
-                    return EnumActionResult.FAIL;
-                }
-
-                if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.HAND && !this.getShowArms())
-                {
-                    return EnumActionResult.FAIL;
-                }
-
-                this.swapItem(player, entityequipmentslot, itemstack, hand);
-            }
-
-            return EnumActionResult.SUCCESS;
-        }
-        else
-        {
-            return EnumActionResult.SUCCESS;
-        }
     }
 
     protected EntityEquipmentSlot getClickedSlot(Vec3d p_190772_1_)
     {
         EntityEquipmentSlot entityequipmentslot = EntityEquipmentSlot.MAINHAND;
         boolean flag = this.isSmall();
-        double d0 = flag ? p_190772_1_.y * 2.0 : p_190772_1_.y;
+        double d0 = flag ? p_190772_1_.y * 2.0D : p_190772_1_.y;
         EntityEquipmentSlot entityequipmentslot1 = EntityEquipmentSlot.FEET;
 
-        if (d0 >= 0.1 && d0 < 0.1 + (flag ? 0.8 : 0.45) && this.hasItemInSlot(entityequipmentslot1))
+        if (d0 >= 0.1D && d0 < 0.1D + (flag ? 0.8D : 0.45D) && this.hasItemInSlot(entityequipmentslot1))
         {
             entityequipmentslot = EntityEquipmentSlot.FEET;
         }
-        else if (d0 >= 0.9 + (flag ? 0.3 : 0.0) && d0 < 0.9 + (flag ? 1.0 : 0.7) && this.hasItemInSlot(EntityEquipmentSlot.CHEST))
+        else if (d0 >= 0.9D + (flag ? 0.3D : 0.0D) && d0 < 0.9D + (flag ? 1.0D : 0.7D) && this.hasItemInSlot(EntityEquipmentSlot.CHEST))
         {
             entityequipmentslot = EntityEquipmentSlot.CHEST;
         }
-        else if (d0 >= 0.4 && d0 < 0.4 + (flag ? 1.0 : 0.8) && this.hasItemInSlot(EntityEquipmentSlot.LEGS))
+        else if (d0 >= 0.4D && d0 < 0.4D + (flag ? 1.0D : 0.8D) && this.hasItemInSlot(EntityEquipmentSlot.LEGS))
         {
             entityequipmentslot = EntityEquipmentSlot.LEGS;
         }
-        else if (d0 >= 1.6 && this.hasItemInSlot(EntityEquipmentSlot.HEAD))
+        else if (d0 >= 1.6D && this.hasItemInSlot(EntityEquipmentSlot.HEAD))
         {
             entityequipmentslot = EntityEquipmentSlot.HEAD;
         }
@@ -466,121 +463,127 @@
                     itemstack2.setCount(1);
                     this.setItemStackToSlot(p_184795_2_, itemstack2);
                 }
-                else if (p_184795_3_.isEmpty() || p_184795_3_.getCount() <= 1)
+                else if (!p_184795_3_.isEmpty() && p_184795_3_.getCount() > 1)
+                {
+                    if (itemstack.isEmpty())
+                    {
+                        ItemStack itemstack1 = p_184795_3_.copy();
+                        itemstack1.setCount(1);
+                        this.setItemStackToSlot(p_184795_2_, itemstack1);
+                        p_184795_3_.shrink(1);
+                    }
+                }
+                else
                 {
                     this.setItemStackToSlot(p_184795_2_, p_184795_3_);
                     player.setHeldItem(hand, itemstack);
                 }
-                else if (itemstack.isEmpty())
-                {
-                    ItemStack itemstack1 = p_184795_3_.copy();
-                    itemstack1.setCount(1);
-                    this.setItemStackToSlot(p_184795_2_, itemstack1);
-                    p_184795_3_.shrink(1);
-                }
             }
         }
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
-        if (this.world.isRemote || this.isDead)
-        {
-            return false;
-        }
-        else if (DamageSource.OUT_OF_WORLD.equals(source))
-        {
-            this.setDead();
-            return false;
-        }
-        else if (this.isEntityInvulnerable(source) || this.canInteract || this.hasMarker())
-        {
-            return false;
-        }
-        else if (source.isExplosion())
-        {
-            this.dropContents();
-            this.setDead();
-            return false;
-        }
-        else if (DamageSource.IN_FIRE.equals(source))
-        {
-            if (this.isBurning())
-            {
-                this.damageArmorStand(0.15F);
-            }
-            else
-            {
-                this.setFire(5);
-            }
-
-            return false;
-        }
-        else if (DamageSource.ON_FIRE.equals(source) && this.getHealth() > 0.5F)
-        {
-            this.damageArmorStand(4.0F);
-            return false;
-        }
-        else
-        {
-            boolean flag = "arrow".equals(source.getDamageType());
-            boolean flag1 = "player".equals(source.getDamageType());
-
-            if (!flag1 && !flag)
-            {
+        if (!this.world.isRemote && !this.isDead)
+        {
+            if (DamageSource.OUT_OF_WORLD.equals(source))
+            {
+                this.setDead();
                 return false;
             }
-            else
+            else if (!this.isEntityInvulnerable(source) && !this.canInteract && !this.hasMarker())
             {
-                if (source.getImmediateSource() instanceof EntityArrow)
-                {
-                    source.getImmediateSource().setDead();
-                }
-
-                if (source.getTrueSource() instanceof EntityPlayer && !((EntityPlayer)source.getTrueSource()).capabilities.allowEdit)
-                {
-                    return false;
-                }
-                else if (source.isCreativePlayer())
-                {
-                    this.playBrokenSound();
-                    this.playParticles();
+                if (source.isExplosion())
+                {
+                    this.dropContents();
                     this.setDead();
                     return false;
                 }
+                else if (DamageSource.IN_FIRE.equals(source))
+                {
+                    if (this.isBurning())
+                    {
+                        this.damageArmorStand(0.15F);
+                    }
+                    else
+                    {
+                        this.setFire(5);
+                    }
+
+                    return false;
+                }
+                else if (DamageSource.ON_FIRE.equals(source) && this.getHealth() > 0.5F)
+                {
+                    this.damageArmorStand(4.0F);
+                    return false;
+                }
                 else
                 {
-                    long i = this.world.getTotalWorldTime();
+                    boolean flag = "arrow".equals(source.getDamageType());
+                    boolean flag1 = "player".equals(source.getDamageType());
 
-                    if (i - this.punchCooldown > 5L && !flag)
+                    if (!flag1 && !flag)
                     {
-                        this.world.setEntityState(this, (byte)32);
-                        this.punchCooldown = i;
+                        return false;
                     }
                     else
                     {
-                        this.dropBlock();
-                        this.playParticles();
-                        this.setDead();
+                        if (source.getImmediateSource() instanceof EntityArrow)
+                        {
+                            source.getImmediateSource().setDead();
+                        }
+
+                        if (source.getTrueSource() instanceof EntityPlayer && !((EntityPlayer)source.getTrueSource()).capabilities.allowEdit)
+                        {
+                            return false;
+                        }
+                        else if (source.isCreativePlayer())
+                        {
+                            this.playBrokenSound();
+                            this.playParticles();
+                            this.setDead();
+                            return false;
+                        }
+                        else
+                        {
+                            long i = this.world.getTotalWorldTime();
+
+                            if (i - this.punchCooldown > 5L && !flag)
+                            {
+                                this.world.setEntityState(this, (byte)32);
+                                this.punchCooldown = i;
+                            }
+                            else
+                            {
+                                this.dropBlock();
+                                this.playParticles();
+                                this.setDead();
+                            }
+
+                            return false;
+                        }
                     }
-
-                    return false;
                 }
             }
+            else
+            {
+                return false;
+            }
+        }
+        else
+        {
+            return false;
         }
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void handleStatusUpdate(byte id)
     {
         if (id == 32)
         {
             if (this.world.isRemote)
             {
-                this.world
-                .playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ARMORSTAND_HIT, this.getSoundCategory(), 0.3F, 1.0F, false);
+                this.world.playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ARMORSTAND_HIT, this.getSoundCategory(), 0.3F, 1.0F, false);
                 this.punchCooldown = this.world.getTotalWorldTime();
             }
         }
@@ -591,17 +594,16 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean isInRangeToRenderDist(double distance)
     {
-        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 4.0;
+        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 4.0D;
 
-        if (Double.isNaN(d0) || d0 == 0.0)
+        if (Double.isNaN(d0) || d0 == 0.0D)
         {
-            d0 = 4.0;
+            d0 = 4.0D;
         }
 
-        d0 *= 64.0;
+        d0 = d0 * 64.0D;
         return distance < d0 * d0;
     }
 
@@ -609,26 +611,14 @@
     {
         if (this.world instanceof WorldServer)
         {
-            ((WorldServer)this.world)
-            .spawnParticle(
-                EnumParticleTypes.BLOCK_DUST,
-                this.posX,
-                this.posY + (double)this.height / 1.5,
-                this.posZ,
-                10,
-                (double)(this.width / 4.0F),
-                (double)(this.height / 4.0F),
-                (double)(this.width / 4.0F),
-                0.05,
-                Block.getStateId(Blocks.PLANKS.getDefaultState())
-            );
+            ((WorldServer)this.world).spawnParticle(EnumParticleTypes.BLOCK_DUST, this.posX, this.posY + (double)this.height / 1.5D, this.posZ, 10, (double)(this.width / 4.0F), (double)(this.height / 4.0F), (double)(this.width / 4.0F), 0.05D, Block.getStateId(Blocks.PLANKS.getDefaultState()));
         }
     }
 
     private void damageArmorStand(float damage)
     {
         float f = this.getHealth();
-        f -= damage;
+        f = f - damage;
 
         if (f <= 0.5F)
         {
@@ -651,24 +641,24 @@
     {
         this.playBrokenSound();
 
-        for (int i = 0; i < this.handItems.size(); i++)
+        for (int i = 0; i < this.handItems.size(); ++i)
         {
             ItemStack itemstack = this.handItems.get(i);
 
             if (!itemstack.isEmpty())
             {
-                Block.spawnAsEntity(this.world, new BlockPos(this).up(), itemstack);
+                Block.spawnAsEntity(this.world, (new BlockPos(this)).up(), itemstack);
                 this.handItems.set(i, ItemStack.EMPTY);
             }
         }
 
-        for (int j = 0; j < this.armorItems.size(); j++)
+        for (int j = 0; j < this.armorItems.size(); ++j)
         {
             ItemStack itemstack1 = this.armorItems.get(j);
 
             if (!itemstack1.isEmpty())
             {
-                Block.spawnAsEntity(this.world, new BlockPos(this).up(), itemstack1);
+                Block.spawnAsEntity(this.world, (new BlockPos(this)).up(), itemstack1);
                 this.armorItems.set(j, ItemStack.EMPTY);
             }
         }
@@ -676,11 +666,9 @@
 
     private void playBrokenSound()
     {
-        this.world
-        .playSound(null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ARMORSTAND_BREAK, this.getSoundCategory(), 1.0F, 1.0F);
+        this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ARMORSTAND_BREAK, this.getSoundCategory(), 1.0F, 1.0F);
     }
 
-    @Override
     protected float updateDistance(float p_110146_1_, float p_110146_2_)
     {
         this.prevRenderYawOffset = this.prevRotationYaw;
@@ -688,19 +676,16 @@
         return 0.0F;
     }
 
-    @Override
     public float getEyeHeight()
     {
         return this.isChild() ? this.height * 0.5F : this.height * 0.9F;
     }
 
-    @Override
     public double getYOffset()
     {
-        return this.hasMarker() ? 0.0 : 0.1F;
+        return this.hasMarker() ? 0.0D : 0.10000000149011612D;
     }
 
-    @Override
     public void travel(float strafe, float vertical, float forward)
     {
         if (!this.hasNoGravity())
@@ -709,60 +694,57 @@
         }
     }
 
-    @Override
     public void setRenderYawOffset(float offset)
     {
         this.prevRenderYawOffset = this.prevRotationYaw = offset;
         this.prevRotationYawHead = this.rotationYawHead = offset;
     }
 
-    @Override
     public void setRotationYawHead(float rotation)
     {
         this.prevRenderYawOffset = this.prevRotationYaw = rotation;
         this.prevRotationYawHead = this.rotationYawHead = rotation;
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
-        Rotations rotations = this.dataManager.get(HEAD_ROTATION);
+        Rotations rotations = (Rotations)this.dataManager.get(HEAD_ROTATION);
 
         if (!this.headRotation.equals(rotations))
         {
             this.setHeadRotation(rotations);
         }
 
-        Rotations rotations1 = this.dataManager.get(BODY_ROTATION);
+        Rotations rotations1 = (Rotations)this.dataManager.get(BODY_ROTATION);
 
         if (!this.bodyRotation.equals(rotations1))
         {
             this.setBodyRotation(rotations1);
         }
 
-        Rotations rotations2 = this.dataManager.get(LEFT_ARM_ROTATION);
+        Rotations rotations2 = (Rotations)this.dataManager.get(LEFT_ARM_ROTATION);
 
         if (!this.leftArmRotation.equals(rotations2))
         {
             this.setLeftArmRotation(rotations2);
         }
 
-        Rotations rotations3 = this.dataManager.get(RIGHT_ARM_ROTATION);
+        Rotations rotations3 = (Rotations)this.dataManager.get(RIGHT_ARM_ROTATION);
 
         if (!this.rightArmRotation.equals(rotations3))
         {
             this.setRightArmRotation(rotations3);
         }
 
-        Rotations rotations4 = this.dataManager.get(LEFT_LEG_ROTATION);
+        Rotations rotations4 = (Rotations)this.dataManager.get(LEFT_LEG_ROTATION);
 
         if (!this.leftLegRotation.equals(rotations4))
         {
             this.setLeftLegRotation(rotations4);
         }
 
-        Rotations rotations5 = this.dataManager.get(RIGHT_LEG_ROTATION);
+        Rotations rotations5 = (Rotations)this.dataManager.get(RIGHT_LEG_ROTATION);
 
         if (!this.rightLegRotation.equals(rotations5))
         {
@@ -791,38 +773,32 @@
         }
     }
 
-    @Override
     protected void updatePotionMetadata()
     {
         this.setInvisible(this.canInteract);
     }
 
-    @Override
     public void setInvisible(boolean invisible)
     {
         this.canInteract = invisible;
         super.setInvisible(invisible);
     }
 
-    @Override
     public boolean isChild()
     {
         return this.isSmall();
     }
 
-    @Override
     public void onKillCommand()
     {
         this.setDead();
     }
 
-    @Override
     public boolean isImmuneToExplosions()
     {
         return this.isInvisible();
     }
 
-    @Override
     public EnumPushReaction getPushReaction()
     {
         return this.hasMarker() ? EnumPushReaction.IGNORE : super.getPushReaction();
@@ -830,44 +806,44 @@
 
     private void setSmall(boolean small)
     {
-        this.dataManager.set(STATUS, this.setBit(this.dataManager.get(STATUS), 1, small));
+        this.dataManager.set(STATUS, Byte.valueOf(this.setBit(((Byte)this.dataManager.get(STATUS)).byteValue(), 1, small)));
         this.setSize(0.5F, 1.975F);
     }
 
     public boolean isSmall()
     {
-        return (this.dataManager.get(STATUS) & 1) != 0;
+        return (((Byte)this.dataManager.get(STATUS)).byteValue() & 1) != 0;
     }
 
     private void setShowArms(boolean showArms)
     {
-        this.dataManager.set(STATUS, this.setBit(this.dataManager.get(STATUS), 4, showArms));
+        this.dataManager.set(STATUS, Byte.valueOf(this.setBit(((Byte)this.dataManager.get(STATUS)).byteValue(), 4, showArms)));
     }
 
     public boolean getShowArms()
     {
-        return (this.dataManager.get(STATUS) & 4) != 0;
+        return (((Byte)this.dataManager.get(STATUS)).byteValue() & 4) != 0;
     }
 
     private void setNoBasePlate(boolean noBasePlate)
     {
-        this.dataManager.set(STATUS, this.setBit(this.dataManager.get(STATUS), 8, noBasePlate));
+        this.dataManager.set(STATUS, Byte.valueOf(this.setBit(((Byte)this.dataManager.get(STATUS)).byteValue(), 8, noBasePlate)));
     }
 
     public boolean hasNoBasePlate()
     {
-        return (this.dataManager.get(STATUS) & 8) != 0;
+        return (((Byte)this.dataManager.get(STATUS)).byteValue() & 8) != 0;
     }
 
     private void setMarker(boolean marker)
     {
-        this.dataManager.set(STATUS, this.setBit(this.dataManager.get(STATUS), 16, marker));
+        this.dataManager.set(STATUS, Byte.valueOf(this.setBit(((Byte)this.dataManager.get(STATUS)).byteValue(), 16, marker)));
         this.setSize(0.5F, 1.975F);
     }
 
     public boolean hasMarker()
     {
-        return (this.dataManager.get(STATUS) & 16) != 0;
+        return (((Byte)this.dataManager.get(STATUS)).byteValue() & 16) != 0;
     }
 
     private byte setBit(byte p_184797_1_, int p_184797_2_, boolean p_184797_3_)
@@ -954,50 +930,42 @@
         return this.rightLegRotation;
     }
 
-    @Override
     public boolean canBeCollidedWith()
     {
         return super.canBeCollidedWith() && !this.hasMarker();
     }
 
-    @Override
     public EnumHandSide getPrimaryHand()
     {
         return EnumHandSide.RIGHT;
     }
 
-    @Override
     protected SoundEvent getFallSound(int heightIn)
     {
         return SoundEvents.ENTITY_ARMORSTAND_FALL;
     }
 
     @Nullable
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_ARMORSTAND_HIT;
     }
 
     @Nullable
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_ARMORSTAND_BREAK;
     }
 
-    @Override
     public void onStruckByLightning(EntityLightningBolt lightningBolt)
     {
     }
 
-    @Override
     public boolean canBeHitWithPotion()
     {
         return false;
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         if (STATUS.equals(key))
@@ -1008,7 +976,6 @@
         super.notifyDataManagerChange(key);
     }
 
-    @Override
     public boolean attackable()
     {
         return false;
