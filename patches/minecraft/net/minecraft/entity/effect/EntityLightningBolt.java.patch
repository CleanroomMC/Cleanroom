--- before/net/minecraft/entity/effect/EntityLightningBolt.java
+++ after/net/minecraft/entity/effect/EntityLightningBolt.java
@@ -3,6 +3,7 @@
 import java.util.List;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.nbt.NBTTagCompound;
@@ -29,23 +30,18 @@
         this.effectOnly = effectOnlyIn;
         BlockPos blockpos = new BlockPos(this);
 
-        if (!effectOnlyIn
-                && !worldIn.isRemote
-                && worldIn.getGameRules().getBoolean("doFireTick")
-                && (worldIn.getDifficulty() == EnumDifficulty.NORMAL || worldIn.getDifficulty() == EnumDifficulty.HARD)
-                && worldIn.isAreaLoaded(blockpos, 10))
+        if (!effectOnlyIn && !worldIn.isRemote && worldIn.getGameRules().getBoolean("doFireTick") && (worldIn.getDifficulty() == EnumDifficulty.NORMAL || worldIn.getDifficulty() == EnumDifficulty.HARD) && worldIn.isAreaLoaded(blockpos, 10))
         {
             if (worldIn.getBlockState(blockpos).getMaterial() == Material.AIR && Blocks.FIRE.canPlaceBlockAt(worldIn, blockpos))
             {
                 worldIn.setBlockState(blockpos, Blocks.FIRE.getDefaultState());
             }
 
-            for (int i = 0; i < 4; i++)
+            for (int i = 0; i < 4; ++i)
             {
                 BlockPos blockpos1 = blockpos.add(this.rand.nextInt(3) - 1, this.rand.nextInt(3) - 1, this.rand.nextInt(3) - 1);
 
-                if (worldIn.getBlockState(blockpos1).getMaterial() == Material.AIR && Blocks.FIRE.canPlaceBlockAt(worldIn, blockpos1)
-                   )
+                if (worldIn.getBlockState(blockpos1).getMaterial() == Material.AIR && Blocks.FIRE.canPlaceBlockAt(worldIn, blockpos1))
                 {
                     worldIn.setBlockState(blockpos1, Blocks.FIRE.getDefaultState());
                 }
@@ -53,44 +49,22 @@
         }
     }
 
-    @Override
     public SoundCategory getSoundCategory()
     {
         return SoundCategory.WEATHER;
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
 
         if (this.lightningState == 2)
         {
-            this.world
-            .playSound(
-                null,
-                this.posX,
-                this.posY,
-                this.posZ,
-                SoundEvents.ENTITY_LIGHTNING_THUNDER,
-                SoundCategory.WEATHER,
-                10000.0F,
-                0.8F + this.rand.nextFloat() * 0.2F
-            );
-            this.world
-            .playSound(
-                null,
-                this.posX,
-                this.posY,
-                this.posZ,
-                SoundEvents.ENTITY_LIGHTNING_IMPACT,
-                SoundCategory.WEATHER,
-                2.0F,
-                0.5F + this.rand.nextFloat() * 0.2F
-            );
+            this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_LIGHTNING_THUNDER, SoundCategory.WEATHER, 10000.0F, 0.8F + this.rand.nextFloat() * 0.2F);
+            this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_LIGHTNING_IMPACT, SoundCategory.WEATHER, 2.0F, 0.5F + this.rand.nextFloat() * 0.2F);
         }
 
-        this.lightningState--;
+        --this.lightningState;
 
         if (this.lightningState < 0)
         {
@@ -100,7 +74,7 @@
             }
             else if (this.lightningState < -this.rand.nextInt(10))
             {
-                this.boltLivingTime--;
+                --this.boltLivingTime;
                 this.lightningState = 1;
 
                 if (!this.effectOnly && !this.world.isRemote)
@@ -108,10 +82,7 @@
                     this.boltVertex = this.rand.nextLong();
                     BlockPos blockpos = new BlockPos(this);
 
-                    if (this.world.getGameRules().getBoolean("doFireTick")
-                            && this.world.isAreaLoaded(blockpos, 10)
-                            && this.world.getBlockState(blockpos).getMaterial() == Material.AIR
-                            && Blocks.FIRE.canPlaceBlockAt(this.world, blockpos))
+                    if (this.world.getGameRules().getBoolean("doFireTick") && this.world.isAreaLoaded(blockpos, 10) && this.world.getBlockState(blockpos).getMaterial() == Material.AIR && Blocks.FIRE.canPlaceBlockAt(this.world, blockpos))
                     {
                         this.world.setBlockState(blockpos, Blocks.FIRE.getDefaultState());
                     }
@@ -127,40 +98,27 @@
             }
             else if (!this.effectOnly)
             {
-                double d0 = 3.0;
-                List<Entity> list = this.world
-                                    .getEntitiesWithinAABBExcludingEntity(
-                                        this,
-                                        new AxisAlignedBB(
-                                            this.posX - 3.0,
-                                            this.posY - 3.0,
-                                            this.posZ - 3.0,
-                                            this.posX + 3.0,
-                                            this.posY + 6.0 + 3.0,
-                                            this.posZ + 3.0
-                                        )
-                                    );
+                double d0 = 3.0D;
+                List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this, new AxisAlignedBB(this.posX - 3.0D, this.posY - 3.0D, this.posZ - 3.0D, this.posX + 3.0D, this.posY + 6.0D + 3.0D, this.posZ + 3.0D));
 
-                for (int i = 0; i < list.size(); i++)
+                for (int i = 0; i < list.size(); ++i)
                 {
                     Entity entity = list.get(i);
-                    entity.onStruckByLightning(this);
+                    if (!net.minecraftforge.event.ForgeEventFactory.onEntityStruckByLightning(entity, this))
+                        entity.onStruckByLightning(this);
                 }
             }
         }
     }
 
-    @Override
     protected void entityInit()
     {
     }
 
-    @Override
     protected void readEntityFromNBT(NBTTagCompound compound)
     {
     }
 
-    @Override
     protected void writeEntityToNBT(NBTTagCompound compound)
     {
     }
