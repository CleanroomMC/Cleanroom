--- before/net/minecraft/entity/boss/EntityWither.java
+++ after/net/minecraft/entity/boss/EntityWither.java
@@ -52,11 +52,11 @@
 
 public class EntityWither extends EntityMob implements IRangedAttackMob
 {
-    private static final DataParameter<Integer> FIRST_HEAD_TARGET = EntityDataManager.createKey(EntityWither.class, DataSerializers.VARINT);
-    private static final DataParameter<Integer> SECOND_HEAD_TARGET = EntityDataManager.createKey(EntityWither.class, DataSerializers.VARINT);
-    private static final DataParameter<Integer> THIRD_HEAD_TARGET = EntityDataManager.createKey(EntityWither.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> FIRST_HEAD_TARGET = EntityDataManager.<Integer>createKey(EntityWither.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> SECOND_HEAD_TARGET = EntityDataManager.<Integer>createKey(EntityWither.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> THIRD_HEAD_TARGET = EntityDataManager.<Integer>createKey(EntityWither.class, DataSerializers.VARINT);
     private static final DataParameter<Integer>[] HEAD_TARGETS = new DataParameter[] {FIRST_HEAD_TARGET, SECOND_HEAD_TARGET, THIRD_HEAD_TARGET};
-    private static final DataParameter<Integer> INVULNERABILITY_TIME = EntityDataManager.createKey(EntityWither.class, DataSerializers.VARINT);
+    private static final DataParameter<Integer> INVULNERABILITY_TIME = EntityDataManager.<Integer>createKey(EntityWither.class, DataSerializers.VARINT);
     private final float[] xRotationHeads = new float[2];
     private final float[] yRotationHeads = new float[2];
     private final float[] xRotOHeads = new float[2];
@@ -64,15 +64,12 @@
     private final int[] nextHeadUpdate = new int[2];
     private final int[] idleHeadUpdates = new int[2];
     private int blockBreakCounter;
-    private final BossInfoServer bossInfo = (BossInfoServer)new BossInfoServer(this.getDisplayName(), BossInfo.Color.PURPLE, BossInfo.Overlay.PROGRESS)
-            .setDarkenSky(true);
+    private final BossInfoServer bossInfo = (BossInfoServer)(new BossInfoServer(this.getDisplayName(), BossInfo.Color.PURPLE, BossInfo.Overlay.PROGRESS)).setDarkenSky(true);
     private static final Predicate<Entity> NOT_UNDEAD = new Predicate<Entity>()
     {
         public boolean apply(@Nullable Entity p_apply_1_)
         {
-            return p_apply_1_ instanceof EntityLivingBase
-                   && ((EntityLivingBase)p_apply_1_).getCreatureAttribute() != EnumCreatureAttribute.UNDEAD
-                   && ((EntityLivingBase)p_apply_1_).attackable();
+            return p_apply_1_ instanceof EntityLivingBase && ((EntityLivingBase)p_apply_1_).getCreatureAttribute() != EnumCreatureAttribute.UNDEAD && ((EntityLivingBase)p_apply_1_).attackable();
         }
     };
 
@@ -86,27 +83,25 @@
         this.experienceValue = 50;
     }
 
-    @Override
     protected void initEntityAI()
     {
         this.tasks.addTask(0, new EntityWither.AIDoNothing());
         this.tasks.addTask(1, new EntityAISwimming(this));
-        this.tasks.addTask(2, new EntityAIAttackRanged(this, 1.0, 40, 20.0F));
-        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 1.0));
+        this.tasks.addTask(2, new EntityAIAttackRanged(this, 1.0D, 40, 20.0F));
+        this.tasks.addTask(5, new EntityAIWanderAvoidWater(this, 1.0D));
         this.tasks.addTask(6, new EntityAIWatchClosest(this, EntityPlayer.class, 8.0F));
         this.tasks.addTask(7, new EntityAILookIdle(this));
-        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false));
-        this.targetTasks.addTask(2, new EntityAINearestAttackableTarget<>(this, EntityLiving.class, 0, false, false, NOT_UNDEAD));
+        this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false, new Class[0]));
+        this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityLiving.class, 0, false, false, NOT_UNDEAD));
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(FIRST_HEAD_TARGET, 0);
-        this.dataManager.register(SECOND_HEAD_TARGET, 0);
-        this.dataManager.register(THIRD_HEAD_TARGET, 0);
-        this.dataManager.register(INVULNERABILITY_TIME, 0);
+        this.dataManager.register(FIRST_HEAD_TARGET, Integer.valueOf(0));
+        this.dataManager.register(SECOND_HEAD_TARGET, Integer.valueOf(0));
+        this.dataManager.register(THIRD_HEAD_TARGET, Integer.valueOf(0));
+        this.dataManager.register(INVULNERABILITY_TIME, Integer.valueOf(0));
     }
 
     public static void registerFixesWither(DataFixer fixer)
@@ -114,14 +109,12 @@
         EntityLiving.registerFixesMob(fixer, EntityWither.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
         compound.setInteger("Invul", this.getInvulTime());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -133,35 +126,30 @@
         }
     }
 
-    @Override
     public void setCustomNameTag(String name)
     {
         super.setCustomNameTag(name);
         this.bossInfo.setName(this.getDisplayName());
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         return SoundEvents.ENTITY_WITHER_AMBIENT;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_WITHER_HURT;
     }
 
-    @Override
     protected SoundEvent getDeathSound()
     {
         return SoundEvents.ENTITY_WITHER_DEATH;
     }
 
-    @Override
     public void onLivingUpdate()
     {
-        this.motionY *= 0.6F;
+        this.motionY *= 0.6000000238418579D;
 
         if (!this.world.isRemote && this.getWatchedTargetId(0) > 0)
         {
@@ -169,43 +157,43 @@
 
             if (entity != null)
             {
-                if (this.posY < entity.posY || !this.isArmored() && this.posY < entity.posY + 5.0)
+                if (this.posY < entity.posY || !this.isArmored() && this.posY < entity.posY + 5.0D)
                 {
-                    if (this.motionY < 0.0)
+                    if (this.motionY < 0.0D)
                     {
-                        this.motionY = 0.0;
+                        this.motionY = 0.0D;
                     }
 
-                    this.motionY = this.motionY + (0.5 - this.motionY) * 0.6F;
+                    this.motionY += (0.5D - this.motionY) * 0.6000000238418579D;
                 }
 
                 double d0 = entity.posX - this.posX;
                 double d1 = entity.posZ - this.posZ;
                 double d3 = d0 * d0 + d1 * d1;
 
-                if (d3 > 9.0)
+                if (d3 > 9.0D)
                 {
                     double d5 = (double)MathHelper.sqrt(d3);
-                    this.motionX = this.motionX + (d0 / d5 * 0.5 - this.motionX) * 0.6F;
-                    this.motionZ = this.motionZ + (d1 / d5 * 0.5 - this.motionZ) * 0.6F;
+                    this.motionX += (d0 / d5 * 0.5D - this.motionX) * 0.6000000238418579D;
+                    this.motionZ += (d1 / d5 * 0.5D - this.motionZ) * 0.6000000238418579D;
                 }
             }
         }
 
-        if (this.motionX * this.motionX + this.motionZ * this.motionZ > 0.05F)
+        if (this.motionX * this.motionX + this.motionZ * this.motionZ > 0.05000000074505806D)
         {
-            this.rotationYaw = (float)MathHelper.atan2(this.motionZ, this.motionX) * (180.0F / (float)Math.PI) - 90.0F;
+            this.rotationYaw = (float)MathHelper.atan2(this.motionZ, this.motionX) * (180F / (float)Math.PI) - 90.0F;
         }
 
         super.onLivingUpdate();
 
-        for (int i = 0; i < 2; i++)
+        for (int i = 0; i < 2; ++i)
         {
             this.yRotOHeads[i] = this.yRotationHeads[i];
             this.xRotOHeads[i] = this.xRotationHeads[i];
         }
 
-        for (int j = 0; j < 2; j++)
+        for (int j = 0; j < 2; ++j)
         {
             int k = this.getWatchedTargetId(j + 1);
             Entity entity1 = null;
@@ -224,8 +212,8 @@
                 double d7 = entity1.posY + (double)entity1.getEyeHeight() - d12;
                 double d8 = entity1.posZ - d13;
                 double d9 = (double)MathHelper.sqrt(d6 * d6 + d8 * d8);
-                float f = (float)(MathHelper.atan2(d8, d6) * 180.0F / (float)Math.PI) - 90.0F;
-                float f1 = (float)(-(MathHelper.atan2(d7, d9) * 180.0F / (float)Math.PI));
+                float f = (float)(MathHelper.atan2(d8, d6) * (180D / Math.PI)) - 90.0F;
+                float f1 = (float)(-(MathHelper.atan2(d7, d9) * (180D / Math.PI)));
                 this.xRotationHeads[j] = this.rotlerp(this.xRotationHeads[j], f1, 40.0F);
                 this.yRotationHeads[j] = this.rotlerp(this.yRotationHeads[j], f, 10.0F);
             }
@@ -237,56 +225,28 @@
 
         boolean flag = this.isArmored();
 
-        for (int l = 0; l < 3; l++)
+        for (int l = 0; l < 3; ++l)
         {
             double d10 = this.getHeadX(l);
             double d2 = this.getHeadY(l);
             double d4 = this.getHeadZ(l);
-            this.world
-            .spawnParticle(
-                EnumParticleTypes.SMOKE_NORMAL,
-                d10 + this.rand.nextGaussian() * 0.3F,
-                d2 + this.rand.nextGaussian() * 0.3F,
-                d4 + this.rand.nextGaussian() * 0.3F,
-                0.0,
-                0.0,
-                0.0
-            );
+            this.world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d10 + this.rand.nextGaussian() * 0.30000001192092896D, d2 + this.rand.nextGaussian() * 0.30000001192092896D, d4 + this.rand.nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D);
 
             if (flag && this.world.rand.nextInt(4) == 0)
             {
-                this.world
-                .spawnParticle(
-                    EnumParticleTypes.SPELL_MOB,
-                    d10 + this.rand.nextGaussian() * 0.3F,
-                    d2 + this.rand.nextGaussian() * 0.3F,
-                    d4 + this.rand.nextGaussian() * 0.3F,
-                    0.7F,
-                    0.7F,
-                    0.5
-                );
+                this.world.spawnParticle(EnumParticleTypes.SPELL_MOB, d10 + this.rand.nextGaussian() * 0.30000001192092896D, d2 + this.rand.nextGaussian() * 0.30000001192092896D, d4 + this.rand.nextGaussian() * 0.30000001192092896D, 0.699999988079071D, 0.699999988079071D, 0.5D);
             }
         }
 
         if (this.getInvulTime() > 0)
         {
-            for (int i1 = 0; i1 < 3; i1++)
+            for (int i1 = 0; i1 < 3; ++i1)
             {
-                this.world
-                .spawnParticle(
-                    EnumParticleTypes.SPELL_MOB,
-                    this.posX + this.rand.nextGaussian(),
-                    this.posY + (double)(this.rand.nextFloat() * 3.3F),
-                    this.posZ + this.rand.nextGaussian(),
-                    0.7F,
-                    0.7F,
-                    0.9F
-                );
+                this.world.spawnParticle(EnumParticleTypes.SPELL_MOB, this.posX + this.rand.nextGaussian(), this.posY + (double)(this.rand.nextFloat() * 3.3F), this.posZ + this.rand.nextGaussian(), 0.699999988079071D, 0.699999988079071D, 0.8999999761581421D);
             }
         }
     }
 
-    @Override
     protected void updateAITasks()
     {
         if (this.getInvulTime() > 0)
@@ -295,16 +255,7 @@
 
             if (j1 <= 0)
             {
-                this.world
-                .newExplosion(
-                    this,
-                    this.posX,
-                    this.posY + (double)this.getEyeHeight(),
-                    this.posZ,
-                    7.0F,
-                    false,
-                    this.world.getGameRules().getBoolean("mobGriefing")
-                );
+                this.world.newExplosion(this, this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, 7.0F, false, net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this));
                 this.world.playBroadcastSound(1023, new BlockPos(this), 0);
             }
 
@@ -319,22 +270,28 @@
         {
             super.updateAITasks();
 
-            for (int i = 1; i < 3; i++)
+            for (int i = 1; i < 3; ++i)
             {
                 if (this.ticksExisted >= this.nextHeadUpdate[i - 1])
                 {
                     this.nextHeadUpdate[i - 1] = this.ticksExisted + 10 + this.rand.nextInt(10);
 
-                    if ((this.world.getDifficulty() == EnumDifficulty.NORMAL || this.world.getDifficulty() == EnumDifficulty.HARD)
-                            && this.idleHeadUpdates[i - 1]++ > 15)
+                    if (this.world.getDifficulty() == EnumDifficulty.NORMAL || this.world.getDifficulty() == EnumDifficulty.HARD)
                     {
-                        float f = 10.0F;
-                        float f1 = 5.0F;
-                        double d0 = MathHelper.nextDouble(this.rand, this.posX - 10.0, this.posX + 10.0);
-                        double d1 = MathHelper.nextDouble(this.rand, this.posY - 5.0, this.posY + 5.0);
-                        double d2 = MathHelper.nextDouble(this.rand, this.posZ - 10.0, this.posZ + 10.0);
-                        this.launchWitherSkullToCoords(i + 1, d0, d1, d2, true);
-                        this.idleHeadUpdates[i - 1] = 0;
+                        int j3 = i - 1;
+                        int k3 = this.idleHeadUpdates[i - 1];
+                        this.idleHeadUpdates[j3] = this.idleHeadUpdates[i - 1] + 1;
+
+                        if (k3 > 15)
+                        {
+                            float f = 10.0F;
+                            float f1 = 5.0F;
+                            double d0 = MathHelper.nextDouble(this.rand, this.posX - 10.0D, this.posX + 10.0D);
+                            double d1 = MathHelper.nextDouble(this.rand, this.posY - 5.0D, this.posY + 5.0D);
+                            double d2 = MathHelper.nextDouble(this.rand, this.posZ - 10.0D, this.posZ + 10.0D);
+                            this.launchWitherSkullToCoords(i + 1, d0, d1, d2, true);
+                            this.idleHeadUpdates[i - 1] = 0;
+                        }
                     }
 
                     int k1 = this.getWatchedTargetId(i);
@@ -343,31 +300,29 @@
                     {
                         Entity entity = this.world.getEntityByID(k1);
 
-                        if (entity == null || !entity.isEntityAlive() || this.getDistanceSq(entity) > 900.0 || !this.canEntityBeSeen(entity))
-                        {
-                            this.updateWatchedTargetId(i, 0);
-                        }
-                        else if (entity instanceof EntityPlayer && ((EntityPlayer)entity).capabilities.disableDamage)
-                        {
-                            this.updateWatchedTargetId(i, 0);
+                        if (entity != null && entity.isEntityAlive() && this.getDistanceSq(entity) <= 900.0D && this.canEntityBeSeen(entity))
+                        {
+                            if (entity instanceof EntityPlayer && ((EntityPlayer)entity).capabilities.disableDamage)
+                            {
+                                this.updateWatchedTargetId(i, 0);
+                            }
+                            else
+                            {
+                                this.launchWitherSkullToEntity(i + 1, (EntityLivingBase)entity);
+                                this.nextHeadUpdate[i - 1] = this.ticksExisted + 40 + this.rand.nextInt(20);
+                                this.idleHeadUpdates[i - 1] = 0;
+                            }
                         }
                         else
                         {
-                            this.launchWitherSkullToEntity(i + 1, (EntityLivingBase)entity);
-                            this.nextHeadUpdate[i - 1] = this.ticksExisted + 40 + this.rand.nextInt(20);
-                            this.idleHeadUpdates[i - 1] = 0;
+                            this.updateWatchedTargetId(i, 0);
                         }
                     }
                     else
                     {
-                        List<EntityLivingBase> list = this.world
-                                                      .getEntitiesWithinAABB(
-                                                          EntityLivingBase.class,
-                                                          this.getEntityBoundingBox().grow(20.0, 8.0, 20.0),
-                                                          Predicates.and(NOT_UNDEAD, EntitySelectors.NOT_SPECTATING)
-                                                      );
+                        List<EntityLivingBase> list = this.world.<EntityLivingBase>getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(20.0D, 8.0D, 20.0D), Predicates.and(NOT_UNDEAD, EntitySelectors.NOT_SPECTATING));
 
-                        for (int j2 = 0; j2 < 10 && !list.isEmpty(); j2++)
+                        for (int j2 = 0; j2 < 10 && !list.isEmpty(); ++j2)
                         {
                             EntityLivingBase entitylivingbase = list.get(this.rand.nextInt(list.size()));
 
@@ -405,20 +360,20 @@
 
             if (this.blockBreakCounter > 0)
             {
-                this.blockBreakCounter--;
+                --this.blockBreakCounter;
 
-                if (this.blockBreakCounter == 0 && this.world.getGameRules().getBoolean("mobGriefing"))
+                if (this.blockBreakCounter == 0 && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this))
                 {
                     int i1 = MathHelper.floor(this.posY);
                     int l1 = MathHelper.floor(this.posX);
                     int i2 = MathHelper.floor(this.posZ);
                     boolean flag = false;
 
-                    for (int k2 = -1; k2 <= 1; k2++)
+                    for (int k2 = -1; k2 <= 1; ++k2)
                     {
-                        for (int l2 = -1; l2 <= 1; l2++)
+                        for (int l2 = -1; l2 <= 1; ++l2)
                         {
-                            for (int j = 0; j <= 3; j++)
+                            for (int j = 0; j <= 3; ++j)
                             {
                                 int i3 = l1 + k2;
                                 int k = i1 + j;
@@ -427,7 +382,7 @@
                                 IBlockState iblockstate = this.world.getBlockState(blockpos);
                                 Block block = iblockstate.getBlock();
 
-                                if (iblockstate.getMaterial() != Material.AIR && canDestroyBlock(block))
+                                if (!block.isAir(iblockstate, this.world, blockpos) && block.canEntityDestroy(iblockstate, world, blockpos, this) && net.minecraftforge.event.ForgeEventFactory.onEntityDestroyBlock(this, blockpos, iblockstate))
                                 {
                                     flag = this.world.destroyBlock(blockpos, true) || flag;
                                 }
@@ -437,7 +392,7 @@
 
                     if (flag)
                     {
-                        this.world.playEvent(null, 1022, new BlockPos(this), 0);
+                        this.world.playEvent((EntityPlayer)null, 1022, new BlockPos(this), 0);
                     }
                 }
             }
@@ -453,17 +408,7 @@
 
     public static boolean canDestroyBlock(Block blockIn)
     {
-        return blockIn != Blocks.BEDROCK
-               && blockIn != Blocks.END_PORTAL
-               && blockIn != Blocks.END_PORTAL_FRAME
-               && blockIn != Blocks.COMMAND_BLOCK
-               && blockIn != Blocks.REPEATING_COMMAND_BLOCK
-               && blockIn != Blocks.CHAIN_COMMAND_BLOCK
-               && blockIn != Blocks.BARRIER
-               && blockIn != Blocks.STRUCTURE_BLOCK
-               && blockIn != Blocks.STRUCTURE_VOID
-               && blockIn != Blocks.PISTON_EXTENSION
-               && blockIn != Blocks.END_GATEWAY;
+        return blockIn != Blocks.BEDROCK && blockIn != Blocks.END_PORTAL && blockIn != Blocks.END_PORTAL_FRAME && blockIn != Blocks.COMMAND_BLOCK && blockIn != Blocks.REPEATING_COMMAND_BLOCK && blockIn != Blocks.CHAIN_COMMAND_BLOCK && blockIn != Blocks.BARRIER && blockIn != Blocks.STRUCTURE_BLOCK && blockIn != Blocks.STRUCTURE_VOID && blockIn != Blocks.PISTON_EXTENSION && blockIn != Blocks.END_GATEWAY;
     }
 
     public void ignite()
@@ -472,19 +417,16 @@
         this.setHealth(this.getMaxHealth() / 3.0F);
     }
 
-    @Override
     public void setInWeb()
     {
     }
 
-    @Override
     public void addTrackingPlayer(EntityPlayerMP player)
     {
         super.addTrackingPlayer(player);
         this.bossInfo.addPlayer(player);
     }
 
-    @Override
     public void removeTrackingPlayer(EntityPlayerMP player)
     {
         super.removeTrackingPlayer(player);
@@ -499,15 +441,15 @@
         }
         else
         {
-            float f = (this.renderYawOffset + (float)(180 * (p_82214_1_ - 1))) * (float)(Math.PI / 180.0);
+            float f = (this.renderYawOffset + (float)(180 * (p_82214_1_ - 1))) * 0.017453292F;
             float f1 = MathHelper.cos(f);
-            return this.posX + (double)f1 * 1.3;
+            return this.posX + (double)f1 * 1.3D;
         }
     }
 
     private double getHeadY(int p_82208_1_)
     {
-        return p_82208_1_ <= 0 ? this.posY + 3.0 : this.posY + 2.2;
+        return p_82208_1_ <= 0 ? this.posY + 3.0D : this.posY + 2.2D;
     }
 
     private double getHeadZ(int p_82213_1_)
@@ -518,9 +460,9 @@
         }
         else
         {
-            float f = (this.renderYawOffset + (float)(180 * (p_82213_1_ - 1))) * (float)(Math.PI / 180.0);
+            float f = (this.renderYawOffset + (float)(180 * (p_82213_1_ - 1))) * 0.017453292F;
             float f1 = MathHelper.sin(f);
-            return this.posZ + (double)f1 * 1.3;
+            return this.posZ + (double)f1 * 1.3D;
         }
     }
 
@@ -543,18 +485,12 @@
 
     private void launchWitherSkullToEntity(int p_82216_1_, EntityLivingBase p_82216_2_)
     {
-        this.launchWitherSkullToCoords(
-            p_82216_1_,
-            p_82216_2_.posX,
-            p_82216_2_.posY + (double)p_82216_2_.getEyeHeight() * 0.5,
-            p_82216_2_.posZ,
-            p_82216_1_ == 0 && this.rand.nextFloat() < 0.001F
-        );
+        this.launchWitherSkullToCoords(p_82216_1_, p_82216_2_.posX, p_82216_2_.posY + (double)p_82216_2_.getEyeHeight() * 0.5D, p_82216_2_.posZ, p_82216_1_ == 0 && this.rand.nextFloat() < 0.001F);
     }
 
     private void launchWitherSkullToCoords(int p_82209_1_, double x, double y, double z, boolean invulnerable)
     {
-        this.world.playEvent(null, 1024, new BlockPos(this), 0);
+        this.world.playEvent((EntityPlayer)null, 1024, new BlockPos(this), 0);
         double d0 = this.getHeadX(p_82209_1_);
         double d1 = this.getHeadY(p_82209_1_);
         double d2 = this.getHeadZ(p_82209_1_);
@@ -574,66 +510,63 @@
         this.world.spawnEntity(entitywitherskull);
     }
 
-    @Override
     public void attackEntityWithRangedAttack(EntityLivingBase target, float distanceFactor)
     {
         this.launchWitherSkullToEntity(0, target);
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
         {
             return false;
         }
-        else if (source == DamageSource.DROWN || source.getTrueSource() instanceof EntityWither)
-        {
-            return false;
-        }
-        else if (this.getInvulTime() > 0 && source != DamageSource.OUT_OF_WORLD)
-        {
-            return false;
-        }
-        else
-        {
-            if (this.isArmored())
-            {
-                Entity entity = source.getImmediateSource();
-
-                if (entity instanceof EntityArrow)
-                {
-                    return false;
-                }
-            }
-
-            Entity entity1 = source.getTrueSource();
-
-            if (entity1 != null
-                    && !(entity1 instanceof EntityPlayer)
-                    && entity1 instanceof EntityLivingBase
-                    && ((EntityLivingBase)entity1).getCreatureAttribute() == this.getCreatureAttribute())
+        else if (source != DamageSource.DROWN && !(source.getTrueSource() instanceof EntityWither))
+        {
+            if (this.getInvulTime() > 0 && source != DamageSource.OUT_OF_WORLD)
             {
                 return false;
             }
             else
             {
-                if (this.blockBreakCounter <= 0)
-                {
-                    this.blockBreakCounter = 20;
-                }
-
-                for (int i = 0; i < this.idleHeadUpdates.length; i++)
-                {
-                    this.idleHeadUpdates[i] = this.idleHeadUpdates[i] + 3;
-                }
-
-                return super.attackEntityFrom(source, amount);
+                if (this.isArmored())
+                {
+                    Entity entity = source.getImmediateSource();
+
+                    if (entity instanceof EntityArrow)
+                    {
+                        return false;
+                    }
+                }
+
+                Entity entity1 = source.getTrueSource();
+
+                if (entity1 != null && !(entity1 instanceof EntityPlayer) && entity1 instanceof EntityLivingBase && ((EntityLivingBase)entity1).getCreatureAttribute() == this.getCreatureAttribute())
+                {
+                    return false;
+                }
+                else
+                {
+                    if (this.blockBreakCounter <= 0)
+                    {
+                        this.blockBreakCounter = 20;
+                    }
+
+                    for (int i = 0; i < this.idleHeadUpdates.length; ++i)
+                    {
+                        this.idleHeadUpdates[i] += 3;
+                    }
+
+                    return super.attackEntityFrom(source, amount);
+                }
             }
         }
+        else
+        {
+            return false;
+        }
     }
 
-    @Override
     protected void dropFewItems(boolean wasRecentlyHit, int lootingModifier)
     {
         EntityItem entityitem = this.dropItem(Items.NETHER_STAR, 1);
@@ -644,37 +577,32 @@
         }
     }
 
-    @Override
     protected void despawnEntity()
     {
         this.idleTime = 0;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public int getBrightnessForRender()
     {
         return 15728880;
     }
 
-    @Override
     public void fall(float distance, float damageMultiplier)
     {
     }
 
-    @Override
     public void addPotionEffect(PotionEffect potioneffectIn)
     {
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(300.0);
-        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.6F);
-        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(40.0);
-        this.getEntityAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(4.0);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(300.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.6000000238418579D);
+        this.getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(40.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(4.0D);
     }
 
     @SideOnly(Side.CLIENT)
@@ -691,22 +619,22 @@
 
     public int getInvulTime()
     {
-        return this.dataManager.get(INVULNERABILITY_TIME);
+        return ((Integer)this.dataManager.get(INVULNERABILITY_TIME)).intValue();
     }
 
     public void setInvulTime(int time)
     {
-        this.dataManager.set(INVULNERABILITY_TIME, time);
+        this.dataManager.set(INVULNERABILITY_TIME, Integer.valueOf(time));
     }
 
     public int getWatchedTargetId(int head)
     {
-        return this.dataManager.get(HEAD_TARGETS[head]);
+        return ((Integer)this.dataManager.get(HEAD_TARGETS[head])).intValue();
     }
 
     public void updateWatchedTargetId(int targetOffset, int newId)
     {
-        this.dataManager.set(HEAD_TARGETS[targetOffset], newId);
+        this.dataManager.set(HEAD_TARGETS[targetOffset], Integer.valueOf(newId));
     }
 
     public boolean isArmored()
@@ -714,25 +642,21 @@
         return this.getHealth() <= this.getMaxHealth() / 2.0F;
     }
 
-    @Override
     public EnumCreatureAttribute getCreatureAttribute()
     {
         return EnumCreatureAttribute.UNDEAD;
     }
 
-    @Override
     protected boolean canBeRidden(Entity entityIn)
     {
         return false;
     }
 
-    @Override
     public boolean isNonBoss()
     {
         return false;
     }
 
-    @Override
     public void setSwingingArms(boolean swingingArms)
     {
     }
@@ -744,7 +668,6 @@
             this.setMutexBits(7);
         }
 
-        @Override
         public boolean shouldExecute()
         {
             return EntityWither.this.getInvulTime() > 0;
