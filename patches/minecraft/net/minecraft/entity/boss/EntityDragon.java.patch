--- before/net/minecraft/entity/boss/EntityDragon.java
+++ after/net/minecraft/entity/boss/EntityDragon.java
@@ -53,18 +53,18 @@
 public class EntityDragon extends EntityLiving implements IEntityMultiPart, IMob
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final DataParameter<Integer> PHASE = EntityDataManager.createKey(EntityDragon.class, DataSerializers.VARINT);
+    public static final DataParameter<Integer> PHASE = EntityDataManager.<Integer>createKey(EntityDragon.class, DataSerializers.VARINT);
     public double[][] ringBuffer = new double[64][3];
     public int ringBufferIndex = -1;
     public MultiPartEntityPart[] dragonPartArray;
-    public MultiPartEntityPart dragonPartHead;
-    public MultiPartEntityPart dragonPartNeck;
-    public MultiPartEntityPart dragonPartBody;
-    public MultiPartEntityPart dragonPartTail1;
-    public MultiPartEntityPart dragonPartTail2;
-    public MultiPartEntityPart dragonPartTail3;
-    public MultiPartEntityPart dragonPartWing1;
-    public MultiPartEntityPart dragonPartWing2;
+    public MultiPartEntityPart dragonPartHead = new MultiPartEntityPart(this, "head", 6.0F, 6.0F);
+    public MultiPartEntityPart dragonPartNeck = new MultiPartEntityPart(this, "neck", 6.0F, 6.0F);
+    public MultiPartEntityPart dragonPartBody = new MultiPartEntityPart(this, "body", 8.0F, 8.0F);
+    public MultiPartEntityPart dragonPartTail1 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
+    public MultiPartEntityPart dragonPartTail2 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
+    public MultiPartEntityPart dragonPartTail3 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
+    public MultiPartEntityPart dragonPartWing1 = new MultiPartEntityPart(this, "wing", 4.0F, 4.0F);
+    public MultiPartEntityPart dragonPartWing2 = new MultiPartEntityPart(this, "wing", 4.0F, 4.0F);
     public float prevAnimTime;
     public float animTime;
     public boolean slowed;
@@ -81,25 +81,7 @@
     public EntityDragon(World worldIn)
     {
         super(worldIn);
-        this.dragonPartHead = new MultiPartEntityPart(this, "head", 6.0F, 6.0F);
-        this.dragonPartNeck = new MultiPartEntityPart(this, "neck", 6.0F, 6.0F);
-        this.dragonPartBody = new MultiPartEntityPart(this, "body", 8.0F, 8.0F);
-        this.dragonPartTail1 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
-        this.dragonPartTail2 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
-        this.dragonPartTail3 = new MultiPartEntityPart(this, "tail", 4.0F, 4.0F);
-        this.dragonPartWing1 = new MultiPartEntityPart(this, "wing", 4.0F, 4.0F);
-        this.dragonPartWing2 = new MultiPartEntityPart(this, "wing", 4.0F, 4.0F);
-        this.dragonPartArray = new MultiPartEntityPart[]
-        {
-            this.dragonPartHead,
-            this.dragonPartNeck,
-            this.dragonPartBody,
-            this.dragonPartTail1,
-            this.dragonPartTail2,
-            this.dragonPartTail3,
-            this.dragonPartWing1,
-            this.dragonPartWing2
-        };
+        this.dragonPartArray = new MultiPartEntityPart[] {this.dragonPartHead, this.dragonPartNeck, this.dragonPartBody, this.dragonPartTail1, this.dragonPartTail2, this.dragonPartTail3, this.dragonPartWing1, this.dragonPartWing2};
         this.setHealth(this.getMaxHealth());
         this.setSize(16.0F, 8.0F);
         this.noClip = true;
@@ -119,18 +101,16 @@
         this.phaseManager = new PhaseManager(this);
     }
 
-    @Override
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0);
+        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(200.0D);
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.getDataManager().register(PHASE, PhaseList.HOVER.getId());
+        this.getDataManager().register(PHASE, Integer.valueOf(PhaseList.HOVER.getId()));
     }
 
     public double[] getMovementOffsets(int p_70974_1_, float p_70974_2_)
@@ -154,7 +134,6 @@
         return adouble;
     }
 
-    @Override
     public void onLivingUpdate()
     {
         if (this.world.isRemote)
@@ -163,37 +142,17 @@
 
             if (!this.isSilent())
             {
-                float f = MathHelper.cos(this.animTime * (float)(Math.PI * 2));
-                float f1 = MathHelper.cos(this.prevAnimTime * (float)(Math.PI * 2));
+                float f = MathHelper.cos(this.animTime * ((float)Math.PI * 2F));
+                float f1 = MathHelper.cos(this.prevAnimTime * ((float)Math.PI * 2F));
 
                 if (f1 <= -0.3F && f >= -0.3F)
                 {
-                    this.world
-                    .playSound(
-                        this.posX,
-                        this.posY,
-                        this.posZ,
-                        SoundEvents.ENTITY_ENDERDRAGON_FLAP,
-                        this.getSoundCategory(),
-                        5.0F,
-                        0.8F + this.rand.nextFloat() * 0.3F,
-                        false
-                    );
+                    this.world.playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ENDERDRAGON_FLAP, this.getSoundCategory(), 5.0F, 0.8F + this.rand.nextFloat() * 0.3F, false);
                 }
 
                 if (!this.phaseManager.getCurrentPhase().getIsStationary() && --this.growlTime < 0)
                 {
-                    this.world
-                    .playSound(
-                        this.posX,
-                        this.posY,
-                        this.posZ,
-                        SoundEvents.ENTITY_ENDERDRAGON_GROWL,
-                        this.getSoundCategory(),
-                        2.5F,
-                        0.8F + this.rand.nextFloat() * 0.3F,
-                        false
-                    );
+                    this.world.playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_ENDERDRAGON_GROWL, this.getSoundCategory(), 2.5F, 0.8F + this.rand.nextFloat() * 0.3F, false);
                     this.growlTime = 200 + this.rand.nextInt(200);
                 }
             }
@@ -206,22 +165,13 @@
             float f12 = (this.rand.nextFloat() - 0.5F) * 8.0F;
             float f13 = (this.rand.nextFloat() - 0.5F) * 4.0F;
             float f15 = (this.rand.nextFloat() - 0.5F) * 8.0F;
-            this.world
-            .spawnParticle(
-                EnumParticleTypes.EXPLOSION_LARGE,
-                this.posX + (double)f12,
-                this.posY + 2.0 + (double)f13,
-                this.posZ + (double)f15,
-                0.0,
-                0.0,
-                0.0
-            );
+            this.world.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, this.posX + (double)f12, this.posY + 2.0D + (double)f13, this.posZ + (double)f15, 0.0D, 0.0D, 0.0D);
         }
         else
         {
             this.updateDragonEnderCrystal();
             float f11 = 0.2F / (MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ) * 10.0F + 1.0F);
-            f11 *= (float)Math.pow(2.0, this.motionY);
+            f11 = f11 * (float)Math.pow(2.0D, this.motionY);
 
             if (this.phaseManager.getCurrentPhase().getIsStationary())
             {
@@ -246,7 +196,7 @@
             {
                 if (this.ringBufferIndex < 0)
                 {
-                    for (int i = 0; i < this.ringBuffer.length; i++)
+                    for (int i = 0; i < this.ringBuffer.length; ++i)
                     {
                         this.ringBuffer[i][0] = (double)this.rotationYaw;
                         this.ringBuffer[i][1] = this.posY;
@@ -271,7 +221,7 @@
                         double d2 = MathHelper.wrapDegrees(this.interpTargetYaw - (double)this.rotationYaw);
                         this.rotationYaw = (float)((double)this.rotationYaw + d2 / (double)this.newPosRotationIncrements);
                         this.rotationPitch = (float)((double)this.rotationPitch + (this.interpTargetPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
-                        this.newPosRotationIncrements--;
+                        --this.newPosRotationIncrements;
                         this.setPosition(d5, d0, d1);
                         this.setRotation(this.rotationYaw, this.rotationPitch);
                     }
@@ -299,44 +249,34 @@
                         double d3 = d6 * d6 + d7 * d7 + d8 * d8;
                         float f5 = iphase.getMaxRiseOrFall();
                         d7 = MathHelper.clamp(d7 / (double)MathHelper.sqrt(d6 * d6 + d8 * d8), (double)(-f5), (double)f5);
-                        this.motionY += d7 * 0.1F;
+                        this.motionY += d7 * 0.10000000149011612D;
                         this.rotationYaw = MathHelper.wrapDegrees(this.rotationYaw);
-                        double d4 = MathHelper.clamp(
-                                        MathHelper.wrapDegrees(180.0 - MathHelper.atan2(d6, d8) * 180.0F / (float)Math.PI - (double)this.rotationYaw), -50.0, 50.0
-                                    );
-                        Vec3d vec3d1 = new Vec3d(
-                            vec3d.x - this.posX, vec3d.y - this.posY, vec3d.z - this.posZ
-                        )
-                        .normalize();
-                        Vec3d vec3d2 = new Vec3d(
-                            (double)MathHelper.sin(this.rotationYaw * (float)(Math.PI / 180.0)),
-                            this.motionY,
-                            (double)(-MathHelper.cos(this.rotationYaw * (float)(Math.PI / 180.0)))
-                        )
-                        .normalize();
+                        double d4 = MathHelper.clamp(MathHelper.wrapDegrees(180.0D - MathHelper.atan2(d6, d8) * (180D / Math.PI) - (double)this.rotationYaw), -50.0D, 50.0D);
+                        Vec3d vec3d1 = (new Vec3d(vec3d.x - this.posX, vec3d.y - this.posY, vec3d.z - this.posZ)).normalize();
+                        Vec3d vec3d2 = (new Vec3d((double)MathHelper.sin(this.rotationYaw * 0.017453292F), this.motionY, (double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)))).normalize();
                         float f7 = Math.max(((float)vec3d2.dotProduct(vec3d1) + 0.5F) / 1.5F, 0.0F);
                         this.randomYawVelocity *= 0.8F;
                         this.randomYawVelocity = (float)((double)this.randomYawVelocity + d4 * (double)iphase.getYawFactor());
-                        this.rotationYaw = this.rotationYaw + this.randomYawVelocity * 0.1F;
-                        float f8 = (float)(2.0 / (d3 + 1.0));
+                        this.rotationYaw += this.randomYawVelocity * 0.1F;
+                        float f8 = (float)(2.0D / (d3 + 1.0D));
                         float f9 = 0.06F;
                         this.moveRelative(0.0F, 0.0F, -1.0F, 0.06F * (f7 * f8 + (1.0F - f8)));
 
                         if (this.slowed)
                         {
-                            this.move(MoverType.SELF, this.motionX * 0.8F, this.motionY * 0.8F, this.motionZ * 0.8F);
+                            this.move(MoverType.SELF, this.motionX * 0.800000011920929D, this.motionY * 0.800000011920929D, this.motionZ * 0.800000011920929D);
                         }
                         else
                         {
                             this.move(MoverType.SELF, this.motionX, this.motionY, this.motionZ);
                         }
 
-                        Vec3d vec3d3 = new Vec3d(this.motionX, this.motionY, this.motionZ).normalize();
+                        Vec3d vec3d3 = (new Vec3d(this.motionX, this.motionY, this.motionZ)).normalize();
                         float f10 = ((float)vec3d3.dotProduct(vec3d2) + 1.0F) / 2.0F;
                         f10 = 0.8F + 0.15F * f10;
                         this.motionX *= (double)f10;
                         this.motionZ *= (double)f10;
-                        this.motionY *= 0.91F;
+                        this.motionY *= 0.9100000262260437D;
                     }
                 }
 
@@ -359,63 +299,42 @@
                 this.dragonPartWing2.width = 4.0F;
                 Vec3d[] avec3d = new Vec3d[this.dragonPartArray.length];
 
-                for (int j = 0; j < this.dragonPartArray.length; j++)
+                for (int j = 0; j < this.dragonPartArray.length; ++j)
                 {
                     avec3d[j] = new Vec3d(this.dragonPartArray[j].posX, this.dragonPartArray[j].posY, this.dragonPartArray[j].posZ);
                 }
 
-                float f14 = (float)(this.getMovementOffsets(5, 1.0F)[1] - this.getMovementOffsets(10, 1.0F)[1]) * 10.0F * (float)(Math.PI / 180.0);
+                float f14 = (float)(this.getMovementOffsets(5, 1.0F)[1] - this.getMovementOffsets(10, 1.0F)[1]) * 10.0F * 0.017453292F;
                 float f16 = MathHelper.cos(f14);
                 float f2 = MathHelper.sin(f14);
-                float f17 = this.rotationYaw * (float)(Math.PI / 180.0);
+                float f17 = this.rotationYaw * 0.017453292F;
                 float f3 = MathHelper.sin(f17);
                 float f18 = MathHelper.cos(f17);
                 this.dragonPartBody.onUpdate();
-                this.dragonPartBody
-                .setLocationAndAngles(this.posX + (double)(f3 * 0.5F), this.posY, this.posZ - (double)(f18 * 0.5F), 0.0F, 0.0F);
+                this.dragonPartBody.setLocationAndAngles(this.posX + (double)(f3 * 0.5F), this.posY, this.posZ - (double)(f18 * 0.5F), 0.0F, 0.0F);
                 this.dragonPartWing1.onUpdate();
-                this.dragonPartWing1
-                .setLocationAndAngles(this.posX + (double)(f18 * 4.5F), this.posY + 2.0, this.posZ + (double)(f3 * 4.5F), 0.0F, 0.0F);
+                this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(f18 * 4.5F), this.posY + 2.0D, this.posZ + (double)(f3 * 4.5F), 0.0F, 0.0F);
                 this.dragonPartWing2.onUpdate();
-                this.dragonPartWing2
-                .setLocationAndAngles(this.posX - (double)(f18 * 4.5F), this.posY + 2.0, this.posZ - (double)(f3 * 4.5F), 0.0F, 0.0F);
+                this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(f18 * 4.5F), this.posY + 2.0D, this.posZ - (double)(f3 * 4.5F), 0.0F, 0.0F);
 
                 if (!this.world.isRemote && this.hurtTime == 0)
                 {
-                    this.collideWithEntities(
-                        this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing1.getEntityBoundingBox().grow(4.0, 2.0, 4.0).offset(0.0, -2.0, 0.0))
-                    );
-                    this.collideWithEntities(
-                        this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing2.getEntityBoundingBox().grow(4.0, 2.0, 4.0).offset(0.0, -2.0, 0.0))
-                    );
-                    this.attackEntitiesInList(this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartHead.getEntityBoundingBox().grow(1.0)));
-                    this.attackEntitiesInList(this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartNeck.getEntityBoundingBox().grow(1.0)));
+                    this.collideWithEntities(this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing1.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
+                    this.collideWithEntities(this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing2.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
+                    this.attackEntitiesInList(this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartHead.getEntityBoundingBox().grow(1.0D)));
+                    this.attackEntitiesInList(this.world.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartNeck.getEntityBoundingBox().grow(1.0D)));
                 }
 
                 double[] adouble = this.getMovementOffsets(5, 1.0F);
-                float f19 = MathHelper.sin(this.rotationYaw * (float)(Math.PI / 180.0) - this.randomYawVelocity * 0.01F);
-                float f4 = MathHelper.cos(this.rotationYaw * (float)(Math.PI / 180.0) - this.randomYawVelocity * 0.01F);
+                float f19 = MathHelper.sin(this.rotationYaw * 0.017453292F - this.randomYawVelocity * 0.01F);
+                float f4 = MathHelper.cos(this.rotationYaw * 0.017453292F - this.randomYawVelocity * 0.01F);
                 this.dragonPartHead.onUpdate();
                 this.dragonPartNeck.onUpdate();
                 float f20 = this.getHeadYOffset(1.0F);
-                this.dragonPartHead
-                .setLocationAndAngles(
-                    this.posX + (double)(f19 * 6.5F * f16),
-                    this.posY + (double)f20 + (double)(f2 * 6.5F),
-                    this.posZ - (double)(f4 * 6.5F * f16),
-                    0.0F,
-                    0.0F
-                );
-                this.dragonPartNeck
-                .setLocationAndAngles(
-                    this.posX + (double)(f19 * 5.5F * f16),
-                    this.posY + (double)f20 + (double)(f2 * 5.5F),
-                    this.posZ - (double)(f4 * 5.5F * f16),
-                    0.0F,
-                    0.0F
-                );
+                this.dragonPartHead.setLocationAndAngles(this.posX + (double)(f19 * 6.5F * f16), this.posY + (double)f20 + (double)(f2 * 6.5F), this.posZ - (double)(f4 * 6.5F * f16), 0.0F, 0.0F);
+                this.dragonPartNeck.setLocationAndAngles(this.posX + (double)(f19 * 5.5F * f16), this.posY + (double)f20 + (double)(f2 * 5.5F), this.posZ - (double)(f4 * 5.5F * f16), 0.0F, 0.0F);
 
-                for (int k = 0; k < 3; k++)
+                for (int k = 0; k < 3; ++k)
                 {
                     MultiPartEntityPart multipartentitypart = null;
 
@@ -435,26 +354,18 @@
                     }
 
                     double[] adouble1 = this.getMovementOffsets(12 + k * 2, 1.0F);
-                    float f21 = this.rotationYaw * (float)(Math.PI / 180.0) + this.simplifyAngle(adouble1[0] - adouble[0]) * (float)(Math.PI / 180.0);
+                    float f21 = this.rotationYaw * 0.017453292F + this.simplifyAngle(adouble1[0] - adouble[0]) * 0.017453292F;
                     float f6 = MathHelper.sin(f21);
                     float f22 = MathHelper.cos(f21);
                     float f23 = 1.5F;
                     float f24 = (float)(k + 1) * 2.0F;
                     multipartentitypart.onUpdate();
-                    multipartentitypart.setLocationAndAngles(
-                        this.posX - (double)((f3 * 1.5F + f6 * f24) * f16),
-                        this.posY + (adouble1[1] - adouble[1]) - (double)((f24 + 1.5F) * f2) + 1.5,
-                        this.posZ + (double)((f18 * 1.5F + f22 * f24) * f16),
-                        0.0F,
-                        0.0F
-                    );
+                    multipartentitypart.setLocationAndAngles(this.posX - (double)((f3 * 1.5F + f6 * f24) * f16), this.posY + (adouble1[1] - adouble[1]) - (double)((f24 + 1.5F) * f2) + 1.5D, this.posZ + (double)((f18 * 1.5F + f22 * f24) * f16), 0.0F, 0.0F);
                 }
 
                 if (!this.world.isRemote)
                 {
-                    this.slowed = this.destroyBlocksInAABB(this.dragonPartHead.getEntityBoundingBox())
-                                          | this.destroyBlocksInAABB(this.dragonPartNeck.getEntityBoundingBox())
-                                          | this.destroyBlocksInAABB(this.dragonPartBody.getEntityBoundingBox());
+                    this.slowed = this.destroyBlocksInAABB(this.dragonPartHead.getEntityBoundingBox()) | this.destroyBlocksInAABB(this.dragonPartNeck.getEntityBoundingBox()) | this.destroyBlocksInAABB(this.dragonPartBody.getEntityBoundingBox());
 
                     if (this.fightManager != null)
                     {
@@ -462,7 +373,7 @@
                     }
                 }
 
-                for (int l = 0; l < this.dragonPartArray.length; l++)
+                for (int l = 0; l < this.dragonPartArray.length; ++l)
                 {
                     this.dragonPartArray[l].prevPosX = avec3d[l].x;
                     this.dragonPartArray[l].prevPosY = avec3d[l].y;
@@ -478,7 +389,7 @@
 
         if (this.phaseManager.getCurrentPhase().getIsStationary())
         {
-            d0 = -1.0;
+            d0 = -1.0D;
         }
         else
         {
@@ -506,7 +417,7 @@
 
         if (this.rand.nextInt(10) == 0)
         {
-            List<EntityEnderCrystal> list = this.world.getEntitiesWithinAABB(EntityEnderCrystal.class, this.getEntityBoundingBox().grow(32.0));
+            List<EntityEnderCrystal> list = this.world.<EntityEnderCrystal>getEntitiesWithinAABB(EntityEnderCrystal.class, this.getEntityBoundingBox().grow(32.0D));
             EntityEnderCrystal entityendercrystal = null;
             double d0 = Double.MAX_VALUE;
 
@@ -527,8 +438,8 @@
 
     private void collideWithEntities(List<Entity> p_70970_1_)
     {
-        double d0 = (this.dragonPartBody.getEntityBoundingBox().minX + this.dragonPartBody.getEntityBoundingBox().maxX) / 2.0;
-        double d1 = (this.dragonPartBody.getEntityBoundingBox().minZ + this.dragonPartBody.getEntityBoundingBox().maxZ) / 2.0;
+        double d0 = (this.dragonPartBody.getEntityBoundingBox().minX + this.dragonPartBody.getEntityBoundingBox().maxX) / 2.0D;
+        double d1 = (this.dragonPartBody.getEntityBoundingBox().minZ + this.dragonPartBody.getEntityBoundingBox().maxZ) / 2.0D;
 
         for (Entity entity : p_70970_1_)
         {
@@ -537,7 +448,7 @@
                 double d2 = entity.posX - d0;
                 double d3 = entity.posZ - d1;
                 double d4 = d2 * d2 + d3 * d3;
-                entity.addVelocity(d2 / d4 * 4.0, 0.2F, d3 / d4 * 4.0);
+                entity.addVelocity(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);
 
                 if (!this.phaseManager.getCurrentPhase().getIsStationary() && ((EntityLivingBase)entity).getRevengeTimer() < entity.ticksExisted - 2)
                 {
@@ -550,7 +461,7 @@
 
     private void attackEntitiesInList(List<Entity> p_70971_1_)
     {
-        for (int i = 0; i < p_70971_1_.size(); i++)
+        for (int i = 0; i < p_70971_1_.size(); ++i)
         {
             Entity entity = p_70971_1_.get(i);
 
@@ -578,38 +489,32 @@
         boolean flag = false;
         boolean flag1 = false;
 
-        for (int k1 = i; k1 <= l; k1++)
+        for (int k1 = i; k1 <= l; ++k1)
         {
-            for (int l1 = j; l1 <= i1; l1++)
+            for (int l1 = j; l1 <= i1; ++l1)
             {
-                for (int i2 = k; i2 <= j1; i2++)
+                for (int i2 = k; i2 <= j1; ++i2)
                 {
                     BlockPos blockpos = new BlockPos(k1, l1, i2);
                     IBlockState iblockstate = this.world.getBlockState(blockpos);
                     Block block = iblockstate.getBlock();
 
-                    if (iblockstate.getMaterial() != Material.AIR && iblockstate.getMaterial() != Material.FIRE)
+                    if (!block.isAir(iblockstate, this.world, blockpos) && iblockstate.getMaterial() != Material.FIRE)
                     {
-                        if (!this.world.getGameRules().getBoolean("mobGriefing"))
-                        {
-                            flag = true;
-                        }
-                        else if (block == Blocks.BARRIER
-                                 || block == Blocks.OBSIDIAN
-                                 || block == Blocks.END_STONE
-                                 || block == Blocks.BEDROCK
-                                 || block == Blocks.END_PORTAL
-                                 || block == Blocks.END_PORTAL_FRAME)
-                        {
-                            flag = true;
-                        }
-                        else if (block != Blocks.COMMAND_BLOCK
-                                 && block != Blocks.REPEATING_COMMAND_BLOCK
-                                 && block != Blocks.CHAIN_COMMAND_BLOCK
-                                 && block != Blocks.IRON_BARS
-                                 && block != Blocks.END_GATEWAY)
-                        {
-                            flag1 = this.world.setBlockToAir(blockpos) || flag1;
+                        if (!net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this))
+                        {
+                            flag = true;
+                        }
+                        else if (block.canEntityDestroy(iblockstate, this.world, blockpos, this) && net.minecraftforge.event.ForgeEventFactory.onEntityDestroyBlock(this, blockpos, iblockstate))
+                        {
+                            if (block != Blocks.COMMAND_BLOCK && block != Blocks.REPEATING_COMMAND_BLOCK && block != Blocks.CHAIN_COMMAND_BLOCK && block != Blocks.IRON_BARS && block != Blocks.END_GATEWAY)
+                            {
+                                flag1 = this.world.setBlockToAir(blockpos) || flag1;
+                            }
+                            else
+                            {
+                                flag = true;
+                            }
                         }
                         else
                         {
@@ -625,13 +530,12 @@
             double d0 = p_70972_1_.minX + (p_70972_1_.maxX - p_70972_1_.minX) * (double)this.rand.nextFloat();
             double d1 = p_70972_1_.minY + (p_70972_1_.maxY - p_70972_1_.minY) * (double)this.rand.nextFloat();
             double d2 = p_70972_1_.minZ + (p_70972_1_.maxZ - p_70972_1_.minZ) * (double)this.rand.nextFloat();
-            this.world.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, d0, d1, d2, 0.0, 0.0, 0.0);
+            this.world.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
         }
 
         return flag;
     }
 
-    @Override
     public boolean attackEntityFromPart(MultiPartEntityPart part, DamageSource source, float damage)
     {
         damage = this.phaseManager.getCurrentPhase().getAdjustedDamage(part, source, damage);
@@ -674,7 +578,6 @@
         }
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (source instanceof EntityDamageSource && ((EntityDamageSource)source).getIsThornsDamage())
@@ -690,7 +593,6 @@
         return super.attackEntityFrom(source, amount);
     }
 
-    @Override
     public void onKillCommand()
     {
         this.setDead();
@@ -702,7 +604,6 @@
         }
     }
 
-    @Override
     protected void onDeathUpdate()
     {
         if (this.fightManager != null)
@@ -710,23 +611,14 @@
             this.fightManager.dragonUpdate(this);
         }
 
-        this.deathTicks++;
+        ++this.deathTicks;
 
         if (this.deathTicks >= 180 && this.deathTicks <= 200)
         {
             float f = (this.rand.nextFloat() - 0.5F) * 8.0F;
             float f1 = (this.rand.nextFloat() - 0.5F) * 4.0F;
             float f2 = (this.rand.nextFloat() - 0.5F) * 8.0F;
-            this.world
-            .spawnParticle(
-                EnumParticleTypes.EXPLOSION_HUGE,
-                this.posX + (double)f,
-                this.posY + 2.0 + (double)f1,
-                this.posZ + (double)f2,
-                0.0,
-                0.0,
-                0.0
-            );
+            this.world.spawnParticle(EnumParticleTypes.EXPLOSION_HUGE, this.posX + (double)f, this.posY + 2.0D + (double)f1, this.posZ + (double)f2, 0.0D, 0.0D, 0.0D);
         }
 
         boolean flag = this.world.getGameRules().getBoolean("doMobLoot");
@@ -750,7 +642,7 @@
             }
         }
 
-        this.move(MoverType.SELF, 0.0, 0.1F, 0.0);
+        this.move(MoverType.SELF, 0.0D, 0.10000000149011612D, 0.0D);
         this.rotationYaw += 20.0F;
         this.renderYawOffset = this.rotationYaw;
 
@@ -772,6 +664,8 @@
 
     private void dropExperience(int p_184668_1_)
     {
+        p_184668_1_ = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.attackingPlayer, p_184668_1_);
+         
         while (p_184668_1_ > 0)
         {
             int i = EntityXPOrb.getXPSplit(p_184668_1_);
@@ -784,7 +678,7 @@
     {
         if (this.pathPoints[0] == null)
         {
-            for (int i = 0; i < 24; i++)
+            for (int i = 0; i < 24; ++i)
             {
                 int j = 5;
                 int l;
@@ -792,21 +686,21 @@
 
                 if (i < 12)
                 {
-                    l = (int)(60.0F * MathHelper.cos(2.0F * ((float) - Math.PI + (float)(Math.PI / 12) * (float)i)));
-                    i1 = (int)(60.0F * MathHelper.sin(2.0F * ((float) - Math.PI + (float)(Math.PI / 12) * (float)i)));
+                    l = (int)(60.0F * MathHelper.cos(2.0F * (-(float)Math.PI + 0.2617994F * (float)i)));
+                    i1 = (int)(60.0F * MathHelper.sin(2.0F * (-(float)Math.PI + 0.2617994F * (float)i)));
                 }
                 else if (i < 20)
                 {
                     int lvt_3_1_ = i - 12;
-                    l = (int)(40.0F * MathHelper.cos(2.0F * ((float) - Math.PI + (float)(Math.PI / 8) * (float)lvt_3_1_)));
-                    i1 = (int)(40.0F * MathHelper.sin(2.0F * ((float) - Math.PI + (float)(Math.PI / 8) * (float)lvt_3_1_)));
+                    l = (int)(40.0F * MathHelper.cos(2.0F * (-(float)Math.PI + 0.3926991F * (float)lvt_3_1_)));
+                    i1 = (int)(40.0F * MathHelper.sin(2.0F * (-(float)Math.PI + 0.3926991F * (float)lvt_3_1_)));
                     j += 10;
                 }
                 else
                 {
                     int k1 = i - 20;
-                    l = (int)(20.0F * MathHelper.cos(2.0F * ((float) - Math.PI + (float)(Math.PI / 4) * (float)k1)));
-                    i1 = (int)(20.0F * MathHelper.sin(2.0F * ((float) - Math.PI + (float)(Math.PI / 4) * (float)k1)));
+                    l = (int)(20.0F * MathHelper.cos(2.0F * (-(float)Math.PI + ((float)Math.PI / 4F) * (float)k1)));
+                    i1 = (int)(20.0F * MathHelper.sin(2.0F * (-(float)Math.PI + ((float)Math.PI / 4F) * (float)k1)));
                 }
 
                 int j1 = Math.max(this.world.getSeaLevel() + 10, this.world.getTopSolidOrLiquidBlock(new BlockPos(l, 0, i1)).getY() + j);
@@ -854,7 +748,7 @@
             j = 12;
         }
 
-        for (int k = j; k < 24; k++)
+        for (int k = j; k < 24; ++k)
         {
             if (this.pathPoints[k] != null)
             {
@@ -874,7 +768,7 @@
     @Nullable
     public Path findPath(int startIdx, int finishIdx, @Nullable PathPoint andThen)
     {
-        for (int i = 0; i < 24; i++)
+        for (int i = 0; i < 24; ++i)
         {
             PathPoint pathpoint = this.pathPoints[i];
             pathpoint.visited = false;
@@ -923,7 +817,7 @@
             pathpoint2.visited = true;
             int k = 0;
 
-            for (int l = 0; l < 24; l++)
+            for (int l = 0; l < 24; ++l)
             {
                 if (this.pathPoints[l] == pathpoint2)
                 {
@@ -932,7 +826,7 @@
                 }
             }
 
-            for (int i1 = j; i1 < 24; i1++)
+            for (int i1 = j; i1 < 24; ++i1)
             {
                 if ((this.neighbors[k] & 1 << i1) > 0)
                 {
@@ -969,7 +863,7 @@
         }
         else
         {
-            LOGGER.debug("Failed to find path from {} to {}", startIdx, finishIdx);
+            LOGGER.debug("Failed to find path from {} to {}", Integer.valueOf(startIdx), Integer.valueOf(finishIdx));
 
             if (andThen != null)
             {
@@ -987,17 +881,17 @@
 
         for (PathPoint pathpoint = finish; pathpoint.previous != null; pathpoint = pathpoint.previous)
         {
-            i++;
+            ++i;
         }
 
         PathPoint[] apathpoint = new PathPoint[i];
         PathPoint pathpoint1 = finish;
-        i--;
+        --i;
 
         for (apathpoint[i] = finish; pathpoint1.previous != null; apathpoint[i] = pathpoint1)
         {
             pathpoint1 = pathpoint1.previous;
-            i--;
+            --i;
         }
 
         return new Path(apathpoint);
@@ -1008,14 +902,12 @@
         EntityLiving.registerFixesMob(fixer, EntityDragon.class);
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
         compound.setInteger("DragonPhase", this.phaseManager.getCurrentPhase().getType().getId());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -1026,55 +918,46 @@
         }
     }
 
-    @Override
     protected void despawnEntity()
     {
     }
 
-    @Override
     public Entity[] getParts()
     {
         return this.dragonPartArray;
     }
 
-    @Override
     public boolean canBeCollidedWith()
     {
         return false;
     }
 
-    @Override
     public World getWorld()
     {
         return this.world;
     }
 
-    @Override
     public SoundCategory getSoundCategory()
     {
         return SoundCategory.HOSTILE;
     }
 
-    @Override
     protected SoundEvent getAmbientSound()
     {
         return SoundEvents.ENTITY_ENDERDRAGON_AMBIENT;
     }
 
-    @Override
     protected SoundEvent getHurtSound(DamageSource damageSourceIn)
     {
         return SoundEvents.ENTITY_ENDERDRAGON_HURT;
     }
 
-    @Override
     protected float getSoundVolume()
     {
         return 5.0F;
     }
 
     @Nullable
-    @Override
     protected ResourceLocation getLootTable()
     {
         return LootTableList.ENTITIES_ENDER_DRAGON;
@@ -1087,24 +970,27 @@
         PhaseList <? extends IPhase > phaselist = iphase.getType();
         double d0;
 
-        if (phaselist == PhaseList.LANDING || phaselist == PhaseList.TAKEOFF)
+        if (phaselist != PhaseList.LANDING && phaselist != PhaseList.TAKEOFF)
+        {
+            if (iphase.getIsStationary())
+            {
+                d0 = (double)p_184667_1_;
+            }
+            else if (p_184667_1_ == 6)
+            {
+                d0 = 0.0D;
+            }
+            else
+            {
+                d0 = p_184667_3_[1] - p_184667_2_[1];
+            }
+        }
+        else
         {
             BlockPos blockpos = this.world.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION);
             float f = Math.max(MathHelper.sqrt(this.getDistanceSqToCenter(blockpos)) / 4.0F, 1.0F);
             d0 = (double)((float)p_184667_1_ / f);
         }
-        else if (iphase.getIsStationary())
-        {
-            d0 = (double)p_184667_1_;
-        }
-        else if (p_184667_1_ == 6)
-        {
-            d0 = 0.0;
-        }
-        else
-        {
-            d0 = p_184667_3_[1] - p_184667_2_[1];
-        }
 
         return (float)d0;
     }
@@ -1115,28 +1001,31 @@
         PhaseList <? extends IPhase > phaselist = iphase.getType();
         Vec3d vec3d;
 
-        if (phaselist == PhaseList.LANDING || phaselist == PhaseList.TAKEOFF)
-        {
-            BlockPos blockpos = this.world.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION);
-            float f5 = Math.max(MathHelper.sqrt(this.getDistanceSqToCenter(blockpos)) / 4.0F, 1.0F);
-            float f2 = 6.0F / f5;
-            float f3 = this.rotationPitch;
-            float f4 = 1.5F;
-            this.rotationPitch = -f2 * 1.5F * 5.0F;
-            vec3d = this.getLook(p_184665_1_);
-            this.rotationPitch = f3;
-        }
-        else if (iphase.getIsStationary())
-        {
-            float f = this.rotationPitch;
-            float f1 = 1.5F;
-            this.rotationPitch = -45.0F;
-            vec3d = this.getLook(p_184665_1_);
-            this.rotationPitch = f;
+        if (phaselist != PhaseList.LANDING && phaselist != PhaseList.TAKEOFF)
+        {
+            if (iphase.getIsStationary())
+            {
+                float f4 = this.rotationPitch;
+                float f5 = 1.5F;
+                this.rotationPitch = -45.0F;
+                vec3d = this.getLook(p_184665_1_);
+                this.rotationPitch = f4;
+            }
+            else
+            {
+                vec3d = this.getLook(p_184665_1_);
+            }
         }
         else
         {
+            BlockPos blockpos = this.world.getTopSolidOrLiquidBlock(WorldGenEndPodium.END_PODIUM_LOCATION);
+            float f = Math.max(MathHelper.sqrt(this.getDistanceSqToCenter(blockpos)) / 4.0F, 1.0F);
+            float f1 = 6.0F / f;
+            float f2 = this.rotationPitch;
+            float f3 = 1.5F;
+            this.rotationPitch = -f1 * 1.5F * 5.0F;
             vec3d = this.getLook(p_184665_1_);
+            this.rotationPitch = f2;
         }
 
         return vec3d;
@@ -1152,7 +1041,7 @@
         }
         else
         {
-            entityplayer = this.world.getNearestAttackablePlayer(pos, 64.0, 64.0);
+            entityplayer = this.world.getNearestAttackablePlayer(pos, 64.0D, 64.0D);
         }
 
         if (crystal == this.healingEnderCrystal)
@@ -1163,12 +1052,11 @@
         this.phaseManager.getCurrentPhase().onCrystalDestroyed(crystal, pos, dmgSrc, entityplayer);
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         if (PHASE.equals(key) && this.world.isRemote)
         {
-            this.phaseManager.setPhase(PhaseList.getById(this.getDataManager().get(PHASE)));
+            this.phaseManager.setPhase(PhaseList.getById(((Integer)this.getDataManager().get(PHASE)).intValue()));
         }
 
         super.notifyDataManagerChange(key);
@@ -1185,18 +1073,15 @@
         return this.fightManager;
     }
 
-    @Override
     public void addPotionEffect(PotionEffect potioneffectIn)
     {
     }
 
-    @Override
     protected boolean canBeRidden(Entity entityIn)
     {
         return false;
     }
 
-    @Override
     public boolean isNonBoss()
     {
         return false;
