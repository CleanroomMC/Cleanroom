--- before/net/minecraft/entity/EntityList.java
+++ after/net/minecraft/entity/EntityList.java
@@ -107,49 +107,63 @@
     public static final ResourceLocation LIGHTNING_BOLT = new ResourceLocation("lightning_bolt");
     private static final ResourceLocation PLAYER = new ResourceLocation("player");
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final RegistryNamespaced < ResourceLocation, Class <? extends Entity >> REGISTRY = new RegistryNamespaced<>();
-    public static final Map<ResourceLocation, EntityList.EntityEggInfo> ENTITY_EGGS = Maps.newLinkedHashMap();
-    public static final Set<ResourceLocation> KNOWN_TYPES = Sets.newHashSet();
-    private static final List<String> OLD_NAMES = Lists.newArrayList();
+    public static final Map<ResourceLocation, EntityList.EntityEggInfo> ENTITY_EGGS = Maps.<ResourceLocation, EntityList.EntityEggInfo>newLinkedHashMap();
+    private static final Set<ResourceLocation> EXTRA_NAMES = Sets.newHashSet();
 
     @Nullable
     public static ResourceLocation getKey(Entity entityIn)
     {
-        return getKey((Class <? extends Entity >)entityIn.getClass());
+        return getKey(entityIn.getClass());
     }
 
     @Nullable
     public static ResourceLocation getKey(Class <? extends Entity > entityIn)
     {
-        return REGISTRY.getNameForObject(entityIn);
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.EntityRegistry.getEntry(entityIn);
+        return entry == null ? null : entry.getRegistryName();
     }
 
     @Nullable
     public static String getEntityString(Entity entityIn)
     {
-        int i = REGISTRY.getIDForObject((Class <? extends Entity >)entityIn.getClass());
-        return i == -1 ? null : OLD_NAMES.get(i);
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.EntityRegistry.getEntry(entityIn.getClass());
+        return entry == null ? null : entry.getName();
     }
 
     @Nullable
     public static String getTranslationName(@Nullable ResourceLocation entityType)
     {
-        int i = REGISTRY.getIDForObject(REGISTRY.getObject(entityType));
-        return i == -1 ? null : OLD_NAMES.get(i);
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.ForgeRegistries.ENTITIES.getValue(entityType);
+        return entry == null ? null : entry.getName();
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
     public static Class <? extends Entity > getClassFromID(int entityID)
     {
-        return REGISTRY.getObjectById(entityID);
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.registries.GameData.getEntityRegistry().getValue(entityID);
+        return entry == null ? null : entry.getEntityClass();
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
     public static Class <? extends Entity > getClassFromName(String p_192839_0_)
     {
-        return REGISTRY.getObject(new ResourceLocation(p_192839_0_));
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.ForgeRegistries.ENTITIES.getValue(new ResourceLocation(p_192839_0_));
+        return entry == null ? null : entry.getEntityClass();
+    }
+
+    public static int getID(Class<? extends Entity> cls)
+    {
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.EntityRegistry.getEntry(cls);
+        return entry == null ? -1 : net.minecraftforge.registries.GameData.getEntityRegistry().getID(entry);
+    }
+
+    @Nullable
+    public static Class<? extends Entity> getClass(ResourceLocation key)
+    {
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.ForgeRegistries.ENTITIES.getValue(key);
+        return entry == null ? null : entry.getEntityClass();
     }
 
     @Nullable
@@ -163,6 +177,8 @@
         {
             try
             {
+                net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.EntityRegistry.getEntry(clazz);
+                if (entry != null) return entry.newInstance(worldIn);
                 return clazz.getConstructor(World.class).newInstance(worldIn);
             }
             catch (Exception exception)
@@ -177,13 +193,15 @@
     @SideOnly(Side.CLIENT)
     public static Entity createEntityByID(int entityID, World worldIn)
     {
-        return newEntity(getClassFromID(entityID), worldIn);
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.registries.GameData.getEntityRegistry().getValue(entityID);
+        return entry == null ? null : entry.newInstance(worldIn);
     }
 
     @Nullable
     public static Entity createEntityByIDFromName(ResourceLocation name, World worldIn)
     {
-        return newEntity(REGISTRY.getObject(name), worldIn);
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.ForgeRegistries.ENTITIES.getValue(name);
+        return entry == null ? null : entry.newInstance(worldIn);
     }
 
     @Nullable
@@ -194,11 +212,20 @@
 
         if (entity == null)
         {
-            LOGGER.warn("Skipping Entity with id {}", resourcelocation);
+            LOGGER.warn("Skipping Entity with id {}", (Object)resourcelocation);
         }
         else
         {
+            try
+            {
             entity.readFromNBT(nbt);
+            }
+            catch (Exception e)
+            {
+                net.minecraftforge.fml.common.FMLLog.log.error("An Entity {}({}) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
+                        nbt.getString("id"), entity.getName(), e);
+                entity = null;
+            }
         }
 
         return entity;
@@ -206,12 +233,12 @@
 
     public static Set<ResourceLocation> getEntityNameList()
     {
-        return KNOWN_TYPES;
+        return Sets.union(net.minecraftforge.fml.common.registry.ForgeRegistries.ENTITIES.getKeys(), EXTRA_NAMES);
     }
 
     public static boolean isMatchingName(Entity entityIn, ResourceLocation entityName)
     {
-        ResourceLocation resourcelocation = getKey((Class <? extends Entity >)entityIn.getClass());
+        ResourceLocation resourcelocation = getKey(entityIn.getClass());
 
         if (resourcelocation != null)
         {
@@ -238,10 +265,10 @@
 
         for (ResourceLocation resourcelocation : getEntityNameList())
         {
-            stringbuilder.append(resourcelocation).append(", ");
+            stringbuilder.append((Object)resourcelocation).append(", ");
         }
 
-        stringbuilder.append(PLAYER);
+        stringbuilder.append((Object)PLAYER);
         return stringbuilder.toString();
     }
 
@@ -373,7 +400,7 @@
         addSpawnInfo("zombie_horse", 3232308, 9945732);
         addSpawnInfo("zombie_pigman", 15373203, 5009705);
         addSpawnInfo("zombie_villager", 5651507, 7969893);
-        KNOWN_TYPES.add(LIGHTNING_BOLT);
+        EXTRA_NAMES.add(LIGHTNING_BOLT);
     }
 
     private static void register(int id, String name, Class <? extends Entity > clazz, String oldName)
@@ -382,7 +409,7 @@
         {
             clazz.getConstructor(World.class);
         }
-        catch (NoSuchMethodException nosuchmethodexception)
+        catch (NoSuchMethodException var5)
         {
             throw new RuntimeException("Invalid class " + clazz + " no constructor taking " + World.class.getName());
         }
@@ -394,22 +421,17 @@
         else
         {
             ResourceLocation resourcelocation = new ResourceLocation(name);
-            REGISTRY.register(id, resourcelocation, clazz);
-            KNOWN_TYPES.add(resourcelocation);
-
-            while (OLD_NAMES.size() <= id)
-            {
-                OLD_NAMES.add(null);
-            }
-
-            OLD_NAMES.set(id, oldName);
+            net.minecraftforge.registries.GameData.registerEntity(id, resourcelocation, clazz, oldName);
         }
     }
 
     protected static EntityList.EntityEggInfo addSpawnInfo(String id, int primaryColor, int secondaryColor)
     {
         ResourceLocation resourcelocation = new ResourceLocation(id);
-        return ENTITY_EGGS.put(resourcelocation, new EntityList.EntityEggInfo(resourcelocation, primaryColor, secondaryColor));
+        EntityList.EntityEggInfo egg = new EntityList.EntityEggInfo(resourcelocation, primaryColor, secondaryColor);
+        net.minecraftforge.fml.common.registry.EntityEntry entry = net.minecraftforge.fml.common.registry.ForgeRegistries.ENTITIES.getValue(resourcelocation);
+        if (entry != null) entry.setEgg(egg);
+        return (EntityList.EntityEggInfo)ENTITY_EGGS.put(resourcelocation, egg);
     }
 
     public static class EntityEggInfo
@@ -428,5 +450,16 @@
                 this.killEntityStat = StatList.getStatKillEntity(this);
                 this.entityKilledByStat = StatList.getStatEntityKilledBy(this);
             }
+
+            // Forge start
+            public EntityEggInfo(ResourceLocation id, int primaryColor, int secondaryColor, StatBase killEntityStatistic, StatBase entityKilledByStatistic)
+            {
+                this.spawnedID = id;
+                this.primaryColor = primaryColor;
+                this.secondaryColor = secondaryColor;
+                this.killEntityStat = killEntityStatistic;
+                this.entityKilledByStat = entityKilledByStatistic;
+            }
+            // Forge end
         }
 }
