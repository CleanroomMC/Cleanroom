--- before/net/minecraft/entity/EntityAgeable.java
+++ after/net/minecraft/entity/EntityAgeable.java
@@ -15,7 +15,7 @@
 
 public abstract class EntityAgeable extends EntityCreature
 {
-    private static final DataParameter<Boolean> BABY = EntityDataManager.createKey(EntityAgeable.class, DataSerializers.BOOLEAN);
+    private static final DataParameter<Boolean> BABY = EntityDataManager.<Boolean>createKey(EntityAgeable.class, DataSerializers.BOOLEAN);
     protected int growingAge;
     protected int forcedAge;
     protected int forcedAgeTimer;
@@ -30,7 +30,6 @@
     @Nullable
     public abstract EntityAgeable createChild(EntityAgeable ageable);
 
-    @Override
     public boolean processInteract(EntityPlayer player, EnumHand hand)
     {
         ItemStack itemstack = player.getHeldItem(hand);
@@ -39,7 +38,7 @@
         {
             if (!this.world.isRemote)
             {
-                Class <? extends Entity > oclass = EntityList.REGISTRY.getObject(ItemMonsterPlacer.getNamedIdFrom(itemstack));
+                Class <? extends Entity > oclass = EntityList.getClass(ItemMonsterPlacer.getNamedIdFrom(itemstack));
 
                 if (oclass != null && this.getClass() == oclass)
                 {
@@ -80,23 +79,22 @@
         }
         else
         {
-            Class <? extends Entity > oclass = EntityList.REGISTRY.getObject(ItemMonsterPlacer.getNamedIdFrom(stack));
+            Class <? extends Entity > oclass = EntityList.getClass(ItemMonsterPlacer.getNamedIdFrom(stack));
             return oclass != null && entityClass == oclass;
         }
     }
 
-    @Override
     protected void entityInit()
     {
         super.entityInit();
-        this.dataManager.register(BABY, false);
+        this.dataManager.register(BABY, Boolean.valueOf(false));
     }
 
     public int getGrowingAge()
     {
         if (this.world.isRemote)
         {
-            return this.dataManager.get(BABY) ? -1 : 1;
+            return ((Boolean)this.dataManager.get(BABY)).booleanValue() ? -1 : 1;
         }
         else
         {
@@ -107,24 +105,25 @@
     public void ageUp(int growthSeconds, boolean updateForcedAge)
     {
         int i = this.getGrowingAge();
-        i += growthSeconds * 20;
+        int j = i;
+        i = i + growthSeconds * 20;
 
         if (i > 0)
         {
             i = 0;
 
-            if (i < 0)
+            if (j < 0)
             {
                 this.onGrowingAdult();
             }
         }
 
-        int j = i - i;
+        int k = i - j;
         this.setGrowingAge(i);
 
         if (updateForcedAge)
         {
-            this.forcedAge += j;
+            this.forcedAge += k;
 
             if (this.forcedAgeTimer == 0)
             {
@@ -145,12 +144,11 @@
 
     public void setGrowingAge(int age)
     {
-        this.dataManager.set(BABY, age < 0);
+        this.dataManager.set(BABY, Boolean.valueOf(age < 0));
         this.growingAge = age;
         this.setScaleForAge(this.isChild());
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         super.writeEntityToNBT(compound);
@@ -158,7 +156,6 @@
         compound.setInteger("ForcedAge", this.forcedAge);
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         super.readEntityFromNBT(compound);
@@ -166,7 +163,6 @@
         this.forcedAge = compound.getInteger("ForcedAge");
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         if (BABY.equals(key))
@@ -177,7 +173,6 @@
         super.notifyDataManagerChange(key);
     }
 
-    @Override
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
@@ -188,19 +183,10 @@
             {
                 if (this.forcedAgeTimer % 4 == 0)
                 {
-                    this.world
-                    .spawnParticle(
-                        EnumParticleTypes.VILLAGER_HAPPY,
-                        this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-                        this.posY + 0.5 + (double)(this.rand.nextFloat() * this.height),
-                        this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width,
-                        0.0,
-                        0.0,
-                        0.0
-                    );
+                    this.world.spawnParticle(EnumParticleTypes.VILLAGER_HAPPY, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + 0.5D + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, 0.0D, 0.0D, 0.0D);
                 }
 
-                this.forcedAgeTimer--;
+                --this.forcedAgeTimer;
             }
         }
         else
@@ -209,7 +195,8 @@
 
             if (i < 0)
             {
-                this.setGrowingAge(++i);
+                ++i;
+                this.setGrowingAge(i);
 
                 if (i == 0)
                 {
@@ -218,7 +205,8 @@
             }
             else if (i > 0)
             {
-                this.setGrowingAge(--i);
+                --i;
+                this.setGrowingAge(i);
             }
         }
     }
@@ -227,7 +215,6 @@
     {
     }
 
-    @Override
     public boolean isChild()
     {
         return this.getGrowingAge() < 0;
@@ -238,7 +225,6 @@
         this.setScale(child ? 0.5F : 1.0F);
     }
 
-    @Override
     protected final void setSize(float width, float height)
     {
         boolean flag = this.ageWidth > 0.0F;
