--- before/net/minecraft/entity/projectile/EntityFireball.java
+++ after/net/minecraft/entity/projectile/EntityFireball.java
@@ -30,23 +30,21 @@
         this.setSize(1.0F, 1.0F);
     }
 
-    @Override
     protected void entityInit()
     {
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean isInRangeToRenderDist(double distance)
     {
-        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 4.0;
+        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 4.0D;
 
         if (Double.isNaN(d0))
         {
-            d0 = 4.0;
+            d0 = 4.0D;
         }
 
-        d0 *= 64.0;
+        d0 = d0 * 64.0D;
         return distance < d0 * d0;
     }
 
@@ -57,9 +55,9 @@
         this.setLocationAndAngles(x, y, z, this.rotationYaw, this.rotationPitch);
         this.setPosition(x, y, z);
         double d0 = (double)MathHelper.sqrt(accelX * accelX + accelY * accelY + accelZ * accelZ);
-        this.accelerationX = accelX / d0 * 0.1;
-        this.accelerationY = accelY / d0 * 0.1;
-        this.accelerationZ = accelZ / d0 * 0.1;
+        this.accelerationX = accelX / d0 * 0.1D;
+        this.accelerationY = accelY / d0 * 0.1D;
+        this.accelerationZ = accelZ / d0 * 0.1D;
     }
 
     public EntityFireball(World worldIn, EntityLivingBase shooter, double accelX, double accelY, double accelZ)
@@ -69,23 +67,21 @@
         this.setSize(1.0F, 1.0F);
         this.setLocationAndAngles(shooter.posX, shooter.posY, shooter.posZ, shooter.rotationYaw, shooter.rotationPitch);
         this.setPosition(this.posX, this.posY, this.posZ);
-        this.motionX = 0.0;
-        this.motionY = 0.0;
-        this.motionZ = 0.0;
-        accelX += this.rand.nextGaussian() * 0.4;
-        accelY += this.rand.nextGaussian() * 0.4;
-        accelZ += this.rand.nextGaussian() * 0.4;
+        this.motionX = 0.0D;
+        this.motionY = 0.0D;
+        this.motionZ = 0.0D;
+        accelX = accelX + this.rand.nextGaussian() * 0.4D;
+        accelY = accelY + this.rand.nextGaussian() * 0.4D;
+        accelZ = accelZ + this.rand.nextGaussian() * 0.4D;
         double d0 = (double)MathHelper.sqrt(accelX * accelX + accelY * accelY + accelZ * accelZ);
-        this.accelerationX = accelX / d0 * 0.1;
-        this.accelerationY = accelY / d0 * 0.1;
-        this.accelerationZ = accelZ / d0 * 0.1;
+        this.accelerationX = accelX / d0 * 0.1D;
+        this.accelerationY = accelY / d0 * 0.1D;
+        this.accelerationZ = accelZ / d0 * 0.1D;
     }
 
-    @Override
     public void onUpdate()
     {
-        if (this.world.isRemote
-                || (this.shootingEntity == null || !this.shootingEntity.isDead) && this.world.isBlockLoaded(new BlockPos(this)))
+        if (this.world.isRemote || (this.shootingEntity == null || !this.shootingEntity.isDead) && this.world.isBlockLoaded(new BlockPos(this)))
         {
             super.onUpdate();
 
@@ -94,47 +90,38 @@
                 this.setFire(1);
             }
 
-            this.ticksInAir++;
+            ++this.ticksInAir;
             RayTraceResult raytraceresult = ProjectileHelper.forwardsRaycast(this, true, this.ticksInAir >= 25, this.shootingEntity);
 
-            if (raytraceresult != null)
+            if (raytraceresult != null && !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, raytraceresult))
             {
                 this.onImpact(raytraceresult);
             }
 
-            this.posX = this.posX + this.motionX;
-            this.posY = this.posY + this.motionY;
-            this.posZ = this.posZ + this.motionZ;
+            this.posX += this.motionX;
+            this.posY += this.motionY;
+            this.posZ += this.motionZ;
             ProjectileHelper.rotateTowardsMovement(this, 0.2F);
             float f = this.getMotionFactor();
 
             if (this.isInWater())
             {
-                for (int i = 0; i < 4; i++)
+                for (int i = 0; i < 4; ++i)
                 {
                     float f1 = 0.25F;
-                    this.world
-                    .spawnParticle(
-                        EnumParticleTypes.WATER_BUBBLE,
-                        this.posX - this.motionX * 0.25,
-                        this.posY - this.motionY * 0.25,
-                        this.posZ - this.motionZ * 0.25,
-                        this.motionX,
-                        this.motionY,
-                        this.motionZ
-                    );
+                    this.world.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * 0.25D, this.posY - this.motionY * 0.25D, this.posZ - this.motionZ * 0.25D, this.motionX, this.motionY, this.motionZ);
                 }
 
                 f = 0.8F;
             }
 
-            this.motionX = this.motionX + this.accelerationX;
-            this.motionY = this.motionY + this.accelerationY;
-            this.motionZ = this.motionZ + this.accelerationZ;
+            this.motionX += this.accelerationX;
+            this.motionY += this.accelerationY;
+            this.motionZ += this.accelerationZ;
             this.motionX *= (double)f;
             this.motionY *= (double)f;
             this.motionZ *= (double)f;
-            this.world.spawnParticle(this.getParticleType(), this.posX, this.posY + 0.5, this.posZ, 0.0, 0.0, 0.0);
+            this.world.spawnParticle(this.getParticleType(), this.posX, this.posY + 0.5D, this.posZ, 0.0D, 0.0D, 0.0D);
             this.setPosition(this.posX, this.posY, this.posZ);
         }
         else
@@ -164,7 +151,6 @@
     {
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         compound.setTag("direction", this.newDoubleNBTList(new double[] {this.motionX, this.motionY, this.motionZ}));
@@ -172,7 +158,6 @@
         compound.setInteger("life", this.ticksAlive);
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         if (compound.hasKey("power", 9))
@@ -202,19 +187,16 @@
         }
     }
 
-    @Override
     public boolean canBeCollidedWith()
     {
         return true;
     }
 
-    @Override
     public float getCollisionBorderSize()
     {
         return 1.0F;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
         if (this.isEntityInvulnerable(source))
@@ -234,9 +216,9 @@
                     this.motionX = vec3d.x;
                     this.motionY = vec3d.y;
                     this.motionZ = vec3d.z;
-                    this.accelerationX = this.motionX * 0.1;
-                    this.accelerationY = this.motionY * 0.1;
-                    this.accelerationZ = this.motionZ * 0.1;
+                    this.accelerationX = this.motionX * 0.1D;
+                    this.accelerationY = this.motionY * 0.1D;
+                    this.accelerationZ = this.motionZ * 0.1D;
                 }
 
                 if (source.getTrueSource() instanceof EntityLivingBase)
@@ -253,14 +235,12 @@
         }
     }
 
-    @Override
     public float getBrightness()
     {
         return 1.0F;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public int getBrightnessForRender()
     {
         return 15728880;
