--- before/net/minecraft/entity/projectile/EntityArrow.java
+++ after/net/minecraft/entity/projectile/EntityArrow.java
@@ -39,34 +39,37 @@
 
 public abstract class EntityArrow extends Entity implements IProjectile
 {
-    private static final Predicate<Entity> ARROW_TARGETS = Predicates.and(
-                    EntitySelectors.NOT_SPECTATING, EntitySelectors.IS_ALIVE, new Predicate<Entity>()
+    private static final Predicate<Entity> ARROW_TARGETS = Predicates.and(EntitySelectors.NOT_SPECTATING, EntitySelectors.IS_ALIVE, new Predicate<Entity>()
     {
         public boolean apply(@Nullable Entity p_apply_1_)
         {
             return p_apply_1_.canBeCollidedWith();
         }
-    }
-            );
-    private static final DataParameter<Byte> CRITICAL = EntityDataManager.createKey(EntityArrow.class, DataSerializers.BYTE);
-    private int xTile = -1;
-    private int yTile = -1;
-    private int zTile = -1;
+    });
+    private static final DataParameter<Byte> CRITICAL = EntityDataManager.<Byte>createKey(EntityArrow.class, DataSerializers.BYTE);
+    private int xTile;
+    private int yTile;
+    private int zTile;
     private Block inTile;
     private int inData;
     protected boolean inGround;
     protected int timeInGround;
-    public EntityArrow.PickupStatus pickupStatus = EntityArrow.PickupStatus.DISALLOWED;
+    public EntityArrow.PickupStatus pickupStatus;
     public int arrowShake;
     public Entity shootingEntity;
     private int ticksInGround;
     private int ticksInAir;
-    private double damage = 2.0;
+    private double damage;
     private int knockbackStrength;
 
     public EntityArrow(World worldIn)
     {
         super(worldIn);
+        this.xTile = -1;
+        this.yTile = -1;
+        this.zTile = -1;
+        this.pickupStatus = EntityArrow.PickupStatus.DISALLOWED;
+        this.damage = 2.0D;
         this.setSize(0.5F, 0.5F);
     }
 
@@ -78,7 +81,7 @@
 
     public EntityArrow(World worldIn, EntityLivingBase shooter)
     {
-        this(worldIn, shooter.posX, shooter.posY + (double)shooter.getEyeHeight() - 0.1F, shooter.posZ);
+        this(worldIn, shooter.posX, shooter.posY + (double)shooter.getEyeHeight() - 0.10000000149011612D, shooter.posZ);
         this.shootingEntity = shooter;
 
         if (shooter instanceof EntityPlayer)
@@ -88,77 +91,70 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public boolean isInRangeToRenderDist(double distance)
     {
-        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 10.0;
+        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 10.0D;
 
         if (Double.isNaN(d0))
         {
-            d0 = 1.0;
+            d0 = 1.0D;
         }
 
-        d0 *= 64.0 * getRenderDistanceWeight();
+        d0 = d0 * 64.0D * getRenderDistanceWeight();
         return distance < d0 * d0;
     }
 
-    @Override
     protected void entityInit()
     {
-        this.dataManager.register(CRITICAL, (byte)0);
+        this.dataManager.register(CRITICAL, Byte.valueOf((byte)0));
     }
 
     public void shoot(Entity shooter, float pitch, float yaw, float p_184547_4_, float velocity, float inaccuracy)
     {
-        float f = -MathHelper.sin(yaw * (float)(Math.PI / 180.0)) * MathHelper.cos(pitch * (float)(Math.PI / 180.0));
-        float f1 = -MathHelper.sin(pitch * (float)(Math.PI / 180.0));
-        float f2 = MathHelper.cos(yaw * (float)(Math.PI / 180.0)) * MathHelper.cos(pitch * (float)(Math.PI / 180.0));
+        float f = -MathHelper.sin(yaw * 0.017453292F) * MathHelper.cos(pitch * 0.017453292F);
+        float f1 = -MathHelper.sin(pitch * 0.017453292F);
+        float f2 = MathHelper.cos(yaw * 0.017453292F) * MathHelper.cos(pitch * 0.017453292F);
         this.shoot((double)f, (double)f1, (double)f2, velocity, inaccuracy);
-        this.motionX = this.motionX + shooter.motionX;
-        this.motionZ = this.motionZ + shooter.motionZ;
+        this.motionX += shooter.motionX;
+        this.motionZ += shooter.motionZ;
 
         if (!shooter.onGround)
         {
-            this.motionY = this.motionY + shooter.motionY;
+            this.motionY += shooter.motionY;
         }
     }
 
-    @Override
     public void shoot(double x, double y, double z, float velocity, float inaccuracy)
     {
         float f = MathHelper.sqrt(x * x + y * y + z * z);
-        x /= (double)f;
-        y /= (double)f;
-        z /= (double)f;
-        x += this.rand.nextGaussian() * 0.0075F * (double)inaccuracy;
-        y += this.rand.nextGaussian() * 0.0075F * (double)inaccuracy;
-        z += this.rand.nextGaussian() * 0.0075F * (double)inaccuracy;
-        x *= (double)velocity;
-        y *= (double)velocity;
-        z *= (double)velocity;
+        x = x / (double)f;
+        y = y / (double)f;
+        z = z / (double)f;
+        x = x + this.rand.nextGaussian() * 0.007499999832361937D * (double)inaccuracy;
+        y = y + this.rand.nextGaussian() * 0.007499999832361937D * (double)inaccuracy;
+        z = z + this.rand.nextGaussian() * 0.007499999832361937D * (double)inaccuracy;
+        x = x * (double)velocity;
+        y = y * (double)velocity;
+        z = z * (double)velocity;
         this.motionX = x;
         this.motionY = y;
         this.motionZ = z;
         float f1 = MathHelper.sqrt(x * x + z * z);
-        this.rotationYaw = (float)(MathHelper.atan2(x, z) * 180.0F / (float)Math.PI);
-        this.rotationPitch = (float)(MathHelper.atan2(y, (double)f1) * 180.0F / (float)Math.PI);
+        this.rotationYaw = (float)(MathHelper.atan2(x, z) * (180D / Math.PI));
+        this.rotationPitch = (float)(MathHelper.atan2(y, (double)f1) * (180D / Math.PI));
         this.prevRotationYaw = this.rotationYaw;
         this.prevRotationPitch = this.rotationPitch;
         this.ticksInGround = 0;
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
-    public void setPositionAndRotationDirect(
-        double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport
-    )
+    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport)
     {
         this.setPosition(x, y, z);
         this.setRotation(yaw, pitch);
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void setVelocity(double x, double y, double z)
     {
         this.motionX = x;
@@ -168,8 +164,8 @@
         if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
         {
             float f = MathHelper.sqrt(x * x + z * z);
-            this.rotationPitch = (float)(MathHelper.atan2(y, (double)f) * 180.0F / (float)Math.PI);
-            this.rotationYaw = (float)(MathHelper.atan2(x, z) * 180.0F / (float)Math.PI);
+            this.rotationPitch = (float)(MathHelper.atan2(y, (double)f) * (180D / Math.PI));
+            this.rotationYaw = (float)(MathHelper.atan2(x, z) * (180D / Math.PI));
             this.prevRotationPitch = this.rotationPitch;
             this.prevRotationYaw = this.rotationYaw;
             this.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
@@ -177,7 +173,6 @@
         }
     }
 
-    @Override
     public void onUpdate()
     {
         super.onUpdate();
@@ -185,8 +180,8 @@
         if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F)
         {
             float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.rotationYaw = (float)(MathHelper.atan2(this.motionX, this.motionZ) * 180.0F / (float)Math.PI);
-            this.rotationPitch = (float)(MathHelper.atan2(this.motionY, (double)f) * 180.0F / (float)Math.PI);
+            this.rotationYaw = (float)(MathHelper.atan2(this.motionX, this.motionZ) * (180D / Math.PI));
+            this.rotationPitch = (float)(MathHelper.atan2(this.motionY, (double)f) * (180D / Math.PI));
             this.prevRotationYaw = this.rotationYaw;
             this.prevRotationPitch = this.rotationPitch;
         }
@@ -199,8 +194,7 @@
         {
             AxisAlignedBB axisalignedbb = iblockstate.getCollisionBoundingBox(this.world, blockpos);
 
-            if (axisalignedbb != Block.NULL_AABB
-                    && axisalignedbb.offset(blockpos).contains(new Vec3d(this.posX, this.posY, this.posZ)))
+            if (axisalignedbb != Block.NULL_AABB && axisalignedbb.offset(blockpos).contains(new Vec3d(this.posX, this.posY, this.posZ)))
             {
                 this.inGround = true;
             }
@@ -208,25 +202,25 @@
 
         if (this.arrowShake > 0)
         {
-            this.arrowShake--;
+            --this.arrowShake;
         }
 
         if (this.inGround)
         {
             int j = block.getMetaFromState(iblockstate);
 
-            if ((block != this.inTile || j != this.inData) && !this.world.collidesWithAnyBlock(this.getEntityBoundingBox().grow(0.05)))
+            if ((block != this.inTile || j != this.inData) && !this.world.collidesWithAnyBlock(this.getEntityBoundingBox().grow(0.05D)))
             {
                 this.inGround = false;
-                this.motionX = this.motionX * (double)(this.rand.nextFloat() * 0.2F);
-                this.motionY = this.motionY * (double)(this.rand.nextFloat() * 0.2F);
-                this.motionZ = this.motionZ * (double)(this.rand.nextFloat() * 0.2F);
+                this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
+                this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
+                this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
                 this.ticksInGround = 0;
                 this.ticksInAir = 0;
             }
             else
             {
-                this.ticksInGround++;
+                ++this.ticksInGround;
 
                 if (this.ticksInGround >= 1200)
                 {
@@ -234,12 +228,12 @@
                 }
             }
 
-            this.timeInGround++;
+            ++this.timeInGround;
         }
         else
         {
             this.timeInGround = 0;
-            this.ticksInAir++;
+            ++this.ticksInAir;
             Vec3d vec3d1 = new Vec3d(this.posX, this.posY, this.posZ);
             Vec3d vec3d = new Vec3d(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
             RayTraceResult raytraceresult = this.world.rayTraceBlocks(vec3d1, vec3d, false, true, false);
@@ -248,9 +242,7 @@
 
             if (raytraceresult != null)
             {
-                vec3d = new Vec3d(
-                    raytraceresult.hitVec.x, raytraceresult.hitVec.y, raytraceresult.hitVec.z
-                );
+                vec3d = new Vec3d(raytraceresult.hitVec.x, raytraceresult.hitVec.y, raytraceresult.hitVec.z);
             }
 
             Entity entity = this.findEntityOnPath(vec3d1, vec3d);
@@ -270,38 +262,28 @@
                 }
             }
 
-            if (raytraceresult != null)
+            if (raytraceresult != null && !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, raytraceresult))
             {
                 this.onHit(raytraceresult);
             }
 
             if (this.getIsCritical())
             {
-                for (int k = 0; k < 4; k++)
+                for (int k = 0; k < 4; ++k)
                 {
-                    this.world
-                    .spawnParticle(
-                        EnumParticleTypes.CRIT,
-                        this.posX + this.motionX * (double)k / 4.0,
-                        this.posY + this.motionY * (double)k / 4.0,
-                        this.posZ + this.motionZ * (double)k / 4.0,
-                        -this.motionX,
-                        -this.motionY + 0.2,
-                        -this.motionZ
-                    );
+                    this.world.spawnParticle(EnumParticleTypes.CRIT, this.posX + this.motionX * (double)k / 4.0D, this.posY + this.motionY * (double)k / 4.0D, this.posZ + this.motionZ * (double)k / 4.0D, -this.motionX, -this.motionY + 0.2D, -this.motionZ);
                 }
             }
 
-            this.posX = this.posX + this.motionX;
-            this.posY = this.posY + this.motionY;
-            this.posZ = this.posZ + this.motionZ;
+            this.posX += this.motionX;
+            this.posY += this.motionY;
+            this.posZ += this.motionZ;
             float f4 = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.rotationYaw = (float)(MathHelper.atan2(this.motionX, this.motionZ) * 180.0F / (float)Math.PI);
-            this.rotationPitch = (float)(MathHelper.atan2(this.motionY, (double)f4) * 180.0F / (float)Math.PI);
+            this.rotationYaw = (float)(MathHelper.atan2(this.motionX, this.motionZ) * (180D / Math.PI));
 
-            while (this.rotationPitch - this.prevRotationPitch < -180.0F)
+            for (this.rotationPitch = (float)(MathHelper.atan2(this.motionY, (double)f4) * (180D / Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F)
             {
-                this.prevRotationPitch -= 360.0F;
+                ;
             }
 
             while (this.rotationPitch - this.prevRotationPitch >= 180.0F)
@@ -326,19 +308,10 @@
 
             if (this.isInWater())
             {
-                for (int i = 0; i < 4; i++)
+                for (int i = 0; i < 4; ++i)
                 {
                     float f3 = 0.25F;
-                    this.world
-                    .spawnParticle(
-                        EnumParticleTypes.WATER_BUBBLE,
-                        this.posX - this.motionX * 0.25,
-                        this.posY - this.motionY * 0.25,
-                        this.posZ - this.motionZ * 0.25,
-                        this.motionX,
-                        this.motionY,
-                        this.motionZ
-                    );
+                    this.world.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * 0.25D, this.posY - this.motionY * 0.25D, this.posZ - this.motionZ * 0.25D, this.motionX, this.motionY, this.motionZ);
                 }
 
                 f1 = 0.6F;
@@ -355,7 +328,7 @@
 
             if (!this.hasNoGravity())
             {
-                this.motionY -= 0.05F;
+                this.motionY -= 0.05000000074505806D;
             }
 
             this.setPosition(this.posX, this.posY, this.posZ);
@@ -369,9 +342,7 @@
 
         if (entity != null)
         {
-            float f = MathHelper.sqrt(
-                          this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ
-                      );
+            float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
             int i = MathHelper.ceil((double)f * this.damage);
 
             if (this.getIsCritical())
@@ -412,11 +383,7 @@
 
                         if (f1 > 0.0F)
                         {
-                            entitylivingbase.addVelocity(
-                                this.motionX * (double)this.knockbackStrength * 0.6F / (double)f1,
-                                0.1,
-                                this.motionZ * (double)this.knockbackStrength * 0.6F / (double)f1
-                            );
+                            entitylivingbase.addVelocity(this.motionX * (double)this.knockbackStrength * 0.6000000238418579D / (double)f1, 0.1D, this.motionZ * (double)this.knockbackStrength * 0.6000000238418579D / (double)f1);
                         }
                     }
 
@@ -428,10 +395,7 @@
 
                     this.arrowHit(entitylivingbase);
 
-                    if (this.shootingEntity != null
-                            && entitylivingbase != this.shootingEntity
-                            && entitylivingbase instanceof EntityPlayer
-                            && this.shootingEntity instanceof EntityPlayerMP)
+                    if (this.shootingEntity != null && entitylivingbase != this.shootingEntity && entitylivingbase instanceof EntityPlayer && this.shootingEntity instanceof EntityPlayerMP)
                     {
                         ((EntityPlayerMP)this.shootingEntity).connection.sendPacket(new SPacketChangeGameState(6, 0.0F));
                     }
@@ -446,15 +410,14 @@
             }
             else
             {
-                this.motionX *= -0.1F;
-                this.motionY *= -0.1F;
-                this.motionZ *= -0.1F;
+                this.motionX *= -0.10000000149011612D;
+                this.motionY *= -0.10000000149011612D;
+                this.motionZ *= -0.10000000149011612D;
                 this.rotationYaw += 180.0F;
                 this.prevRotationYaw += 180.0F;
                 this.ticksInAir = 0;
 
-                if (!this.world.isRemote
-                        && this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ < 0.001F)
+                if (!this.world.isRemote && this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ < 0.0010000000474974513D)
                 {
                     if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED)
                     {
@@ -477,12 +440,10 @@
             this.motionX = (double)((float)(raytraceResultIn.hitVec.x - this.posX));
             this.motionY = (double)((float)(raytraceResultIn.hitVec.y - this.posY));
             this.motionZ = (double)((float)(raytraceResultIn.hitVec.z - this.posZ));
-            float f2 = MathHelper.sqrt(
-                           this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ
-                       );
-            this.posX = this.posX - this.motionX / (double)f2 * 0.05F;
-            this.posY = this.posY - this.motionY / (double)f2 * 0.05F;
-            this.posZ = this.posZ - this.motionZ / (double)f2 * 0.05F;
+            float f2 = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+            this.posX -= this.motionX / (double)f2 * 0.05000000074505806D;
+            this.posY -= this.motionY / (double)f2 * 0.05000000074505806D;
+            this.posZ -= this.motionZ / (double)f2 * 0.05000000074505806D;
             this.playSound(SoundEvents.ENTITY_ARROW_HIT, 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
             this.inGround = true;
             this.arrowShake = 7;
@@ -495,7 +456,6 @@
         }
     }
 
-    @Override
     public void move(MoverType type, double x, double y, double z)
     {
         super.move(type, x, y, z);
@@ -516,24 +476,23 @@
     protected Entity findEntityOnPath(Vec3d start, Vec3d end)
     {
         Entity entity = null;
-        List<Entity> list = this.world
-                            .getEntitiesInAABBexcluding(this, this.getEntityBoundingBox().expand(this.motionX, this.motionY, this.motionZ).grow(1.0), ARROW_TARGETS);
-        double d0 = 0.0;
+        List<Entity> list = this.world.getEntitiesInAABBexcluding(this, this.getEntityBoundingBox().expand(this.motionX, this.motionY, this.motionZ).grow(1.0D), ARROW_TARGETS);
+        double d0 = 0.0D;
 
-        for (int i = 0; i < list.size(); i++)
+        for (int i = 0; i < list.size(); ++i)
         {
             Entity entity1 = list.get(i);
 
             if (entity1 != this.shootingEntity || this.ticksInAir >= 5)
             {
-                AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().grow(0.3F);
+                AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().grow(0.30000001192092896D);
                 RayTraceResult raytraceresult = axisalignedbb.calculateIntercept(start, end);
 
                 if (raytraceresult != null)
                 {
                     double d1 = start.squareDistanceTo(raytraceresult.hitVec);
 
-                    if (d1 < d0 || d0 == 0.0)
+                    if (d1 < d0 || d0 == 0.0D)
                     {
                         entity = entity1;
                         d0 = d1;
@@ -554,7 +513,6 @@
         registerFixesArrow(fixer, "Arrow");
     }
 
-    @Override
     public void writeEntityToNBT(NBTTagCompound compound)
     {
         compound.setInteger("xTile", this.xTile);
@@ -571,7 +529,6 @@
         compound.setBoolean("crit", this.getIsCritical());
     }
 
-    @Override
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         this.xTile = compound.getInteger("xTile");
@@ -609,13 +566,11 @@
         this.setIsCritical(compound.getBoolean("crit"));
     }
 
-    @Override
     public void onCollideWithPlayer(EntityPlayer entityIn)
     {
         if (!this.world.isRemote && this.inGround && this.arrowShake <= 0)
         {
-            boolean flag = this.pickupStatus == EntityArrow.PickupStatus.ALLOWED
-                           || this.pickupStatus == EntityArrow.PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
+            boolean flag = this.pickupStatus == EntityArrow.PickupStatus.ALLOWED || this.pickupStatus == EntityArrow.PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
 
             if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED && !entityIn.inventory.addItemStackToInventory(this.getArrowStack()))
             {
@@ -632,7 +587,6 @@
 
     protected abstract ItemStack getArrowStack();
 
-    @Override
     protected boolean canTriggerWalking()
     {
         return false;
@@ -653,13 +607,11 @@
         this.knockbackStrength = knockbackStrengthIn;
     }
 
-    @Override
     public boolean canBeAttackedWithItem()
     {
         return false;
     }
 
-    @Override
     public float getEyeHeight()
     {
         return 0.0F;
@@ -667,21 +619,21 @@
 
     public void setIsCritical(boolean critical)
     {
-        byte b0 = this.dataManager.get(CRITICAL);
+        byte b0 = ((Byte)this.dataManager.get(CRITICAL)).byteValue();
 
         if (critical)
         {
-            this.dataManager.set(CRITICAL, (byte)(b0 | 1));
+            this.dataManager.set(CRITICAL, Byte.valueOf((byte)(b0 | 1)));
         }
         else
         {
-            this.dataManager.set(CRITICAL, (byte)(b0 & -2));
+            this.dataManager.set(CRITICAL, Byte.valueOf((byte)(b0 & -2)));
         }
     }
 
     public boolean getIsCritical()
     {
-        byte b0 = this.dataManager.get(CRITICAL);
+        byte b0 = ((Byte)this.dataManager.get(CRITICAL)).byteValue();
         return (b0 & 1) != 0;
     }
 
@@ -689,13 +641,11 @@
     {
         int i = EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.POWER, p_190547_1_);
         int j = EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.PUNCH, p_190547_1_);
-        this.setDamage(
-            (double)(p_190547_2_ * 2.0F) + this.rand.nextGaussian() * 0.25 + (double)((float)this.world.getDifficulty().getId() * 0.11F)
-        );
+        this.setDamage((double)(p_190547_2_ * 2.0F) + this.rand.nextGaussian() * 0.25D + (double)((float)this.world.getDifficulty().getId() * 0.11F));
 
         if (i > 0)
         {
-            this.setDamage(this.getDamage() + (double)i * 0.5 + 0.5);
+            this.setDamage(this.getDamage() + (double)i * 0.5D + 0.5D);
         }
 
         if (j > 0)
