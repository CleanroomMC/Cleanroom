--- before/net/minecraft/tileentity/TileEntityBeacon.java
+++ after/net/minecraft/tileentity/TileEntityBeacon.java
@@ -36,15 +36,9 @@
 
 public class TileEntityBeacon extends TileEntityLockable implements ITickable, ISidedInventory
 {
-    public static final Potion[][] EFFECTS_LIST = new Potion[][]
-        {
-            {MobEffects.SPEED, MobEffects.HASTE},
-            {MobEffects.RESISTANCE, MobEffects.JUMP_BOOST},
-            {MobEffects.STRENGTH},
-            {MobEffects.REGENERATION}
-        };
-    private static final Set<Potion> VALID_EFFECTS = Sets.newHashSet();
-    private final List<TileEntityBeacon.BeamSegment> beamSegments = Lists.newArrayList();
+    public static final Potion[][] EFFECTS_LIST = new Potion[][] {{MobEffects.SPEED, MobEffects.HASTE}, {MobEffects.RESISTANCE, MobEffects.JUMP_BOOST}, {MobEffects.STRENGTH}, {MobEffects.REGENERATION}};
+    private static final Set<Potion> VALID_EFFECTS = Sets.<Potion>newHashSet();
+    private final List<TileEntityBeacon.BeamSegment> beamSegments = Lists.<TileEntityBeacon.BeamSegment>newArrayList();
     @SideOnly(Side.CLIENT)
     private long beamRenderCounter;
     @SideOnly(Side.CLIENT)
@@ -58,7 +52,6 @@
     private ItemStack payment = ItemStack.EMPTY;
     private String customName;
 
-    @Override
     public void update()
     {
         if (this.world.getTotalWorldTime() % 80L == 0L)
@@ -92,10 +85,8 @@
             int k = this.pos.getX();
             int l = this.pos.getY();
             int i1 = this.pos.getZ();
-            AxisAlignedBB axisalignedbb = new AxisAlignedBB((double)k, (double)l, (double)i1, (double)(k + 1), (double)(l + 1), (double)(i1 + 1))
-            .grow(d0)
-            .expand(0.0, (double)this.world.getHeight(), 0.0);
-            List<EntityPlayer> list = this.world.getEntitiesWithinAABB(EntityPlayer.class, axisalignedbb);
+            AxisAlignedBB axisalignedbb = (new AxisAlignedBB((double)k, (double)l, (double)i1, (double)(k + 1), (double)(l + 1), (double)(i1 + 1))).grow(d0).expand(0.0D, (double)this.world.getHeight(), 0.0D);
+            List<EntityPlayer> list = this.world.<EntityPlayer>getEntitiesWithinAABB(EntityPlayer.class, axisalignedbb);
 
             for (EntityPlayer entityplayer : list)
             {
@@ -126,41 +117,40 @@
         boolean flag = true;
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-        for (int i1 = j + 1; i1 < 256; i1++)
+        for (int i1 = j + 1; i1 < 256; ++i1)
         {
             IBlockState iblockstate = this.world.getBlockState(blockpos$mutableblockpos.setPos(i, i1, k));
             float[] afloat;
 
             if (iblockstate.getBlock() == Blocks.STAINED_GLASS)
             {
-                afloat = iblockstate.getValue(BlockStainedGlass.COLOR).getColorComponentValues();
+                afloat = ((EnumDyeColor)iblockstate.getValue(BlockStainedGlass.COLOR)).getColorComponentValues();
             }
             else
             {
                 if (iblockstate.getBlock() != Blocks.STAINED_GLASS_PANE)
                 {
-                    if (iblockstate.getLightOpacity() >= 15 && iblockstate.getBlock() != Blocks.BEDROCK)
+                    if (iblockstate.getLightOpacity(world, blockpos$mutableblockpos) >= 15 && iblockstate.getBlock() != Blocks.BEDROCK)
                     {
                         this.isComplete = false;
                         this.beamSegments.clear();
                         break;
                     }
-
+                    float[] customColor = iblockstate.getBlock().getBeaconColorMultiplier(iblockstate, this.world, blockpos$mutableblockpos, getPos());
+                    if (customColor != null)
+                        afloat = customColor;
+                    else {
                     tileentitybeacon$beamsegment.incrementHeight();
                     continue;
+                    }
                 }
-
-                afloat = iblockstate.getValue(BlockStainedGlassPane.COLOR).getColorComponentValues();
+                else
+                afloat = ((EnumDyeColor)iblockstate.getValue(BlockStainedGlassPane.COLOR)).getColorComponentValues();
             }
 
             if (!flag)
             {
-                afloat = new float[]
-                {
-                    (tileentitybeacon$beamsegment.getColors()[0] + afloat[0]) / 2.0F,
-                    (tileentitybeacon$beamsegment.getColors()[1] + afloat[1]) / 2.0F,
-                    (tileentitybeacon$beamsegment.getColors()[2] + afloat[2]) / 2.0F
-                };
+                afloat = new float[] {(tileentitybeacon$beamsegment.getColors()[0] + afloat[0]) / 2.0F, (tileentitybeacon$beamsegment.getColors()[1] + afloat[1]) / 2.0F, (tileentitybeacon$beamsegment.getColors()[2] + afloat[2]) / 2.0F};
             }
 
             if (Arrays.equals(afloat, tileentitybeacon$beamsegment.getColors()))
@@ -189,13 +179,13 @@
 
                 boolean flag1 = true;
 
-                for (int j1 = i - l1; j1 <= i + l1 && flag1; j1++)
+                for (int j1 = i - l1; j1 <= i + l1 && flag1; ++j1)
                 {
-                    for (int k1 = k - l1; k1 <= k + l1; k1++)
+                    for (int k1 = k - l1; k1 <= k + l1; ++k1)
                     {
                         Block block = this.world.getBlockState(new BlockPos(j1, i2, k1)).getBlock();
 
-                        if (block != Blocks.EMERALD_BLOCK && block != Blocks.GOLD_BLOCK && block != Blocks.DIAMOND_BLOCK && block != Blocks.IRON_BLOCK)
+                        if (!block.isBeaconBase(this.world, new BlockPos(j1, i2, k1), getPos()))
                         {
                             flag1 = false;
                             break;
@@ -217,10 +207,7 @@
 
         if (!this.world.isRemote && l < this.levels)
         {
-            for (EntityPlayerMP entityplayermp : this.world
-                    .getEntitiesWithinAABB(
-                        EntityPlayerMP.class, new AxisAlignedBB((double)i, (double)j, (double)k, (double)i, (double)(j - 4), (double)k).grow(10.0, 5.0, 10.0)
-                    ))
+            for (EntityPlayerMP entityplayermp : this.world.getEntitiesWithinAABB(EntityPlayerMP.class, (new AxisAlignedBB((double)i, (double)j, (double)k, (double)i, (double)(j - 4), (double)k)).grow(10.0D, 5.0D, 10.0D)))
             {
                 CriteriaTriggers.CONSTRUCT_BEACON.trigger(entityplayermp, this);
             }
@@ -272,23 +259,20 @@
     }
 
     @Nullable
-    @Override
     public SPacketUpdateTileEntity getUpdatePacket()
     {
         return new SPacketUpdateTileEntity(this.pos, 3, this.getUpdateTag());
     }
 
-    @Override
     public NBTTagCompound getUpdateTag()
     {
         return this.writeToNBT(new NBTTagCompound());
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public double getMaxRenderDistanceSquared()
     {
-        return 65536.0;
+        return 65536.0D;
     }
 
     @Nullable
@@ -298,7 +282,6 @@
         return VALID_EFFECTS.contains(potion) ? potion : null;
     }
 
-    @Override
     public void readFromNBT(NBTTagCompound compound)
     {
         super.readFromNBT(compound);
@@ -307,7 +290,6 @@
         this.levels = compound.getInteger("Levels");
     }
 
-    @Override
     public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
         super.writeToNBT(compound);
@@ -317,44 +299,42 @@
         return compound;
     }
 
-    @Override
     public int getSizeInventory()
     {
         return 1;
     }
 
-    @Override
     public boolean isEmpty()
     {
         return this.payment.isEmpty();
     }
 
-    @Override
     public ItemStack getStackInSlot(int index)
     {
         return index == 0 ? this.payment : ItemStack.EMPTY;
     }
 
-    @Override
     public ItemStack decrStackSize(int index, int count)
     {
-        if (index != 0 || this.payment.isEmpty())
-        {
-            return ItemStack.EMPTY;
-        }
-        else if (count >= this.payment.getCount())
-        {
-            ItemStack itemstack = this.payment;
-            this.payment = ItemStack.EMPTY;
-            return itemstack;
+        if (index == 0 && !this.payment.isEmpty())
+        {
+            if (count >= this.payment.getCount())
+            {
+                ItemStack itemstack = this.payment;
+                this.payment = ItemStack.EMPTY;
+                return itemstack;
+            }
+            else
+            {
+                return this.payment.splitStack(count);
+            }
         }
         else
         {
-            return this.payment.splitStack(count);
+            return ItemStack.EMPTY;
         }
     }
 
-    @Override
     public ItemStack removeStackFromSlot(int index)
     {
         if (index == 0)
@@ -369,7 +349,6 @@
         }
     }
 
-    @Override
     public void setInventorySlotContents(int index, ItemStack stack)
     {
         if (index == 0)
@@ -378,13 +357,11 @@
         }
     }
 
-    @Override
     public String getName()
     {
         return this.hasCustomName() ? this.customName : "container.beacon";
     }
 
-    @Override
     public boolean hasCustomName()
     {
         return this.customName != null && !this.customName.isEmpty();
@@ -395,59 +372,46 @@
         this.customName = name;
     }
 
-    @Override
     public int getInventoryStackLimit()
     {
         return 1;
     }
 
-    @Override
     public boolean isUsableByPlayer(EntityPlayer player)
     {
-        return this.world.getTileEntity(this.pos) != this
-               ? false
-               : !(
-                   player.getDistanceSq(
-                       (double)this.pos.getX() + 0.5,
-                       (double)this.pos.getY() + 0.5,
-                       (double)this.pos.getZ() + 0.5
-                   )
-                   > 64.0
-               );
+        if (this.world.getTileEntity(this.pos) != this)
+        {
+            return false;
+        }
+        else
+        {
+            return player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
+        }
     }
 
-    @Override
     public void openInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public void closeInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
-        return stack.getItem() == Items.EMERALD
-               || stack.getItem() == Items.DIAMOND
-               || stack.getItem() == Items.GOLD_INGOT
-               || stack.getItem() == Items.IRON_INGOT;
+        return stack.getItem() != null && stack.getItem().isBeaconPayment(stack);
     }
 
-    @Override
     public String getGuiID()
     {
         return "minecraft:beacon";
     }
 
-    @Override
     public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
     {
         return new ContainerBeacon(playerInventory, this);
     }
 
-    @Override
     public int getField(int id)
     {
         switch (id)
@@ -463,7 +427,6 @@
         }
     }
 
-    @Override
     public void setField(int id, int value)
     {
         switch (id)
@@ -479,19 +442,16 @@
         }
     }
 
-    @Override
     public int getFieldCount()
     {
         return 3;
     }
 
-    @Override
     public void clear()
     {
         this.payment = ItemStack.EMPTY;
     }
 
-    @Override
     public boolean receiveClientEvent(int id, int type)
     {
         if (id == 1)
@@ -505,19 +465,16 @@
         }
     }
 
-    @Override
     public int[] getSlotsForFace(EnumFacing side)
     {
         return new int[0];
     }
 
-    @Override
     public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction)
     {
         return false;
     }
 
-    @Override
     public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction)
     {
         return false;
@@ -544,7 +501,7 @@
 
             protected void incrementHeight()
             {
-                this.height++;
+                ++this.height;
             }
 
             public float[] getColors()
