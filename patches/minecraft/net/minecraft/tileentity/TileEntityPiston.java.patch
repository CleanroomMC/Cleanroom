--- before/net/minecraft/tileentity/TileEntityPiston.java
+++ after/net/minecraft/tileentity/TileEntityPiston.java
@@ -55,13 +55,11 @@
         return this.pistonState;
     }
 
-    @Override
     public NBTTagCompound getUpdateTag()
     {
         return this.writeToNBT(new NBTTagCompound());
     }
 
-    @Override
     public int getBlockMetadata()
     {
         return 0;
@@ -125,46 +123,31 @@
     {
         p_184319_3_ = this.getExtendedProgress(p_184319_3_);
         IBlockState iblockstate = this.getCollisionRelatedBlockState();
-        return iblockstate.getBoundingBox(p_184319_1_, p_184319_2_)
-               .offset(
-                   (double)(p_184319_3_ * (float)this.pistonFacing.getXOffset()),
-                   (double)(p_184319_3_ * (float)this.pistonFacing.getYOffset()),
-                   (double)(p_184319_3_ * (float)this.pistonFacing.getZOffset())
-               );
+        return iblockstate.getBoundingBox(p_184319_1_, p_184319_2_).offset((double)(p_184319_3_ * (float)this.pistonFacing.getXOffset()), (double)(p_184319_3_ * (float)this.pistonFacing.getYOffset()), (double)(p_184319_3_ * (float)this.pistonFacing.getZOffset()));
     }
 
     private IBlockState getCollisionRelatedBlockState()
     {
-        return !this.isExtending() && this.shouldPistonHeadBeRendered()
-               ? Blocks.PISTON_HEAD
-               .getDefaultState()
-               .withProperty(
-                   BlockPistonExtension.TYPE,
-                   this.pistonState.getBlock() == Blocks.STICKY_PISTON
-                   ? BlockPistonExtension.EnumPistonType.STICKY
-                   : BlockPistonExtension.EnumPistonType.DEFAULT
-               )
-               .withProperty(BlockPistonExtension.FACING, this.pistonState.getValue(BlockPistonBase.FACING))
-               : this.pistonState;
+        return !this.isExtending() && this.shouldPistonHeadBeRendered() ? Blocks.PISTON_HEAD.getDefaultState().withProperty(BlockPistonExtension.TYPE, this.pistonState.getBlock() == Blocks.STICKY_PISTON ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT).withProperty(BlockPistonExtension.FACING, this.pistonState.getValue(BlockPistonBase.FACING)) : this.pistonState;
     }
 
     private void moveCollidedEntities(float p_184322_1_)
     {
         EnumFacing enumfacing = this.extending ? this.pistonFacing : this.pistonFacing.getOpposite();
         double d0 = (double)(p_184322_1_ - this.progress);
-        List<AxisAlignedBB> list = Lists.newArrayList();
-        this.getCollisionRelatedBlockState().addCollisionBoxToList(this.world, BlockPos.ORIGIN, new AxisAlignedBB(BlockPos.ORIGIN), list, null, true);
+        List<AxisAlignedBB> list = Lists.<AxisAlignedBB>newArrayList();
+        this.getCollisionRelatedBlockState().addCollisionBoxToList(this.world, BlockPos.ORIGIN, new AxisAlignedBB(BlockPos.ORIGIN), list, (Entity)null, true);
 
         if (!list.isEmpty())
         {
             AxisAlignedBB axisalignedbb = this.moveByPositionAndProgress(this.getMinMaxPiecesAABB(list));
-            List<Entity> list1 = this.world.getEntitiesWithinAABBExcludingEntity(null, this.getMovementArea(axisalignedbb, enumfacing, d0).union(axisalignedbb));
+            List<Entity> list1 = this.world.getEntitiesWithinAABBExcludingEntity((Entity)null, this.getMovementArea(axisalignedbb, enumfacing, d0).union(axisalignedbb));
 
             if (!list1.isEmpty())
             {
-                boolean flag = this.pistonState.getBlock() == Blocks.SLIME_BLOCK;
+                boolean flag = this.pistonState.getBlock().isStickyBlock(this.pistonState);
 
-                for (int i = 0; i < list1.size(); i++)
+                for (int i = 0; i < list1.size(); ++i)
                 {
                     Entity entity = list1.get(i);
 
@@ -185,9 +168,9 @@
                             }
                         }
 
-                        double d1 = 0.0;
+                        double d1 = 0.0D;
 
-                        for (int j = 0; j < list.size(); j++)
+                        for (int j = 0; j < list.size(); ++j)
                         {
                             AxisAlignedBB axisalignedbb1 = this.getMovementArea(this.moveByPositionAndProgress(list.get(j)), enumfacing, d0);
                             AxisAlignedBB axisalignedbb2 = entity.getEntityBoundingBox();
@@ -203,16 +186,11 @@
                             }
                         }
 
-                        if (!(d1 <= 0.0))
+                        if (d1 > 0.0D)
                         {
-                            d1 = Math.min(d1, d0) + 0.01;
+                            d1 = Math.min(d1, d0) + 0.01D;
                             MOVING_ENTITY.set(enumfacing);
-                            entity.move(
-                                MoverType.PISTON,
-                                d1 * (double)enumfacing.getXOffset(),
-                                d1 * (double)enumfacing.getYOffset(),
-                                d1 * (double)enumfacing.getZOffset()
-                            );
+                            entity.move(MoverType.PISTON, d1 * (double)enumfacing.getXOffset(), d1 * (double)enumfacing.getYOffset(), d1 * (double)enumfacing.getZOffset());
                             MOVING_ENTITY.set(null);
 
                             if (!this.extending && this.shouldHeadBeRendered)
@@ -228,12 +206,12 @@
 
     private AxisAlignedBB getMinMaxPiecesAABB(List<AxisAlignedBB> p_191515_1_)
     {
-        double d0 = 0.0;
-        double d1 = 0.0;
-        double d2 = 0.0;
-        double d3 = 1.0;
-        double d4 = 1.0;
-        double d5 = 1.0;
+        double d0 = 0.0D;
+        double d1 = 0.0D;
+        double d2 = 0.0D;
+        double d3 = 1.0D;
+        double d4 = 1.0D;
+        double d5 = 1.0D;
 
         for (AxisAlignedBB axisalignedbb : p_191515_1_)
         {
@@ -265,76 +243,30 @@
     private AxisAlignedBB moveByPositionAndProgress(AxisAlignedBB p_190607_1_)
     {
         double d0 = (double)this.getExtendedProgress(this.progress);
-        return p_190607_1_.offset(
-                   (double)this.pos.getX() + d0 * (double)this.pistonFacing.getXOffset(),
-                   (double)this.pos.getY() + d0 * (double)this.pistonFacing.getYOffset(),
-                   (double)this.pos.getZ() + d0 * (double)this.pistonFacing.getZOffset()
-               );
+        return p_190607_1_.offset((double)this.pos.getX() + d0 * (double)this.pistonFacing.getXOffset(), (double)this.pos.getY() + d0 * (double)this.pistonFacing.getYOffset(), (double)this.pos.getZ() + d0 * (double)this.pistonFacing.getZOffset());
     }
 
     private AxisAlignedBB getMovementArea(AxisAlignedBB p_190610_1_, EnumFacing p_190610_2_, double p_190610_3_)
     {
         double d0 = p_190610_3_ * (double)p_190610_2_.getAxisDirection().getOffset();
-        double d1 = Math.min(d0, 0.0);
-        double d2 = Math.max(d0, 0.0);
+        double d1 = Math.min(d0, 0.0D);
+        double d2 = Math.max(d0, 0.0D);
 
         switch (p_190610_2_)
         {
             case WEST:
-                return new AxisAlignedBB(
-                           p_190610_1_.minX + d1,
-                           p_190610_1_.minY,
-                           p_190610_1_.minZ,
-                           p_190610_1_.minX + d2,
-                           p_190610_1_.maxY,
-                           p_190610_1_.maxZ
-                       );
+                return new AxisAlignedBB(p_190610_1_.minX + d1, p_190610_1_.minY, p_190610_1_.minZ, p_190610_1_.minX + d2, p_190610_1_.maxY, p_190610_1_.maxZ);
             case EAST:
-                return new AxisAlignedBB(
-                           p_190610_1_.maxX + d1,
-                           p_190610_1_.minY,
-                           p_190610_1_.minZ,
-                           p_190610_1_.maxX + d2,
-                           p_190610_1_.maxY,
-                           p_190610_1_.maxZ
-                       );
+                return new AxisAlignedBB(p_190610_1_.maxX + d1, p_190610_1_.minY, p_190610_1_.minZ, p_190610_1_.maxX + d2, p_190610_1_.maxY, p_190610_1_.maxZ);
             case DOWN:
-                return new AxisAlignedBB(
-                           p_190610_1_.minX,
-                           p_190610_1_.minY + d1,
-                           p_190610_1_.minZ,
-                           p_190610_1_.maxX,
-                           p_190610_1_.minY + d2,
-                           p_190610_1_.maxZ
-                       );
+                return new AxisAlignedBB(p_190610_1_.minX, p_190610_1_.minY + d1, p_190610_1_.minZ, p_190610_1_.maxX, p_190610_1_.minY + d2, p_190610_1_.maxZ);
             case UP:
             default:
-                return new AxisAlignedBB(
-                           p_190610_1_.minX,
-                           p_190610_1_.maxY + d1,
-                           p_190610_1_.minZ,
-                           p_190610_1_.maxX,
-                           p_190610_1_.maxY + d2,
-                           p_190610_1_.maxZ
-                       );
+                return new AxisAlignedBB(p_190610_1_.minX, p_190610_1_.maxY + d1, p_190610_1_.minZ, p_190610_1_.maxX, p_190610_1_.maxY + d2, p_190610_1_.maxZ);
             case NORTH:
-                return new AxisAlignedBB(
-                           p_190610_1_.minX,
-                           p_190610_1_.minY,
-                           p_190610_1_.minZ + d1,
-                           p_190610_1_.maxX,
-                           p_190610_1_.maxY,
-                           p_190610_1_.minZ + d2
-                       );
+                return new AxisAlignedBB(p_190610_1_.minX, p_190610_1_.minY, p_190610_1_.minZ + d1, p_190610_1_.maxX, p_190610_1_.maxY, p_190610_1_.minZ + d2);
             case SOUTH:
-                return new AxisAlignedBB(
-                           p_190610_1_.minX,
-                           p_190610_1_.minY,
-                           p_190610_1_.maxZ + d1,
-                           p_190610_1_.maxX,
-                           p_190610_1_.maxY,
-                           p_190610_1_.maxZ + d2
-                       );
+                return new AxisAlignedBB(p_190610_1_.minX, p_190610_1_.minY, p_190610_1_.maxZ + d1, p_190610_1_.maxX, p_190610_1_.maxY, p_190610_1_.maxZ + d2);
         }
     }
 
@@ -346,16 +278,14 @@
         if (axisalignedbb.intersects(axisalignedbb1))
         {
             EnumFacing enumfacing = p_190605_2_.getOpposite();
-            double d0 = this.getMovement(axisalignedbb1, enumfacing, axisalignedbb) + 0.01;
-            double d1 = this.getMovement(axisalignedbb1, enumfacing, axisalignedbb.intersect(axisalignedbb1)) + 0.01;
+            double d0 = this.getMovement(axisalignedbb1, enumfacing, axisalignedbb) + 0.01D;
+            double d1 = this.getMovement(axisalignedbb1, enumfacing, axisalignedbb.intersect(axisalignedbb1)) + 0.01D;
 
-            if (Math.abs(d0 - d1) < 0.01)
+            if (Math.abs(d0 - d1) < 0.01D)
             {
-                d0 = Math.min(d0, p_190605_3_) + 0.01;
+                d0 = Math.min(d0, p_190605_3_) + 0.01D;
                 MOVING_ENTITY.set(p_190605_2_);
-                p_190605_1_.move(
-                    MoverType.PISTON, d0 * (double)enumfacing.getXOffset(), d0 * (double)enumfacing.getYOffset(), d0 * (double)enumfacing.getZOffset()
-                );
+                p_190605_1_.move(MoverType.PISTON, d0 * (double)enumfacing.getXOffset(), d0 * (double)enumfacing.getYOffset(), d0 * (double)enumfacing.getZOffset());
                 MOVING_ENTITY.set(null);
             }
         }
@@ -363,23 +293,17 @@
 
     private static double getDeltaX(AxisAlignedBB p_190611_0_, EnumFacing facing, AxisAlignedBB p_190611_2_)
     {
-        return facing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE
-               ? p_190611_0_.maxX - p_190611_2_.minX
-               : p_190611_2_.maxX - p_190611_0_.minX;
+        return facing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE ? p_190611_0_.maxX - p_190611_2_.minX : p_190611_2_.maxX - p_190611_0_.minX;
     }
 
     private static double getDeltaY(AxisAlignedBB p_190608_0_, EnumFacing facing, AxisAlignedBB p_190608_2_)
     {
-        return facing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE
-               ? p_190608_0_.maxY - p_190608_2_.minY
-               : p_190608_2_.maxY - p_190608_0_.minY;
+        return facing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE ? p_190608_0_.maxY - p_190608_2_.minY : p_190608_2_.maxY - p_190608_0_.minY;
     }
 
     private static double getDeltaZ(AxisAlignedBB p_190604_0_, EnumFacing facing, AxisAlignedBB p_190604_2_)
     {
-        return facing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE
-               ? p_190604_0_.maxZ - p_190604_2_.minZ
-               : p_190604_2_.maxZ - p_190604_0_.minZ;
+        return facing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE ? p_190604_0_.maxZ - p_190604_2_.minZ : p_190604_2_.maxZ - p_190604_0_.minZ;
     }
 
     public void clearPistonTileEntity()
@@ -399,7 +323,6 @@
         }
     }
 
-    @Override
     public void update()
     {
         this.lastProgress = this.progress;
@@ -432,7 +355,6 @@
     {
     }
 
-    @Override
     public void readFromNBT(NBTTagCompound compound)
     {
         super.readFromNBT(compound);
@@ -444,7 +366,6 @@
         this.shouldHeadBeRendered = compound.getBoolean("source");
     }
 
-    @Override
     public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
         super.writeToNBT(compound);
@@ -461,24 +382,19 @@
     {
         if (!this.extending && this.shouldHeadBeRendered)
         {
-            this.pistonState
-            .withProperty(BlockPistonBase.EXTENDED, true)
-            .addCollisionBoxToList(p_190609_1_, p_190609_2_, p_190609_3_, p_190609_4_, p_190609_5_, false);
+            this.pistonState.withProperty(BlockPistonBase.EXTENDED, Boolean.valueOf(true)).addCollisionBoxToList(p_190609_1_, p_190609_2_, p_190609_3_, p_190609_4_, p_190609_5_, false);
         }
 
         EnumFacing enumfacing = MOVING_ENTITY.get();
 
-        if (!((double)this.progress < 1.0) || enumfacing != (this.extending ? this.pistonFacing : this.pistonFacing.getOpposite()))
+        if ((double)this.progress >= 1.0D || enumfacing != (this.extending ? this.pistonFacing : this.pistonFacing.getOpposite()))
         {
             int i = p_190609_4_.size();
             IBlockState iblockstate;
 
             if (this.shouldPistonHeadBeRendered())
             {
-                iblockstate = Blocks.PISTON_HEAD
-                              .getDefaultState()
-                              .withProperty(BlockPistonExtension.FACING, this.pistonFacing)
-                              .withProperty(BlockPistonExtension.SHORT, this.extending != 1.0F - this.progress < 0.25F);
+                iblockstate = Blocks.PISTON_HEAD.getDefaultState().withProperty(BlockPistonExtension.FACING, this.pistonFacing).withProperty(BlockPistonExtension.SHORT, Boolean.valueOf(this.extending != 1.0F - this.progress < 0.25F));
             }
             else
             {
@@ -491,9 +407,9 @@
             double d2 = (double)((float)this.pistonFacing.getZOffset() * f);
             iblockstate.addCollisionBoxToList(p_190609_1_, p_190609_2_, p_190609_3_.offset(-d0, -d1, -d2), p_190609_4_, p_190609_5_, true);
 
-            for (int j = i; j < p_190609_4_.size(); j++)
+            for (int j = i; j < p_190609_4_.size(); ++j)
             {
-                p_190609_4_.set(j, p_190609_4_.get(j).offset(d0, d1, d2));
+                p_190609_4_.set(j, ((AxisAlignedBB)p_190609_4_.get(j)).offset(d0, d1, d2));
             }
         }
     }
