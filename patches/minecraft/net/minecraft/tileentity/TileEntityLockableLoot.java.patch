--- before/net/minecraft/tileentity/TileEntityLockableLoot.java
+++ after/net/minecraft/tileentity/TileEntityLockableLoot.java
@@ -73,14 +73,13 @@
 
             if (player != null)
             {
-                lootcontext$builder.withLuck(player.getLuck());
+                lootcontext$builder.withLuck(player.getLuck()).withPlayer(player); // Forge: add player to LootContext
             }
 
             loottable.fillInventory(this, random, lootcontext$builder.build());
         }
     }
 
-    @Override
     public ResourceLocation getLootTable()
     {
         return this.lootTable;
@@ -92,7 +91,6 @@
         this.lootTableSeed = p_189404_2_;
     }
 
-    @Override
     public boolean hasCustomName()
     {
         return this.customName != null && !this.customName.isEmpty();
@@ -103,17 +101,15 @@
         this.customName = p_190575_1_;
     }
 
-    @Override
     public ItemStack getStackInSlot(int index)
     {
-        this.fillWithLoot(null);
-        return this.getItems().get(index);
+        this.fillWithLoot((EntityPlayer)null);
+        return (ItemStack)this.getItems().get(index);
     }
 
-    @Override
     public ItemStack decrStackSize(int index, int count)
     {
-        this.fillWithLoot(null);
+        this.fillWithLoot((EntityPlayer)null);
         ItemStack itemstack = ItemStackHelper.getAndSplit(this.getItems(), index, count);
 
         if (!itemstack.isEmpty())
@@ -124,17 +120,15 @@
         return itemstack;
     }
 
-    @Override
     public ItemStack removeStackFromSlot(int index)
     {
-        this.fillWithLoot(null);
+        this.fillWithLoot((EntityPlayer)null);
         return ItemStackHelper.getAndRemove(this.getItems(), index);
     }
 
-    @Override
     public void setInventorySlotContents(int index, @Nullable ItemStack stack)
     {
-        this.fillWithLoot(null);
+        this.fillWithLoot((EntityPlayer)null);
         this.getItems().set(index, stack);
 
         if (stack.getCount() > this.getInventoryStackLimit())
@@ -145,58 +139,48 @@
         this.markDirty();
     }
 
-    @Override
     public boolean isUsableByPlayer(EntityPlayer player)
     {
-        return this.world.getTileEntity(this.pos) != this
-               ? false
-               : !(
-                   player.getDistanceSq(
-                       (double)this.pos.getX() + 0.5,
-                       (double)this.pos.getY() + 0.5,
-                       (double)this.pos.getZ() + 0.5
-                   )
-                   > 64.0
-               );
+        if (this.world.getTileEntity(this.pos) != this)
+        {
+            return false;
+        }
+        else
+        {
+            return player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
+        }
     }
 
-    @Override
     public void openInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public void closeInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         return true;
     }
 
-    @Override
     public int getField(int id)
     {
         return 0;
     }
 
-    @Override
     public void setField(int id, int value)
     {
     }
 
-    @Override
     public int getFieldCount()
     {
         return 0;
     }
 
-    @Override
     public void clear()
     {
-        this.fillWithLoot(null);
+        this.fillWithLoot((EntityPlayer)null);
         this.getItems().clear();
     }
 
