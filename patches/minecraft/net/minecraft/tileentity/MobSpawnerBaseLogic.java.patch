--- before/net/minecraft/tileentity/MobSpawnerBaseLogic.java
+++ after/net/minecraft/tileentity/MobSpawnerBaseLogic.java
@@ -5,6 +5,7 @@
 import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.IEntityLivingData;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.EnumParticleTypes;
@@ -22,7 +23,7 @@
 public abstract class MobSpawnerBaseLogic
 {
     private int spawnDelay = 20;
-    private final List<WeightedSpawnerEntity> potentialSpawns = Lists.newArrayList();
+    private final List<WeightedSpawnerEntity> potentialSpawns = Lists.<WeightedSpawnerEntity>newArrayList();
     private WeightedSpawnerEntity spawnData = new WeightedSpawnerEntity();
     private double mobRotation;
     private double prevMobRotation;
@@ -52,10 +53,7 @@
     private boolean isActivated()
     {
         BlockPos blockpos = this.getSpawnerPosition();
-        return this.getSpawnerWorld()
-               .isAnyPlayerWithinRangeAt(
-                   (double)blockpos.getX() + 0.5, (double)blockpos.getY() + 0.5, (double)blockpos.getZ() + 0.5, (double)this.activatingRangeFromPlayer
-               );
+        return this.getSpawnerWorld().isAnyPlayerWithinRangeAt((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D, (double)this.activatingRangeFromPlayer);
     }
 
     public void updateSpawner()
@@ -70,19 +68,19 @@
 
             if (this.getSpawnerWorld().isRemote)
             {
-                double d0 = (double)((float)blockpos.getX() + this.getSpawnerWorld().rand.nextFloat());
-                double d1 = (double)((float)blockpos.getY() + this.getSpawnerWorld().rand.nextFloat());
-                double d2 = (double)((float)blockpos.getZ() + this.getSpawnerWorld().rand.nextFloat());
-                this.getSpawnerWorld().spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0, d1, d2, 0.0, 0.0, 0.0);
-                this.getSpawnerWorld().spawnParticle(EnumParticleTypes.FLAME, d0, d1, d2, 0.0, 0.0, 0.0);
+                double d3 = (double)((float)blockpos.getX() + this.getSpawnerWorld().rand.nextFloat());
+                double d4 = (double)((float)blockpos.getY() + this.getSpawnerWorld().rand.nextFloat());
+                double d5 = (double)((float)blockpos.getZ() + this.getSpawnerWorld().rand.nextFloat());
+                this.getSpawnerWorld().spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d3, d4, d5, 0.0D, 0.0D, 0.0D);
+                this.getSpawnerWorld().spawnParticle(EnumParticleTypes.FLAME, d3, d4, d5, 0.0D, 0.0D, 0.0D);
 
                 if (this.spawnDelay > 0)
                 {
-                    this.spawnDelay--;
+                    --this.spawnDelay;
                 }
 
                 this.prevMobRotation = this.mobRotation;
-                this.mobRotation = (this.mobRotation + (double)(1000.0F / ((float)this.spawnDelay + 200.0F))) % 360.0;
+                this.mobRotation = (this.mobRotation + (double)(1000.0F / ((float)this.spawnDelay + 200.0F))) % 360.0D;
             }
             else
             {
@@ -93,45 +91,29 @@
 
                 if (this.spawnDelay > 0)
                 {
-                    this.spawnDelay--;
+                    --this.spawnDelay;
                     return;
                 }
 
                 boolean flag = false;
 
-                for (int i = 0; i < this.spawnCount; i++)
+                for (int i = 0; i < this.spawnCount; ++i)
                 {
                     NBTTagCompound nbttagcompound = this.spawnData.getNbt();
                     NBTTagList nbttaglist = nbttagcompound.getTagList("Pos", 6);
                     World world = this.getSpawnerWorld();
                     int j = nbttaglist.tagCount();
-                    double d3 = j >= 1
-                                ? nbttaglist.getDoubleAt(0)
-                                : (double)blockpos.getX() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double)this.spawnRange + 0.5;
-                    double d4 = j >= 2 ? nbttaglist.getDoubleAt(1) : (double)(blockpos.getY() + world.rand.nextInt(3) - 1);
-                    double d5 = j >= 3
-                                ? nbttaglist.getDoubleAt(2)
-                                : (double)blockpos.getZ() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double)this.spawnRange + 0.5;
-                    Entity entity = AnvilChunkLoader.readWorldEntityPos(nbttagcompound, world, d3, d4, d5, false);
+                    double d0 = j >= 1 ? nbttaglist.getDoubleAt(0) : (double)blockpos.getX() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double)this.spawnRange + 0.5D;
+                    double d1 = j >= 2 ? nbttaglist.getDoubleAt(1) : (double)(blockpos.getY() + world.rand.nextInt(3) - 1);
+                    double d2 = j >= 3 ? nbttaglist.getDoubleAt(2) : (double)blockpos.getZ() + (world.rand.nextDouble() - world.rand.nextDouble()) * (double)this.spawnRange + 0.5D;
+                    Entity entity = AnvilChunkLoader.readWorldEntityPos(nbttagcompound, world, d0, d1, d2, false);
 
                     if (entity == null)
                     {
                         return;
                     }
 
-                    int k = world.getEntitiesWithinAABB(
-                                entity.getClass(),
-                                new AxisAlignedBB(
-                                    (double)blockpos.getX(),
-                                    (double)blockpos.getY(),
-                                    (double)blockpos.getZ(),
-                                    (double)(blockpos.getX() + 1),
-                                    (double)(blockpos.getY() + 1),
-                                    (double)(blockpos.getZ() + 1)
-                                )
-                                .grow((double)this.spawnRange)
-                            )
-                            .size();
+                    int k = world.getEntitiesWithinAABB(entity.getClass(), (new AxisAlignedBB((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), (double)(blockpos.getX() + 1), (double)(blockpos.getY() + 1), (double)(blockpos.getZ() + 1))).grow((double)this.spawnRange)).size();
 
                     if (k >= this.maxNearbyEntities)
                     {
@@ -142,13 +124,12 @@
                     EntityLiving entityliving = entity instanceof EntityLiving ? (EntityLiving)entity : null;
                     entity.setLocationAndAngles(entity.posX, entity.posY, entity.posZ, world.rand.nextFloat() * 360.0F, 0.0F);
 
-                    if (entityliving == null || entityliving.getCanSpawnHere() && entityliving.isNotColliding())
+                    if (entityliving == null || net.minecraftforge.event.ForgeEventFactory.canEntitySpawnSpawner(entityliving, getSpawnerWorld(), (float)entity.posX, (float)entity.posY, (float)entity.posZ, this))
                     {
-                        if (this.spawnData.getNbt().getSize() == 1
-                                && this.spawnData.getNbt().hasKey("id", 8)
-                                && entity instanceof EntityLiving)
+                        if (this.spawnData.getNbt().getSize() == 1 && this.spawnData.getNbt().hasKey("id", 8) && entity instanceof EntityLiving)
                         {
-                            ((EntityLiving)entity).onInitialSpawn(world.getDifficultyForLocation(new BlockPos(entity)), null);
+                            if (!net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn(entityliving, this.getSpawnerWorld(), (float)entity.posX, (float)entity.posY, (float)entity.posZ, this))
+                            ((EntityLiving)entity).onInitialSpawn(world.getDifficultyForLocation(new BlockPos(entity)), (IEntityLivingData)null);
                         }
 
                         AnvilChunkLoader.spawnEntity(entity, world);
@@ -179,12 +160,13 @@
         }
         else
         {
-            this.spawnDelay = this.minSpawnDelay + this.getSpawnerWorld().rand.nextInt(this.maxSpawnDelay - this.minSpawnDelay);
+            int i = this.maxSpawnDelay - this.minSpawnDelay;
+            this.spawnDelay = this.minSpawnDelay + this.getSpawnerWorld().rand.nextInt(i);
         }
 
         if (!this.potentialSpawns.isEmpty())
         {
-            this.setNextSpawnData(WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
+            this.setNextSpawnData((WeightedSpawnerEntity)WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
         }
 
         this.broadcastEvent(1);
@@ -199,7 +181,7 @@
         {
             NBTTagList nbttaglist = nbt.getTagList("SpawnPotentials", 10);
 
-            for (int i = 0; i < nbttaglist.tagCount(); i++)
+            for (int i = 0; i < nbttaglist.tagCount(); ++i)
             {
                 this.potentialSpawns.add(new WeightedSpawnerEntity(nbttaglist.getCompoundTagAt(i)));
             }
@@ -211,7 +193,7 @@
         }
         else if (!this.potentialSpawns.isEmpty())
         {
-            this.setNextSpawnData(WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
+            this.setNextSpawnData((WeightedSpawnerEntity)WeightedRandom.getRandomItem(this.getSpawnerWorld().rand, this.potentialSpawns));
         }
 
         if (nbt.hasKey("MinSpawnDelay", 99))
@@ -275,24 +257,6 @@
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public Entity getCachedEntity()
-    {
-        if (this.cachedEntity == null)
-        {
-            this.cachedEntity = AnvilChunkLoader.readWorldEntity(this.spawnData.getNbt(), this.getSpawnerWorld(), false);
-
-            if (this.spawnData.getNbt().getSize() == 1
-                    && this.spawnData.getNbt().hasKey("id", 8)
-                    && this.cachedEntity instanceof EntityLiving)
-            {
-                ((EntityLiving)this.cachedEntity).onInitialSpawn(this.getSpawnerWorld().getDifficultyForLocation(new BlockPos(this.cachedEntity)), null);
-            }
-        }
-
-        return this.cachedEntity;
-    }
-
     public boolean setDelayToMin(int delay)
     {
         if (delay == 1 && this.getSpawnerWorld().isRemote)
@@ -306,6 +270,22 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
+    public Entity getCachedEntity()
+    {
+        if (this.cachedEntity == null)
+        {
+            this.cachedEntity = AnvilChunkLoader.readWorldEntity(this.spawnData.getNbt(), this.getSpawnerWorld(), false);
+
+            if (this.spawnData.getNbt().getSize() == 1 && this.spawnData.getNbt().hasKey("id", 8) && this.cachedEntity instanceof EntityLiving)
+            {
+                ((EntityLiving)this.cachedEntity).onInitialSpawn(this.getSpawnerWorld().getDifficultyForLocation(new BlockPos(this.cachedEntity)), (IEntityLivingData)null);
+            }
+        }
+
+        return this.cachedEntity;
+    }
+
     public void setNextSpawnData(WeightedSpawnerEntity p_184993_1_)
     {
         this.spawnData = p_184993_1_;
@@ -328,4 +308,7 @@
     {
         return this.prevMobRotation;
     }
+
+    /* ======================================== FORGE START =====================================*/
+    @Nullable public Entity getSpawnerEntity() { return null; }
 }
