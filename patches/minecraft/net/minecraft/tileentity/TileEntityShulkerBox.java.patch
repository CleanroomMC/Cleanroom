--- before/net/minecraft/tileentity/TileEntityShulkerBox.java
+++ after/net/minecraft/tileentity/TileEntityShulkerBox.java
@@ -33,10 +33,10 @@
 public class TileEntityShulkerBox extends TileEntityLockableLoot implements ITickable, ISidedInventory
 {
     private static final int[] SLOTS = new int[27];
-    private NonNullList<ItemStack> items = NonNullList.withSize(27, ItemStack.EMPTY);
+    private NonNullList<ItemStack> items;
     private boolean hasBeenCleared;
     private int openCount;
-    private TileEntityShulkerBox.AnimationStatus animationStatus = TileEntityShulkerBox.AnimationStatus.CLOSED;
+    private TileEntityShulkerBox.AnimationStatus animationStatus;
     private float progress;
     private float progressOld;
     private EnumDyeColor color;
@@ -44,15 +44,16 @@
 
     public TileEntityShulkerBox()
     {
-        this(null);
+        this((EnumDyeColor)null);
     }
 
     public TileEntityShulkerBox(@Nullable EnumDyeColor colorIn)
     {
+        this.items = NonNullList.<ItemStack>withSize(27, ItemStack.EMPTY);
+        this.animationStatus = TileEntityShulkerBox.AnimationStatus.CLOSED;
         this.color = colorIn;
     }
 
-    @Override
     public void update()
     {
         this.updateAnimation();
@@ -105,24 +106,18 @@
 
     public AxisAlignedBB getBoundingBox(IBlockState p_190584_1_)
     {
-        return this.getBoundingBox(p_190584_1_.getValue(BlockShulkerBox.FACING));
+        return this.getBoundingBox((EnumFacing)p_190584_1_.getValue(BlockShulkerBox.FACING));
     }
 
     public AxisAlignedBB getBoundingBox(EnumFacing p_190587_1_)
     {
-        return Block.FULL_BLOCK_AABB
-               .expand(
-                   (double)(0.5F * this.getProgress(1.0F) * (float)p_190587_1_.getXOffset()),
-                   (double)(0.5F * this.getProgress(1.0F) * (float)p_190587_1_.getYOffset()),
-                   (double)(0.5F * this.getProgress(1.0F) * (float)p_190587_1_.getZOffset())
-               );
+        return Block.FULL_BLOCK_AABB.expand((double)(0.5F * this.getProgress(1.0F) * (float)p_190587_1_.getXOffset()), (double)(0.5F * this.getProgress(1.0F) * (float)p_190587_1_.getYOffset()), (double)(0.5F * this.getProgress(1.0F) * (float)p_190587_1_.getZOffset()));
     }
 
     private AxisAlignedBB getTopBoundingBox(EnumFacing p_190588_1_)
     {
         EnumFacing enumfacing = p_190588_1_.getOpposite();
-        return this.getBoundingBox(p_190588_1_)
-               .contract((double)enumfacing.getXOffset(), (double)enumfacing.getYOffset(), (double)enumfacing.getZOffset());
+        return this.getBoundingBox(p_190588_1_).contract((double)enumfacing.getXOffset(), (double)enumfacing.getYOffset(), (double)enumfacing.getZOffset());
     }
 
     private void moveCollidedEntities()
@@ -131,21 +126,21 @@
 
         if (iblockstate.getBlock() instanceof BlockShulkerBox)
         {
-            EnumFacing enumfacing = iblockstate.getValue(BlockShulkerBox.FACING);
+            EnumFacing enumfacing = (EnumFacing)iblockstate.getValue(BlockShulkerBox.FACING);
             AxisAlignedBB axisalignedbb = this.getTopBoundingBox(enumfacing).offset(this.pos);
-            List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(null, axisalignedbb);
+            List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb);
 
             if (!list.isEmpty())
             {
-                for (int i = 0; i < list.size(); i++)
+                for (int i = 0; i < list.size(); ++i)
                 {
                     Entity entity = list.get(i);
 
                     if (entity.getPushReaction() != EnumPushReaction.IGNORE)
                     {
-                        double d0 = 0.0;
-                        double d1 = 0.0;
-                        double d2 = 0.0;
+                        double d0 = 0.0D;
+                        double d1 = 0.0D;
+                        double d2 = 0.0D;
                         AxisAlignedBB axisalignedbb1 = entity.getEntityBoundingBox();
 
                         switch (enumfacing.getAxis())
@@ -161,7 +156,7 @@
                                     d0 = axisalignedbb1.maxX - axisalignedbb.minX;
                                 }
 
-                                d0 += 0.01;
+                                d0 = d0 + 0.01D;
                                 break;
                             case Y:
 
@@ -174,7 +169,7 @@
                                     d1 = axisalignedbb1.maxY - axisalignedbb.minY;
                                 }
 
-                                d1 += 0.01;
+                                d1 = d1 + 0.01D;
                                 break;
                             case Z:
 
@@ -187,34 +182,26 @@
                                     d2 = axisalignedbb1.maxZ - axisalignedbb.minZ;
                                 }
 
-                                d2 += 0.01;
+                                d2 = d2 + 0.01D;
                         }
 
-                        entity.move(
-                            MoverType.SHULKER_BOX,
-                            d0 * (double)enumfacing.getXOffset(),
-                            d1 * (double)enumfacing.getYOffset(),
-                            d2 * (double)enumfacing.getZOffset()
-                        );
+                        entity.move(MoverType.SHULKER_BOX, d0 * (double)enumfacing.getXOffset(), d1 * (double)enumfacing.getYOffset(), d2 * (double)enumfacing.getZOffset());
                     }
                 }
             }
         }
     }
 
-    @Override
     public int getSizeInventory()
     {
         return this.items.size();
     }
 
-    @Override
     public int getInventoryStackLimit()
     {
         return 64;
     }
 
-    @Override
     public boolean receiveClientEvent(int id, int type)
     {
         if (id == 1)
@@ -239,7 +226,6 @@
         }
     }
 
-    @Override
     public void openInventory(EntityPlayer player)
     {
         if (!player.isSpectator())
@@ -249,60 +235,40 @@
                 this.openCount = 0;
             }
 
-            this.openCount++;
+            ++this.openCount;
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.openCount);
 
             if (this.openCount == 1)
             {
-                this.world
-                .playSound(
-                    null,
-                    this.pos,
-                    SoundEvents.BLOCK_SHULKER_BOX_OPEN,
-                    SoundCategory.BLOCKS,
-                    0.5F,
-                    this.world.rand.nextFloat() * 0.1F + 0.9F
-                );
+                this.world.playSound((EntityPlayer)null, this.pos, SoundEvents.BLOCK_SHULKER_BOX_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
             }
         }
     }
 
-    @Override
     public void closeInventory(EntityPlayer player)
     {
         if (!player.isSpectator())
         {
-            this.openCount--;
+            --this.openCount;
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.openCount);
 
             if (this.openCount <= 0)
             {
-                this.world
-                .playSound(
-                    null,
-                    this.pos,
-                    SoundEvents.BLOCK_SHULKER_BOX_CLOSE,
-                    SoundCategory.BLOCKS,
-                    0.5F,
-                    this.world.rand.nextFloat() * 0.1F + 0.9F
-                );
+                this.world.playSound((EntityPlayer)null, this.pos, SoundEvents.BLOCK_SHULKER_BOX_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
             }
         }
     }
 
-    @Override
     public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
     {
         return new ContainerShulkerBox(playerInventory, this, playerIn);
     }
 
-    @Override
     public String getGuiID()
     {
         return "minecraft:shulker_box";
     }
 
-    @Override
     public String getName()
     {
         return this.hasCustomName() ? this.customName : "container.shulkerBox";
@@ -310,17 +276,15 @@
 
     public static void registerFixesShulkerBox(DataFixer fixer)
     {
-        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityShulkerBox.class, "Items"));
+        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityShulkerBox.class, new String[] {"Items"}));
     }
 
-    @Override
     public void readFromNBT(NBTTagCompound compound)
     {
         super.readFromNBT(compound);
         this.loadFromNbt(compound);
     }
 
-    @Override
     public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
         super.writeToNBT(compound);
@@ -329,7 +293,7 @@
 
     public void loadFromNbt(NBTTagCompound compound)
     {
-        this.items = NonNullList.withSize(this.getSizeInventory(), ItemStack.EMPTY);
+        this.items = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
 
         if (!this.checkLootAndRead(compound) && compound.hasKey("Items", 9))
         {
@@ -362,13 +326,11 @@
         return compound;
     }
 
-    @Override
     protected NonNullList<ItemStack> getItems()
     {
         return this.items;
     }
 
-    @Override
     public boolean isEmpty()
     {
         for (ItemStack itemstack : this.items)
@@ -382,25 +344,21 @@
         return true;
     }
 
-    @Override
     public int[] getSlotsForFace(EnumFacing side)
     {
         return SLOTS;
     }
 
-    @Override
     public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction)
     {
         return !(Block.getBlockFromItem(itemStackIn.getItem()) instanceof BlockShulkerBox);
     }
 
-    @Override
     public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction)
     {
         return true;
     }
 
-    @Override
     public void clear()
     {
         this.hasBeenCleared = true;
@@ -429,7 +387,6 @@
     }
 
     @Nullable
-    @Override
     public SPacketUpdateTileEntity getUpdatePacket()
     {
         return new SPacketUpdateTileEntity(this.pos, 10, this.getUpdateTag());
@@ -452,11 +409,9 @@
 
     static
     {
-        int i = 0;
-
-        while (i < SLOTS.length)
+        for (int i = 0; i < SLOTS.length; SLOTS[i] = i++)
         {
-            SLOTS[i] = i++;
+            ;
         }
     }
 
@@ -466,5 +421,10 @@
         OPENING,
         OPENED,
         CLOSING;
+    }
+
+    protected net.minecraftforge.items.IItemHandler createUnSidedHandler()
+    {
+        return new net.minecraftforge.items.wrapper.SidedInvWrapper(this, EnumFacing.UP);
     }
 }
