--- before/net/minecraft/tileentity/TileEntityBrewingStand.java
+++ after/net/minecraft/tileentity/TileEntityBrewingStand.java
@@ -28,20 +28,18 @@
     private static final int[] SLOTS_FOR_UP = new int[] {3};
     private static final int[] SLOTS_FOR_DOWN = new int[] {0, 1, 2, 3};
     private static final int[] OUTPUT_SLOTS = new int[] {0, 1, 2, 4};
-    private NonNullList<ItemStack> brewingItemStacks = NonNullList.withSize(5, ItemStack.EMPTY);
+    private NonNullList<ItemStack> brewingItemStacks = NonNullList.<ItemStack>withSize(5, ItemStack.EMPTY);
     private int brewTime;
     private boolean[] filledSlots;
     private Item ingredientID;
     private String customName;
     private int fuel;
 
-    @Override
     public String getName()
     {
         return this.hasCustomName() ? this.customName : "container.brewing";
     }
 
-    @Override
     public boolean hasCustomName()
     {
         return this.customName != null && !this.customName.isEmpty();
@@ -52,13 +50,11 @@
         this.customName = name;
     }
 
-    @Override
     public int getSizeInventory()
     {
         return this.brewingItemStacks.size();
     }
 
-    @Override
     public boolean isEmpty()
     {
         for (ItemStack itemstack : this.brewingItemStacks)
@@ -72,7 +68,6 @@
         return true;
     }
 
-    @Override
     public void update()
     {
         ItemStack itemstack = this.brewingItemStacks.get(4);
@@ -90,7 +85,7 @@
 
         if (flag1)
         {
-            this.brewTime--;
+            --this.brewTime;
             boolean flag2 = this.brewTime == 0;
 
             if (flag2 && flag)
@@ -111,7 +106,7 @@
         }
         else if (flag && this.fuel > 0)
         {
-            this.fuel--;
+            --this.fuel;
             this.brewTime = 400;
             this.ingredientID = itemstack1.getItem();
             this.markDirty();
@@ -131,9 +126,9 @@
                     return;
                 }
 
-                for (int i = 0; i < BlockBrewingStand.HAS_BOTTLE.length; i++)
+                for (int i = 0; i < BlockBrewingStand.HAS_BOTTLE.length; ++i)
                 {
-                    iblockstate = iblockstate.withProperty(BlockBrewingStand.HAS_BOTTLE[i], aboolean[i]);
+                    iblockstate = iblockstate.withProperty(BlockBrewingStand.HAS_BOTTLE[i], Boolean.valueOf(aboolean[i]));
                 }
 
                 this.world.setBlockState(this.pos, iblockstate, 2);
@@ -145,9 +140,9 @@
     {
         boolean[] aboolean = new boolean[3];
 
-        for (int i = 0; i < 3; i++)
+        for (int i = 0; i < 3; ++i)
         {
-            if (!this.brewingItemStacks.get(i).isEmpty())
+            if (!((ItemStack)this.brewingItemStacks.get(i)).isEmpty())
             {
                 aboolean[i] = true;
             }
@@ -158,6 +153,7 @@
 
     private boolean canBrew()
     {
+        if (1 == 1) return net.minecraftforge.common.brewing.BrewingRecipeRegistry.canBrew(brewingItemStacks, brewingItemStacks.get(3), OUTPUT_SLOTS); // divert to VanillaBrewingRegistry
         ItemStack itemstack = this.brewingItemStacks.get(3);
 
         if (itemstack.isEmpty())
@@ -170,7 +166,7 @@
         }
         else
         {
-            for (int i = 0; i < 3; i++)
+            for (int i = 0; i < 3; ++i)
             {
                 ItemStack itemstack1 = this.brewingItemStacks.get(i);
 
@@ -186,19 +182,17 @@
 
     private void brewPotions()
     {
+        if (net.minecraftforge.event.ForgeEventFactory.onPotionAttemptBrew(brewingItemStacks)) return;
         ItemStack itemstack = this.brewingItemStacks.get(3);
 
-        for (int i = 0; i < 3; i++)
-        {
-            this.brewingItemStacks.set(i, PotionHelper.doReaction(itemstack, this.brewingItemStacks.get(i)));
-        }
+        net.minecraftforge.common.brewing.BrewingRecipeRegistry.brewPotions(brewingItemStacks, brewingItemStacks.get(3), OUTPUT_SLOTS);
 
         itemstack.shrink(1);
         BlockPos blockpos = this.getPos();
 
-        if (itemstack.getItem().hasContainerItem())
+        if (itemstack.getItem().hasContainerItem(itemstack))
         {
-            ItemStack itemstack1 = new ItemStack(itemstack.getItem().getContainerItem());
+            ItemStack itemstack1 = itemstack.getItem().getContainerItem(itemstack);
 
             if (itemstack.isEmpty())
             {
@@ -206,26 +200,24 @@
             }
             else
             {
-                InventoryHelper.spawnItemStack(
-                    this.world, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), itemstack1
-                );
+                InventoryHelper.spawnItemStack(this.world, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), itemstack1);
             }
         }
 
         this.brewingItemStacks.set(3, itemstack);
         this.world.playEvent(1035, blockpos, 0);
+        net.minecraftforge.event.ForgeEventFactory.onPotionBrewed(brewingItemStacks);
     }
 
     public static void registerFixesBrewingStand(DataFixer fixer)
     {
-        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityBrewingStand.class, "Items"));
+        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityBrewingStand.class, new String[] {"Items"}));
     }
 
-    @Override
     public void readFromNBT(NBTTagCompound compound)
     {
         super.readFromNBT(compound);
-        this.brewingItemStacks = NonNullList.withSize(this.getSizeInventory(), ItemStack.EMPTY);
+        this.brewingItemStacks = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
         ItemStackHelper.loadAllItems(compound, this.brewingItemStacks);
         this.brewTime = compound.getShort("BrewTime");
 
@@ -237,7 +229,6 @@
         this.fuel = compound.getByte("Fuel");
     }
 
-    @Override
     public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
         super.writeToNBT(compound);
@@ -253,25 +244,21 @@
         return compound;
     }
 
-    @Override
     public ItemStack getStackInSlot(int index)
     {
-        return index >= 0 && index < this.brewingItemStacks.size() ? this.brewingItemStacks.get(index) : ItemStack.EMPTY;
+        return index >= 0 && index < this.brewingItemStacks.size() ? (ItemStack)this.brewingItemStacks.get(index) : ItemStack.EMPTY;
     }
 
-    @Override
     public ItemStack decrStackSize(int index, int count)
     {
         return ItemStackHelper.getAndSplit(this.brewingItemStacks, index, count);
     }
 
-    @Override
     public ItemStack removeStackFromSlot(int index)
     {
         return ItemStackHelper.getAndRemove(this.brewingItemStacks, index);
     }
 
-    @Override
     public void setInventorySlotContents(int index, ItemStack stack)
     {
         if (index >= 0 && index < this.brewingItemStacks.size())
@@ -280,55 +267,52 @@
         }
     }
 
-    @Override
     public int getInventoryStackLimit()
     {
         return 64;
     }
 
-    @Override
     public boolean isUsableByPlayer(EntityPlayer player)
     {
-        return this.world.getTileEntity(this.pos) != this
-               ? false
-               : !(
-                   player.getDistanceSq(
-                       (double)this.pos.getX() + 0.5,
-                       (double)this.pos.getY() + 0.5,
-                       (double)this.pos.getZ() + 0.5
-                   )
-                   > 64.0
-               );
+        if (this.world.getTileEntity(this.pos) != this)
+        {
+            return false;
+        }
+        else
+        {
+            return player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
+        }
     }
 
-    @Override
     public void openInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public void closeInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         if (index == 3)
         {
-            return PotionHelper.isReagent(stack);
+            return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidIngredient(stack);
         }
         else
         {
             Item item = stack.getItem();
-            return index == 4
-                   ? item == Items.BLAZE_POWDER
-                   : (item == Items.POTIONITEM || item == Items.SPLASH_POTION || item == Items.LINGERING_POTION || item == Items.GLASS_BOTTLE)
-                   && this.getStackInSlot(index).isEmpty();
+
+            if (index == 4)
+            {
+                return item == Items.BLAZE_POWDER;
+            }
+            else
+            {
+                return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidInput(stack) && this.getStackInSlot(index).isEmpty();
+            }
         }
     }
 
-    @Override
     public int[] getSlotsForFace(EnumFacing side)
     {
         if (side == EnumFacing.UP)
@@ -341,31 +325,33 @@
         }
     }
 
-    @Override
     public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction)
     {
         return this.isItemValidForSlot(index, itemStackIn);
     }
 
-    @Override
     public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction)
     {
-        return index == 3 ? stack.getItem() == Items.GLASS_BOTTLE : true;
+        if (index == 3)
+        {
+            return stack.getItem() == Items.GLASS_BOTTLE;
+        }
+        else
+        {
+            return true;
+        }
     }
 
-    @Override
     public String getGuiID()
     {
         return "minecraft:brewing_stand";
     }
 
-    @Override
     public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
     {
         return new ContainerBrewingStand(playerInventory, this);
     }
 
-    @Override
     public int getField(int id)
     {
         switch (id)
@@ -379,7 +365,6 @@
         }
     }
 
-    @Override
     public void setField(int id, int value)
     {
         switch (id)
@@ -392,13 +377,32 @@
         }
     }
 
+    net.minecraftforge.items.IItemHandler handlerInput = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.UP);
+    net.minecraftforge.items.IItemHandler handlerOutput = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.DOWN);
+    net.minecraftforge.items.IItemHandler handlerSides = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.NORTH);
+
+    @SuppressWarnings("unchecked")
     @Override
+    @javax.annotation.Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @javax.annotation.Nullable net.minecraft.util.EnumFacing facing)
+    {
+        if (facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
+        {
+            if (facing == EnumFacing.UP)
+                return (T) handlerInput;
+            else if (facing == EnumFacing.DOWN)
+                return (T) handlerOutput;
+            else
+                return (T) handlerSides;
+        }
+        return super.getCapability(capability, facing);
+    }
+
     public int getFieldCount()
     {
         return 2;
     }
 
-    @Override
     public void clear()
     {
         this.brewingItemStacks.clear();
