--- before/net/minecraft/tileentity/TileEntityFurnace.java
+++ after/net/minecraft/tileentity/TileEntityFurnace.java
@@ -37,20 +37,18 @@
     private static final int[] SLOTS_TOP = new int[] {0};
     private static final int[] SLOTS_BOTTOM = new int[] {2, 1};
     private static final int[] SLOTS_SIDES = new int[] {1};
-    private NonNullList<ItemStack> furnaceItemStacks = NonNullList.withSize(3, ItemStack.EMPTY);
+    private NonNullList<ItemStack> furnaceItemStacks = NonNullList.<ItemStack>withSize(3, ItemStack.EMPTY);
     private int furnaceBurnTime;
     private int currentItemBurnTime;
     private int cookTime;
     private int totalCookTime;
     private String furnaceCustomName;
 
-    @Override
     public int getSizeInventory()
     {
         return this.furnaceItemStacks.size();
     }
 
-    @Override
     public boolean isEmpty()
     {
         for (ItemStack itemstack : this.furnaceItemStacks)
@@ -64,25 +62,21 @@
         return true;
     }
 
-    @Override
     public ItemStack getStackInSlot(int index)
     {
         return this.furnaceItemStacks.get(index);
     }
 
-    @Override
     public ItemStack decrStackSize(int index, int count)
     {
         return ItemStackHelper.getAndSplit(this.furnaceItemStacks, index, count);
     }
 
-    @Override
     public ItemStack removeStackFromSlot(int index)
     {
         return ItemStackHelper.getAndRemove(this.furnaceItemStacks, index);
     }
 
-    @Override
     public void setInventorySlotContents(int index, ItemStack stack)
     {
         ItemStack itemstack = this.furnaceItemStacks.get(index);
@@ -102,13 +96,11 @@
         }
     }
 
-    @Override
     public String getName()
     {
         return this.hasCustomName() ? this.furnaceCustomName : "container.furnace";
     }
 
-    @Override
     public boolean hasCustomName()
     {
         return this.furnaceCustomName != null && !this.furnaceCustomName.isEmpty();
@@ -121,18 +113,17 @@
 
     public static void registerFixesFurnace(DataFixer fixer)
     {
-        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityFurnace.class, "Items"));
+        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityFurnace.class, new String[] {"Items"}));
     }
 
-    @Override
     public void readFromNBT(NBTTagCompound compound)
     {
         super.readFromNBT(compound);
-        this.furnaceItemStacks = NonNullList.withSize(this.getSizeInventory(), ItemStack.EMPTY);
+        this.furnaceItemStacks = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
         ItemStackHelper.loadAllItems(compound, this.furnaceItemStacks);
-        this.furnaceBurnTime = compound.getShort("BurnTime");
-        this.cookTime = compound.getShort("CookTime");
-        this.totalCookTime = compound.getShort("CookTimeTotal");
+        this.furnaceBurnTime = compound.getInteger("BurnTime");
+        this.cookTime = compound.getInteger("CookTime");
+        this.totalCookTime = compound.getInteger("CookTimeTotal");
         this.currentItemBurnTime = getItemBurnTime(this.furnaceItemStacks.get(1));
 
         if (compound.hasKey("CustomName", 8))
@@ -141,13 +132,12 @@
         }
     }
 
-    @Override
     public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
         super.writeToNBT(compound);
-        compound.setShort("BurnTime", (short)this.furnaceBurnTime);
-        compound.setShort("CookTime", (short)this.cookTime);
-        compound.setShort("CookTimeTotal", (short)this.totalCookTime);
+        compound.setInteger("BurnTime", (short)this.furnaceBurnTime);
+        compound.setInteger("CookTime", (short)this.cookTime);
+        compound.setInteger("CookTimeTotal", (short)this.totalCookTime);
         ItemStackHelper.saveAllItems(compound, this.furnaceItemStacks);
 
         if (this.hasCustomName())
@@ -158,7 +148,6 @@
         return compound;
     }
 
-    @Override
     public int getInventoryStackLimit()
     {
         return 64;
@@ -175,7 +164,6 @@
         return inventory.getField(0) > 0;
     }
 
-    @Override
     public void update()
     {
         boolean flag = this.isBurning();
@@ -183,14 +171,14 @@
 
         if (this.isBurning())
         {
-            this.furnaceBurnTime--;
+            --this.furnaceBurnTime;
         }
 
         if (!this.world.isRemote)
         {
             ItemStack itemstack = this.furnaceItemStacks.get(1);
 
-            if (this.isBurning() || !itemstack.isEmpty() && !this.furnaceItemStacks.get(0).isEmpty())
+            if (this.isBurning() || !itemstack.isEmpty() && !((ItemStack)this.furnaceItemStacks.get(0)).isEmpty())
             {
                 if (!this.isBurning() && this.canSmelt())
                 {
@@ -208,8 +196,8 @@
 
                             if (itemstack.isEmpty())
                             {
-                                Item item1 = item.getContainerItem();
-                                this.furnaceItemStacks.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
+                                ItemStack item1 = item.getContainerItem(itemstack);
+                                this.furnaceItemStacks.set(1, item1);
                             }
                         }
                     }
@@ -217,7 +205,7 @@
 
                 if (this.isBurning() && this.canSmelt())
                 {
-                    this.cookTime++;
+                    ++this.cookTime;
 
                     if (this.cookTime == this.totalCookTime)
                     {
@@ -257,7 +245,7 @@
 
     private boolean canSmelt()
     {
-        if (this.furnaceItemStacks.get(0).isEmpty())
+        if (((ItemStack)this.furnaceItemStacks.get(0)).isEmpty())
         {
             return false;
         }
@@ -281,11 +269,13 @@
                 {
                     return false;
                 }
+                else if (itemstack1.getCount() + itemstack.getCount() <= this.getInventoryStackLimit() && itemstack1.getCount() + itemstack.getCount() <= itemstack1.getMaxStackSize())  // Forge fix: make furnace respect stack sizes in furnace recipes
+                {
+                    return true;
+                }
                 else
                 {
-                    return itemstack1.getCount() < this.getInventoryStackLimit() && itemstack1.getCount() < itemstack1.getMaxStackSize()
-                           ? true
-                           : itemstack1.getCount() < itemstack.getMaxStackSize();
+                    return itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize(); // Forge fix: make furnace respect stack sizes in furnace recipes
                 }
             }
         }
@@ -305,13 +295,10 @@
             }
             else if (itemstack2.getItem() == itemstack1.getItem())
             {
-                itemstack2.grow(1);
+                itemstack2.grow(itemstack1.getCount());
             }
 
-            if (itemstack.getItem() == Item.getItemFromBlock(Blocks.SPONGE)
-                    && itemstack.getMetadata() == 1
-                    && !this.furnaceItemStacks.get(1).isEmpty()
-                    && this.furnaceItemStacks.get(1).getItem() == Items.BUCKET)
+            if (itemstack.getItem() == Item.getItemFromBlock(Blocks.SPONGE) && itemstack.getMetadata() == 1 && !((ItemStack)this.furnaceItemStacks.get(1)).isEmpty() && ((ItemStack)this.furnaceItemStacks.get(1)).getItem() == Items.BUCKET)
             {
                 this.furnaceItemStacks.set(1, new ItemStack(Items.WATER_BUCKET));
             }
@@ -328,6 +315,8 @@
         }
         else
         {
+            int burnTime = net.minecraftforge.event.ForgeEventFactory.getItemBurnTime(stack);
+            if (burnTime >= 0) return burnTime;
             Item item = stack.getItem();
 
             if (item == Item.getItemFromBlock(Blocks.WOODEN_SLAB))
@@ -374,37 +363,43 @@
             {
                 return 100;
             }
-            else if (item == Items.BOW || item == Items.FISHING_ROD)
-            {
-                return 300;
-            }
-            else if (item == Items.SIGN)
-            {
-                return 200;
-            }
-            else if (item == Items.COAL)
-            {
-                return 1600;
-            }
-            else if (item == Items.LAVA_BUCKET)
-            {
-                return 20000;
-            }
-            else if (item == Item.getItemFromBlock(Blocks.SAPLING) || item == Items.BOWL)
-            {
-                return 100;
-            }
-            else if (item == Items.BLAZE_ROD)
-            {
-                return 2400;
-            }
-            else if (item instanceof ItemDoor && item != Items.IRON_DOOR)
-            {
-                return 200;
+            else if (item != Items.BOW && item != Items.FISHING_ROD)
+            {
+                if (item == Items.SIGN)
+                {
+                    return 200;
+                }
+                else if (item == Items.COAL)
+                {
+                    return 1600;
+                }
+                else if (item == Items.LAVA_BUCKET)
+                {
+                    return 20000;
+                }
+                else if (item != Item.getItemFromBlock(Blocks.SAPLING) && item != Items.BOWL)
+                {
+                    if (item == Items.BLAZE_ROD)
+                    {
+                        return 2400;
+                    }
+                    else if (item instanceof ItemDoor && item != Items.IRON_DOOR)
+                    {
+                        return 200;
+                    }
+                    else
+                    {
+                        return item instanceof ItemBoat ? 400 : 0;
+                    }
+                }
+                else
+                {
+                    return 100;
+                }
             }
             else
             {
-                return item instanceof ItemBoat ? 400 : 0;
+                return 300;
             }
         }
     }
@@ -414,32 +409,26 @@
         return getItemBurnTime(stack) > 0;
     }
 
-    @Override
     public boolean isUsableByPlayer(EntityPlayer player)
     {
-        return this.world.getTileEntity(this.pos) != this
-               ? false
-               : !(
-                   player.getDistanceSq(
-                       (double)this.pos.getX() + 0.5,
-                       (double)this.pos.getY() + 0.5,
-                       (double)this.pos.getZ() + 0.5
-                   )
-                   > 64.0
-               );
+        if (this.world.getTileEntity(this.pos) != this)
+        {
+            return false;
+        }
+        else
+        {
+            return player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
+        }
     }
 
-    @Override
     public void openInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public void closeInventory(EntityPlayer player)
     {
     }
 
-    @Override
     public boolean isItemValidForSlot(int index, ItemStack stack)
     {
         if (index == 2)
@@ -457,7 +446,6 @@
         }
     }
 
-    @Override
     public int[] getSlotsForFace(EnumFacing side)
     {
         if (side == EnumFacing.DOWN)
@@ -470,13 +458,11 @@
         }
     }
 
-    @Override
     public boolean canInsertItem(int index, ItemStack itemStackIn, EnumFacing direction)
     {
         return this.isItemValidForSlot(index, itemStackIn);
     }
 
-    @Override
     public boolean canExtractItem(int index, ItemStack stack, EnumFacing direction)
     {
         if (direction == EnumFacing.DOWN && index == 1)
@@ -492,19 +478,16 @@
         return true;
     }
 
-    @Override
     public String getGuiID()
     {
         return "minecraft:furnace";
     }
 
-    @Override
     public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
     {
         return new ContainerFurnace(playerInventory, this);
     }
 
-    @Override
     public int getField(int id)
     {
         switch (id)
@@ -522,7 +505,6 @@
         }
     }
 
-    @Override
     public void setField(int id, int value)
     {
         switch (id)
@@ -541,15 +523,32 @@
         }
     }
 
-    @Override
     public int getFieldCount()
     {
         return 4;
     }
 
-    @Override
     public void clear()
     {
         this.furnaceItemStacks.clear();
+    }
+
+    net.minecraftforge.items.IItemHandler handlerTop = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.UP);
+    net.minecraftforge.items.IItemHandler handlerBottom = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.DOWN);
+    net.minecraftforge.items.IItemHandler handlerSide = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.WEST);
+
+    @SuppressWarnings("unchecked")
+    @Override
+    @javax.annotation.Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @javax.annotation.Nullable net.minecraft.util.EnumFacing facing)
+    {
+        if (facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
+            if (facing == EnumFacing.DOWN)
+                return (T) handlerBottom;
+            else if (facing == EnumFacing.UP)
+                return (T) handlerTop;
+            else
+                return (T) handlerSide;
+        return super.getCapability(capability, facing);
     }
 }
