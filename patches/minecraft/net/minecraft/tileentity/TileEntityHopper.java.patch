--- before/net/minecraft/tileentity/TileEntityHopper.java
+++ after/net/minecraft/tileentity/TileEntityHopper.java
@@ -30,20 +30,19 @@
 
 public class TileEntityHopper extends TileEntityLockableLoot implements IHopper, ITickable
 {
-    private NonNullList<ItemStack> inventory = NonNullList.withSize(5, ItemStack.EMPTY);
+    private NonNullList<ItemStack> inventory = NonNullList.<ItemStack>withSize(5, ItemStack.EMPTY);
     private int transferCooldown = -1;
     private long tickedGameTime;
 
     public static void registerFixesHopper(DataFixer fixer)
     {
-        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityHopper.class, "Items"));
+        fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityHopper.class, new String[] {"Items"}));
     }
 
-    @Override
     public void readFromNBT(NBTTagCompound compound)
     {
         super.readFromNBT(compound);
-        this.inventory = NonNullList.withSize(this.getSizeInventory(), ItemStack.EMPTY);
+        this.inventory = NonNullList.<ItemStack>withSize(this.getSizeInventory(), ItemStack.EMPTY);
 
         if (!this.checkLootAndRead(compound))
         {
@@ -58,7 +57,6 @@
         this.transferCooldown = compound.getInteger("TransferCooldown");
     }
 
-    @Override
     public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
         super.writeToNBT(compound);
@@ -78,23 +76,21 @@
         return compound;
     }
 
-    @Override
     public int getSizeInventory()
     {
         return this.inventory.size();
     }
 
-    @Override
     public ItemStack decrStackSize(int index, int count)
     {
-        this.fillWithLoot(null);
-        return ItemStackHelper.getAndSplit(this.getItems(), index, count);
+        this.fillWithLoot((EntityPlayer)null);
+        ItemStack itemstack = ItemStackHelper.getAndSplit(this.getItems(), index, count);
+        return itemstack;
     }
 
-    @Override
     public void setInventorySlotContents(int index, ItemStack stack)
     {
-        this.fillWithLoot(null);
+        this.fillWithLoot((EntityPlayer)null);
         this.getItems().set(index, stack);
 
         if (stack.getCount() > this.getInventoryStackLimit())
@@ -103,24 +99,21 @@
         }
     }
 
-    @Override
     public String getName()
     {
         return this.hasCustomName() ? this.customName : "container.hopper";
     }
 
-    @Override
     public int getInventoryStackLimit()
     {
         return 64;
     }
 
-    @Override
     public void update()
     {
         if (this.world != null && !this.world.isRemote)
         {
-            this.transferCooldown--;
+            --this.transferCooldown;
             this.tickedGameTime = this.world.getTotalWorldTime();
 
             if (!this.isOnTransferCooldown())
@@ -178,7 +171,6 @@
         return true;
     }
 
-    @Override
     public boolean isEmpty()
     {
         return this.isInventoryEmpty();
@@ -199,6 +191,7 @@
 
     private boolean transferItemsOut()
     {
+        if (net.minecraftforge.items.VanillaInventoryCodeHooks.insertHook(this)) { return true; }
         IInventory iinventory = this.getInventoryForHopperTransfer();
 
         if (iinventory == null)
@@ -215,7 +208,7 @@
             }
             else
             {
-                for (int i = 0; i < this.getSizeInventory(); i++)
+                for (int i = 0; i < this.getSizeInventory(); ++i)
                 {
                     if (!this.getStackInSlot(i).isEmpty())
                     {
@@ -244,23 +237,9 @@
             ISidedInventory isidedinventory = (ISidedInventory)inventoryIn;
             int[] aint = isidedinventory.getSlotsForFace(side);
 
-            for (int i : aint)
-            {
-                ItemStack itemstack = isidedinventory.getStackInSlot(i);
-
-                if (itemstack.isEmpty() || itemstack.getCount() != itemstack.getMaxStackSize())
-                {
-                    return false;
-                }
-            }
-        }
-        else
-        {
-            int j = inventoryIn.getSizeInventory();
-
-            for (int k = 0; k < j; k++)
-            {
-                ItemStack itemstack1 = inventoryIn.getStackInSlot(k);
+            for (int k : aint)
+            {
+                ItemStack itemstack1 = isidedinventory.getStackInSlot(k);
 
                 if (itemstack1.isEmpty() || itemstack1.getCount() != itemstack1.getMaxStackSize())
                 {
@@ -268,6 +247,20 @@
                 }
             }
         }
+        else
+        {
+            int i = inventoryIn.getSizeInventory();
+
+            for (int j = 0; j < i; ++j)
+            {
+                ItemStack itemstack = inventoryIn.getStackInSlot(j);
+
+                if (itemstack.isEmpty() || itemstack.getCount() != itemstack.getMaxStackSize())
+                {
+                    return false;
+                }
+            }
+        }
 
         return true;
     }
@@ -291,7 +284,7 @@
         {
             int j = inventoryIn.getSizeInventory();
 
-            for (int k = 0; k < j; k++)
+            for (int k = 0; k < j; ++k)
             {
                 if (!inventoryIn.getStackInSlot(k).isEmpty())
                 {
@@ -305,6 +298,8 @@
 
     public static boolean pullItems(IHopper hopper)
     {
+        Boolean ret = net.minecraftforge.items.VanillaInventoryCodeHooks.extractHook(hopper);
+        if (ret != null) return ret;
         IInventory iinventory = getSourceInventory(hopper);
 
         if (iinventory != null)
@@ -333,7 +328,7 @@
             {
                 int j = iinventory.getSizeInventory();
 
-                for (int k = 0; k < j; k++)
+                for (int k = 0; k < j; ++k)
                 {
                     if (pullItemFromSlot(hopper, iinventory, k, enumfacing))
                     {
@@ -344,11 +339,9 @@
         }
         else
         {
-            for (EntityItem entityitem : getCaptureItems(
-                        hopper.getWorld(), hopper.getXPos(), hopper.getYPos(), hopper.getZPos()
-                    ))
+            for (EntityItem entityitem : getCaptureItems(hopper.getWorld(), hopper.getXPos(), hopper.getYPos(), hopper.getZPos()))
             {
-                if (putDropInInventoryAllSlots(null, hopper, entityitem))
+                if (putDropInInventoryAllSlots((IInventory)null, hopper, entityitem))
                 {
                     return true;
                 }
@@ -365,7 +358,7 @@
         if (!itemstack.isEmpty() && canExtractItemFromSlot(inventoryIn, itemstack, index, direction))
         {
             ItemStack itemstack1 = itemstack.copy();
-            ItemStack itemstack2 = putStackInInventoryAllSlots(inventoryIn, hopper, inventoryIn.decrStackSize(index, 1), null);
+            ItemStack itemstack2 = putStackInInventoryAllSlots(inventoryIn, hopper, inventoryIn.decrStackSize(index, 1), (EnumFacing)null);
 
             if (itemstack2.isEmpty())
             {
@@ -390,7 +383,7 @@
         else
         {
             ItemStack itemstack = entity.getItem().copy();
-            ItemStack itemstack1 = putStackInInventoryAllSlots(source, destination, itemstack, null);
+            ItemStack itemstack1 = putStackInInventoryAllSlots(source, destination, itemstack, (EnumFacing)null);
 
             if (itemstack1.isEmpty())
             {
@@ -406,6 +399,12 @@
         }
     }
 
+
+    protected net.minecraftforge.items.IItemHandler createUnSidedHandler()
+    {
+        return new net.minecraftforge.items.VanillaHopperItemHandler(this);
+    }
+
     public static ItemStack putStackInInventoryAllSlots(IInventory source, IInventory destination, ItemStack stack, @Nullable EnumFacing direction)
     {
         if (destination instanceof ISidedInventory && direction != null)
@@ -413,7 +412,7 @@
             ISidedInventory isidedinventory = (ISidedInventory)destination;
             int[] aint = isidedinventory.getSlotsForFace(direction);
 
-            for (int k = 0; k < aint.length && !stack.isEmpty(); k++)
+            for (int k = 0; k < aint.length && !stack.isEmpty(); ++k)
             {
                 stack = insertStack(source, destination, stack, aint[k], direction);
             }
@@ -422,7 +421,7 @@
         {
             int i = destination.getSizeInventory();
 
-            for (int j = 0; j < i && !stack.isEmpty(); j++)
+            for (int j = 0; j < i && !stack.isEmpty(); ++j)
             {
                 stack = insertStack(source, destination, stack, j, direction);
             }
@@ -433,9 +432,14 @@
 
     private static boolean canInsertItemInSlot(IInventory inventoryIn, ItemStack stack, int index, EnumFacing side)
     {
-        return !inventoryIn.isItemValidForSlot(index, stack)
-               ? false
-               : !(inventoryIn instanceof ISidedInventory) || ((ISidedInventory)inventoryIn).canInsertItem(index, stack, side);
+        if (!inventoryIn.isItemValidForSlot(index, stack))
+        {
+            return false;
+        }
+        else
+        {
+            return !(inventoryIn instanceof ISidedInventory) || ((ISidedInventory)inventoryIn).canInsertItem(index, stack, side);
+        }
     }
 
     private static boolean canExtractItemFromSlot(IInventory inventoryIn, ItemStack stack, int index, EnumFacing side)
@@ -501,26 +505,17 @@
     private IInventory getInventoryForHopperTransfer()
     {
         EnumFacing enumfacing = BlockHopper.getFacing(this.getBlockMetadata());
-        return getInventoryAtPosition(
-                   this.getWorld(),
-                   this.getXPos() + (double)enumfacing.getXOffset(),
-                   this.getYPos() + (double)enumfacing.getYOffset(),
-                   this.getZPos() + (double)enumfacing.getZOffset()
-               );
+        return getInventoryAtPosition(this.getWorld(), this.getXPos() + (double)enumfacing.getXOffset(), this.getYPos() + (double)enumfacing.getYOffset(), this.getZPos() + (double)enumfacing.getZOffset());
     }
 
     public static IInventory getSourceInventory(IHopper hopper)
     {
-        return getInventoryAtPosition(hopper.getWorld(), hopper.getXPos(), hopper.getYPos() + 1.0, hopper.getZPos());
+        return getInventoryAtPosition(hopper.getWorld(), hopper.getXPos(), hopper.getYPos() + 1.0D, hopper.getZPos());
     }
 
     public static List<EntityItem> getCaptureItems(World worldIn, double p_184292_1_, double p_184292_3_, double p_184292_5_)
     {
-        return worldIn.getEntitiesWithinAABB(
-                   EntityItem.class,
-                   new AxisAlignedBB(p_184292_1_ - 0.5, p_184292_3_, p_184292_5_ - 0.5, p_184292_1_ + 0.5, p_184292_3_ + 1.5, p_184292_5_ + 0.5),
-                   EntitySelectors.IS_ALIVE
-               );
+        return worldIn.<EntityItem>getEntitiesWithinAABB(EntityItem.class, new AxisAlignedBB(p_184292_1_ - 0.5D, p_184292_3_, p_184292_5_ - 0.5D, p_184292_1_ + 0.5D, p_184292_3_ + 1.5D, p_184292_5_ + 0.5D), EntitySelectors.IS_ALIVE);
     }
 
     public static IInventory getInventoryAtPosition(World worldIn, double x, double y, double z)
@@ -530,9 +525,10 @@
         int j = MathHelper.floor(y);
         int k = MathHelper.floor(z);
         BlockPos blockpos = new BlockPos(i, j, k);
-        Block block = worldIn.getBlockState(blockpos).getBlock();
+        net.minecraft.block.state.IBlockState state = worldIn.getBlockState(blockpos);
+        Block block = state.getBlock();
 
-        if (block.hasTileEntity())
+        if (block.hasTileEntity(state))
         {
             TileEntity tileentity = worldIn.getTileEntity(blockpos);
 
@@ -549,11 +545,7 @@
 
         if (iinventory == null)
         {
-            List<Entity> list = worldIn.getEntitiesInAABBexcluding(
-                                    null,
-                                    new AxisAlignedBB(x - 0.5, y - 0.5, z - 0.5, x + 0.5, y + 0.5, z + 0.5),
-                                    EntitySelectors.HAS_INVENTORY
-                                );
+            List<Entity> list = worldIn.getEntitiesInAABBexcluding((Entity)null, new AxisAlignedBB(x - 0.5D, y - 0.5D, z - 0.5D, x + 0.5D, y + 0.5D, z + 0.5D), EntitySelectors.HAS_INVENTORY);
 
             if (!list.isEmpty())
             {
@@ -574,28 +566,29 @@
         {
             return false;
         }
+        else if (stack1.getCount() > stack1.getMaxStackSize())
+        {
+            return false;
+        }
         else
         {
-            return stack1.getCount() > stack1.getMaxStackSize() ? false : ItemStack.areItemStackTagsEqual(stack1, stack2);
+            return ItemStack.areItemStackTagsEqual(stack1, stack2);
         }
     }
 
-    @Override
     public double getXPos()
     {
-        return (double)this.pos.getX() + 0.5;
+        return (double)this.pos.getX() + 0.5D;
     }
 
-    @Override
     public double getYPos()
     {
-        return (double)this.pos.getY() + 0.5;
+        return (double)this.pos.getY() + 0.5D;
     }
 
-    @Override
     public double getZPos()
     {
-        return (double)this.pos.getZ() + 0.5;
+        return (double)this.pos.getZ() + 0.5D;
     }
 
     public void setTransferCooldown(int ticks)
@@ -613,22 +606,21 @@
         return this.transferCooldown > 8;
     }
 
-    @Override
     public String getGuiID()
     {
         return "minecraft:hopper";
     }
 
-    @Override
     public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
     {
         this.fillWithLoot(playerIn);
         return new ContainerHopper(playerInventory, this, playerIn);
     }
 
-    @Override
     protected NonNullList<ItemStack> getItems()
     {
         return this.inventory;
     }
+
+    public long getLastUpdateTime() { return tickedGameTime; } // Forge
 }
