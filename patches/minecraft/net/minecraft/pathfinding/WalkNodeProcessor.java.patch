--- before/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ after/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -23,22 +23,20 @@
 public class WalkNodeProcessor extends NodeProcessor
 {
     protected float avoidsWater;
+    protected EntityLiving currentEntity;
 
-    @Override
     public void init(IBlockAccess sourceIn, EntityLiving mob)
     {
         super.init(sourceIn, mob);
         this.avoidsWater = mob.getPathPriority(PathNodeType.WATER);
     }
 
-    @Override
     public void postProcess()
     {
         this.entity.setPathPriority(PathNodeType.WATER, this.avoidsWater);
         super.postProcess();
     }
 
-    @Override
     public PathPoint getStart()
     {
         int i;
@@ -46,37 +44,25 @@
         if (this.getCanSwim() && this.entity.isInWater())
         {
             i = (int)this.entity.getEntityBoundingBox().minY;
-            BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos(
-                MathHelper.floor(this.entity.posX), i, MathHelper.floor(this.entity.posZ)
-            );
+            BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos(MathHelper.floor(this.entity.posX), i, MathHelper.floor(this.entity.posZ));
 
-            for (Block block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock();
-                    block == Blocks.FLOWING_WATER || block == Blocks.WATER;
-                    block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock()
-                )
+            for (Block block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock(); block == Blocks.FLOWING_WATER || block == Blocks.WATER; block = this.blockaccess.getBlockState(blockpos$mutableblockpos).getBlock())
             {
-                blockpos$mutableblockpos.setPos(
-                    MathHelper.floor(this.entity.posX), ++i, MathHelper.floor(this.entity.posZ)
-                );
+                ++i;
+                blockpos$mutableblockpos.setPos(MathHelper.floor(this.entity.posX), i, MathHelper.floor(this.entity.posZ));
             }
         }
         else if (this.entity.onGround)
         {
-            i = MathHelper.floor(this.entity.getEntityBoundingBox().minY + 0.5);
+            i = MathHelper.floor(this.entity.getEntityBoundingBox().minY + 0.5D);
         }
         else
         {
-            BlockPos blockpos = new BlockPos(this.entity);
+            BlockPos blockpos;
 
-            while (
-                (
-                    this.blockaccess.getBlockState(blockpos).getMaterial() == Material.AIR
-                    || this.blockaccess.getBlockState(blockpos).getBlock().isPassable(this.blockaccess, blockpos)
-                )
-                && blockpos.getY() > 0
-            )
+            for (blockpos = new BlockPos(this.entity); (this.blockaccess.getBlockState(blockpos).getMaterial() == Material.AIR || this.blockaccess.getBlockState(blockpos).getBlock().isPassable(this.blockaccess, blockpos)) && blockpos.getY() > 0; blockpos = blockpos.down())
             {
-                blockpos = blockpos.down();
+                ;
             }
 
             i = blockpos.up().getY();
@@ -87,7 +73,7 @@
 
         if (this.entity.getPathPriority(pathnodetype1) < 0.0F)
         {
-            Set<BlockPos> set = Sets.newHashSet();
+            Set<BlockPos> set = Sets.<BlockPos>newHashSet();
             set.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double)i, this.entity.getEntityBoundingBox().minZ));
             set.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double)i, this.entity.getEntityBoundingBox().maxZ));
             set.add(new BlockPos(this.entity.getEntityBoundingBox().maxX, (double)i, this.entity.getEntityBoundingBox().minZ));
@@ -107,13 +93,11 @@
         return this.openPoint(blockpos2.getX(), i, blockpos2.getZ());
     }
 
-    @Override
     public PathPoint getPathPointToCoords(double x, double y, double z)
     {
         return this.openPoint(MathHelper.floor(x), MathHelper.floor(y), MathHelper.floor(z));
     }
 
-    @Override
     public int findPathOptions(PathPoint[] pathOptions, PathPoint currentPoint, PathPoint targetPoint, float maxDistance)
     {
         int i = 0;
@@ -125,9 +109,8 @@
             j = MathHelper.floor(Math.max(1.0F, this.entity.stepHeight));
         }
 
-        BlockPos blockpos = new BlockPos(currentPoint.x, currentPoint.y, currentPoint.z).down();
-        double d0 = (double)currentPoint.y
-                    - (1.0 - this.blockaccess.getBlockState(blockpos).getBoundingBox(this.blockaccess, blockpos).maxY);
+        BlockPos blockpos = (new BlockPos(currentPoint.x, currentPoint.y, currentPoint.z)).down();
+        double d0 = (double)currentPoint.y - (1.0D - this.blockaccess.getBlockState(blockpos).getBoundingBox(this.blockaccess, blockpos).maxY);
         PathPoint pathpoint = this.getSafePoint(currentPoint.x, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH);
         PathPoint pathpoint1 = this.getSafePoint(currentPoint.x - 1, currentPoint.y, currentPoint.z, j, d0, EnumFacing.WEST);
         PathPoint pathpoint2 = this.getSafePoint(currentPoint.x + 1, currentPoint.y, currentPoint.z, j, d0, EnumFacing.EAST);
@@ -160,9 +143,7 @@
 
         if (flag && flag3)
         {
-            PathPoint pathpoint4 = this.getSafePoint(
-                                       currentPoint.x - 1, currentPoint.y, currentPoint.z - 1, j, d0, EnumFacing.NORTH
-                                   );
+            PathPoint pathpoint4 = this.getSafePoint(currentPoint.x - 1, currentPoint.y, currentPoint.z - 1, j, d0, EnumFacing.NORTH);
 
             if (pathpoint4 != null && !pathpoint4.visited && pathpoint4.distanceTo(targetPoint) < maxDistance)
             {
@@ -172,9 +153,7 @@
 
         if (flag && flag2)
         {
-            PathPoint pathpoint5 = this.getSafePoint(
-                                       currentPoint.x + 1, currentPoint.y, currentPoint.z - 1, j, d0, EnumFacing.NORTH
-                                   );
+            PathPoint pathpoint5 = this.getSafePoint(currentPoint.x + 1, currentPoint.y, currentPoint.z - 1, j, d0, EnumFacing.NORTH);
 
             if (pathpoint5 != null && !pathpoint5.visited && pathpoint5.distanceTo(targetPoint) < maxDistance)
             {
@@ -184,9 +163,7 @@
 
         if (flag1 && flag3)
         {
-            PathPoint pathpoint6 = this.getSafePoint(
-                                       currentPoint.x - 1, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH
-                                   );
+            PathPoint pathpoint6 = this.getSafePoint(currentPoint.x - 1, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH);
 
             if (pathpoint6 != null && !pathpoint6.visited && pathpoint6.distanceTo(targetPoint) < maxDistance)
             {
@@ -196,9 +173,7 @@
 
         if (flag1 && flag2)
         {
-            PathPoint pathpoint7 = this.getSafePoint(
-                                       currentPoint.x + 1, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH
-                                   );
+            PathPoint pathpoint7 = this.getSafePoint(currentPoint.x + 1, currentPoint.y, currentPoint.z + 1, j, d0, EnumFacing.SOUTH);
 
             if (pathpoint7 != null && !pathpoint7.visited && pathpoint7.distanceTo(targetPoint) < maxDistance)
             {
@@ -215,9 +190,9 @@
         PathPoint pathpoint = null;
         BlockPos blockpos = new BlockPos(x, y, z);
         BlockPos blockpos1 = blockpos.down();
-        double d0 = (double)y - (1.0 - this.blockaccess.getBlockState(blockpos1).getBoundingBox(this.blockaccess, blockpos1).maxY);
+        double d0 = (double)y - (1.0D - this.blockaccess.getBlockState(blockpos1).getBoundingBox(this.blockaccess, blockpos1).maxY);
 
-        if (d0 - p_186332_5_ > 1.125)
+        if (d0 - p_186332_5_ > 1.125D)
         {
             return null;
         }
@@ -225,7 +200,7 @@
         {
             PathNodeType pathnodetype = this.getPathNodeType(this.entity, x, y, z);
             float f = this.entity.getPathPriority(pathnodetype);
-            double d1 = (double)this.entity.width / 2.0;
+            double d1 = (double)this.entity.width / 2.0D;
 
             if (f >= 0.0F)
             {
@@ -244,17 +219,13 @@
                 {
                     pathpoint = this.getSafePoint(x, y + 1, z, p_186332_4_ - 1, p_186332_5_, facing);
 
-                    if (pathpoint != null
-                            && (pathpoint.nodeType == PathNodeType.OPEN || pathpoint.nodeType == PathNodeType.WALKABLE)
-                            && this.entity.width < 1.0F)
+                    if (pathpoint != null && (pathpoint.nodeType == PathNodeType.OPEN || pathpoint.nodeType == PathNodeType.WALKABLE) && this.entity.width < 1.0F)
                     {
-                        double d2 = (double)(x - facing.getXOffset()) + 0.5;
-                        double d3 = (double)(z - facing.getZOffset()) + 0.5;
-                        AxisAlignedBB axisalignedbb = new AxisAlignedBB(
-                            d2 - d1, (double)y + 0.001, d3 - d1, d2 + d1, (double)((float)y + this.entity.height), d3 + d1
-                        );
+                        double d2 = (double)(x - facing.getXOffset()) + 0.5D;
+                        double d3 = (double)(z - facing.getZOffset()) + 0.5D;
+                        AxisAlignedBB axisalignedbb = new AxisAlignedBB(d2 - d1, (double)y + 0.001D, d3 - d1, d2 + d1, (double)((float)y + this.entity.height), d3 + d1);
                         AxisAlignedBB axisalignedbb1 = this.blockaccess.getBlockState(blockpos).getBoundingBox(this.blockaccess, blockpos);
-                        AxisAlignedBB axisalignedbb2 = axisalignedbb.expand(0.0, axisalignedbb1.maxY - 0.002, 0.0);
+                        AxisAlignedBB axisalignedbb2 = axisalignedbb.expand(0.0D, axisalignedbb1.maxY - 0.002D, 0.0D);
 
                         if (this.entity.world.collidesWithAnyBlock(axisalignedbb2))
                         {
@@ -265,14 +236,7 @@
 
                 if (pathnodetype == PathNodeType.OPEN)
                 {
-                    AxisAlignedBB axisalignedbb3 = new AxisAlignedBB(
-                        (double)x - d1 + 0.5,
-                        (double)y + 0.001,
-                        (double)z - d1 + 0.5,
-                        (double)x + d1 + 0.5,
-                        (double)((float)y + this.entity.height),
-                        (double)z + d1 + 0.5
-                    );
+                    AxisAlignedBB axisalignedbb3 = new AxisAlignedBB((double)x - d1 + 0.5D, (double)y + 0.001D, (double)z - d1 + 0.5D, (double)x + d1 + 0.5D, (double)((float)y + this.entity.height), (double)z + d1 + 0.5D);
 
                     if (this.entity.world.collidesWithAnyBlock(axisalignedbb3))
                     {
@@ -296,7 +260,7 @@
 
                     while (y > 0 && pathnodetype == PathNodeType.OPEN)
                     {
-                        y--;
+                        --y;
 
                         if (i++ >= this.entity.getMaxFallHeight())
                         {
@@ -326,27 +290,15 @@
         }
     }
 
-    @Override
-    public PathNodeType getPathNodeType(
-        IBlockAccess blockaccessIn,
-        int x,
-        int y,
-        int z,
-        EntityLiving entitylivingIn,
-        int xSize,
-        int ySize,
-        int zSize,
-        boolean canBreakDoorsIn,
-        boolean canEnterDoorsIn
-    )
+    public PathNodeType getPathNodeType(IBlockAccess blockaccessIn, int x, int y, int z, EntityLiving entitylivingIn, int xSize, int ySize, int zSize, boolean canBreakDoorsIn, boolean canEnterDoorsIn)
     {
-        EnumSet<PathNodeType> enumset = EnumSet.noneOf(PathNodeType.class);
+        EnumSet<PathNodeType> enumset = EnumSet.<PathNodeType>noneOf(PathNodeType.class);
         PathNodeType pathnodetype = PathNodeType.BLOCKED;
-        double d0 = (double)entitylivingIn.width / 2.0;
+        double d0 = (double)entitylivingIn.width / 2.0D;
         BlockPos blockpos = new BlockPos(entitylivingIn);
-        pathnodetype = this.getPathNodeType(
-                           blockaccessIn, x, y, z, xSize, ySize, zSize, canBreakDoorsIn, canEnterDoorsIn, enumset, pathnodetype, blockpos
-                       );
+        this.currentEntity = entitylivingIn;
+        pathnodetype = this.getPathNodeType(blockaccessIn, x, y, z, xSize, ySize, zSize, canBreakDoorsIn, canEnterDoorsIn, enumset, pathnodetype, blockpos);
+        this.currentEntity = null;
 
         if (enumset.contains(PathNodeType.FENCE))
         {
@@ -369,30 +321,24 @@
                 }
             }
 
-            return pathnodetype == PathNodeType.OPEN && entitylivingIn.getPathPriority(pathnodetype1) == 0.0F ? PathNodeType.OPEN : pathnodetype1;
+            if (pathnodetype == PathNodeType.OPEN && entitylivingIn.getPathPriority(pathnodetype1) == 0.0F)
+            {
+                return PathNodeType.OPEN;
+            }
+            else
+            {
+                return pathnodetype1;
+            }
         }
     }
 
-    public PathNodeType getPathNodeType(
-        IBlockAccess p_193577_1_,
-        int x,
-        int y,
-        int z,
-        int xSize,
-        int ySize,
-        int zSize,
-        boolean canOpenDoorsIn,
-        boolean canEnterDoorsIn,
-        EnumSet<PathNodeType> p_193577_10_,
-        PathNodeType p_193577_11_,
-        BlockPos p_193577_12_
-    )
+    public PathNodeType getPathNodeType(IBlockAccess p_193577_1_, int x, int y, int z, int xSize, int ySize, int zSize, boolean canOpenDoorsIn, boolean canEnterDoorsIn, EnumSet<PathNodeType> p_193577_10_, PathNodeType p_193577_11_, BlockPos p_193577_12_)
     {
-        for (int i = 0; i < xSize; i++)
+        for (int i = 0; i < xSize; ++i)
         {
-            for (int j = 0; j < ySize; j++)
+            for (int j = 0; j < ySize; ++j)
             {
-                for (int k = 0; k < zSize; k++)
+                for (int k = 0; k < zSize; ++k)
                 {
                     int l = i + x;
                     int i1 = j + y;
@@ -409,9 +355,7 @@
                         pathnodetype = PathNodeType.BLOCKED;
                     }
 
-                    if (pathnodetype == PathNodeType.RAIL
-                            && !(p_193577_1_.getBlockState(p_193577_12_).getBlock() instanceof BlockRailBase)
-                            && !(p_193577_1_.getBlockState(p_193577_12_.down()).getBlock() instanceof BlockRailBase))
+                    if (pathnodetype == PathNodeType.RAIL && !(p_193577_1_.getBlockState(p_193577_12_).getBlock() instanceof BlockRailBase) && !(p_193577_1_.getBlockState(p_193577_12_.down()).getBlock() instanceof BlockRailBase))
                     {
                         pathnodetype = PathNodeType.FENCE;
                     }
@@ -436,21 +380,9 @@
 
     private PathNodeType getPathNodeType(EntityLiving entitylivingIn, int x, int y, int z)
     {
-        return this.getPathNodeType(
-                   this.blockaccess,
-                   x,
-                   y,
-                   z,
-                   entitylivingIn,
-                   this.entitySizeX,
-                   this.entitySizeY,
-                   this.entitySizeZ,
-                   this.getCanOpenDoors(),
-                   this.getCanEnterDoors()
-               );
+        return this.getPathNodeType(this.blockaccess, x, y, z, entitylivingIn, this.entitySizeX, this.entitySizeY, this.entitySizeZ, this.getCanOpenDoors(), this.getCanEnterDoors());
     }
 
-    @Override
     public PathNodeType getPathNodeType(IBlockAccess blockaccessIn, int x, int y, int z)
     {
         PathNodeType pathnodetype = this.getPathNodeTypeRaw(blockaccessIn, x, y, z);
@@ -459,12 +391,7 @@
         {
             Block block = blockaccessIn.getBlockState(new BlockPos(x, y - 1, z)).getBlock();
             PathNodeType pathnodetype1 = this.getPathNodeTypeRaw(blockaccessIn, x, y - 1, z);
-            pathnodetype = pathnodetype1 != PathNodeType.WALKABLE
-                           && pathnodetype1 != PathNodeType.OPEN
-                           && pathnodetype1 != PathNodeType.WATER
-                           && pathnodetype1 != PathNodeType.LAVA
-                           ? PathNodeType.WALKABLE
-                           : PathNodeType.OPEN;
+            pathnodetype = pathnodetype1 != PathNodeType.WALKABLE && pathnodetype1 != PathNodeType.OPEN && pathnodetype1 != PathNodeType.WATER && pathnodetype1 != PathNodeType.LAVA ? PathNodeType.WALKABLE : PathNodeType.OPEN;
 
             if (pathnodetype1 == PathNodeType.DAMAGE_FIRE || block == Blocks.MAGMA)
             {
@@ -475,9 +402,12 @@
             {
                 pathnodetype = PathNodeType.DAMAGE_CACTUS;
             }
+
+            if (pathnodetype1 == PathNodeType.DAMAGE_OTHER) pathnodetype = PathNodeType.DAMAGE_OTHER;
         }
 
-        return this.checkNeighborBlocks(blockaccessIn, x, y, z, pathnodetype);
+        pathnodetype = this.checkNeighborBlocks(blockaccessIn, x, y, z, pathnodetype);
+        return pathnodetype;
     }
 
     public PathNodeType checkNeighborBlocks(IBlockAccess p_193578_1_, int p_193578_2_, int p_193578_3_, int p_193578_4_, PathNodeType p_193578_5_)
@@ -486,23 +416,25 @@
 
         if (p_193578_5_ == PathNodeType.WALKABLE)
         {
-            for (int i = -1; i <= 1; i++)
+            for (int i = -1; i <= 1; ++i)
             {
-                for (int j = -1; j <= 1; j++)
+                for (int j = -1; j <= 1; ++j)
                 {
                     if (i != 0 || j != 0)
                     {
-                        Block block = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_))
-                                      .getBlock();
+                        IBlockState state = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_));
+                        Block block = state.getBlock();
+                        PathNodeType type = block.getAiPathNodeType(state, p_193578_1_, blockpos$pooledmutableblockpos, this.currentEntity);
 
-                        if (block == Blocks.CACTUS)
+                        if (block == Blocks.CACTUS || type == PathNodeType.DAMAGE_CACTUS)
                         {
                             p_193578_5_ = PathNodeType.DANGER_CACTUS;
                         }
-                        else if (block == Blocks.FIRE)
+                        else if (block == Blocks.FIRE || type == PathNodeType.DAMAGE_FIRE)
                         {
                             p_193578_5_ = PathNodeType.DANGER_FIRE;
                         }
+                        else if (type == PathNodeType.DAMAGE_OTHER) p_193578_5_ = PathNodeType.DANGER_OTHER;
                     }
                 }
             }
@@ -519,58 +451,62 @@
         Block block = iblockstate.getBlock();
         Material material = iblockstate.getMaterial();
 
+        PathNodeType type = block.getAiPathNodeType(iblockstate, p_189553_1_, blockpos, this.currentEntity);
+        if (type != null) return type;
+
         if (material == Material.AIR)
         {
             return PathNodeType.OPEN;
         }
-        else if (block == Blocks.TRAPDOOR || block == Blocks.IRON_TRAPDOOR || block == Blocks.WATERLILY)
+        else if (block != Blocks.TRAPDOOR && block != Blocks.IRON_TRAPDOOR && block != Blocks.WATERLILY)
+        {
+            if (block == Blocks.FIRE)
+            {
+                return PathNodeType.DAMAGE_FIRE;
+            }
+            else if (block == Blocks.CACTUS)
+            {
+                return PathNodeType.DAMAGE_CACTUS;
+            }
+            else if (block instanceof BlockDoor && material == Material.WOOD && !((Boolean)iblockstate.getValue(BlockDoor.OPEN)).booleanValue())
+            {
+                return PathNodeType.DOOR_WOOD_CLOSED;
+            }
+            else if (block instanceof BlockDoor && material == Material.IRON && !((Boolean)iblockstate.getValue(BlockDoor.OPEN)).booleanValue())
+            {
+                return PathNodeType.DOOR_IRON_CLOSED;
+            }
+            else if (block instanceof BlockDoor && ((Boolean)iblockstate.getValue(BlockDoor.OPEN)).booleanValue())
+            {
+                return PathNodeType.DOOR_OPEN;
+            }
+            else if (block instanceof BlockRailBase)
+            {
+                return PathNodeType.RAIL;
+            }
+            else if (!(block instanceof BlockFence) && !(block instanceof BlockWall) && (!(block instanceof BlockFenceGate) || ((Boolean)iblockstate.getValue(BlockFenceGate.OPEN)).booleanValue()))
+            {
+                if (material == Material.WATER)
+                {
+                    return PathNodeType.WATER;
+                }
+                else if (material == Material.LAVA)
+                {
+                    return PathNodeType.LAVA;
+                }
+                else
+                {
+                    return block.isPassable(p_189553_1_, blockpos) ? PathNodeType.OPEN : PathNodeType.BLOCKED;
+                }
+            }
+            else
+            {
+                return PathNodeType.FENCE;
+            }
+        }
+        else
         {
             return PathNodeType.TRAPDOOR;
-        }
-        else if (block == Blocks.FIRE)
-        {
-            return PathNodeType.DAMAGE_FIRE;
-        }
-        else if (block == Blocks.CACTUS)
-        {
-            return PathNodeType.DAMAGE_CACTUS;
-        }
-        else if (block instanceof BlockDoor && material == Material.WOOD && !iblockstate.getValue(BlockDoor.OPEN))
-        {
-            return PathNodeType.DOOR_WOOD_CLOSED;
-        }
-        else if (block instanceof BlockDoor && material == Material.IRON && !iblockstate.getValue(BlockDoor.OPEN))
-        {
-            return PathNodeType.DOOR_IRON_CLOSED;
-        }
-        else if (block instanceof BlockDoor && iblockstate.getValue(BlockDoor.OPEN))
-        {
-            return PathNodeType.DOOR_OPEN;
-        }
-        else if (block instanceof BlockRailBase)
-        {
-            return PathNodeType.RAIL;
-        }
-        else if (!(block instanceof BlockFence)
-                 && !(block instanceof BlockWall)
-                 && (!(block instanceof BlockFenceGate) || iblockstate.getValue(BlockFenceGate.OPEN)))
-        {
-            if (material == Material.WATER)
-            {
-                return PathNodeType.WATER;
-            }
-            else if (material == Material.LAVA)
-            {
-                return PathNodeType.LAVA;
-            }
-            else
-            {
-                return block.isPassable(p_189553_1_, blockpos) ? PathNodeType.OPEN : PathNodeType.BLOCKED;
-            }
-        }
-        else
-        {
-            return PathNodeType.FENCE;
         }
     }
 }
