--- before/net/minecraft/client/multiplayer/WorldClient.java
+++ after/net/minecraft/client/multiplayer/WorldClient.java
@@ -51,27 +51,30 @@
 {
     private final NetHandlerPlayClient connection;
     private ChunkProviderClient clientChunkProvider;
-    private final Set<Entity> entityList = Sets.newHashSet();
-    private final Set<Entity> entitySpawnQueue = Sets.newHashSet();
+    private final Set<Entity> entityList = Sets.<Entity>newHashSet();
+    private final Set<Entity> entitySpawnQueue = Sets.<Entity>newHashSet();
     private final Minecraft mc = Minecraft.getMinecraft();
-    private final Set<ChunkPos> previousActiveChunkSet = Sets.newHashSet();
-    private int ambienceTicks = this.rand.nextInt(12000);
-    protected Set<ChunkPos> visibleChunks = Sets.newHashSet();
+    private final Set<ChunkPos> previousActiveChunkSet = Sets.<ChunkPos>newHashSet();
+    private int ambienceTicks;
+    protected Set<ChunkPos> visibleChunks;
 
     public WorldClient(NetHandlerPlayClient netHandler, WorldSettings settings, int dimension, EnumDifficulty difficulty, Profiler profilerIn)
     {
-        super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), DimensionType.getById(dimension).createDimension(), profilerIn, true);
+        super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), net.minecraftforge.common.DimensionManager.createProviderFor(dimension), profilerIn, true);
+        this.ambienceTicks = this.rand.nextInt(12000);
+        this.visibleChunks = Sets.<ChunkPos>newHashSet();
         this.connection = netHandler;
         this.getWorldInfo().setDifficulty(difficulty);
-        this.setSpawnPoint(new BlockPos(8, 64, 8));
         this.provider.setWorld(this);
+        this.setSpawnPoint(new BlockPos(8, 64, 8)); //Forge: Moved below registerWorld to prevent NPE in our redirect.
         this.chunkProvider = this.createChunkProvider();
         this.mapStorage = new SaveDataMemoryStorage();
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
+        this.initCapabilities();
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(this));
     }
 
-    @Override
     public void tick()
     {
         super.tick();
@@ -84,7 +87,7 @@
 
         this.profiler.startSection("reEntryProcessing");
 
-        for (int i = 0; i < 10 && !this.entitySpawnQueue.isEmpty(); i++)
+        for (int i = 0; i < 10 && !this.entitySpawnQueue.isEmpty(); ++i)
         {
             Entity entity = this.entitySpawnQueue.iterator().next();
             this.entitySpawnQueue.remove(entity);
@@ -106,14 +109,12 @@
     {
     }
 
-    @Override
     protected IChunkProvider createChunkProvider()
     {
         this.clientChunkProvider = new ChunkProviderClient(this);
         return this.clientChunkProvider;
     }
 
-    @Override
     protected boolean isChunkLoaded(int x, int z, boolean allowEmpty)
     {
         return allowEmpty || !this.getChunkProvider().provideChunk(x, z).isEmpty();
@@ -124,12 +125,12 @@
         this.visibleChunks.clear();
         int i = this.mc.gameSettings.renderDistanceChunks;
         this.profiler.startSection("buildList");
-        int j = MathHelper.floor(this.mc.player.posX / 16.0);
-        int k = MathHelper.floor(this.mc.player.posZ / 16.0);
+        int j = MathHelper.floor(this.mc.player.posX / 16.0D);
+        int k = MathHelper.floor(this.mc.player.posZ / 16.0D);
 
-        for (int l = -i; l <= i; l++)
+        for (int l = -i; l <= i; ++l)
         {
-            for (int i1 = -i; i1 <= i; i1++)
+            for (int i1 = -i; i1 <= i; ++i1)
             {
                 this.visibleChunks.add(new ChunkPos(l + j, i1 + k));
             }
@@ -138,14 +139,13 @@
         this.profiler.endSection();
     }
 
-    @Override
     protected void updateBlocks()
     {
         this.refreshVisibleChunks();
 
         if (this.ambienceTicks > 0)
         {
-            this.ambienceTicks--;
+            --this.ambienceTicks;
         }
 
         this.previousActiveChunkSet.retainAll(this.visibleChunks);
@@ -168,8 +168,9 @@
                 this.playMoodSoundAndCheckLight(j, k, chunk);
                 this.profiler.endSection();
                 this.previousActiveChunkSet.add(chunkpos);
+                ++i;
 
-                if (++i >= 10)
+                if (i >= 10)
                 {
                     return;
                 }
@@ -190,7 +191,6 @@
         }
     }
 
-    @Override
     public boolean spawnEntity(Entity entityIn)
     {
         boolean flag = super.spawnEntity(entityIn);
@@ -211,14 +211,12 @@
         return flag;
     }
 
-    @Override
     public void removeEntity(Entity entityIn)
     {
         super.removeEntity(entityIn);
         this.entityList.remove(entityIn);
     }
 
-    @Override
     public void onEntityAdded(Entity entityIn)
     {
         super.onEntityAdded(entityIn);
@@ -229,7 +227,6 @@
         }
     }
 
-    @Override
     public void onEntityRemoved(Entity entityIn)
     {
         super.onEntityRemoved(entityIn);
@@ -268,7 +265,6 @@
     }
 
     @Nullable
-    @Override
     public Entity getEntityByID(int id)
     {
         return (Entity)(id == this.mc.player.getEntityId() ? this.mc.player : super.getEntityByID(id));
@@ -297,18 +293,15 @@
         return super.setBlockState(pos, state, 3);
     }
 
-    @Override
     public void sendQuittingDisconnectingPacket()
     {
         this.connection.getNetworkManager().closeChannel(new TextComponentString("Quitting"));
     }
 
-    @Override
     protected void updateWeather()
     {
     }
 
-    @Override
     protected void playMoodSoundAndCheckLight(int x, int z, Chunk chunkIn)
     {
         super.playMoodSoundAndCheckLight(x, z, chunkIn);
@@ -319,30 +312,19 @@
             int i = this.updateLCG >> 2;
             int j = i & 15;
             int k = i >> 8 & 15;
-            int l = i >> 16 & 0xFF;
+            int l = i >> 16 & 255;
             BlockPos blockpos = new BlockPos(j + x, l, k + z);
             IBlockState iblockstate = chunkIn.getBlockState(blockpos);
-            j += x;
-            k += z;
+            j = j + x;
+            k = k + z;
 
-            if (iblockstate.getMaterial() == Material.AIR
-                    && this.getLight(blockpos) <= this.rand.nextInt(8)
-                    && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0)
+            if (iblockstate.getMaterial() == Material.AIR && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0)
             {
-                double d0 = this.mc.player.getDistanceSq((double)j + 0.5, (double)l + 0.5, (double)k + 0.5);
+                double d0 = this.mc.player.getDistanceSq((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D);
 
-                if (this.mc.player != null && d0 > 4.0 && d0 < 256.0)
+                if (this.mc.player != null && d0 > 4.0D && d0 < 256.0D)
                 {
-                    this.playSound(
-                        (double)j + 0.5,
-                        (double)l + 0.5,
-                        (double)k + 0.5,
-                        SoundEvents.AMBIENT_CAVE,
-                        SoundCategory.AMBIENT,
-                        0.7F,
-                        0.8F + this.rand.nextFloat() * 0.2F,
-                        false
-                    );
+                    this.playSound((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D, SoundEvents.AMBIENT_CAVE, SoundCategory.AMBIENT, 0.7F, 0.8F + this.rand.nextFloat() * 0.2F, false);
                     this.ambienceTicks = this.rand.nextInt(12000) + 6000;
                 }
             }
@@ -354,21 +336,17 @@
         int i = 32;
         Random random = new Random();
         ItemStack itemstack = this.mc.player.getHeldItemMainhand();
-        boolean flag = this.mc.playerController.getCurrentGameType() == GameType.CREATIVE
-                       && !itemstack.isEmpty()
-                       && itemstack.getItem() == Item.getItemFromBlock(Blocks.BARRIER);
+        boolean flag = this.mc.playerController.getCurrentGameType() == GameType.CREATIVE && !itemstack.isEmpty() && itemstack.getItem() == Item.getItemFromBlock(Blocks.BARRIER);
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-        for (int j = 0; j < 667; j++)
+        for (int j = 0; j < 667; ++j)
         {
             this.showBarrierParticles(posX, posY, posZ, 16, random, flag, blockpos$mutableblockpos);
             this.showBarrierParticles(posX, posY, posZ, 32, random, flag, blockpos$mutableblockpos);
         }
     }
 
-    public void showBarrierParticles(
-        int x, int y, int z, int offset, Random random, boolean holdingBarrier, BlockPos.MutableBlockPos pos
-    )
+    public void showBarrierParticles(int x, int y, int z, int offset, Random random, boolean holdingBarrier, BlockPos.MutableBlockPos pos)
     {
         int i = x + this.rand.nextInt(offset) - this.rand.nextInt(offset);
         int j = y + this.rand.nextInt(offset) - this.rand.nextInt(offset);
@@ -379,9 +357,7 @@
 
         if (holdingBarrier && iblockstate.getBlock() == Blocks.BARRIER)
         {
-            this.spawnParticle(
-                EnumParticleTypes.BARRIER, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), 0.0, 0.0, 0.0, new int[0]
-            );
+            this.spawnParticle(EnumParticleTypes.BARRIER, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), 0.0D, 0.0D, 0.0D, new int[0]);
         }
     }
 
@@ -389,7 +365,7 @@
     {
         this.loadedEntityList.removeAll(this.unloadedEntityList);
 
-        for (int i = 0; i < this.unloadedEntityList.size(); i++)
+        for (int i = 0; i < this.unloadedEntityList.size(); ++i)
         {
             Entity entity = this.unloadedEntityList.get(i);
             int j = entity.chunkCoordX;
@@ -401,14 +377,14 @@
             }
         }
 
-        for (int i1 = 0; i1 < this.unloadedEntityList.size(); i1++)
+        for (int i1 = 0; i1 < this.unloadedEntityList.size(); ++i1)
         {
             this.onEntityRemoved(this.unloadedEntityList.get(i1));
         }
 
         this.unloadedEntityList.clear();
 
-        for (int j1 = 0; j1 < this.loadedEntityList.size(); j1++)
+        for (int j1 = 0; j1 < this.loadedEntityList.size(); ++j1)
         {
             Entity entity1 = this.loadedEntityList.get(j1);
             Entity entity2 = entity1.getRidingEntity();
@@ -439,7 +415,6 @@
         }
     }
 
-    @Override
     public CrashReportCategory addWorldInfoToCrashReport(CrashReport report)
     {
         CrashReportCategory crashreportcategory = super.addWorldInfoToCrashReport(report);
@@ -474,17 +449,7 @@
         return crashreportcategory;
     }
 
-    @Override
-    public void playSound(
-        @Nullable EntityPlayer player,
-        double x,
-        double y,
-        double z,
-        SoundEvent soundIn,
-        SoundCategory category,
-        float volume,
-        float pitch
-    )
+    public void playSound(@Nullable EntityPlayer player, double x, double y, double z, SoundEvent soundIn, SoundCategory category, float volume, float pitch)
     {
         if (player == this.mc.player)
         {
@@ -494,39 +459,18 @@
 
     public void playSound(BlockPos pos, SoundEvent soundIn, SoundCategory category, float volume, float pitch, boolean distanceDelay)
     {
-        this.playSound(
-            (double)pos.getX() + 0.5,
-            (double)pos.getY() + 0.5,
-            (double)pos.getZ() + 0.5,
-            soundIn,
-            category,
-            volume,
-            pitch,
-            distanceDelay
-        );
+        this.playSound((double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, soundIn, category, volume, pitch, distanceDelay);
     }
 
-    @Override
-    public void playSound(
-        double x,
-        double y,
-        double z,
-        SoundEvent soundIn,
-        SoundCategory category,
-        float volume,
-        float pitch,
-        boolean distanceDelay
-    )
+    public void playSound(double x, double y, double z, SoundEvent soundIn, SoundCategory category, float volume, float pitch, boolean distanceDelay)
     {
         double d0 = this.mc.getRenderViewEntity().getDistanceSq(x, y, z);
-        PositionedSoundRecord positionedsoundrecord = new PositionedSoundRecord(
-            soundIn, category, volume, pitch, (float)x, (float)y, (float)z
-        );
+        PositionedSoundRecord positionedsoundrecord = new PositionedSoundRecord(soundIn, category, volume, pitch, (float)x, (float)y, (float)z);
 
-        if (distanceDelay && d0 > 100.0)
+        if (distanceDelay && d0 > 100.0D)
         {
-            double d1 = Math.sqrt(d0) / 40.0;
-            this.mc.getSoundHandler().playDelayedSound(positionedsoundrecord, (int)(d1 * 20.0));
+            double d1 = Math.sqrt(d0) / 40.0D;
+            this.mc.getSoundHandler().playDelayedSound(positionedsoundrecord, (int)(d1 * 20.0D));
         }
         else
         {
@@ -534,21 +478,11 @@
         }
     }
 
-    @Override
-    public void makeFireworks(
-        double x, double y, double z, double motionX, double motionY, double motionZ, @Nullable NBTTagCompound compound
-    )
+    public void makeFireworks(double x, double y, double z, double motionX, double motionY, double motionZ, @Nullable NBTTagCompound compound)
     {
-        this.mc
-        .effectRenderer
-        .addEffect(
-            new ParticleFirework.Starter(
-                this, x, y, z, motionX, motionY, motionZ, this.mc.effectRenderer, compound
-            )
-        );
+        this.mc.effectRenderer.addEffect(new ParticleFirework.Starter(this, x, y, z, motionX, motionY, motionZ, this.mc.effectRenderer, compound));
     }
 
-    @Override
     public void sendPacketToServer(Packet<?> packetIn)
     {
         this.connection.sendPacket(packetIn);
@@ -559,7 +493,6 @@
         this.worldScoreboard = scoreboardIn;
     }
 
-    @Override
     public void setWorldTime(long time)
     {
         if (time < 0L)
