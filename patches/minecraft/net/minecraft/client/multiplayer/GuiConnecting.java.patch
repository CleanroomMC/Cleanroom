--- before/net/minecraft/client/multiplayer/GuiConnecting.java
+++ after/net/minecraft/client/multiplayer/GuiConnecting.java
@@ -35,7 +35,7 @@
         this.mc = mcIn;
         this.previousGuiScreen = parent;
         ServerAddress serveraddress = ServerAddress.fromString(serverDataIn.serverIP);
-        mcIn.loadWorld(null);
+        mcIn.loadWorld((WorldClient)null);
         mcIn.setServerData(serverDataIn);
         this.connect(serveraddress.getIP(), serveraddress.getPort());
     }
@@ -44,16 +44,15 @@
     {
         this.mc = mcIn;
         this.previousGuiScreen = parent;
-        mcIn.loadWorld(null);
+        mcIn.loadWorld((WorldClient)null);
         this.connect(hostName, port);
     }
 
     private void connect(final String ip, final int port)
     {
-        LOGGER.info("Connecting to {}, {}", ip, port);
+        LOGGER.info("Connecting to {}, {}", ip, Integer.valueOf(port));
         (new Thread("Server Connector #" + CONNECTION_ID.incrementAndGet())
         {
-            @Override
             public void run()
             {
                 InetAddress inetaddress = null;
@@ -66,14 +65,9 @@
                     }
 
                     inetaddress = InetAddress.getByName(ip);
-                    GuiConnecting.this.networkManager = NetworkManager.createNetworkManagerAndConnect(
-                                                            inetaddress, port, GuiConnecting.this.mc.gameSettings.isUsingNativeTransport()
-                                                        );
-                    GuiConnecting.this.networkManager
-                    .setNetHandler(
-                        new NetHandlerLoginClient(GuiConnecting.this.networkManager, GuiConnecting.this.mc, GuiConnecting.this.previousGuiScreen)
-                    );
-                    GuiConnecting.this.networkManager.sendPacket(new C00Handshake(ip, port, EnumConnectionState.LOGIN));
+                    GuiConnecting.this.networkManager = NetworkManager.createNetworkManagerAndConnect(inetaddress, port, GuiConnecting.this.mc.gameSettings.isUsingNativeTransport());
+                    GuiConnecting.this.networkManager.setNetHandler(new NetHandlerLoginClient(GuiConnecting.this.networkManager, GuiConnecting.this.mc, GuiConnecting.this.previousGuiScreen));
+                    GuiConnecting.this.networkManager.sendPacket(new C00Handshake(ip, port, EnumConnectionState.LOGIN, true));
                     GuiConnecting.this.networkManager.sendPacket(new CPacketLoginStart(GuiConnecting.this.mc.getSession().getProfile()));
                 }
                 catch (UnknownHostException unknownhostexception)
@@ -84,12 +78,7 @@
                     }
 
                     GuiConnecting.LOGGER.error("Couldn't connect to server", (Throwable)unknownhostexception);
-                    GuiConnecting.this.mc
-                    .displayGuiScreen(
-                        new GuiDisconnected(
-                            GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", "Unknown host")
-                        )
-                    );
+                    GuiConnecting.this.mc.displayGuiScreen(new GuiDisconnected(GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[] {"Unknown host"})));
                 }
                 catch (Exception exception)
                 {
@@ -107,17 +96,12 @@
                         s = s.replaceAll(s1, "");
                     }
 
-                    GuiConnecting.this.mc
-                    .displayGuiScreen(
-                        new GuiDisconnected(GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", s))
-                    );
+                    GuiConnecting.this.mc.displayGuiScreen(new GuiDisconnected(GuiConnecting.this.previousGuiScreen, "connect.failed", new TextComponentTranslation("disconnect.genericReason", new Object[] {s})));
                 }
             }
-        })
-        .start();
+        }).start();
     }
 
-    @Override
     public void updateScreen()
     {
         if (this.networkManager != null)
@@ -133,19 +117,16 @@
         }
     }
 
-    @Override
     protected void keyTyped(char typedChar, int keyCode) throws IOException
     {
     }
 
-    @Override
     public void initGui()
     {
         this.buttonList.clear();
         this.buttonList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, I18n.format("gui.cancel")));
     }
 
-    @Override
     protected void actionPerformed(GuiButton button) throws IOException
     {
         if (button.id == 0)
@@ -161,7 +142,6 @@
         }
     }
 
-    @Override
     public void drawScreen(int mouseX, int mouseY, float partialTicks)
     {
         this.drawDefaultBackground();
