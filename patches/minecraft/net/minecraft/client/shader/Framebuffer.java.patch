--- before/net/minecraft/client/shader/Framebuffer.java
+++ after/net/minecraft/client/shader/Framebuffer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.shader;
 
+import java.nio.IntBuffer;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -110,15 +111,24 @@
 
             this.func_147607_a(9728);
             GlStateManager.func_179144_i(this.field_147617_g);
-            GlStateManager.func_187419_a(3553, 0, 32856, this.field_147622_a, this.field_147620_b, 0, 6408, 5121, null);
+            GlStateManager.func_187419_a(3553, 0, 32856, this.field_147622_a, this.field_147620_b, 0, 6408, 5121, (IntBuffer)null);
             OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, this.field_147616_f);
             OpenGlHelper.func_153188_a(OpenGlHelper.field_153198_e, OpenGlHelper.field_153200_g, 3553, this.field_147617_g, 0);
 
             if (this.field_147619_e)
             {
                 OpenGlHelper.func_153176_h(OpenGlHelper.field_153199_f, this.field_147624_h);
+                if (!this.stencilEnabled)
+                {
                 OpenGlHelper.func_153186_a(OpenGlHelper.field_153199_f, 33190, this.field_147622_a, this.field_147620_b);
                 OpenGlHelper.func_153190_b(OpenGlHelper.field_153198_e, OpenGlHelper.field_153201_h, OpenGlHelper.field_153199_f, this.field_147624_h);
+                }
+                else
+                {
+                    OpenGlHelper.func_153186_a(OpenGlHelper.field_153199_f, org.lwjgl.opengl.EXTPackedDepthStencil.GL_DEPTH24_STENCIL8_EXT, this.field_147622_a, this.field_147620_b);
+                    OpenGlHelper.func_153190_b(OpenGlHelper.field_153198_e, org.lwjgl.opengl.EXTFramebufferObject.GL_DEPTH_ATTACHMENT_EXT, OpenGlHelper.field_153199_f, this.field_147624_h);
+                    OpenGlHelper.func_153190_b(OpenGlHelper.field_153198_e, org.lwjgl.opengl.EXTFramebufferObject.GL_STENCIL_ATTACHMENT_EXT, OpenGlHelper.field_153199_f, this.field_147624_h);
+                }
             }
 
             this.func_147614_f();
@@ -228,7 +238,7 @@
             GlStateManager.func_179132_a(false);
             GlStateManager.func_179128_n(5889);
             GlStateManager.func_179096_D();
-            GlStateManager.func_179130_a(0.0, (double)p_178038_1_, (double)p_178038_2_, 0.0, 1000.0, 3000.0);
+            GlStateManager.func_179130_a(0.0D, (double)p_178038_1_, (double)p_178038_2_, 0.0D, 1000.0D, 3000.0D);
             GlStateManager.func_179128_n(5888);
             GlStateManager.func_179096_D();
             GlStateManager.func_179109_b(0.0F, 0.0F, -2000.0F);
@@ -252,10 +262,10 @@
             Tessellator tessellator = Tessellator.func_178181_a();
             BufferBuilder bufferbuilder = tessellator.func_178180_c();
             bufferbuilder.func_181668_a(7, DefaultVertexFormats.field_181709_i);
-            bufferbuilder.func_181662_b(0.0, (double)f1, 0.0).func_187315_a(0.0, 0.0).func_181669_b(255, 255, 255, 255).func_181675_d();
-            bufferbuilder.func_181662_b((double)f, (double)f1, 0.0).func_187315_a((double)f2, 0.0).func_181669_b(255, 255, 255, 255).func_181675_d();
-            bufferbuilder.func_181662_b((double)f, 0.0, 0.0).func_187315_a((double)f2, (double)f3).func_181669_b(255, 255, 255, 255).func_181675_d();
-            bufferbuilder.func_181662_b(0.0, 0.0, 0.0).func_187315_a(0.0, (double)f3).func_181669_b(255, 255, 255, 255).func_181675_d();
+            bufferbuilder.func_181662_b(0.0D, (double)f1, 0.0D).func_187315_a(0.0D, 0.0D).func_181669_b(255, 255, 255, 255).func_181675_d();
+            bufferbuilder.func_181662_b((double)f, (double)f1, 0.0D).func_187315_a((double)f2, 0.0D).func_181669_b(255, 255, 255, 255).func_181675_d();
+            bufferbuilder.func_181662_b((double)f, 0.0D, 0.0D).func_187315_a((double)f2, (double)f3).func_181669_b(255, 255, 255, 255).func_181675_d();
+            bufferbuilder.func_181662_b(0.0D, 0.0D, 0.0D).func_187315_a(0.0D, (double)f3).func_181669_b(255, 255, 255, 255).func_181675_d();
             tessellator.func_78381_a();
             this.func_147606_d();
             GlStateManager.func_179132_a(true);
@@ -271,11 +281,43 @@
 
         if (this.field_147619_e)
         {
-            GlStateManager.func_179151_a(1.0);
+            GlStateManager.func_179151_a(1.0D);
             i |= 256;
         }
 
         GlStateManager.func_179086_m(i);
         this.func_147609_e();
     }
+
+    /*================================ FORGE START ================================================*/
+    private boolean stencilEnabled = false;
+    /**
+     * Attempts to enabled 8 bits of stencil buffer on this FrameBuffer.
+     * Modders must call this directly to set things up.
+     * This is to prevent the default cause where graphics cards do not support stencil bits.
+     * Modders should check the below 'isStencilEnabled' to check if another modder has already enabled them.
+     *
+     * Note:
+     *   As of now the only thing that is checked is if FBOs are supported entirely, in the future
+     *   we may expand to check for errors.
+     *
+     * @return True if the FBO was re-initialized with stencil bits.
+     */
+    public boolean enableStencil()
+    {
+        if (!OpenGlHelper.func_148822_b()) return false;
+        stencilEnabled = true;
+        this.func_147613_a(field_147621_c, field_147618_d);
+        return true; //TODO: Find a way to detect if this failed?
+    }
+
+    /**
+     * Returns wither or not this FBO has been successfully initialized with stencil bits.
+     * If not, and a modder wishes it to be, they must call enableStencil.
+     */
+    public boolean isStencilEnabled()
+    {
+        return this.stencilEnabled;
+    }
+    /*================================ FORGE END   ================================================*/
 }
