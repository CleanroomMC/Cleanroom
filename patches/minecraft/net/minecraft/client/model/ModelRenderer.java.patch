--- before/net/minecraft/client/model/ModelRenderer.java
+++ after/net/minecraft/client/model/ModelRenderer.java
@@ -9,11 +9,10 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-@SideOnly(Side.CLIENT)
 public class ModelRenderer
 {
-    public float textureWidth = 64.0F;
-    public float textureHeight = 32.0F;
+    public float textureWidth;
+    public float textureHeight;
     private int textureOffsetX;
     private int textureOffsetY;
     public float rotationPointX;
@@ -25,9 +24,9 @@
     private boolean compiled;
     private int displayList;
     public boolean mirror;
-    public boolean showModel = true;
+    public boolean showModel;
     public boolean isHidden;
-    public List<ModelBox> cubeList = Lists.newArrayList();
+    public List<ModelBox> cubeList;
     public List<ModelRenderer> childModels;
     public final String boxName;
     private final ModelBase baseModel;
@@ -37,6 +36,10 @@
 
     public ModelRenderer(ModelBase model, String boxNameIn)
     {
+        this.textureWidth = 64.0F;
+        this.textureHeight = 32.0F;
+        this.showModel = true;
+        this.cubeList = Lists.<ModelBox>newArrayList();
         this.baseModel = model;
         model.boxList.add(this);
         this.boxName = boxNameIn;
@@ -45,7 +48,7 @@
 
     public ModelRenderer(ModelBase model)
     {
-        this(model, null);
+        this(model, (String)null);
     }
 
     public ModelRenderer(ModelBase model, int texOffX, int texOffY)
@@ -58,7 +61,7 @@
     {
         if (this.childModels == null)
         {
-            this.childModels = Lists.newArrayList();
+            this.childModels = Lists.<ModelRenderer>newArrayList();
         }
 
         this.childModels.add(renderer);
@@ -76,38 +79,25 @@
         partName = this.boxName + "." + partName;
         TextureOffset textureoffset = this.baseModel.getTextureOffset(partName);
         this.setTextureOffset(textureoffset.textureOffsetX, textureoffset.textureOffsetY);
-        this.cubeList
-        .add(
-            new ModelBox(this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, 0.0F)
-            .setBoxName(partName)
-        );
+        this.cubeList.add((new ModelBox(this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, 0.0F)).setBoxName(partName));
         return this;
     }
 
     public ModelRenderer addBox(float offX, float offY, float offZ, int width, int height, int depth)
     {
-        this.cubeList
-        .add(new ModelBox(this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, 0.0F));
+        this.cubeList.add(new ModelBox(this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, 0.0F));
         return this;
     }
 
-    public ModelRenderer addBox(
-        float offX, float offY, float offZ, int width, int height, int depth, boolean mirrored
-    )
+    public ModelRenderer addBox(float offX, float offY, float offZ, int width, int height, int depth, boolean mirrored)
     {
-        this.cubeList
-        .add(
-            new ModelBox(
-                this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, 0.0F, mirrored
-            )
-        );
+        this.cubeList.add(new ModelBox(this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, 0.0F, mirrored));
         return this;
     }
 
     public void addBox(float offX, float offY, float offZ, int width, int height, int depth, float scaleFactor)
     {
-        this.cubeList
-        .add(new ModelBox(this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, scaleFactor));
+        this.cubeList.add(new ModelBox(this, this.textureOffsetX, this.textureOffsetY, offX, offY, offZ, width, height, depth, scaleFactor));
     }
 
     public void setRotationPoint(float rotationPointXIn, float rotationPointYIn, float rotationPointZIn)
@@ -117,6 +107,7 @@
         this.rotationPointZ = rotationPointZIn;
     }
 
+    @SideOnly(Side.CLIENT)
     public void render(float scale)
     {
         if (!this.isHidden)
@@ -130,71 +121,75 @@
 
                 GlStateManager.translate(this.offsetX, this.offsetY, this.offsetZ);
 
-                if (this.rotateAngleX != 0.0F || this.rotateAngleY != 0.0F || this.rotateAngleZ != 0.0F)
+                if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
+                {
+                    if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
+                    {
+                        GlStateManager.callList(this.displayList);
+
+                        if (this.childModels != null)
+                        {
+                            for (int k = 0; k < this.childModels.size(); ++k)
+                            {
+                                ((ModelRenderer)this.childModels.get(k)).render(scale);
+                            }
+                        }
+                    }
+                    else
+                    {
+                        GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
+                        GlStateManager.callList(this.displayList);
+
+                        if (this.childModels != null)
+                        {
+                            for (int j = 0; j < this.childModels.size(); ++j)
+                            {
+                                ((ModelRenderer)this.childModels.get(j)).render(scale);
+                            }
+                        }
+
+                        GlStateManager.translate(-this.rotationPointX * scale, -this.rotationPointY * scale, -this.rotationPointZ * scale);
+                    }
+                }
+                else
                 {
                     GlStateManager.pushMatrix();
                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
 
                     if (this.rotateAngleZ != 0.0F)
                     {
-                        GlStateManager.rotate(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+                        GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                     }
 
                     if (this.rotateAngleY != 0.0F)
                     {
-                        GlStateManager.rotate(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
+                        GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
                     }
 
                     if (this.rotateAngleX != 0.0F)
                     {
-                        GlStateManager.rotate(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+                        GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                     }
 
                     GlStateManager.callList(this.displayList);
 
                     if (this.childModels != null)
                     {
-                        for (int k = 0; k < this.childModels.size(); k++)
+                        for (int i = 0; i < this.childModels.size(); ++i)
                         {
-                            this.childModels.get(k).render(scale);
+                            ((ModelRenderer)this.childModels.get(i)).render(scale);
                         }
                     }
 
                     GlStateManager.popMatrix();
                 }
-                else if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
-                {
-                    GlStateManager.callList(this.displayList);
-
-                    if (this.childModels != null)
-                    {
-                        for (int j = 0; j < this.childModels.size(); j++)
-                        {
-                            this.childModels.get(j).render(scale);
-                        }
-                    }
-                }
-                else
-                {
-                    GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
-                    GlStateManager.callList(this.displayList);
-
-                    if (this.childModels != null)
-                    {
-                        for (int i = 0; i < this.childModels.size(); i++)
-                        {
-                            this.childModels.get(i).render(scale);
-                        }
-                    }
-
-                    GlStateManager.translate(-this.rotationPointX * scale, -this.rotationPointY * scale, -this.rotationPointZ * scale);
-                }
 
                 GlStateManager.translate(-this.offsetX, -this.offsetY, -this.offsetZ);
             }
         }
     }
 
+    @SideOnly(Side.CLIENT)
     public void renderWithRotation(float scale)
     {
         if (!this.isHidden)
@@ -211,17 +206,17 @@
 
                 if (this.rotateAngleY != 0.0F)
                 {
-                    GlStateManager.rotate(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
+                    GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
                 }
 
                 if (this.rotateAngleX != 0.0F)
                 {
-                    GlStateManager.rotate(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+                    GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                 }
 
                 if (this.rotateAngleZ != 0.0F)
                 {
-                    GlStateManager.rotate(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+                    GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                 }
 
                 GlStateManager.callList(this.displayList);
@@ -230,6 +225,7 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
     public void postRender(float scale)
     {
         if (!this.isHidden)
@@ -241,42 +237,46 @@
                     this.compileDisplayList(scale);
                 }
 
-                if (this.rotateAngleX != 0.0F || this.rotateAngleY != 0.0F || this.rotateAngleZ != 0.0F)
+                if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
+                {
+                    if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
+                    {
+                        GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
+                    }
+                }
+                else
                 {
                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
 
                     if (this.rotateAngleZ != 0.0F)
                     {
-                        GlStateManager.rotate(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+                        GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                     }
 
                     if (this.rotateAngleY != 0.0F)
                     {
-                        GlStateManager.rotate(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
+                        GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
                     }
 
                     if (this.rotateAngleX != 0.0F)
                     {
-                        GlStateManager.rotate(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+                        GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                     }
-                }
-                else if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
-                {
-                    GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
                 }
             }
         }
     }
 
+    @SideOnly(Side.CLIENT)
     private void compileDisplayList(float scale)
     {
         this.displayList = GLAllocation.generateDisplayLists(1);
         GlStateManager.glNewList(this.displayList, 4864);
         BufferBuilder bufferbuilder = Tessellator.getInstance().getBuffer();
 
-        for (int i = 0; i < this.cubeList.size(); i++)
+        for (int i = 0; i < this.cubeList.size(); ++i)
         {
-            this.cubeList.get(i).render(bufferbuilder, scale);
+            ((ModelBox)this.cubeList.get(i)).render(bufferbuilder, scale);
         }
 
         GlStateManager.glEndList();
