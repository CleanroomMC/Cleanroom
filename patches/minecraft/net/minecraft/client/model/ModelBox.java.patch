--- before/net/minecraft/client/model/ModelBox.java
+++ after/net/minecraft/client/model/ModelBox.java
@@ -4,7 +4,6 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-@SideOnly(Side.CLIENT)
 public class ModelBox
 {
     private final PositionTextureVertex[] vertexPositions;
@@ -17,47 +16,12 @@
     public final float posZ2;
     public String boxName;
 
-    public ModelBox(
-        ModelRenderer renderer,
-        int texU,
-        int texV,
-        float x,
-        float y,
-        float z,
-        int dx,
-        int dy,
-        int dz,
-        float delta
-    )
+    public ModelBox(ModelRenderer renderer, int texU, int texV, float x, float y, float z, int dx, int dy, int dz, float delta)
     {
-        this(
-            renderer,
-            texU,
-            texV,
-            x,
-            y,
-            z,
-            dx,
-            dy,
-            dz,
-            delta,
-            renderer.mirror
-        );
+        this(renderer, texU, texV, x, y, z, dx, dy, dz, delta, renderer.mirror);
     }
 
-    public ModelBox(
-        ModelRenderer renderer,
-        int texU,
-        int texV,
-        float x,
-        float y,
-        float z,
-        int dx,
-        int dy,
-        int dz,
-        float delta,
-        boolean mirror
-    )
+    public ModelBox(ModelRenderer renderer, int texU, int texV, float x, float y, float z, int dx, int dy, int dz, float delta, boolean mirror)
     {
         this.posX1 = x;
         this.posY1 = y;
@@ -70,12 +34,12 @@
         float f = x + (float)dx;
         float f1 = y + (float)dy;
         float f2 = z + (float)dz;
-        x -= delta;
-        y -= delta;
-        z -= delta;
-        f += delta;
-        f1 += delta;
-        f2 += delta;
+        x = x - delta;
+        y = y - delta;
+        z = z - delta;
+        f = f + delta;
+        f1 = f1 + delta;
+        f2 = f2 + delta;
 
         if (mirror)
         {
@@ -100,60 +64,12 @@
         this.vertexPositions[5] = positiontexturevertex4;
         this.vertexPositions[6] = positiontexturevertex5;
         this.vertexPositions[7] = positiontexturevertex6;
-        this.quadList[0] = new TexturedQuad(
-            new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex, positiontexturevertex1, positiontexturevertex5},
-            texU + dz + dx,
-            texV + dz,
-            texU + dz + dx + dz,
-            texV + dz + dy,
-            renderer.textureWidth,
-            renderer.textureHeight
-        );
-        this.quadList[1] = new TexturedQuad(
-            new PositionTextureVertex[] {positiontexturevertex7, positiontexturevertex3, positiontexturevertex6, positiontexturevertex2},
-            texU,
-            texV + dz,
-            texU + dz,
-            texV + dz + dy,
-            renderer.textureWidth,
-            renderer.textureHeight
-        );
-        this.quadList[2] = new TexturedQuad(
-            new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex3, positiontexturevertex7, positiontexturevertex},
-            texU + dz,
-            texV,
-            texU + dz + dx,
-            texV + dz,
-            renderer.textureWidth,
-            renderer.textureHeight
-        );
-        this.quadList[3] = new TexturedQuad(
-            new PositionTextureVertex[] {positiontexturevertex1, positiontexturevertex2, positiontexturevertex6, positiontexturevertex5},
-            texU + dz + dx,
-            texV + dz,
-            texU + dz + dx + dx,
-            texV,
-            renderer.textureWidth,
-            renderer.textureHeight
-        );
-        this.quadList[4] = new TexturedQuad(
-            new PositionTextureVertex[] {positiontexturevertex, positiontexturevertex7, positiontexturevertex2, positiontexturevertex1},
-            texU + dz,
-            texV + dz,
-            texU + dz + dx,
-            texV + dz + dy,
-            renderer.textureWidth,
-            renderer.textureHeight
-        );
-        this.quadList[5] = new TexturedQuad(
-            new PositionTextureVertex[] {positiontexturevertex3, positiontexturevertex4, positiontexturevertex5, positiontexturevertex6},
-            texU + dz + dx + dz,
-            texV + dz,
-            texU + dz + dx + dz + dx,
-            texV + dz + dy,
-            renderer.textureWidth,
-            renderer.textureHeight
-        );
+        this.quadList[0] = new TexturedQuad(new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex, positiontexturevertex1, positiontexturevertex5}, texU + dz + dx, texV + dz, texU + dz + dx + dz, texV + dz + dy, renderer.textureWidth, renderer.textureHeight);
+        this.quadList[1] = new TexturedQuad(new PositionTextureVertex[] {positiontexturevertex7, positiontexturevertex3, positiontexturevertex6, positiontexturevertex2}, texU, texV + dz, texU + dz, texV + dz + dy, renderer.textureWidth, renderer.textureHeight);
+        this.quadList[2] = new TexturedQuad(new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex3, positiontexturevertex7, positiontexturevertex}, texU + dz, texV, texU + dz + dx, texV + dz, renderer.textureWidth, renderer.textureHeight);
+        this.quadList[3] = new TexturedQuad(new PositionTextureVertex[] {positiontexturevertex1, positiontexturevertex2, positiontexturevertex6, positiontexturevertex5}, texU + dz + dx, texV + dz, texU + dz + dx + dx, texV, renderer.textureWidth, renderer.textureHeight);
+        this.quadList[4] = new TexturedQuad(new PositionTextureVertex[] {positiontexturevertex, positiontexturevertex7, positiontexturevertex2, positiontexturevertex1}, texU + dz, texV + dz, texU + dz + dx, texV + dz + dy, renderer.textureWidth, renderer.textureHeight);
+        this.quadList[5] = new TexturedQuad(new PositionTextureVertex[] {positiontexturevertex3, positiontexturevertex4, positiontexturevertex5, positiontexturevertex6}, texU + dz + dx + dz, texV + dz, texU + dz + dx + dz + dx, texV + dz + dy, renderer.textureWidth, renderer.textureHeight);
 
         if (mirror)
         {
@@ -164,6 +80,7 @@
         }
     }
 
+    @SideOnly(Side.CLIENT)
     public void render(BufferBuilder renderer, float scale)
     {
         for (TexturedQuad texturedquad : this.quadList)
