--- before/net/minecraft/client/resources/SimpleReloadableResourceManager.java
+++ after/net/minecraft/client/resources/SimpleReloadableResourceManager.java
@@ -24,9 +24,9 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Joiner JOINER_RESOURCE_PACKS = Joiner.on(", ");
-    private final Map<String, FallbackResourceManager> domainResourceManagers = Maps.newHashMap();
-    private final List<IResourceManagerReloadListener> reloadListeners = Lists.newArrayList();
-    private final Set<String> setResourceDomains = Sets.newLinkedHashSet();
+    private final Map<String, FallbackResourceManager> domainResourceManagers = Maps.<String, FallbackResourceManager>newHashMap();
+    private final List<IResourceManagerReloadListener> reloadListeners = Lists.<IResourceManagerReloadListener>newArrayList();
+    private final Set<String> setResourceDomains = Sets.<String>newLinkedHashSet();
     private final MetadataSerializer rmMetadataSerializer;
 
     public SimpleReloadableResourceManager(MetadataSerializer rmMetadataSerializerIn)
@@ -51,13 +51,11 @@
         }
     }
 
-    @Override
     public Set<String> getResourceDomains()
     {
         return this.setResourceDomains;
     }
 
-    @Override
     public IResource getResource(ResourceLocation location) throws IOException
     {
         IResourceManager iresourcemanager = this.domainResourceManagers.get(location.getNamespace());
@@ -72,7 +70,6 @@
         }
     }
 
-    @Override
     public List<IResource> getAllResources(ResourceLocation location) throws IOException
     {
         IResourceManager iresourcemanager = this.domainResourceManagers.get(location.getNamespace());
@@ -93,11 +90,11 @@
         this.setResourceDomains.clear();
     }
 
-    @Override
     public void reloadResources(List<IResourcePack> resourcesPacksList)
     {
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar resReload = net.minecraftforge.fml.common.ProgressManager.push("Loading Resources", resourcesPacksList.size()+1, true);
         this.clearResources();
-        LOGGER.info("Reloading ResourceManager: {}", JOINER_RESOURCE_PACKS.join(Iterables.transform(resourcesPacksList, new Function<IResourcePack, String>()
+        LOGGER.info("Reloading ResourceManager: {}", (Object)JOINER_RESOURCE_PACKS.join(Iterables.transform(resourcesPacksList, new Function<IResourcePack, String>()
         {
             public String apply(@Nullable IResourcePack p_apply_1_)
             {
@@ -107,24 +104,33 @@
 
         for (IResourcePack iresourcepack : resourcesPacksList)
         {
+            resReload.step(iresourcepack.getPackName());
             this.reloadResourcePack(iresourcepack);
         }
 
+        resReload.step("Reloading listeners");
         this.notifyReloadListeners();
+        net.minecraftforge.fml.common.ProgressManager.pop(resReload);
     }
 
-    @Override
     public void registerReloadListener(IResourceManagerReloadListener reloadListener)
     {
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar resReload = net.minecraftforge.fml.common.ProgressManager.push("Loading Resource", 1);
+        resReload.step(reloadListener.getClass());
         this.reloadListeners.add(reloadListener);
         reloadListener.onResourceManagerReload(this);
+        net.minecraftforge.fml.common.ProgressManager.pop(resReload);
     }
 
     private void notifyReloadListeners()
     {
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar resReload = net.minecraftforge.fml.common.ProgressManager.push("Reloading", this.reloadListeners.size());
         for (IResourceManagerReloadListener iresourcemanagerreloadlistener : this.reloadListeners)
         {
+            resReload.step(iresourcemanagerreloadlistener.getClass());
+            if (!net.minecraftforge.client.ForgeHooksClient.shouldUseVanillaReloadableListener(iresourcemanagerreloadlistener)) continue; // Forge: Selective reloading for vanilla listeners
             iresourcemanagerreloadlistener.onResourceManagerReload(this);
         }
+        net.minecraftforge.fml.common.ProgressManager.pop(resReload);
     }
 }
