--- before/net/minecraft/client/resources/ResourcePackRepository.java
+++ after/net/minecraft/client/resources/ResourcePackRepository.java
@@ -13,11 +13,13 @@
 import java.io.FileFilter;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.Executor;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
@@ -38,6 +40,7 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.comparator.LastModifiedFileComparator;
+import org.apache.commons.io.filefilter.IOFileFilter;
 import org.apache.commons.io.filefilter.TrueFileFilter;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -48,11 +51,10 @@
     private static final Logger LOGGER = LogManager.getLogger();
     private static final FileFilter RESOURCE_PACK_FILTER = new FileFilter()
     {
-        @Override
         public boolean accept(File p_accept_1_)
         {
             boolean flag = p_accept_1_.isFile() && p_accept_1_.getName().endsWith(".zip");
-            boolean flag1 = p_accept_1_.isDirectory() && new File(p_accept_1_, "pack.mcmeta").isFile();
+            boolean flag1 = p_accept_1_.isDirectory() && (new File(p_accept_1_, "pack.mcmeta")).isFile();
             return flag || flag1;
         }
     };
@@ -65,8 +67,8 @@
     private IResourcePack serverResourcePack;
     private final ReentrantLock lock = new ReentrantLock();
     private ListenableFuture<Object> downloadingPacks;
-    private List<ResourcePackRepository.Entry> repositoryEntriesAll = Lists.newArrayList();
-    private final List<ResourcePackRepository.Entry> repositoryEntries = Lists.newArrayList();
+    private List<ResourcePackRepository.Entry> repositoryEntriesAll = Lists.<ResourcePackRepository.Entry>newArrayList();
+    private final List<ResourcePackRepository.Entry> repositoryEntries = Lists.<ResourcePackRepository.Entry>newArrayList();
 
     public ResourcePackRepository(File dirResourcepacksIn, File dirServerResourcepacksIn, IResourcePack rprDefaultResourcePackIn, MetadataSerializer rprMetadataSerializerIn, GameSettings settings)
     {
@@ -93,7 +95,7 @@
                     }
 
                     iterator.remove();
-                    LOGGER.warn("Removed selected resource pack {} because it's no longer compatible", resourcepackrepository$entry.getResourcePackName());
+                    LOGGER.warn("Removed selected resource pack {} because it's no longer compatible", (Object)resourcepackrepository$entry.getResourcePackName());
                 }
             }
         }
@@ -101,7 +103,7 @@
 
     public static Map<String, String> getDownloadHeaders()
     {
-        Map<String, String> map = Maps.newHashMap();
+        Map<String, String> map = Maps.<String, String>newHashMap();
         map.put("X-Minecraft-Username", Minecraft.getMinecraft().getSession().getUsername());
         map.put("X-Minecraft-UUID", Minecraft.getMinecraft().getSession().getPlayerID());
         map.put("X-Minecraft-Version", "1.12.2");
@@ -114,12 +116,12 @@
         {
             if (!this.dirResourcepacks.isDirectory() && (!this.dirResourcepacks.delete() || !this.dirResourcepacks.mkdirs()))
             {
-                LOGGER.warn("Unable to recreate resourcepack folder, it exists but is not a directory: {}", this.dirResourcepacks);
+                LOGGER.warn("Unable to recreate resourcepack folder, it exists but is not a directory: {}", (Object)this.dirResourcepacks);
             }
         }
         else if (!this.dirResourcepacks.mkdirs())
         {
-            LOGGER.warn("Unable to create resourcepack folder: {}", this.dirResourcepacks);
+            LOGGER.warn("Unable to create resourcepack folder: {}", (Object)this.dirResourcepacks);
         }
     }
 
@@ -143,15 +145,16 @@
 
         try
         {
-            PackMetadataSection packmetadatasection = iresourcepack.getPackMetadata(this.rprMetadataSerializer, "pack");
+            PackMetadataSection packmetadatasection = (PackMetadataSection)iresourcepack.getPackMetadata(this.rprMetadataSerializer, "pack");
 
             if (packmetadatasection != null && packmetadatasection.getPackFormat() == 2)
             {
                 return new LegacyV2Adapter(iresourcepack);
             }
         }
-        catch (Exception exception)
+        catch (Exception var4)
         {
+            ;
         }
 
         return iresourcepack;
@@ -159,7 +162,7 @@
 
     public void updateRepositoryEntriesAll()
     {
-        List<ResourcePackRepository.Entry> list = Lists.newArrayList();
+        List<ResourcePackRepository.Entry> list = Lists.<ResourcePackRepository.Entry>newArrayList();
 
         for (File file1 : this.getResourcePackFiles())
         {
@@ -181,7 +184,7 @@
                     resourcepackrepository$entry.updateResourcePack();
                     list.add(resourcepackrepository$entry);
                 }
-                catch (Exception exception)
+                catch (Exception var6)
                 {
                     list.remove(resourcepackrepository$entry);
                 }
@@ -210,8 +213,9 @@
                 resourcepackrepository$entry.updateResourcePack();
                 return resourcepackrepository$entry;
             }
-            catch (IOException ioexception)
+            catch (IOException var3)
             {
+                ;
             }
         }
 
@@ -254,10 +258,11 @@
             {
                 if (this.checkHash(s1, file1))
                 {
-                    return this.setServerResourcePack(file1);
+                    ListenableFuture listenablefuture1 = this.setServerResourcePack(file1);
+                    return listenablefuture1;
                 }
 
-                LOGGER.warn("Deleting file {}", file1);
+                LOGGER.warn("Deleting file {}", (Object)file1);
                 FileUtils.deleteQuietly(file1);
             }
 
@@ -267,37 +272,29 @@
             final Minecraft minecraft = Minecraft.getMinecraft();
             Futures.getUnchecked(minecraft.addScheduledTask(new Runnable()
             {
-                @Override
                 public void run()
                 {
                     minecraft.displayGuiScreen(guiscreenworking);
                 }
             }));
-            final SettableFuture<Object> settablefuture = SettableFuture.create();
+            final SettableFuture<Object> settablefuture = SettableFuture.<Object>create();
             this.downloadingPacks = HttpUtil.downloadResourcePack(file1, url, map, 52428800, guiscreenworking, minecraft.getProxy());
-            Futures.addCallback(this.downloadingPacks, new FutureCallback<Object>()
-            {
-                @Override
-                public void onSuccess(@Nullable Object p_onSuccess_1_)
-                {
-                    if (ResourcePackRepository.this.checkHash(s1, file1))
-                    {
+            Futures.addCallback(this.downloadingPacks, new FutureCallback<Object>() {
+                public void onSuccess(@Nullable Object p_onSuccess_1_) {
+                    if (ResourcePackRepository.this.checkHash(s1, file1)) {
                         ResourcePackRepository.this.setServerResourcePack(file1);
-                        settablefuture.set(null);
-                    }
-                    else
-                    {
-                        ResourcePackRepository.LOGGER.warn("Deleting file {}", file1);
+                        settablefuture.set((Object) null);
+                    } else {
+                        ResourcePackRepository.LOGGER.warn("Deleting file {}", (Object) file1);
                         FileUtils.deleteQuietly(file1);
                     }
                 }
-                @Override
-                public void onFailure(Throwable p_onFailure_1_)
-                {
+
+                public void onFailure(Throwable p_onFailure_1_) {
                     FileUtils.deleteQuietly(file1);
                     settablefuture.setException(p_onFailure_1_);
                 }
-            });
+            }, Runnable::run);
             return this.downloadingPacks;
         }
         finally
@@ -308,13 +305,14 @@
 
     private boolean checkHash(String p_190113_1_, File p_190113_2_)
     {
+        InputStream is = null;
         try
         {
-            String s = DigestUtils.sha1Hex(new FileInputStream(p_190113_2_));
+            String s = DigestUtils.sha1Hex(is = (InputStream)(new FileInputStream(p_190113_2_)));
 
             if (p_190113_1_.isEmpty())
             {
-                LOGGER.info("Found file {} without verification hash", p_190113_2_);
+                LOGGER.info("Found file {} without verification hash", (Object)p_190113_2_);
                 return true;
             }
 
@@ -330,6 +328,7 @@
         {
             LOGGER.warn("File {} couldn't be hashed.", p_190113_2_, ioexception);
         }
+        finally { IOUtils.closeQuietly(is); } // Forge: close stream after use
 
         return false;
     }
@@ -354,7 +353,7 @@
     {
         try
         {
-            List<File> list = Lists.newArrayList(FileUtils.listFiles(this.dirServerResourcepacks, TrueFileFilter.TRUE, null));
+            List<File> list = Lists.newArrayList(FileUtils.listFiles(this.dirServerResourcepacks, TrueFileFilter.TRUE, (IOFileFilter)null));
             Collections.sort(list, LastModifiedFileComparator.LASTMODIFIED_REVERSE);
             int i = 0;
 
@@ -362,14 +361,14 @@
             {
                 if (i++ >= 10)
                 {
-                    LOGGER.info("Deleting old server resource pack {}", file1.getName());
+                    LOGGER.info("Deleting old server resource pack {}", (Object)file1.getName());
                     FileUtils.deleteQuietly(file1);
                 }
             }
         }
         catch (IllegalArgumentException illegalargumentexception)
         {
-            LOGGER.error("Error while deleting old server resource pack : {}", illegalargumentexception.getMessage());
+            LOGGER.error("Error while deleting old server resource pack : {}", (Object)illegalargumentexception.getMessage());
         }
     }
 
@@ -377,7 +376,7 @@
     {
         if (!this.validatePack(resourceFile))
         {
-            return Futures.immediateFailedFuture(new RuntimeException("Invalid resourcepack"));
+            return Futures.<Object>immediateFailedFuture(new RuntimeException("Invalid resourcepack"));
         }
         else
         {
@@ -436,7 +435,7 @@
 
         public void updateResourcePack() throws IOException
         {
-            this.rePackMetadataSection = this.reResourcePack.getPackMetadata(ResourcePackRepository.this.rprMetadataSerializer, "pack");
+            this.rePackMetadataSection = (PackMetadataSection)this.reResourcePack.getPackMetadata(ResourcePackRepository.this.rprMetadataSerializer, "pack");
             this.closeResourcePack();
         }
 
@@ -448,17 +447,16 @@
             {
                 bufferedimage = this.reResourcePack.getPackImage();
             }
-            catch (IOException ioexception1)
+            catch (IOException var5)
             {
+                ;
             }
 
             if (bufferedimage == null)
             {
                 try
                 {
-                    bufferedimage = TextureUtil.readBufferedImage(
-                                        Minecraft.getMinecraft().getResourceManager().getResource(ResourcePackRepository.UNKNOWN_PACK_TEXTURE).getInputStream()
-                                    );
+                    bufferedimage = TextureUtil.readBufferedImage(Minecraft.getMinecraft().getResourceManager().getResource(ResourcePackRepository.UNKNOWN_PACK_TEXTURE).getInputStream());
                 }
                 catch (IOException ioexception)
                 {
@@ -494,9 +492,7 @@
 
         public String getTexturePackDescription()
         {
-            return this.rePackMetadataSection == null
-                   ? TextFormatting.RED + "Invalid pack.mcmeta (or missing 'pack' section)"
-                   : this.rePackMetadataSection.getPackDescription().getFormattedText();
+            return this.rePackMetadataSection == null ? TextFormatting.RED + "Invalid pack.mcmeta (or missing 'pack' section)" : this.rePackMetadataSection.getPackDescription().getFormattedText();
         }
 
         public int getPackFormat()
@@ -504,7 +500,6 @@
             return this.rePackMetadataSection == null ? 0 : this.rePackMetadataSection.getPackFormat();
         }
 
-        @Override
         public boolean equals(Object p_equals_1_)
         {
             if (this == p_equals_1_)
@@ -517,13 +512,11 @@
             }
         }
 
-        @Override
         public int hashCode()
         {
             return this.toString().hashCode();
         }
 
-        @Override
         public String toString()
         {
             return String.format("%s:%s", this.reResourcePack.getPackName(), this.reResourcePack instanceof FolderResourcePack ? "folder" : "zip");
