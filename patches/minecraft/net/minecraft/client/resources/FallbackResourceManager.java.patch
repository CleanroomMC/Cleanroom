--- before/net/minecraft/client/resources/FallbackResourceManager.java
+++ after/net/minecraft/client/resources/FallbackResourceManager.java
@@ -20,7 +20,7 @@
 public class FallbackResourceManager implements IResourceManager
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    protected final List<IResourcePack> resourcePacks = Lists.newArrayList();
+    protected final List<IResourcePack> resourcePacks = Lists.<IResourcePack>newArrayList();
     private final MetadataSerializer frmMetadataSerializer;
 
     public FallbackResourceManager(MetadataSerializer frmMetadataSerializerIn)
@@ -33,20 +33,18 @@
         this.resourcePacks.add(resourcePack);
     }
 
-    @Override
     public Set<String> getResourceDomains()
     {
-        return Collections.emptySet();
+        return Collections.<String>emptySet();
     }
 
-    @Override
     public IResource getResource(ResourceLocation location) throws IOException
     {
         this.checkResourcePath(location);
         IResourcePack iresourcepack = null;
         ResourceLocation resourcelocation = getLocationMcmeta(location);
 
-        for (int i = this.resourcePacks.size() - 1; i >= 0; i--)
+        for (int i = this.resourcePacks.size() - 1; i >= 0; --i)
         {
             IResourcePack iresourcepack1 = this.resourcePacks.get(i);
 
@@ -64,21 +62,18 @@
                     inputstream = this.getInputStream(resourcelocation, iresourcepack);
                 }
 
-                return new SimpleResource(
-                           iresourcepack1.getPackName(), location, this.getInputStream(location, iresourcepack1), inputstream, this.frmMetadataSerializer
-                       );
+                return new SimpleResource(iresourcepack1.getPackName(), location, this.getInputStream(location, iresourcepack1), inputstream, this.frmMetadataSerializer);
             }
         }
 
         throw new FileNotFoundException(location.toString());
     }
 
+    @SuppressWarnings("resource")
     protected InputStream getInputStream(ResourceLocation location, IResourcePack resourcePack) throws IOException
     {
         InputStream inputstream = resourcePack.getInputStream(location);
-        return (InputStream)(LOGGER.isDebugEnabled()
-                             ? new FallbackResourceManager.InputStreamLeakedResourceLogger(inputstream, location, resourcePack.getPackName())
-                             : inputstream);
+        return (InputStream)(LOGGER.isDebugEnabled() ? new FallbackResourceManager.InputStreamLeakedResourceLogger(inputstream, location, resourcePack.getPackName()) : inputstream);
     }
 
     private void checkResourcePath(ResourceLocation p_188552_1_) throws IOException
@@ -89,11 +84,10 @@
         }
     }
 
-    @Override
     public List<IResource> getAllResources(ResourceLocation location) throws IOException
     {
         this.checkResourcePath(location);
-        List<IResource> list = Lists.newArrayList();
+        List<IResource> list = Lists.<IResource>newArrayList();
         ResourceLocation resourcelocation = getLocationMcmeta(location);
 
         for (IResourcePack iresourcepack : this.resourcePacks)
@@ -101,9 +95,7 @@
             if (iresourcepack.resourceExists(location))
             {
                 InputStream inputstream = iresourcepack.resourceExists(resourcelocation) ? this.getInputStream(resourcelocation, iresourcepack) : null;
-                list.add(
-                    new SimpleResource(iresourcepack.getPackName(), location, this.getInputStream(location, iresourcepack), inputstream, this.frmMetadataSerializer)
-                );
+                list.add(new SimpleResource(iresourcepack.getPackName(), location, this.getInputStream(location, iresourcepack), inputstream, this.frmMetadataSerializer));
             }
         }
 
@@ -133,29 +125,17 @@
             {
                 this.inputStream = p_i46093_1_;
                 ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
-                new Exception().printStackTrace(new PrintStream(bytearrayoutputstream));
+                (new Exception()).printStackTrace(new PrintStream(bytearrayoutputstream));
                 this.message = "Leaked resource: '" + location + "' loaded from pack: '" + resourcePack + "'\n" + bytearrayoutputstream;
             }
 
-            @Override
             public void close() throws IOException
             {
                 this.inputStream.close();
                 this.isClosed = true;
             }
 
-            @Override
-            protected void finalize() throws Throwable
-            {
-                if (!this.isClosed)
-                {
-                    FallbackResourceManager.LOGGER.warn(this.message);
-                }
-
-                super.finalize();
-            }
-
-            @Override
+
             public int read() throws IOException
             {
                 return this.inputStream.read();
