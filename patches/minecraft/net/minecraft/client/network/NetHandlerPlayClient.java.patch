--- before/net/minecraft/client/network/NetHandlerPlayClient.java
+++ after/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -14,11 +14,13 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
 import java.util.Map.Entry;
+import java.util.function.Consumer;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.block.Block;
@@ -48,7 +50,6 @@
 import net.minecraft.client.gui.inventory.GuiContainerCreative;
 import net.minecraft.client.gui.recipebook.GuiRecipeBook;
 import net.minecraft.client.gui.recipebook.IRecipeShownListener;
-import net.minecraft.client.gui.recipebook.RecipeList;
 import net.minecraft.client.gui.toasts.RecipeToast;
 import net.minecraft.client.multiplayer.ClientAdvancementManager;
 import net.minecraft.client.multiplayer.PlayerControllerMP;
@@ -75,6 +76,7 @@
 import net.minecraft.entity.NpcMerchant;
 import net.minecraft.entity.ai.attributes.AbstractAttributeMap;
 import net.minecraft.entity.ai.attributes.AttributeModifier;
+import net.minecraft.entity.ai.attributes.IAttribute;
 import net.minecraft.entity.ai.attributes.IAttributeInstance;
 import net.minecraft.entity.ai.attributes.RangedAttribute;
 import net.minecraft.entity.effect.EntityLightningBolt;
@@ -269,7 +271,7 @@
     private Minecraft client;
     private WorldClient world;
     private boolean doneLoadingTerrain;
-    private final Map<UUID, NetworkPlayerInfo> playerInfoMap = Maps.newHashMap();
+    private final Map<UUID, NetworkPlayerInfo> playerInfoMap = Maps.<UUID, NetworkPlayerInfo>newHashMap();
     public int currentServerMaxPlayers = 20;
     private boolean hasStatistics;
     private final ClientAdvancementManager advancementManager;
@@ -289,18 +291,11 @@
         this.world = null;
     }
 
-    @Override
     public void handleJoinGame(SPacketJoinGame packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.client.playerController = new PlayerControllerMP(this.client, this);
-        this.world = new WorldClient(
-            this,
-            new WorldSettings(0L, packetIn.getGameType(), false, packetIn.isHardcoreMode(), packetIn.getWorldType()),
-            packetIn.getDimension(),
-            packetIn.getDifficulty(),
-            this.client.profiler
-        );
+        this.world = new WorldClient(this, new WorldSettings(0L, packetIn.getGameType(), false, packetIn.isHardcoreMode(), packetIn.getWorldType()), net.minecraftforge.fml.common.network.handshake.NetworkDispatcher.get(getNetworkManager()).getOverrideDimension(packetIn), packetIn.getDifficulty(), this.client.profiler);
         this.client.gameSettings.difficulty = packetIn.getDifficulty();
         this.client.loadWorld(this.world);
         this.client.player.dimension = packetIn.getDimension();
@@ -310,11 +305,9 @@
         this.client.player.setReducedDebug(packetIn.isReducedDebugInfo());
         this.client.playerController.setGameType(packetIn.getGameType());
         this.client.gameSettings.sendSettingsToServer();
-        this.netManager
-        .sendPacket(new CPacketCustomPayload("MC|Brand", new PacketBuffer(Unpooled.buffer()).writeString(ClientBrandRetriever.getClientModName())));
+        this.netManager.sendPacket(new CPacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
     }
 
-    @Override
     public void handleSpawnObject(SPacketSpawnObject packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -352,15 +345,7 @@
         }
         else if (packetIn.getType() == 68)
         {
-            entity = new EntityLlamaSpit(
-                this.world,
-                d0,
-                d1,
-                d2,
-                (double)packetIn.getSpeedX() / 8000.0,
-                (double)packetIn.getSpeedY() / 8000.0,
-                (double)packetIn.getSpeedZ() / 8000.0
-            );
+            entity = new EntityLlamaSpit(this.world, d0, d1, d2, (double)packetIn.getSpeedX() / 8000.0D, (double)packetIn.getSpeedY() / 8000.0D, (double)packetIn.getSpeedZ() / 8000.0D);
         }
         else if (packetIn.getType() == 71)
         {
@@ -386,67 +371,27 @@
         }
         else if (packetIn.getType() == 63)
         {
-            entity = new EntityLargeFireball(
-                this.world,
-                d0,
-                d1,
-                d2,
-                (double)packetIn.getSpeedX() / 8000.0,
-                (double)packetIn.getSpeedY() / 8000.0,
-                (double)packetIn.getSpeedZ() / 8000.0
-            );
+            entity = new EntityLargeFireball(this.world, d0, d1, d2, (double)packetIn.getSpeedX() / 8000.0D, (double)packetIn.getSpeedY() / 8000.0D, (double)packetIn.getSpeedZ() / 8000.0D);
             packetIn.setData(0);
         }
         else if (packetIn.getType() == 93)
         {
-            entity = new EntityDragonFireball(
-                this.world,
-                d0,
-                d1,
-                d2,
-                (double)packetIn.getSpeedX() / 8000.0,
-                (double)packetIn.getSpeedY() / 8000.0,
-                (double)packetIn.getSpeedZ() / 8000.0
-            );
+            entity = new EntityDragonFireball(this.world, d0, d1, d2, (double)packetIn.getSpeedX() / 8000.0D, (double)packetIn.getSpeedY() / 8000.0D, (double)packetIn.getSpeedZ() / 8000.0D);
             packetIn.setData(0);
         }
         else if (packetIn.getType() == 64)
         {
-            entity = new EntitySmallFireball(
-                this.world,
-                d0,
-                d1,
-                d2,
-                (double)packetIn.getSpeedX() / 8000.0,
-                (double)packetIn.getSpeedY() / 8000.0,
-                (double)packetIn.getSpeedZ() / 8000.0
-            );
+            entity = new EntitySmallFireball(this.world, d0, d1, d2, (double)packetIn.getSpeedX() / 8000.0D, (double)packetIn.getSpeedY() / 8000.0D, (double)packetIn.getSpeedZ() / 8000.0D);
             packetIn.setData(0);
         }
         else if (packetIn.getType() == 66)
         {
-            entity = new EntityWitherSkull(
-                this.world,
-                d0,
-                d1,
-                d2,
-                (double)packetIn.getSpeedX() / 8000.0,
-                (double)packetIn.getSpeedY() / 8000.0,
-                (double)packetIn.getSpeedZ() / 8000.0
-            );
+            entity = new EntityWitherSkull(this.world, d0, d1, d2, (double)packetIn.getSpeedX() / 8000.0D, (double)packetIn.getSpeedY() / 8000.0D, (double)packetIn.getSpeedZ() / 8000.0D);
             packetIn.setData(0);
         }
         else if (packetIn.getType() == 67)
         {
-            entity = new EntityShulkerBullet(
-                this.world,
-                d0,
-                d1,
-                d2,
-                (double)packetIn.getSpeedX() / 8000.0,
-                (double)packetIn.getSpeedY() / 8000.0,
-                (double)packetIn.getSpeedZ() / 8000.0
-            );
+            entity = new EntityShulkerBullet(this.world, d0, d1, d2, (double)packetIn.getSpeedX() / 8000.0D, (double)packetIn.getSpeedY() / 8000.0D, (double)packetIn.getSpeedZ() / 8000.0D);
             packetIn.setData(0);
         }
         else if (packetIn.getType() == 62)
@@ -455,7 +400,7 @@
         }
         else if (packetIn.getType() == 79)
         {
-            entity = new EntityEvokerFangs(this.world, d0, d1, d2, 0.0F, 0, null);
+            entity = new EntityEvokerFangs(this.world, d0, d1, d2, 0.0F, 0, (EntityLivingBase)null);
         }
         else if (packetIn.getType() == 73)
         {
@@ -473,7 +418,7 @@
         }
         else if (packetIn.getType() == 50)
         {
-            entity = new EntityTNTPrimed(this.world, d0, d1, d2, null);
+            entity = new EntityTNTPrimed(this.world, d0, d1, d2, (EntityLivingBase)null);
         }
         else if (packetIn.getType() == 78)
         {
@@ -530,14 +475,11 @@
                     }
                 }
 
-                entity.setVelocity(
-                    (double)packetIn.getSpeedX() / 8000.0, (double)packetIn.getSpeedY() / 8000.0, (double)packetIn.getSpeedZ() / 8000.0
-                );
+                entity.setVelocity((double)packetIn.getSpeedX() / 8000.0D, (double)packetIn.getSpeedY() / 8000.0D, (double)packetIn.getSpeedZ() / 8000.0D);
             }
         }
     }
 
-    @Override
     public void handleSpawnExperienceOrb(SPacketSpawnExperienceOrb packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -552,7 +494,6 @@
         this.world.addEntityToWorld(packetIn.getEntityID(), entity);
     }
 
-    @Override
     public void handleSpawnGlobalEntity(SPacketSpawnGlobalEntity packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -576,18 +517,14 @@
         }
     }
 
-    @Override
     public void handleSpawnPainting(SPacketSpawnPainting packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        EntityPainting entitypainting = new EntityPainting(
-            this.world, packetIn.getPosition(), packetIn.getFacing(), packetIn.getTitle()
-        );
+        EntityPainting entitypainting = new EntityPainting(this.world, packetIn.getPosition(), packetIn.getFacing(), packetIn.getTitle());
         entitypainting.setUniqueId(packetIn.getUniqueId());
         this.world.addEntityToWorld(packetIn.getEntityID(), entitypainting);
     }
 
-    @Override
     public void handleEntityVelocity(SPacketEntityVelocity packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -595,13 +532,10 @@
 
         if (entity != null)
         {
-            entity.setVelocity(
-                (double)packetIn.getMotionX() / 8000.0, (double)packetIn.getMotionY() / 8000.0, (double)packetIn.getMotionZ() / 8000.0
-            );
+            entity.setVelocity((double)packetIn.getMotionX() / 8000.0D, (double)packetIn.getMotionY() / 8000.0D, (double)packetIn.getMotionZ() / 8000.0D);
         }
     }
 
-    @Override
     public void handleEntityMetadata(SPacketEntityMetadata packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -613,7 +547,6 @@
         }
     }
 
-    @Override
     public void handleSpawnPlayer(SPacketSpawnPlayer packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -622,9 +555,7 @@
         double d2 = packetIn.getZ();
         float f = (float)(packetIn.getYaw() * 360) / 256.0F;
         float f1 = (float)(packetIn.getPitch() * 360) / 256.0F;
-        EntityOtherPlayerMP entityotherplayermp = new EntityOtherPlayerMP(
-            this.client.world, this.getPlayerInfo(packetIn.getUniqueId()).getGameProfile()
-        );
+        EntityOtherPlayerMP entityotherplayermp = new EntityOtherPlayerMP(this.client.world, this.getPlayerInfo(packetIn.getUniqueId()).getGameProfile());
         entityotherplayermp.prevPosX = d0;
         entityotherplayermp.lastTickPosX = d0;
         entityotherplayermp.prevPosY = d1;
@@ -642,7 +573,6 @@
         }
     }
 
-    @Override
     public void handleEntityTeleport(SPacketEntityTeleport packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -660,9 +590,7 @@
                 float f = (float)(packetIn.getYaw() * 360) / 256.0F;
                 float f1 = (float)(packetIn.getPitch() * 360) / 256.0F;
 
-                if (!(Math.abs(entity.posX - d0) >= 0.03125)
-                        && !(Math.abs(entity.posY - d1) >= 0.015625)
-                        && !(Math.abs(entity.posZ - d2) >= 0.03125))
+                if (Math.abs(entity.posX - d0) < 0.03125D && Math.abs(entity.posY - d1) < 0.015625D && Math.abs(entity.posZ - d2) < 0.03125D)
                 {
                     entity.setPositionAndRotationDirect(entity.posX, entity.posY, entity.posZ, f, f1, 0, true);
                 }
@@ -676,7 +604,6 @@
         }
     }
 
-    @Override
     public void handleHeldItemChange(SPacketHeldItemChange packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -687,7 +614,6 @@
         }
     }
 
-    @Override
     public void handleEntityMovement(SPacketEntity packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -695,12 +621,12 @@
 
         if (entity != null)
         {
-            entity.serverPosX = entity.serverPosX + (long)packetIn.getX();
-            entity.serverPosY = entity.serverPosY + (long)packetIn.getY();
-            entity.serverPosZ = entity.serverPosZ + (long)packetIn.getZ();
-            double d0 = (double)entity.serverPosX / 4096.0;
-            double d1 = (double)entity.serverPosY / 4096.0;
-            double d2 = (double)entity.serverPosZ / 4096.0;
+            entity.serverPosX += (long)packetIn.getX();
+            entity.serverPosY += (long)packetIn.getY();
+            entity.serverPosZ += (long)packetIn.getZ();
+            double d0 = (double)entity.serverPosX / 4096.0D;
+            double d1 = (double)entity.serverPosY / 4096.0D;
+            double d2 = (double)entity.serverPosZ / 4096.0D;
 
             if (!entity.canPassengerSteer())
             {
@@ -712,7 +638,6 @@
         }
     }
 
-    @Override
     public void handleEntityHeadLook(SPacketEntityHeadLook packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -725,18 +650,16 @@
         }
     }
 
-    @Override
     public void handleDestroyEntities(SPacketDestroyEntities packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 
-        for (int i = 0; i < packetIn.getEntityIDs().length; i++)
+        for (int i = 0; i < packetIn.getEntityIDs().length; ++i)
         {
             this.world.removeEntityFromWorld(packetIn.getEntityIDs()[i]);
         }
     }
 
-    @Override
     public void handlePlayerPosLook(SPacketPlayerPosLook packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -753,7 +676,7 @@
         }
         else
         {
-            entityplayer.motionX = 0.0;
+            entityplayer.motionX = 0.0D;
         }
 
         if (packetIn.getFlags().contains(SPacketPlayerPosLook.EnumFlags.Y))
@@ -762,7 +685,7 @@
         }
         else
         {
-            entityplayer.motionY = 0.0;
+            entityplayer.motionY = 0.0D;
         }
 
         if (packetIn.getFlags().contains(SPacketPlayerPosLook.EnumFlags.Z))
@@ -771,7 +694,7 @@
         }
         else
         {
-            entityplayer.motionZ = 0.0;
+            entityplayer.motionZ = 0.0D;
         }
 
         if (packetIn.getFlags().contains(SPacketPlayerPosLook.EnumFlags.X_ROT))
@@ -786,17 +709,7 @@
 
         entityplayer.setPositionAndRotation(d0, d1, d2, f, f1);
         this.netManager.sendPacket(new CPacketConfirmTeleport(packetIn.getTeleportId()));
-        this.netManager
-        .sendPacket(
-            new CPacketPlayer.PositionRotation(
-                entityplayer.posX,
-                entityplayer.getEntityBoundingBox().minY,
-                entityplayer.posZ,
-                entityplayer.rotationYaw,
-                entityplayer.rotationPitch,
-                false
-            )
-        );
+        this.netManager.sendPacket(new CPacketPlayer.PositionRotation(entityplayer.posX, entityplayer.getEntityBoundingBox().minY, entityplayer.posZ, entityplayer.rotationYaw, entityplayer.rotationPitch, false));
 
         if (!this.doneLoadingTerrain)
         {
@@ -804,11 +717,10 @@
             this.client.player.prevPosY = this.client.player.posY;
             this.client.player.prevPosZ = this.client.player.posZ;
             this.doneLoadingTerrain = true;
-            this.client.displayGuiScreen(null);
+            this.client.displayGuiScreen((GuiScreen)null);
         }
     }
 
-    @Override
     public void handleMultiBlockChange(SPacketMultiBlockChange packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -819,7 +731,6 @@
         }
     }
 
-    @Override
     public void handleChunkData(SPacketChunkData packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -829,28 +740,12 @@
             this.world.doPreChunk(packetIn.getChunkX(), packetIn.getChunkZ(), true);
         }
 
-        this.world
-        .invalidateBlockReceiveRegion(
-            packetIn.getChunkX() << 4,
-            0,
-            packetIn.getChunkZ() << 4,
-            (packetIn.getChunkX() << 4) + 15,
-            256,
-            (packetIn.getChunkZ() << 4) + 15
-        );
+        this.world.invalidateBlockReceiveRegion(packetIn.getChunkX() << 4, 0, packetIn.getChunkZ() << 4, (packetIn.getChunkX() << 4) + 15, 256, (packetIn.getChunkZ() << 4) + 15);
         Chunk chunk = this.world.getChunk(packetIn.getChunkX(), packetIn.getChunkZ());
         chunk.read(packetIn.getReadBuffer(), packetIn.getExtractedSize(), packetIn.isFullChunk());
-        this.world
-        .markBlockRangeForRenderUpdate(
-            packetIn.getChunkX() << 4,
-            0,
-            packetIn.getChunkZ() << 4,
-            (packetIn.getChunkX() << 4) + 15,
-            256,
-            (packetIn.getChunkZ() << 4) + 15
-        );
+        this.world.markBlockRangeForRenderUpdate(packetIn.getChunkX() << 4, 0, packetIn.getChunkZ() << 4, (packetIn.getChunkX() << 4) + 15, 256, (packetIn.getChunkZ() << 4) + 15);
 
-        if (!packetIn.isFullChunk() || !(this.world.provider instanceof WorldProviderSurface))
+        if (!packetIn.isFullChunk() || this.world.provider.shouldClientCheckLighting())
         {
             chunk.resetRelightChecks();
         }
@@ -862,44 +757,37 @@
 
             if (tileentity != null)
             {
-                tileentity.readFromNBT(nbttagcompound);
+                tileentity.handleUpdateTag(nbttagcompound);
             }
         }
     }
 
-    @Override
     public void processChunkUnload(SPacketUnloadChunk packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.world.doPreChunk(packetIn.getX(), packetIn.getZ(), false);
     }
 
-    @Override
     public void handleBlockChange(SPacketBlockChange packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.world.invalidateRegionAndSetBlock(packetIn.getBlockPosition(), packetIn.getBlockState());
     }
 
-    @Override
     public void handleDisconnect(SPacketDisconnect packetIn)
     {
         this.netManager.closeChannel(packetIn.getReason());
     }
 
-    @Override
     public void onDisconnect(ITextComponent reason)
     {
-        this.client.loadWorld(null);
+        this.client.loadWorld((WorldClient)null);
 
         if (this.guiScreenServer != null)
         {
             if (this.guiScreenServer instanceof GuiScreenRealmsProxy)
             {
-                this.client
-                .displayGuiScreen(
-                    new DisconnectedRealmsScreen(((GuiScreenRealmsProxy)this.guiScreenServer).getProxy(), "disconnect.lost", reason).getProxy()
-                );
+                this.client.displayGuiScreen((new DisconnectedRealmsScreen(((GuiScreenRealmsProxy)this.guiScreenServer).getProxy(), "disconnect.lost", reason)).getProxy());
             }
             else
             {
@@ -917,7 +805,6 @@
         this.netManager.sendPacket(packetIn);
     }
 
-    @Override
     public void handleCollectItem(SPacketCollectItem packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -933,31 +820,11 @@
         {
             if (entity instanceof EntityXPOrb)
             {
-                this.world
-                .playSound(
-                    entity.posX,
-                    entity.posY,
-                    entity.posZ,
-                    SoundEvents.ENTITY_EXPERIENCE_ORB_PICKUP,
-                    SoundCategory.PLAYERS,
-                    0.1F,
-                    (this.avRandomizer.nextFloat() - this.avRandomizer.nextFloat()) * 0.35F + 0.9F,
-                    false
-                );
+                this.world.playSound(entity.posX, entity.posY, entity.posZ, SoundEvents.ENTITY_EXPERIENCE_ORB_PICKUP, SoundCategory.PLAYERS, 0.1F, (this.avRandomizer.nextFloat() - this.avRandomizer.nextFloat()) * 0.35F + 0.9F, false);
             }
             else
             {
-                this.world
-                .playSound(
-                    entity.posX,
-                    entity.posY,
-                    entity.posZ,
-                    SoundEvents.ENTITY_ITEM_PICKUP,
-                    SoundCategory.PLAYERS,
-                    0.2F,
-                    (this.avRandomizer.nextFloat() - this.avRandomizer.nextFloat()) * 1.4F + 2.0F,
-                    false
-                );
+                this.world.playSound(entity.posX, entity.posY, entity.posZ, SoundEvents.ENTITY_ITEM_PICKUP, SoundCategory.PLAYERS, 0.2F, (this.avRandomizer.nextFloat() - this.avRandomizer.nextFloat()) * 1.4F + 2.0F, false);
             }
 
             if (entity instanceof EntityItem)
@@ -970,14 +837,14 @@
         }
     }
 
-    @Override
     public void handleChat(SPacketChat packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        this.client.ingameGUI.addChatMessage(packetIn.getType(), packetIn.getChatComponent());
+        net.minecraft.util.text.ITextComponent message = net.minecraftforge.event.ForgeEventFactory.onClientChat(packetIn.getType(), packetIn.getChatComponent());
+        if (message == null) return;
+        this.client.ingameGUI.addChatMessage(packetIn.getType(), message);
     }
 
-    @Override
     public void handleAnimation(SPacketAnimation packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1015,14 +882,12 @@
         }
     }
 
-    @Override
     public void handleUseBed(SPacketUseBed packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         packetIn.getPlayer(this.world).trySleep(packetIn.getBedPosition());
     }
 
-    @Override
     public void handleSpawnMob(SPacketSpawnMob packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1066,11 +931,10 @@
         }
         else
         {
-            LOGGER.warn("Skipping Entity with id {}", packetIn.getEntityType());
+            LOGGER.warn("Skipping Entity with id {}", (int)packetIn.getEntityType());
         }
     }
 
-    @Override
     public void handleTimeUpdate(SPacketTimeUpdate packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1078,7 +942,6 @@
         this.client.world.setWorldTime(packetIn.getWorldTime());
     }
 
-    @Override
     public void handleSpawnPosition(SPacketSpawnPosition packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1086,7 +949,6 @@
         this.client.world.getWorldInfo().setSpawn(packetIn.getSpawnPos());
     }
 
-    @Override
     public void handleSetPassengers(SPacketSetPassengers packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1111,18 +973,13 @@
 
                     if (entity1 == this.client.player && !flag)
                     {
-                        this.client
-                        .ingameGUI
-                        .setOverlayMessage(
-                            I18n.format("mount.onboard", GameSettings.getKeyDisplayString(this.client.gameSettings.keyBindSneak.getKeyCode())), false
-                        );
+                        this.client.ingameGUI.setOverlayMessage(I18n.format("mount.onboard", this.client.gameSettings.keyBindSneak.getDisplayName()), false);
                     }
                 }
             }
         }
     }
 
-    @Override
     public void handleEntityAttach(SPacketEntityAttach packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1142,7 +999,6 @@
         }
     }
 
-    @Override
     public void handleEntityStatus(SPacketEntityStatus packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1158,10 +1014,7 @@
             {
                 int i = 40;
                 this.client.effectRenderer.emitParticleAtEntity(entity, EnumParticleTypes.TOTEM, 30);
-                this.world
-                .playSound(
-                    entity.posX, entity.posY, entity.posZ, SoundEvents.ITEM_TOTEM_USE, entity.getSoundCategory(), 1.0F, 1.0F, false
-                );
+                this.world.playSound(entity.posX, entity.posY, entity.posZ, SoundEvents.ITEM_TOTEM_USE, entity.getSoundCategory(), 1.0F, 1.0F, false);
 
                 if (entity == this.client.player)
                 {
@@ -1175,7 +1028,6 @@
         }
     }
 
-    @Override
     public void handleUpdateHealth(SPacketUpdateHealth packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1184,14 +1036,12 @@
         this.client.player.getFoodStats().setFoodSaturationLevel(packetIn.getSaturationLevel());
     }
 
-    @Override
     public void handleSetExperience(SPacketSetExperience packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.client.player.setXPStats(packetIn.getExperienceBar(), packetIn.getTotalExperience(), packetIn.getLevel());
     }
 
-    @Override
     public void handleRespawn(SPacketRespawn packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1200,15 +1050,7 @@
         {
             this.doneLoadingTerrain = false;
             Scoreboard scoreboard = this.world.getScoreboard();
-            this.world = new WorldClient(
-                this,
-                new WorldSettings(
-                    0L, packetIn.getGameType(), false, this.client.world.getWorldInfo().isHardcoreModeEnabled(), packetIn.getWorldType()
-                ),
-                packetIn.getDimensionID(),
-                packetIn.getDifficulty(),
-                this.client.profiler
-            );
+            this.world = new WorldClient(this, new WorldSettings(0L, packetIn.getGameType(), false, this.client.world.getWorldInfo().isHardcoreModeEnabled(), packetIn.getWorldType()), packetIn.getDimensionID(), packetIn.getDifficulty(), this.client.profiler);
             this.world.setWorldScoreboard(scoreboard);
             this.client.loadWorld(this.world);
             this.client.player.dimension = packetIn.getDimensionID();
@@ -1219,26 +1061,16 @@
         this.client.playerController.setGameType(packetIn.getGameType());
     }
 
-    @Override
     public void handleExplosion(SPacketExplosion packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        Explosion explosion = new Explosion(
-            this.client.world,
-            null,
-            packetIn.getX(),
-            packetIn.getY(),
-            packetIn.getZ(),
-            packetIn.getStrength(),
-            packetIn.getAffectedBlockPositions()
-        );
+        Explosion explosion = new Explosion(this.client.world, (Entity)null, packetIn.getX(), packetIn.getY(), packetIn.getZ(), packetIn.getStrength(), packetIn.getAffectedBlockPositions());
         explosion.doExplosionB(true);
-        this.client.player.motionX = this.client.player.motionX + (double)packetIn.getMotionX();
-        this.client.player.motionY = this.client.player.motionY + (double)packetIn.getMotionY();
-        this.client.player.motionZ = this.client.player.motionZ + (double)packetIn.getMotionZ();
+        this.client.player.motionX += (double)packetIn.getMotionX();
+        this.client.player.motionY += (double)packetIn.getMotionY();
+        this.client.player.motionZ += (double)packetIn.getMotionZ();
     }
 
-    @Override
     public void handleOpenWindow(SPacketOpenWindow packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1277,7 +1109,6 @@
         }
     }
 
-    @Override
     public void handleSetSlot(SPacketSetSlot packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1325,7 +1156,6 @@
         }
     }
 
-    @Override
     public void handleConfirmTransaction(SPacketConfirmTransaction packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1347,7 +1177,6 @@
         }
     }
 
-    @Override
     public void handleWindowItems(SPacketWindowItems packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1363,7 +1192,6 @@
         }
     }
 
-    @Override
     public void handleSignEditorOpen(SPacketSignEditorOpen packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1379,7 +1207,6 @@
         this.client.player.openEditSign((TileEntitySign)tileentity);
     }
 
-    @Override
     public void handleUpdateTileEntity(SPacketUpdateTileEntity packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1390,20 +1217,19 @@
             int i = packetIn.getTileEntityType();
             boolean flag = i == 2 && tileentity instanceof TileEntityCommandBlock;
 
-            if (i == 1 && tileentity instanceof TileEntityMobSpawner
-                    || flag
-                    || i == 3 && tileentity instanceof TileEntityBeacon
-                    || i == 4 && tileentity instanceof TileEntitySkull
-                    || i == 5 && tileentity instanceof TileEntityFlowerPot
-                    || i == 6 && tileentity instanceof TileEntityBanner
-                    || i == 7 && tileentity instanceof TileEntityStructure
-                    || i == 8 && tileentity instanceof TileEntityEndGateway
-                    || i == 9 && tileentity instanceof TileEntitySign
-                    || i == 10 && tileentity instanceof TileEntityShulkerBox
-                    || i == 11 && tileentity instanceof TileEntityBed)
+            if (i == 1 && tileentity instanceof TileEntityMobSpawner || flag || i == 3 && tileentity instanceof TileEntityBeacon || i == 4 && tileentity instanceof TileEntitySkull || i == 5 && tileentity instanceof TileEntityFlowerPot || i == 6 && tileentity instanceof TileEntityBanner || i == 7 && tileentity instanceof TileEntityStructure || i == 8 && tileentity instanceof TileEntityEndGateway || i == 9 && tileentity instanceof TileEntitySign || i == 10 && tileentity instanceof TileEntityShulkerBox || i == 11 && tileentity instanceof TileEntityBed)
             {
                 tileentity.readFromNBT(packetIn.getNbtCompound());
             }
+            else
+            {
+                if(tileentity == null)
+                {
+                    LOGGER.error("Received invalid update packet for null tile entity at {} with data: {}", packetIn.getPos(), packetIn.getNbtCompound());
+                    return;
+                }
+                tileentity.onDataPacket(netManager, packetIn);
+            }
 
             if (flag && this.client.currentScreen instanceof GuiCommandBlock)
             {
@@ -1412,7 +1238,6 @@
         }
     }
 
-    @Override
     public void handleWindowProperty(SPacketWindowProperty packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1424,7 +1249,6 @@
         }
     }
 
-    @Override
     public void handleEntityEquipment(SPacketEntityEquipment packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1436,30 +1260,24 @@
         }
     }
 
-    @Override
     public void handleCloseWindow(SPacketCloseWindow packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.client.player.closeScreenAndDropStack();
     }
 
-    @Override
     public void handleBlockAction(SPacketBlockAction packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        this.client
-        .world
-        .addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
+        this.client.world.addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
     }
 
-    @Override
     public void handleBlockBreakAnim(SPacketBlockBreakAnim packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.client.world.sendBlockBreakProgress(packetIn.getBreakerId(), packetIn.getPosition(), packetIn.getProgress());
     }
 
-    @Override
     public void handleChangeGameState(SPacketChangeGameState packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1470,7 +1288,7 @@
 
         if (i >= 0 && i < SPacketChangeGameState.MESSAGE_NAMES.length && SPacketChangeGameState.MESSAGE_NAMES[i] != null)
         {
-            entityplayer.sendStatusMessage(new TextComponentTranslation(SPacketChangeGameState.MESSAGE_NAMES[i]), false);
+            entityplayer.sendStatusMessage(new TextComponentTranslation(SPacketChangeGameState.MESSAGE_NAMES[i], new Object[0]), false);
         }
 
         if (i == 1)
@@ -1496,13 +1314,10 @@
             }
             else if (j == 1)
             {
-                this.client
-                .displayGuiScreen(
-                    new GuiWinGame(
-                        true,
-                        () -> this.client.player.connection.sendPacket(new CPacketClientStatus(CPacketClientStatus.State.PERFORM_RESPAWN))
-                    )
-                );
+                this.client.displayGuiScreen(new GuiWinGame(true, () ->
+                {
+                    this.client.player.connection.sendPacket(new CPacketClientStatus(CPacketClientStatus.State.PERFORM_RESPAWN));
+                }));
             }
         }
         else if (i == 5)
@@ -1515,47 +1330,20 @@
             }
             else if (f == 101.0F)
             {
-                this.client
-                .ingameGUI
-                .getChatGUI()
-                .printChatMessage(
-                    new TextComponentTranslation(
-                        "demo.help.movement",
-                        GameSettings.getKeyDisplayString(gamesettings.keyBindForward.getKeyCode()),
-                        GameSettings.getKeyDisplayString(gamesettings.keyBindLeft.getKeyCode()),
-                        GameSettings.getKeyDisplayString(gamesettings.keyBindBack.getKeyCode()),
-                        GameSettings.getKeyDisplayString(gamesettings.keyBindRight.getKeyCode())
-                    )
-                );
+                this.client.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.movement", new Object[] {gamesettings.keyBindForward.getDisplayName(), gamesettings.keyBindLeft.getDisplayName(), gamesettings.keyBindBack.getDisplayName(), gamesettings.keyBindRight.getDisplayName()}));
             }
             else if (f == 102.0F)
             {
-                this.client
-                .ingameGUI
-                .getChatGUI()
-                .printChatMessage(new TextComponentTranslation("demo.help.jump", GameSettings.getKeyDisplayString(gamesettings.keyBindJump.getKeyCode())));
+                this.client.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.jump", new Object[] {gamesettings.keyBindJump.getDisplayName()}));
             }
             else if (f == 103.0F)
             {
-                this.client
-                .ingameGUI
-                .getChatGUI()
-                .printChatMessage(new TextComponentTranslation("demo.help.inventory", GameSettings.getKeyDisplayString(gamesettings.keyBindInventory.getKeyCode())));
+                this.client.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.inventory", new Object[] {gamesettings.keyBindInventory.getDisplayName()}));
             }
         }
         else if (i == 6)
         {
-            this.world
-            .playSound(
-                entityplayer,
-                entityplayer.posX,
-                entityplayer.posY + (double)entityplayer.getEyeHeight(),
-                entityplayer.posZ,
-                SoundEvents.ENTITY_ARROW_HIT_PLAYER,
-                SoundCategory.PLAYERS,
-                0.18F,
-                0.45F
-            );
+            this.world.playSound(entityplayer, entityplayer.posX, entityplayer.posY + (double)entityplayer.getEyeHeight(), entityplayer.posZ, SoundEvents.ENTITY_ARROW_HIT_PLAYER, SoundCategory.PLAYERS, 0.18F, 0.45F);
         }
         else if (i == 7)
         {
@@ -1567,25 +1355,11 @@
         }
         else if (i == 10)
         {
-            this.world
-            .spawnParticle(
-                EnumParticleTypes.MOB_APPEARANCE, entityplayer.posX, entityplayer.posY, entityplayer.posZ, 0.0, 0.0, 0.0, new int[0]
-            );
-            this.world
-            .playSound(
-                entityplayer,
-                entityplayer.posX,
-                entityplayer.posY,
-                entityplayer.posZ,
-                SoundEvents.ENTITY_ELDER_GUARDIAN_CURSE,
-                SoundCategory.HOSTILE,
-                1.0F,
-                1.0F
-            );
+            this.world.spawnParticle(EnumParticleTypes.MOB_APPEARANCE, entityplayer.posX, entityplayer.posY, entityplayer.posZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.playSound(entityplayer, entityplayer.posX, entityplayer.posY, entityplayer.posZ, SoundEvents.ENTITY_ELDER_GUARDIAN_CURSE, SoundCategory.HOSTILE, 1.0F, 1.0F);
         }
     }
 
-    @Override
     public void handleMaps(SPacketMaps packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1614,7 +1388,6 @@
         mapitemrenderer.updateMapTexture(mapdata);
     }
 
-    @Override
     public void handleEffect(SPacketEffect packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1629,14 +1402,12 @@
         }
     }
 
-    @Override
     public void handleAdvancementInfo(SPacketAdvancementInfo packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.advancementManager.read(packetIn);
     }
 
-    @Override
     public void handleSelectAdvancementsTab(SPacketSelectAdvancementsTab packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1644,7 +1415,7 @@
 
         if (resourcelocation == null)
         {
-            this.advancementManager.setSelectedTab(null, false);
+            this.advancementManager.setSelectedTab((Advancement)null, false);
         }
         else
         {
@@ -1653,7 +1424,6 @@
         }
     }
 
-    @Override
     public void handleStatistics(SPacketStatistics packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1661,8 +1431,8 @@
         for (Entry<StatBase, Integer> entry : packetIn.getStatisticMap().entrySet())
         {
             StatBase statbase = entry.getKey();
-            int i = entry.getValue();
-            this.client.player.getStatFileWriter().unlockAchievement(this.client.player, statbase, i);
+            int k = ((Integer)entry.getValue()).intValue();
+            this.client.player.getStatFileWriter().unlockAchievement(this.client.player, statbase, k);
         }
 
         this.hasStatistics = true;
@@ -1673,31 +1443,38 @@
         }
     }
 
-    @Override
     public void handleRecipeBook(SPacketRecipeBook packetIn)
     {
+        RecipeBook recipebook;
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        RecipeBook recipebook = this.client.player.getRecipeBook();
+        recipebook = this.client.player.getRecipeBook();
         recipebook.setGuiOpen(packetIn.isGuiOpen());
         recipebook.setFilteringCraftable(packetIn.isFilteringCraftable());
         SPacketRecipeBook.State spacketrecipebook$state = packetIn.getState();
+        label21:
 
         switch (spacketrecipebook$state)
         {
             case REMOVE:
+                Iterator iterator = packetIn.getRecipes().iterator();
 
-                for (IRecipe irecipe : packetIn.getRecipes())
+                while (true)
                 {
+                    if (!iterator.hasNext())
+                    {
+                        break label21;
+                    }
+
+                    IRecipe irecipe = (IRecipe)iterator.next();
                     recipebook.lock(irecipe);
                 }
 
-                break;
             case INIT:
                 packetIn.getRecipes().forEach(recipebook::unlock);
                 packetIn.getDisplayedRecipes().forEach(recipebook::markNew);
                 break;
             case ADD:
-                packetIn.getRecipes().forEach(p_194025_2_ ->
+                packetIn.getRecipes().forEach((p_194025_2_) ->
                 {
                     recipebook.unlock(p_194025_2_);
                     recipebook.markNew(p_194025_2_);
@@ -1705,7 +1482,10 @@
                 });
         }
 
-        RecipeBookClient.ALL_RECIPES.forEach(p_194023_1_ -> p_194023_1_.updateKnownRecipes(recipebook));
+        RecipeBookClient.ALL_RECIPES.forEach((p_194023_1_) ->
+        {
+            p_194023_1_.updateKnownRecipes(recipebook);
+        });
 
         if (this.client.currentScreen instanceof IRecipeShownListener)
         {
@@ -1713,7 +1493,6 @@
         }
     }
 
-    @Override
     public void handleEntityEffect(SPacketEntityEffect packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1721,20 +1500,17 @@
 
         if (entity instanceof EntityLivingBase)
         {
-            Potion potion = Potion.getPotionById(packetIn.getEffectId());
+            Potion potion = Potion.getPotionById(packetIn.getEffectId() & 0xFF);
 
             if (potion != null)
             {
-                PotionEffect potioneffect = new PotionEffect(
-                    potion, packetIn.getDuration(), packetIn.getAmplifier(), packetIn.getIsAmbient(), packetIn.doesShowParticles()
-                );
+                PotionEffect potioneffect = new PotionEffect(potion, packetIn.getDuration(), packetIn.getAmplifier(), packetIn.getIsAmbient(), packetIn.doesShowParticles());
                 potioneffect.setPotionDurationMax(packetIn.isMaxDuration());
                 ((EntityLivingBase)entity).addPotionEffect(potioneffect);
             }
         }
     }
 
-    @Override
     public void handleCombatEvent(SPacketCombatEvent packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1750,7 +1526,6 @@
         }
     }
 
-    @Override
     public void handleServerDifficulty(SPacketServerDifficulty packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1758,7 +1533,6 @@
         this.client.world.getWorldInfo().setDifficultyLocked(packetIn.isDifficultyLocked());
     }
 
-    @Override
     public void handleCamera(SPacketCamera packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1770,7 +1544,6 @@
         }
     }
 
-    @Override
     public void handleWorldBorder(SPacketWorldBorder packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1778,7 +1551,6 @@
     }
 
     @SuppressWarnings("incomplete-switch")
-    @Override
     public void handleTitle(SPacketTitle packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1807,20 +1579,12 @@
         this.client.ingameGUI.displayTitle(s, s1, packetIn.getFadeInTime(), packetIn.getDisplayTime(), packetIn.getFadeOutTime());
     }
 
-    @Override
     public void handlePlayerListHeaderFooter(SPacketPlayerListHeaderFooter packetIn)
     {
-        this.client
-        .ingameGUI
-        .getTabList()
-        .setHeader(packetIn.getHeader().getFormattedText().isEmpty() ? null : packetIn.getHeader());
-        this.client
-        .ingameGUI
-        .getTabList()
-        .setFooter(packetIn.getFooter().getFormattedText().isEmpty() ? null : packetIn.getFooter());
+        this.client.ingameGUI.getTabList().setHeader(packetIn.getHeader().getFormattedText().isEmpty() ? null : packetIn.getHeader());
+        this.client.ingameGUI.getTabList().setFooter(packetIn.getFooter().getFormattedText().isEmpty() ? null : packetIn.getFooter());
     }
 
-    @Override
     public void handleRemoveEntityEffect(SPacketRemoveEntityEffect packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1833,7 +1597,6 @@
     }
 
     @SuppressWarnings("incomplete-switch")
-    @Override
     public void handlePlayerListItem(SPacketPlayerListItem packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1876,26 +1639,23 @@
         }
     }
 
-    @Override
     public void handleKeepAlive(SPacketKeepAlive packetIn)
     {
         this.sendPacket(new CPacketKeepAlive(packetIn.getId()));
     }
 
-    @Override
     public void handlePlayerAbilities(SPacketPlayerAbilities packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        EntityPlayer entityplayer = this.client.player;
-        entityplayer.capabilities.isFlying = packetIn.isFlying();
-        entityplayer.capabilities.isCreativeMode = packetIn.isCreativeMode();
-        entityplayer.capabilities.disableDamage = packetIn.isInvulnerable();
-        entityplayer.capabilities.allowFlying = packetIn.isAllowFlying();
-        entityplayer.capabilities.setFlySpeed(packetIn.getFlySpeed());
-        entityplayer.capabilities.setPlayerWalkSpeed(packetIn.getWalkSpeed());
+        EntityPlayer entityplayer1 = this.client.player;
+        entityplayer1.capabilities.isFlying = packetIn.isFlying();
+        entityplayer1.capabilities.isCreativeMode = packetIn.isCreativeMode();
+        entityplayer1.capabilities.disableDamage = packetIn.isInvulnerable();
+        entityplayer1.capabilities.allowFlying = packetIn.isAllowFlying();
+        entityplayer1.capabilities.setFlySpeed(packetIn.getFlySpeed());
+        entityplayer1.capabilities.setPlayerWalkSpeed(packetIn.getWalkSpeed());
     }
 
-    @Override
     public void handleTabComplete(SPacketTabComplete packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -1908,47 +1668,18 @@
         }
     }
 
-    @Override
     public void handleSoundEffect(SPacketSoundEffect packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        this.client
-        .world
-        .playSound(
-            this.client.player,
-            packetIn.getX(),
-            packetIn.getY(),
-            packetIn.getZ(),
-            packetIn.getSound(),
-            packetIn.getCategory(),
-            packetIn.getVolume(),
-            packetIn.getPitch()
-        );
+        this.client.world.playSound(this.client.player, packetIn.getX(), packetIn.getY(), packetIn.getZ(), packetIn.getSound(), packetIn.getCategory(), packetIn.getVolume(), packetIn.getPitch());
     }
 
-    @Override
     public void handleCustomSound(SPacketCustomSound packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        this.client
-        .getSoundHandler()
-        .playSound(
-            new PositionedSoundRecord(
-                new ResourceLocation(packetIn.getSoundName()),
-                packetIn.getCategory(),
-                packetIn.getVolume(),
-                packetIn.getPitch(),
-                false,
-                0,
-                ISound.AttenuationType.LINEAR,
-                (float)packetIn.getX(),
-                (float)packetIn.getY(),
-                (float)packetIn.getZ()
-            )
-        );
+        this.client.getSoundHandler().playSound(new PositionedSoundRecord(new ResourceLocation(packetIn.getSoundName()), packetIn.getCategory(), packetIn.getVolume(), packetIn.getPitch(), false, 0, ISound.AttenuationType.LINEAR, (float)packetIn.getX(), (float)packetIn.getY(), (float)packetIn.getZ()));
     }
 
-    @Override
     public void handleResourcePack(SPacketResourcePackSend packetIn)
     {
         final String s = packetIn.getURL();
@@ -1967,12 +1698,13 @@
                     if (file2.isFile())
                     {
                         this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.ACCEPTED));
-                        Futures.addCallback(this.client.getResourcePackRepository().setServerResourcePack(file2), this.createDownloadCallback());
+                        Futures.addCallback(this.client.getResourcePackRepository().setServerResourcePack(file2), this.createDownloadCallback(), Runnable::run);
                         return;
                     }
                 }
-                catch (UnsupportedEncodingException unsupportedencodingexception)
+                catch (UnsupportedEncodingException var7)
                 {
+                    ;
                 }
 
                 this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.FAILED_DOWNLOAD));
@@ -1984,7 +1716,7 @@
                 if (serverdata != null && serverdata.getResourceMode() == ServerData.ServerResourceMode.ENABLED)
                 {
                     this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.ACCEPTED));
-                    Futures.addCallback(this.client.getResourcePackRepository().downloadResourcePack(s, s1), this.createDownloadCallback());
+                    Futures.addCallback(this.client.getResourcePackRepository().downloadResourcePack(s, s1), this.createDownloadCallback(), Runnable::run);
                 }
                 else if (serverdata != null && serverdata.getResourceMode() != ServerData.ServerResourceMode.PROMPT)
                 {
@@ -1992,19 +1724,12 @@
                 }
                 else
                 {
-                    this.client
-                    .addScheduledTask(
-                        new Runnable()
+                    this.client.addScheduledTask(new Runnable()
                     {
-                        @Override
                         public void run()
                         {
-                            NetHandlerPlayClient.this.client
-                            .displayGuiScreen(
-                                new GuiYesNo(
-                                    new GuiYesNoCallback()
+                            NetHandlerPlayClient.this.client.displayGuiScreen(new GuiYesNo(new GuiYesNoCallback()
                             {
-                                @Override
                                 public void confirmClicked(boolean result, int id)
                                 {
                                     NetHandlerPlayClient.this.client = Minecraft.getMinecraft();
@@ -2017,12 +1742,8 @@
                                             serverdata1.setResourceMode(ServerData.ServerResourceMode.ENABLED);
                                         }
 
-                                        NetHandlerPlayClient.this.netManager
-                                        .sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.ACCEPTED));
-                                        Futures.addCallback(
-                                            NetHandlerPlayClient.this.client.getResourcePackRepository().downloadResourcePack(s, s1),
-                                            NetHandlerPlayClient.this.createDownloadCallback()
-                                        );
+                                        NetHandlerPlayClient.this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.ACCEPTED));
+                                        Futures.addCallback(NetHandlerPlayClient.this.client.getResourcePackRepository().downloadResourcePack(s, s1), NetHandlerPlayClient.this.createDownloadCallback(), Runnable::run);
                                     }
                                     else
                                     {
@@ -2031,22 +1752,15 @@
                                             serverdata1.setResourceMode(ServerData.ServerResourceMode.DISABLED);
                                         }
 
-                                        NetHandlerPlayClient.this.netManager
-                                        .sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.DECLINED));
+                                        NetHandlerPlayClient.this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.DECLINED));
                                     }
 
                                     ServerList.saveSingleServer(serverdata1);
-                                    NetHandlerPlayClient.this.client.displayGuiScreen(null);
+                                    NetHandlerPlayClient.this.client.displayGuiScreen((GuiScreen)null);
                                 }
-                            },
-                            I18n.format("multiplayer.texturePrompt.line1"),
-                            I18n.format("multiplayer.texturePrompt.line2"),
-                            0
-                                )
-                            );
+                            }, I18n.format("multiplayer.texturePrompt.line1"), I18n.format("multiplayer.texturePrompt.line2"), 0));
                         }
-                    }
-                    );
+                    });
                 }
             }
         }
@@ -2073,7 +1787,7 @@
                 throw new URISyntaxException(url, "Invalid levelstorage resourcepack path");
             }
         }
-        catch (URISyntaxException urisyntaxexception)
+        catch (URISyntaxException var5)
         {
             this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.FAILED_DOWNLOAD));
             return false;
@@ -2084,12 +1798,10 @@
     {
         return new FutureCallback<Object>()
         {
-            @Override
             public void onSuccess(@Nullable Object p_onSuccess_1_)
             {
                 NetHandlerPlayClient.this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.SUCCESSFULLY_LOADED));
             }
-            @Override
             public void onFailure(Throwable p_onFailure_1_)
             {
                 NetHandlerPlayClient.this.netManager.sendPacket(new CPacketResourcePackStatus(CPacketResourcePackStatus.Action.FAILED_DOWNLOAD));
@@ -2097,14 +1809,12 @@
         };
     }
 
-    @Override
     public void handleUpdateBossInfo(SPacketUpdateBossInfo packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         this.client.ingameGUI.getBossOverlay().read(packetIn);
     }
 
-    @Override
     public void handleCooldown(SPacketCooldown packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2119,7 +1829,6 @@
         }
     }
 
-    @Override
     public void handleMoveVehicle(SPacketMoveVehicle packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2127,14 +1836,11 @@
 
         if (entity != this.client.player && entity.canPassengerSteer())
         {
-            entity.setPositionAndRotation(
-                packetIn.getX(), packetIn.getY(), packetIn.getZ(), packetIn.getYaw(), packetIn.getPitch()
-            );
+            entity.setPositionAndRotation(packetIn.getX(), packetIn.getY(), packetIn.getZ(), packetIn.getYaw(), packetIn.getPitch());
             this.netManager.sendPacket(new CPacketVehicleMove(entity));
         }
     }
 
-    @Override
     public void handleCustomPayload(SPacketCustomPayload packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2145,10 +1851,10 @@
 
             try
             {
-                int i = packetbuffer.readInt();
+                int k = packetbuffer.readInt();
                 GuiScreen guiscreen = this.client.currentScreen;
 
-                if (guiscreen != null && guiscreen instanceof GuiMerchant && i == this.client.player.openContainer.windowId)
+                if (guiscreen != null && guiscreen instanceof GuiMerchant && k == this.client.player.openContainer.windowId)
                 {
                     IMerchant imerchant = ((GuiMerchant)guiscreen).getMerchant();
                     MerchantRecipeList merchantrecipelist = MerchantRecipeList.readFromBuf(packetbuffer);
@@ -2161,6 +1867,7 @@
             }
             finally
             {
+                if (false) // Forge: let packet handle releasing buffer
                 packetbuffer.release();
             }
         }
@@ -2170,10 +1877,8 @@
         }
         else if ("MC|BOpen".equals(packetIn.getChannelName()))
         {
-            EnumHand enumhand = packetIn.getBufferData().readEnumValue(EnumHand.class);
-            ItemStack itemstack = enumhand == EnumHand.OFF_HAND
-                                  ? this.client.player.getHeldItemOffhand()
-                                  : this.client.player.getHeldItemMainhand();
+            EnumHand enumhand = (EnumHand)packetIn.getBufferData().readEnumValue(EnumHand.class);
+            ItemStack itemstack = enumhand == EnumHand.OFF_HAND ? this.client.player.getHeldItemOffhand() : this.client.player.getHeldItemMainhand();
 
             if (itemstack.getItem() == Items.WRITTEN_BOOK)
             {
@@ -2183,17 +1888,17 @@
         else if ("MC|DebugPath".equals(packetIn.getChannelName()))
         {
             PacketBuffer packetbuffer1 = packetIn.getBufferData();
-            int j = packetbuffer1.readInt();
-            float f = packetbuffer1.readFloat();
+            int l = packetbuffer1.readInt();
+            float f1 = packetbuffer1.readFloat();
             Path path = Path.read(packetbuffer1);
-            ((DebugRendererPathfinding)this.client.debugRenderer.pathfinding).addPath(j, path, f);
+            ((DebugRendererPathfinding)this.client.debugRenderer.pathfinding).addPath(l, path, f1);
         }
         else if ("MC|DebugNeighborsUpdate".equals(packetIn.getChannelName()))
         {
             PacketBuffer packetbuffer2 = packetIn.getBufferData();
-            long k = packetbuffer2.readVarLong();
+            long i1 = packetbuffer2.readVarLong();
             BlockPos blockpos = packetbuffer2.readBlockPos();
-            ((DebugRendererNeighborsUpdate)this.client.debugRenderer.neighborsUpdate).addUpdate(k, blockpos);
+            ((DebugRendererNeighborsUpdate)this.client.debugRenderer.neighborsUpdate).addUpdate(i1, blockpos);
         }
         else if ("MC|StopSound".equals(packetIn.getChannelName()))
         {
@@ -2204,7 +1909,6 @@
         }
     }
 
-    @Override
     public void handleScoreboardObjective(SPacketScoreboardObjective packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2232,7 +1936,6 @@
         }
     }
 
-    @Override
     public void handleUpdateScore(SPacketUpdateScore packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2248,7 +1951,7 @@
         {
             if (StringUtils.isNullOrEmpty(packetIn.getObjectiveName()))
             {
-                scoreboard.removeObjectiveFromEntity(packetIn.getPlayerName(), null);
+                scoreboard.removeObjectiveFromEntity(packetIn.getPlayerName(), (ScoreObjective)null);
             }
             else if (scoreobjective != null)
             {
@@ -2257,7 +1960,6 @@
         }
     }
 
-    @Override
     public void handleDisplayObjective(SPacketDisplayObjective packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2265,7 +1967,7 @@
 
         if (packetIn.getName().isEmpty())
         {
-            scoreboard.setObjectiveInDisplaySlot(packetIn.getPosition(), null);
+            scoreboard.setObjectiveInDisplaySlot(packetIn.getPosition(), (ScoreObjective)null);
         }
         else
         {
@@ -2274,7 +1976,6 @@
         }
     }
 
-    @Override
     public void handleTeams(SPacketTeams packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2334,7 +2035,6 @@
         }
     }
 
-    @Override
     public void handleParticles(SPacketParticles packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2347,27 +2047,16 @@
 
             try
             {
-                this.world
-                .spawnParticle(
-                    packetIn.getParticleType(),
-                    packetIn.isLongDistance(),
-                    packetIn.getXCoordinate(),
-                    packetIn.getYCoordinate(),
-                    packetIn.getZCoordinate(),
-                    d0,
-                    d2,
-                    d4,
-                    packetIn.getParticleArgs()
-                );
+                this.world.spawnParticle(packetIn.getParticleType(), packetIn.isLongDistance(), packetIn.getXCoordinate(), packetIn.getYCoordinate(), packetIn.getZCoordinate(), d0, d2, d4, packetIn.getParticleArgs());
             }
-            catch (Throwable throwable1)
+            catch (Throwable var17)
             {
-                LOGGER.warn("Could not spawn particle effect {}", packetIn.getParticleType());
+                LOGGER.warn("Could not spawn particle effect {}", (Object)packetIn.getParticleType());
             }
         }
         else
         {
-            for (int i = 0; i < packetIn.getParticleCount(); i++)
+            for (int k = 0; k < packetIn.getParticleCount(); ++k)
             {
                 double d1 = this.avRandomizer.nextGaussian() * (double)packetIn.getXOffset();
                 double d3 = this.avRandomizer.nextGaussian() * (double)packetIn.getYOffset();
@@ -2378,29 +2067,17 @@
 
                 try
                 {
-                    this.world
-                    .spawnParticle(
-                        packetIn.getParticleType(),
-                        packetIn.isLongDistance(),
-                        packetIn.getXCoordinate() + d1,
-                        packetIn.getYCoordinate() + d3,
-                        packetIn.getZCoordinate() + d5,
-                        d6,
-                        d7,
-                        d8,
-                        packetIn.getParticleArgs()
-                    );
+                    this.world.spawnParticle(packetIn.getParticleType(), packetIn.isLongDistance(), packetIn.getXCoordinate() + d1, packetIn.getYCoordinate() + d3, packetIn.getZCoordinate() + d5, d6, d7, d8, packetIn.getParticleArgs());
                 }
-                catch (Throwable throwable)
+                catch (Throwable var16)
                 {
-                    LOGGER.warn("Could not spawn particle effect {}", packetIn.getParticleType());
+                    LOGGER.warn("Could not spawn particle effect {}", (Object)packetIn.getParticleType());
                     return;
                 }
             }
         }
     }
 
-    @Override
     public void handleEntityProperties(SPacketEntityProperties packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
@@ -2422,9 +2099,7 @@
 
                     if (iattributeinstance == null)
                     {
-                        iattributeinstance = abstractattributemap.registerAttribute(
-                                                 new RangedAttribute(null, spacketentityproperties$snapshot.getName(), 0.0, Double.MIN_NORMAL, Double.MAX_VALUE)
-                                             );
+                        iattributeinstance = abstractattributemap.registerAttribute(new RangedAttribute((IAttribute)null, spacketentityproperties$snapshot.getName(), 0.0D, -Double.MAX_VALUE, Double.MAX_VALUE)); // Forge: fix invalid value range (MC-150405)
                     }
 
                     iattributeinstance.setBaseValue(spacketentityproperties$snapshot.getBaseValue());
@@ -2439,7 +2114,6 @@
         }
     }
 
-    @Override
     public void func_194307_a(SPacketPlaceGhostRecipe p_194307_1_)
     {
         PacketThreadUtil.checkThreadAndEnqueue(p_194307_1_, this, this.client);
