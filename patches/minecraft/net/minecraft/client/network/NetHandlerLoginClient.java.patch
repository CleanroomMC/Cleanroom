--- before/net/minecraft/client/network/NetHandlerLoginClient.java
+++ after/net/minecraft/client/network/NetHandlerLoginClient.java
@@ -49,13 +49,12 @@
         this.previousGuiScreen = previousScreenIn;
     }
 
-    @Override
     public void handleEncryptionRequest(SPacketEncryptionRequest packetIn)
     {
         final SecretKey secretkey = CryptManager.createNewSharedKey();
         String s = packetIn.getServerId();
         PublicKey publickey = packetIn.getPublicKey();
-        String s1 = new BigInteger(CryptManager.getServerIdHash(s, publickey, secretkey)).toString(16);
+        String s1 = (new BigInteger(CryptManager.getServerIdHash(s, publickey, secretkey))).toString(16);
 
         if (this.mc.getCurrentServerData() != null && this.mc.getCurrentServerData().isOnLAN())
         {
@@ -63,7 +62,7 @@
             {
                 this.getSessionService().joinServer(this.mc.getSession().getProfile(), this.mc.getSession().getToken(), s1);
             }
-            catch (AuthenticationException authenticationexception1)
+            catch (AuthenticationException var10)
             {
                 LOGGER.warn("Couldn't connect to auth servers but will continue to join LAN");
             }
@@ -74,33 +73,25 @@
             {
                 this.getSessionService().joinServer(this.mc.getSession().getProfile(), this.mc.getSession().getToken(), s1);
             }
-            catch (AuthenticationUnavailableException authenticationunavailableexception)
+            catch (AuthenticationUnavailableException var7)
             {
-                this.networkManager
-                .closeChannel(
-                    new TextComponentTranslation("disconnect.loginFailedInfo", new TextComponentTranslation("disconnect.loginFailedInfo.serversUnavailable"))
-                );
+                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[] {new TextComponentTranslation("disconnect.loginFailedInfo.serversUnavailable", new Object[0])}));
                 return;
             }
-            catch (InvalidCredentialsException invalidcredentialsexception)
+            catch (InvalidCredentialsException var8)
             {
-                this.networkManager
-                .closeChannel(
-                    new TextComponentTranslation("disconnect.loginFailedInfo", new TextComponentTranslation("disconnect.loginFailedInfo.invalidSession"))
-                );
+                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[] {new TextComponentTranslation("disconnect.loginFailedInfo.invalidSession", new Object[0])}));
                 return;
             }
             catch (AuthenticationException authenticationexception)
             {
-                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", authenticationexception.getMessage()));
+                this.networkManager.closeChannel(new TextComponentTranslation("disconnect.loginFailedInfo", new Object[] {authenticationexception.getMessage()}));
                 return;
             }
         }
 
-        this.networkManager
-        .sendPacket(new CPacketEncryptionResponse(secretkey, publickey, packetIn.getVerifyToken()), new GenericFutureListener < Future <? super Void >> ()
+        this.networkManager.sendPacket(new CPacketEncryptionResponse(secretkey, publickey, packetIn.getVerifyToken()), new GenericFutureListener < Future <? super Void >> ()
         {
-            @Override
             public void operationComplete(Future <? super Void > p_operationComplete_1_) throws Exception
             {
                 NetHandlerLoginClient.this.networkManager.enableEncryption(secretkey);
@@ -113,21 +104,21 @@
         return this.mc.getSessionService();
     }
 
-    @Override
     public void handleLoginSuccess(SPacketLoginSuccess packetIn)
     {
         this.gameProfile = packetIn.getProfile();
         this.networkManager.setConnectionState(EnumConnectionState.PLAY);
-        this.networkManager.setNetHandler(new NetHandlerPlayClient(this.mc, this.previousGuiScreen, this.networkManager, this.gameProfile));
+        NetHandlerPlayClient nhpc = new NetHandlerPlayClient(this.mc, this.previousGuiScreen, this.networkManager, this.gameProfile);
+        this.networkManager.setNetHandler(nhpc);
+        net.minecraftforge.fml.client.FMLClientHandler.instance().setPlayClient(nhpc);
+        net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.fmlClientHandshake(this.networkManager);
     }
 
-    @Override
     public void onDisconnect(ITextComponent reason)
     {
         if (this.previousGuiScreen != null && this.previousGuiScreen instanceof GuiScreenRealmsProxy)
         {
-            this.mc
-            .displayGuiScreen(new DisconnectedRealmsScreen(((GuiScreenRealmsProxy)this.previousGuiScreen).getProxy(), "connect.failed", reason).getProxy());
+            this.mc.displayGuiScreen((new DisconnectedRealmsScreen(((GuiScreenRealmsProxy)this.previousGuiScreen).getProxy(), "connect.failed", reason)).getProxy());
         }
         else
         {
@@ -135,13 +126,11 @@
         }
     }
 
-    @Override
     public void handleDisconnect(SPacketDisconnect packetIn)
     {
         this.networkManager.closeChannel(packetIn.getReason());
     }
 
-    @Override
     public void handleEnableCompression(SPacketEnableCompression packetIn)
     {
         if (!this.networkManager.isLocalChannel())
