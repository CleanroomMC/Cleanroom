--- before/net/minecraft/client/Minecraft.java
+++ after/net/minecraft/client/Minecraft.java
@@ -328,6 +328,7 @@
     public Minecraft(GameConfiguration gameConfig)
     {
         instance = this;
+        net.minecraftforge.client.ForgeHooksClient.invalidateLog4jThreadCache();
         this.gameDir = gameConfig.folderInfo.gameDir;
         this.fileAssets = gameConfig.folderInfo.assetsDir;
         this.fileResourcepacks = gameConfig.folderInfo.resourcePacksDir;
@@ -340,7 +341,6 @@
         this.sessionService = new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString()).createMinecraftSessionService();
         this.session = gameConfig.userInfo.session;
         LOGGER.info("Setting user: {}", this.session.getUsername());
-        LOGGER.debug("(Session ID is {})", this.session.getSessionID());
         this.isDemo = gameConfig.gameInfo.isDemo;
         this.displayWidth = gameConfig.displayInfo.width > 0 ? gameConfig.displayInfo.width : 1;
         this.displayHeight = gameConfig.displayInfo.height > 0 ? gameConfig.displayInfo.height : 1;
@@ -460,10 +460,10 @@
         this.resourceManager = new SimpleReloadableResourceManager(this.metadataSerializer);
         this.languageManager = new LanguageManager(this.metadataSerializer, this.gameSettings.language);
         this.resourceManager.registerReloadListener(this.languageManager);
-        this.refreshResources();
+        net.minecraftforge.fml.client.FMLClientHandler.instance().beginMinecraftLoading(this, this.defaultResourcePacks, this.resourceManager, this.metadataSerializer);
         this.renderEngine = new TextureManager(this.resourceManager);
         this.resourceManager.registerReloadListener(this.renderEngine);
-        this.drawSplashScreen(this.renderEngine);
+        net.minecraftforge.fml.client.SplashProgress.drawVanillaScreen(this.renderEngine);
         this.skinManager = new SkinManager(this.renderEngine, new File(this.fileAssets, "skins"), this.sessionService);
         this.saveLoader = new AnvilSaveConverter(new File(this.gameDir, "saves"), this.dataFixer);
         this.soundHandler = new SoundHandler(this.resourceManager, this.gameSettings);
@@ -483,6 +483,8 @@
         this.resourceManager.registerReloadListener(new GrassColorReloadListener());
         this.resourceManager.registerReloadListener(new FoliageColorReloadListener());
         this.mouseHelper = new MouseHelper();
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar bar= net.minecraftforge.fml.common.ProgressManager.push("Rendering Setup", 5, true);
+        bar.step("GL Setup");
         this.checkGLError("Pre startup");
         GlStateManager.enableTexture2D();
         GlStateManager.shadeModel(7425);
@@ -496,19 +498,24 @@
         GlStateManager.loadIdentity();
         GlStateManager.matrixMode(5888);
         this.checkGLError("Startup");
+        bar.step("Loading Texture Map");
         this.textureMapBlocks = new TextureMap("textures");
         this.textureMapBlocks.setMipmapLevels(this.gameSettings.mipmapLevels);
         this.renderEngine.loadTickableTexture(TextureMap.LOCATION_BLOCKS_TEXTURE, this.textureMapBlocks);
         this.renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         this.textureMapBlocks.setBlurMipmapDirect(false, this.gameSettings.mipmapLevels > 0);
+        bar.step("Loading Model Manager");
         this.modelManager = new ModelManager(this.textureMapBlocks);
         this.resourceManager.registerReloadListener(this.modelManager);
         this.blockColors = BlockColors.init();
         this.itemColors = ItemColors.init(this.blockColors);
+        bar.step("Loading Item Renderer");
         this.renderItem = new RenderItem(this.renderEngine, this.modelManager, this.itemColors);
         this.renderManager = new RenderManager(this.renderEngine, this.renderItem);
         this.itemRenderer = new ItemRenderer(this);
         this.resourceManager.registerReloadListener(this.renderItem);
+        bar.step("Loading Entity Renderer");
+        net.minecraftforge.fml.client.SplashProgress.pause();
         this.entityRenderer = new EntityRenderer(this, this.resourceManager);
         this.resourceManager.registerReloadListener(this.entityRenderer);
         this.blockRenderDispatcher = new BlockRendererDispatcher(this.modelManager.getBlockModelShapes(), this.blockColors);
@@ -519,23 +526,27 @@
         this.resourceManager.registerReloadListener(this.searchTreeManager);
         GlStateManager.viewport(0, 0, this.displayWidth, this.displayHeight);
         this.effectRenderer = new ParticleManager(this.world, this.renderEngine);
+        net.minecraftforge.fml.client.SplashProgress.resume();
+        net.minecraftforge.fml.common.ProgressManager.pop(bar);
+        net.minecraftforge.fml.client.FMLClientHandler.instance().finishMinecraftLoading();
         this.checkGLError("Post startup");
-        this.ingameGUI = new GuiIngame(this);
+        this.ingameGUI = new net.minecraftforge.client.GuiIngameForge(this);
 
         if (this.serverName != null)
         {
-            this.displayGuiScreen(new GuiConnecting(new GuiMainMenu(), this, this.serverName, this.serverPort));
+            net.minecraftforge.fml.client.FMLClientHandler.instance().connectToServerAtStartup(this.serverName, this.serverPort);
         }
         else
         {
             this.displayGuiScreen(new GuiMainMenu());
         }
 
-        this.renderEngine.deleteTexture(this.mojangLogo);
+        net.minecraftforge.fml.client.SplashProgress.clearVanillaResources(renderEngine, mojangLogo);
         this.mojangLogo = null;
         this.loadingScreen = new LoadingScreenRenderer(this);
         this.debugRenderer = new DebugRenderer(this);
 
+        net.minecraftforge.fml.client.FMLClientHandler.instance().onInitializationComplete();
         if (this.gameSettings.fullScreen && !this.fullscreen)
         {
             this.toggleFullscreen();
@@ -600,34 +611,13 @@
         this.metadataSerializer.registerMetadataSectionType(new LanguageMetadataSectionSerializer(), LanguageMetadataSection.class);
     }
 
-    private void createDisplay() throws LWJGLException
+    private void createDisplay()
     {
         Display.setResizable(true);
-        Display.setTitle("Minecraft 1.12.2");
-
-        try
-        {
-            Display.create(new PixelFormat().withDepthBits(24));
-        }
-        catch (LWJGLException lwjglexception)
-        {
-            LOGGER.error("Couldn't set pixel format", (Throwable)lwjglexception);
-
-            try
-            {
-                Thread.sleep(1000L);
-            }
-            catch (InterruptedException interruptedexception)
-            {
-            }
-
-            if (this.fullscreen)
-            {
-                this.updateDisplayMode();
-            }
-
-            Display.create();
-        }
+        Display.setTitle("Cleanroom");
+
+        Display.create((new PixelFormat()).withDepthBits(24));
+
     }
 
     private void setInitialDisplayMode() throws LWJGLException
@@ -710,6 +700,7 @@
 
     private void startTimerHackThread()
     {
+        if (!org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS) return;
         Thread thread = new Thread("Timer hack thread")
         {
             @Override
@@ -728,6 +719,7 @@
             }
         };
         thread.setDaemon(true);
+        thread.setPriority(Thread.MIN_PRIORITY);
         thread.start();
     }
 
@@ -743,21 +735,23 @@
         File file2 = new File(file1, "crash-" + new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss").format(new Date()) + "-client.txt");
         Bootstrap.printToSYSOUT(crashReportIn.getCompleteReport());
 
+        int retVal;
         if (crashReportIn.getFile() != null)
         {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + crashReportIn.getFile());
-            System.exit(-1);
+            retVal = -1;
         }
         else if (crashReportIn.saveToFile(file2))
         {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
-            System.exit(-1);
+            retVal = -1;
         }
         else
         {
             Bootstrap.printToSYSOUT("#@?@# Game crashed! Crash report could not be saved. #@?@#");
-            System.exit(-2);
+            retVal = -2;
         }
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().handleExit(retVal);
     }
 
     public boolean isUnicode()
@@ -765,6 +759,7 @@
         return this.languageManager.isCurrentLocaleUnicode() || this.gameSettings.forceUnicodeFont;
     }
 
+    @Deprecated // Forge: Use selective refreshResources method in FMLClientHandler
     public void refreshResources()
     {
         List<IResourcePack> list = Lists.newArrayList(this.defaultResourcePacks);
@@ -967,11 +962,6 @@
 
     public void displayGuiScreen(@Nullable GuiScreen guiScreenIn)
     {
-        if (this.currentScreen != null)
-        {
-            this.currentScreen.onGuiClosed();
-        }
-
         if (guiScreenIn == null && this.world == null)
         {
             guiScreenIn = new GuiMainMenu();
@@ -981,6 +971,17 @@
             guiScreenIn = new GuiGameOver(null);
         }
 
+        GuiScreen old = this.currentScreen;
+        net.minecraftforge.client.event.GuiOpenEvent event = new net.minecraftforge.client.event.GuiOpenEvent(guiScreenIn);
+
+        if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+
+        guiScreenIn = event.getGui();
+        if (old != null && guiScreenIn != old)
+        {
+            old.onGuiClosed();
+        }
+
         if (guiScreenIn instanceof GuiMainMenu || guiScreenIn instanceof GuiMultiplayer)
         {
             this.gameSettings.showDebugInfo = false;
@@ -1091,7 +1092,7 @@
         long i1 = System.nanoTime() - l;
         this.checkGLError("Pre render");
         this.profiler.endStartSection("sound");
-        this.soundHandler.setListener(this.player, this.timer.renderPartialTicks);
+        this.soundHandler.setListener(this.getRenderViewEntity(), this.timer.renderPartialTicks); //Forge: MC-46445 Spectator mode particles and sounds computed from where you have been before
         this.profiler.endSection();
         this.profiler.startSection("render");
         GlStateManager.pushMatrix();
@@ -1103,11 +1104,13 @@
 
         if (!this.skipRenderWorld)
         {
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().onRenderTickStart(this.timer.renderPartialTicks);
             this.profiler.endStartSection("gameRenderer");
             this.entityRenderer.updateCameraAndRender(this.isGamePaused ? this.renderPartialTicksPaused : this.timer.renderPartialTicks, i);
             this.profiler.endStartSection("toasts");
             this.toastGui.drawToast(new ScaledResolution(this));
             this.profiler.endSection();
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().onRenderTickEnd(this.timer.renderPartialTicks);
         }
 
         this.profiler.endSection();
@@ -1476,10 +1479,9 @@
             {
                 BlockPos blockpos = this.objectMouseOver.getBlockPos();
 
-                if (this.world.getBlockState(blockpos).getMaterial() != Material.AIR
-                        && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit))
+                if (!this.world.isAirBlock(blockpos) && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit))
                 {
-                    this.effectRenderer.addBlockHitEffects(blockpos, this.objectMouseOver.sideHit);
+                    this.effectRenderer.addBlockHitEffects(blockpos, this.objectMouseOver);
                     this.player.swingArm(EnumHand.MAIN_HAND);
                 }
             }
@@ -1513,7 +1515,7 @@
                     case BLOCK:
                         BlockPos blockpos = this.objectMouseOver.getBlockPos();
 
-                        if (this.world.getBlockState(blockpos).getMaterial() != Material.AIR)
+                        if (!this.world.isAirBlock(blockpos))
                         {
                             this.playerController.clickBlock(blockpos, this.objectMouseOver.sideHit);
                             break;
@@ -1527,6 +1529,7 @@
                         }
 
                         this.player.resetCooldown();
+                        net.minecraftforge.common.ForgeHooks.onEmptyLeftClick(this.player);
                 }
 
                 this.player.swingArm(EnumHand.MAIN_HAND);
@@ -1601,6 +1604,7 @@
                         }
                     }
 
+                    if (itemstack.isEmpty() && (this.objectMouseOver == null || this.objectMouseOver.typeOfHit == RayTraceResult.Type.MISS)) net.minecraftforge.common.ForgeHooks.onEmptyClick(this.player, enumhand);
                     if (!itemstack.isEmpty() && this.playerController.processRightClick(this.player, this.world, enumhand) == EnumActionResult.SUCCESS
                        )
                     {
@@ -1614,6 +1618,10 @@
 
     public void toggleFullscreen()
     {
+        if (net.minecraftforge.common.ForgeEarlyConfig.WINDOW_BORDERLESS_REPLACES_FULLSCREEN) {
+            Display.toggleBorderless();
+            return;
+        }
         try
         {
             this.fullscreen = !this.fullscreen;
@@ -1662,6 +1670,11 @@
             }
 
             Display.setFullscreen(this.fullscreen);
+            if (!this.fullscreen && (Util.getOSType() == Util.EnumOS.WINDOWS)) //Forge: Fix MC-68754, Screen is not resizeable after exiting fullscreen due to LWJGL bug https://github.com/LWJGL/lwjgl/issues/142 which is fixed, but not in the version MC ships
+            {
+                Display.setResizable(false);
+                Display.setResizable(true);
+            }
             Display.setVSyncEnabled(this.gameSettings.enableVsync);
             this.updateDisplay();
         }
@@ -1708,6 +1721,8 @@
             this.rightClickDelayTimer--;
         }
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreClientTick();
+
         this.profiler.startSection("gui");
 
         if (!this.isGamePaused)
@@ -1914,6 +1929,7 @@
         }
 
         this.profiler.endSection();
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostClientTick();
         this.systemTime = getSystemTime();
     }
 
@@ -2019,6 +2035,7 @@
                     }
                 }
             }
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().fireKeyInput();
         }
 
         this.processKeyBinds();
@@ -2267,6 +2284,8 @@
     {
         while (Mouse.next())
         {
+            if (net.minecraftforge.client.ForgeHooksClient.postMouseEvent()) continue;
+
             int i = Mouse.getEventButton();
             KeyBinding.setKeyBindState(i - 100, Mouse.getEventButtonState());
 
@@ -2322,6 +2341,7 @@
                     this.currentScreen.handleMouseInput();
                 }
             }
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().fireMouseInput();
         }
     }
 
@@ -2339,6 +2359,7 @@
 
     public void launchIntegratedServer(String folderName, String worldName, @Nullable WorldSettings worldSettingsIn)
     {
+        net.minecraftforge.fml.client.FMLClientHandler.instance().startIntegratedServer(folderName, worldName, worldSettingsIn);
         this.loadWorld(null);
         System.gc();
         ISaveHandler isavehandler = this.saveLoader.getSaveLoader(folderName, false);
@@ -2385,6 +2406,12 @@
 
         while (!this.integratedServer.serverIsInRunLoop())
         {
+            if (!net.minecraftforge.fml.common.StartupQuery.check() || this.integratedServer.isServerStopped())
+            {
+                loadWorld(null);
+                displayGuiScreen(null);
+                return;
+            }
             String s = this.integratedServer.getUserMessage();
 
             if (s != null)
@@ -2409,8 +2436,14 @@
         SocketAddress socketaddress = this.integratedServer.getNetworkSystem().addLocalEndpoint();
         NetworkManager networkmanager = NetworkManager.provideLocalClient(socketaddress);
         networkmanager.setNetHandler(new NetHandlerLoginClient(networkmanager, this, null));
-        networkmanager.sendPacket(new C00Handshake(socketaddress.toString(), 0, EnumConnectionState.LOGIN));
-        networkmanager.sendPacket(new CPacketLoginStart(this.getSession().getProfile()));
+        networkmanager.sendPacket(new C00Handshake(socketaddress.toString(), 0, EnumConnectionState.LOGIN, true));
+        com.mojang.authlib.GameProfile gameProfile = this.getSession().getProfile();
+        if (!this.getSession().hasCachedProperties())
+        {
+            gameProfile = sessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
+            this.getSession().setProperties(gameProfile.getProperties());
+        }
+        networkmanager.sendPacket(new CPacketLoginStart(gameProfile));
         this.networkManager = networkmanager;
     }
 
@@ -2421,6 +2454,8 @@
 
     public void loadWorld(@Nullable WorldClient worldClientIn, String loadingMessage)
     {
+        if (world != null) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(world));
+
         if (worldClientIn == null)
         {
             NetHandlerPlayClient nethandlerplayclient = this.getConnection();
@@ -2433,6 +2468,18 @@
             if (this.integratedServer != null && this.integratedServer.isAnvilFileSet())
             {
                 this.integratedServer.initiateShutdown();
+                if (loadingScreen != null && this.running)
+                {
+                    this.loadingScreen.displayLoadingString(I18n.format("forge.client.shutdown.internal"));
+                }
+                while (!integratedServer.isServerStopped())
+                {
+                    try
+                    {
+                        Thread.sleep(10);
+                    }
+                    catch (InterruptedException ie) {}
+                }
             }
 
             this.integratedServer = null;
@@ -2456,6 +2503,7 @@
             this.ingameGUI.resetPlayersOverlayFooterHeader();
             this.setServerData(null);
             this.integratedServerIsRunning = false;
+            net.minecraftforge.fml.client.FMLClientHandler.instance().handleClientWorldClosing(this.world);
         }
 
         this.soundHandler.stopSounds();
@@ -2472,6 +2520,7 @@
         }
 
         TileEntityRendererDispatcher.instance.setWorld(worldClientIn);
+        net.minecraftforge.client.MinecraftForgeClient.clearRenderCache();
 
         if (worldClientIn != null)
         {
@@ -2533,6 +2582,7 @@
                                  this.player == null ? new RecipeBook() : this.player.getRecipeBook()
                              );
         this.player.getDataManager().setEntryValues(entityplayersp.getDataManager().getAll());
+        this.player.updateSyncFields(entityplayersp); // Forge: fix MC-10657
         this.player.dimension = dimension;
         this.renderViewEntity = this.player;
         this.player.preparePlayerToSpawn();
@@ -2580,159 +2630,8 @@
     {
         if (this.objectMouseOver != null && this.objectMouseOver.typeOfHit != RayTraceResult.Type.MISS)
         {
-            boolean flag = this.player.capabilities.isCreativeMode;
-            TileEntity tileentity = null;
-            ItemStack itemstack;
-
-            if (this.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
-            {
-                BlockPos blockpos = this.objectMouseOver.getBlockPos();
-                IBlockState iblockstate = this.world.getBlockState(blockpos);
-                Block block = iblockstate.getBlock();
-
-                if (iblockstate.getMaterial() == Material.AIR)
-                {
-                    return;
-                }
-
-                itemstack = block.getItem(this.world, blockpos, iblockstate);
-
-                if (itemstack.isEmpty())
-                {
-                    return;
-                }
-
-                if (flag && GuiScreen.isCtrlKeyDown() && block.hasTileEntity())
-                {
-                    tileentity = this.world.getTileEntity(blockpos);
-                }
-            }
-            else
-            {
-                if (this.objectMouseOver.typeOfHit != RayTraceResult.Type.ENTITY || this.objectMouseOver.entityHit == null || !flag)
-                {
-                    return;
-                }
-
-                if (this.objectMouseOver.entityHit instanceof EntityPainting)
-                {
-                    itemstack = new ItemStack(Items.PAINTING);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityLeashKnot)
-                {
-                    itemstack = new ItemStack(Items.LEAD);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityItemFrame)
-                {
-                    EntityItemFrame entityitemframe = (EntityItemFrame)this.objectMouseOver.entityHit;
-                    ItemStack itemstack1 = entityitemframe.getDisplayedItem();
-
-                    if (itemstack1.isEmpty())
-                    {
-                        itemstack = new ItemStack(Items.ITEM_FRAME);
-                    }
-                    else
-                    {
-                        itemstack = itemstack1.copy();
-                    }
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityMinecart)
-                {
-                    EntityMinecart entityminecart = (EntityMinecart)this.objectMouseOver.entityHit;
-                    Item item;
-
-                    switch (entityminecart.getType())
-                    {
-                        case FURNACE:
-                            item = Items.FURNACE_MINECART;
-                            break;
-                        case CHEST:
-                            item = Items.CHEST_MINECART;
-                            break;
-                        case TNT:
-                            item = Items.TNT_MINECART;
-                            break;
-                        case HOPPER:
-                            item = Items.HOPPER_MINECART;
-                            break;
-                        case COMMAND_BLOCK:
-                            item = Items.COMMAND_BLOCK_MINECART;
-                            break;
-                        default:
-                            item = Items.MINECART;
-                    }
-
-                    itemstack = new ItemStack(item);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityBoat)
-                {
-                    itemstack = new ItemStack(((EntityBoat)this.objectMouseOver.entityHit).getItemBoat());
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityArmorStand)
-                {
-                    itemstack = new ItemStack(Items.ARMOR_STAND);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityEnderCrystal)
-                {
-                    itemstack = new ItemStack(Items.END_CRYSTAL);
-                }
-                else
-                {
-                    ResourceLocation resourcelocation = EntityList.getKey(this.objectMouseOver.entityHit);
-
-                    if (resourcelocation == null || !EntityList.ENTITY_EGGS.containsKey(resourcelocation))
-                    {
-                        return;
-                    }
-
-                    itemstack = new ItemStack(Items.SPAWN_EGG);
-                    ItemMonsterPlacer.applyEntityIdToItemStack(itemstack, resourcelocation);
-                }
-            }
-
-            if (itemstack.isEmpty())
-            {
-                String s = "";
-
-                if (this.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
-                {
-                    s = Block.REGISTRY.getNameForObject(this.world.getBlockState(this.objectMouseOver.getBlockPos()).getBlock()).toString();
-                }
-                else if (this.objectMouseOver.typeOfHit == RayTraceResult.Type.ENTITY)
-                {
-                    s = EntityList.getKey(this.objectMouseOver.entityHit).toString();
-                }
-
-                LOGGER.warn("Picking on: [{}] {} gave null item", this.objectMouseOver.typeOfHit, s);
-            }
-            else
-            {
-                InventoryPlayer inventoryplayer = this.player.inventory;
-
-                if (tileentity != null)
-                {
-                    this.storeTEInStack(itemstack, tileentity);
-                }
-
-                int i = inventoryplayer.getSlotFor(itemstack);
-
-                if (flag)
-                {
-                    inventoryplayer.setPickedItemStack(itemstack);
-                    this.playerController.sendSlotPacket(this.player.getHeldItem(EnumHand.MAIN_HAND), 36 + inventoryplayer.currentItem);
-                }
-                else if (i != -1)
-                {
-                    if (InventoryPlayer.isHotbar(i))
-                    {
-                        inventoryplayer.currentItem = i;
-                    }
-                    else
-                    {
-                        this.playerController.pickItem(i);
-                    }
-                }
-            }
+            net.minecraftforge.common.ForgeHooks.onPickBlock(this.objectMouseOver, this.player, this.world);
+            // We delete this code wholly instead of commenting it out, to make sure we detect changes in it between MC versions
         }
     }
 
@@ -2780,7 +2679,14 @@
         {
             public String call()
             {
-                return GlStateManager.glGetString(7937) + " GL version " + GlStateManager.glGetString(7938) + ", " + GlStateManager.glGetString(7936);
+                if (Minecraft.getMinecraft().isCallingFromMinecraftThread() && Display.isCreated())
+                {
+                    return GlStateManager.glGetString(7937) + " GL version " + GlStateManager.glGetString(7938) + ", " + GlStateManager.glGetString(7936);
+                }
+                else
+                {
+                    return "No OpenGL context found in the current thread";
+                }
             }
         });
         theCrash.getCategory().addDetail("GL Caps", new ICrashReportDetail<String>()
@@ -2885,6 +2791,7 @@
         return instance;
     }
 
+    @Deprecated // Forge: Use selective scheduleResourceRefresh method in FMLClientHandler
     public ListenableFuture<Object> scheduleResourcesRefresh()
     {
         return this.addScheduledTask(new Runnable()
@@ -3063,18 +2970,8 @@
 
     public static int getGLMaximumTextureSize()
     {
-        for (int i = 16384; i > 0; i >>= 1)
-        {
-            GlStateManager.glTexImage2D(32868, 0, 6408, i, i, 0, 6408, 5121, null);
-            int j = GlStateManager.glGetTexLevelParameteri(32868, 0, 4096);
-
-            if (j != 0)
-            {
-                return i;
-            }
-        }
-
-        return -1;
+        //Forge we redirect this to our code which caches the value before any splash screen stuff is done.
+        return net.minecraftforge.fml.client.SplashProgress.getMaxTextureSize();
     }
 
     @Override
@@ -3207,6 +3104,9 @@
         }
         else if (this.player != null)
         {
+            MusicTicker.MusicType type = this.world.provider.getMusicType();
+            if (type != null) return type;
+
             if (this.player.world.provider instanceof WorldProviderHell)
             {
                 return MusicTicker.MusicType.NETHER;
@@ -3238,11 +3138,11 @@
             {
                 if (Keyboard.getEventKeyState())
                 {
-                    if (i == this.gameSettings.keyBindFullscreen.getKeyCode())
+                    if (this.gameSettings.keyBindFullscreen.isActiveAndMatches(i))
                     {
                         this.toggleFullscreen();
                     }
-                    else if (i == this.gameSettings.keyBindScreenshot.getKeyCode())
+                    else if (this.gameSettings.keyBindScreenshot.isActiveAndMatches(i))
                     {
                         this.ingameGUI
                         .getChatGUI()
@@ -3260,6 +3160,7 @@
                         }
                     }
                 }
+                else if (this.currentScreen instanceof GuiControls) ((GuiControls)this.currentScreen).buttonId = null;
             }
         }
     }
@@ -3298,7 +3199,7 @@
             }
             catch (Exception exception)
             {
-                return Futures.immediateFailedCheckedFuture(exception);
+                return Futures.immediateFailedFuture(exception);
             }
         }
         else
@@ -3391,6 +3292,12 @@
         return this.blockColors;
     }
 
+    // FORGE
+    public ItemColors getItemColors()
+    {
+        return this.itemColors;
+    }
+
     public boolean isReducedDebug()
     {
         return this.player != null && this.player.hasReducedDebug() || this.gameSettings.reducedDebugInfo;
@@ -3404,5 +3311,10 @@
     public Tutorial getTutorial()
     {
         return this.tutorial;
+    }
+
+    public SearchTreeManager getSearchTreeManager()
+    {
+        return this.searchTreeManager;
     }
 }
