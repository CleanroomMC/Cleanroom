--- before/net/minecraft/client/renderer/BufferBuilder.java
+++ after/net/minecraft/client/renderer/BufferBuilder.java
@@ -132,6 +132,8 @@
 
             bitset.set(i1);
         }
+        this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
+        this.rawIntBuffer.position(this.getBufferSize());
     }
 
     public BufferBuilder.State getVertexState()
@@ -424,8 +426,8 @@
 
     public void addVertexData(int[] vertexData)
     {
-        this.growBuffer(vertexData.length * 4);
-        ((Buffer)this.rawIntBuffer).position(this.getBufferSize());
+        this.growBuffer(vertexData.length * 4 + this.vertexFormat.getSize());//Forge, fix MC-122110
+        this.rawIntBuffer.position(this.getBufferSize());
         this.rawIntBuffer.put(vertexData);
         this.vertexCount = this.vertexCount + vertexData.length / this.vertexFormat.getIntegerSize();
     }
@@ -613,5 +615,28 @@
         {
             return this.stateVertexFormat;
         }
+    }
+
+
+    //For some unknown reason Mojang changed the vanilla function to hardcode alpha as 255.... So lets re-add the parameter -.-
+    public void putColorRGBA(int index, int red, int green, int blue, int alpha)
+    {
+        if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
+            this.rawIntBuffer.put(index, alpha << 24 | blue << 16 | green << 8 | red);
+        else
+            this.rawIntBuffer.put(index, red << 24 | green << 16 | blue << 8 | alpha);
+    }
+
+    public boolean isColorDisabled()
+    {
+        return this.noColor;
+    }
+
+    public void putBulkData(ByteBuffer buffer)
+    {
+        growBuffer(buffer.limit() + this.vertexFormat.getSize());
+        this.byteBuffer.position(this.vertexCount * this.vertexFormat.getSize());
+        this.byteBuffer.put(buffer);
+        this.vertexCount += buffer.limit() / this.vertexFormat.getSize();
     }
 }
