--- before/net/minecraft/client/renderer/BufferBuilder.java
+++ after/net/minecraft/client/renderer/BufferBuilder.java
@@ -1,7 +1,6 @@
 package net.minecraft.client.renderer;
 
 import com.google.common.primitives.Floats;
-import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
@@ -47,23 +46,22 @@
 
     private void growBuffer(int increaseAmount)
     {
-        if (MathHelper.roundUp(increaseAmount, 4) / 4 > this.rawIntBuffer.remaining()
-                || this.vertexCount * this.vertexFormat.getSize() + increaseAmount > this.byteBuffer.capacity())
+        if (MathHelper.roundUp(increaseAmount, 4) / 4 > this.rawIntBuffer.remaining() || this.vertexCount * this.vertexFormat.getSize() + increaseAmount > this.byteBuffer.capacity())
         {
             int i = this.byteBuffer.capacity();
             int j = i + MathHelper.roundUp(increaseAmount, 2097152);
-            LOGGER.debug("Needed to grow BufferBuilder buffer: Old size {} bytes, new size {} bytes.", i, j);
+            LOGGER.debug("Needed to grow BufferBuilder buffer: Old size {} bytes, new size {} bytes.", Integer.valueOf(i), Integer.valueOf(j));
             int k = this.rawIntBuffer.position();
             ByteBuffer bytebuffer = GLAllocation.createDirectByteBuffer(j);
-            ((Buffer)this.byteBuffer).position(0);
+            this.byteBuffer.position(0);
             bytebuffer.put(this.byteBuffer);
-            ((Buffer)bytebuffer).rewind();
+            bytebuffer.rewind();
             this.byteBuffer = bytebuffer;
             this.rawFloatBuffer = this.byteBuffer.asFloatBuffer().asReadOnlyBuffer();
             this.rawIntBuffer = this.byteBuffer.asIntBuffer();
-            ((Buffer)this.rawIntBuffer).position(k);
+            this.rawIntBuffer.position(k);
             this.rawShortBuffer = this.byteBuffer.asShortBuffer();
-            ((Buffer)this.rawShortBuffer).position(k << 1);
+            this.rawShortBuffer.position(k << 1);
         }
     }
 
@@ -72,21 +70,14 @@
         int i = this.vertexCount / 4;
         final float[] afloat = new float[i];
 
-        for (int j = 0; j < i; j++)
+        for (int j = 0; j < i; ++j)
         {
-            afloat[j] = getDistanceSq(
-                            this.rawFloatBuffer,
-                            (float)((double)cameraX + this.xOffset),
-                            (float)((double)cameraY + this.yOffset),
-                            (float)((double)cameraZ + this.zOffset),
-                            this.vertexFormat.getIntegerSize(),
-                            j * this.vertexFormat.getSize()
-                        );
+            afloat[j] = getDistanceSq(this.rawFloatBuffer, (float)((double)cameraX + this.xOffset), (float)((double)cameraY + this.yOffset), (float)((double)cameraZ + this.zOffset), this.vertexFormat.getIntegerSize(), j * this.vertexFormat.getSize());
         }
 
         Integer[] ainteger = new Integer[i];
 
-        for (int k = 0; k < ainteger.length; k++)
+        for (int k = 0; k < ainteger.length; ++k)
         {
             ainteger[k] = k;
         }
@@ -95,7 +86,7 @@
         {
             public int compare(Integer p_compare_1_, Integer p_compare_2_)
             {
-                return Floats.compare(afloat[p_compare_2_], afloat[p_compare_1_]);
+                return Floats.compare(afloat[p_compare_2_.intValue()], afloat[p_compare_1_.intValue()]);
             }
         });
         BitSet bitset = new BitSet();
@@ -104,45 +95,47 @@
 
         for (int i1 = bitset.nextClearBit(0); i1 < ainteger.length; i1 = bitset.nextClearBit(i1 + 1))
         {
-            int j1 = ainteger[i1];
+            int j1 = ainteger[i1].intValue();
 
             if (j1 != i1)
             {
-                ((Buffer)this.rawIntBuffer).limit(j1 * l + l);
-                ((Buffer)this.rawIntBuffer).position(j1 * l);
+                this.rawIntBuffer.limit(j1 * l + l);
+                this.rawIntBuffer.position(j1 * l);
                 this.rawIntBuffer.get(aint);
                 int k1 = j1;
 
-                for (int l1 = ainteger[j1]; k1 != i1; l1 = ainteger[l1])
+                for (int l1 = ainteger[j1].intValue(); k1 != i1; l1 = ainteger[l1].intValue())
                 {
-                    ((Buffer)this.rawIntBuffer).limit(l1 * l + l);
-                    ((Buffer)this.rawIntBuffer).position(l1 * l);
+                    this.rawIntBuffer.limit(l1 * l + l);
+                    this.rawIntBuffer.position(l1 * l);
                     IntBuffer intbuffer = this.rawIntBuffer.slice();
-                    ((Buffer)this.rawIntBuffer).limit(k1 * l + l);
-                    ((Buffer)this.rawIntBuffer).position(k1 * l);
+                    this.rawIntBuffer.limit(k1 * l + l);
+                    this.rawIntBuffer.position(k1 * l);
                     this.rawIntBuffer.put(intbuffer);
                     bitset.set(k1);
                     k1 = l1;
                 }
 
-                ((Buffer)this.rawIntBuffer).limit(i1 * l + l);
-                ((Buffer)this.rawIntBuffer).position(i1 * l);
+                this.rawIntBuffer.limit(i1 * l + l);
+                this.rawIntBuffer.position(i1 * l);
                 this.rawIntBuffer.put(aint);
             }
 
             bitset.set(i1);
         }
+        this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
+        this.rawIntBuffer.position(this.getBufferSize());
     }
 
     public BufferBuilder.State getVertexState()
     {
-        ((Buffer)this.rawIntBuffer).rewind();
+        this.rawIntBuffer.rewind();
         int i = this.getBufferSize();
-        ((Buffer)this.rawIntBuffer).limit(i);
+        this.rawIntBuffer.limit(i);
         int[] aint = new int[i];
         this.rawIntBuffer.get(aint);
-        ((Buffer)this.rawIntBuffer).limit(this.rawIntBuffer.capacity());
-        ((Buffer)this.rawIntBuffer).position(i);
+        this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
+        this.rawIntBuffer.position(i);
         return new BufferBuilder.State(aint, new VertexFormat(this.vertexFormat));
     }
 
@@ -173,7 +166,7 @@
 
     public void setVertexState(BufferBuilder.State state)
     {
-        ((Buffer)this.rawIntBuffer).clear();
+        this.rawIntBuffer.clear();
         this.growBuffer(state.getRawBuffer().length * 4);
         this.rawIntBuffer.put(state.getRawBuffer());
         this.vertexCount = state.getVertexCount();
@@ -201,7 +194,7 @@
             this.vertexFormat = format;
             this.vertexFormatElement = format.getElement(this.vertexFormatIndex);
             this.noColor = false;
-            ((Buffer)this.byteBuffer).limit(this.byteBuffer.capacity());
+            this.byteBuffer.limit(this.byteBuffer.capacity());
         }
     }
 
@@ -280,7 +273,7 @@
         int i = this.vertexFormat.getIntegerSize();
         int j = (this.vertexCount - 4) * i;
 
-        for (int k = 0; k < 4; k++)
+        for (int k = 0; k < 4; ++k)
         {
             int l = j + k * i;
             int i1 = l + 1;
@@ -307,19 +300,19 @@
 
             if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
             {
-                int k = (int)((float)(j & 0xFF) * red);
-                int l = (int)((float)(j >> 8 & 0xFF) * green);
-                int i1 = (int)((float)(j >> 16 & 0xFF) * blue);
-                j &= -16777216;
-                j |= i1 << 16 | l << 8 | k;
+                int k = (int)((float)(j & 255) * red);
+                int l = (int)((float)(j >> 8 & 255) * green);
+                int i1 = (int)((float)(j >> 16 & 255) * blue);
+                j = j & -16777216;
+                j = j | i1 << 16 | l << 8 | k;
             }
             else
             {
-                int j1 = (int)((float)(j >> 24 & 0xFF) * red);
-                int k1 = (int)((float)(j >> 16 & 0xFF) * green);
-                int l1 = (int)((float)(j >> 8 & 0xFF) * blue);
-                j &= 255;
-                j |= j1 << 24 | k1 << 16 | l1 << 8;
+                int j1 = (int)((float)(j >> 24 & 255) * red);
+                int k1 = (int)((float)(j >> 16 & 255) * green);
+                int l1 = (int)((float)(j >> 8 & 255) * blue);
+                j = j & 255;
+                j = j | j1 << 24 | k1 << 16 | l1 << 8;
             }
         }
 
@@ -329,9 +322,9 @@
     private void putColor(int argb, int vertexIndex)
     {
         int i = this.getColorIndex(vertexIndex);
-        int j = argb >> 16 & 0xFF;
-        int k = argb >> 8 & 0xFF;
-        int l = argb & 0xFF;
+        int j = argb >> 16 & 255;
+        int k = argb >> 8 & 255;
+        int l = argb & 255;
         this.putColorRGBA(i, j, k, l);
     }
 
@@ -348,11 +341,11 @@
     {
         if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
         {
-            this.rawIntBuffer.put(index, 0xFF000000 | blue << 16 | green << 8 | red);
+            this.rawIntBuffer.put(index, -16777216 | blue << 16 | green << 8 | red);
         }
         else
         {
-            this.rawIntBuffer.put(index, red << 24 | green << 16 | blue << 8 | 0xFF);
+            this.rawIntBuffer.put(index, red << 24 | green << 16 | blue << 8 | 255);
         }
     }
 
@@ -424,15 +417,15 @@
 
     public void addVertexData(int[] vertexData)
     {
-        this.growBuffer(vertexData.length * 4);
-        ((Buffer)this.rawIntBuffer).position(this.getBufferSize());
+        this.growBuffer(vertexData.length * 4 + this.vertexFormat.getSize());//Forge, fix MC-122110
+        this.rawIntBuffer.position(this.getBufferSize());
         this.rawIntBuffer.put(vertexData);
-        this.vertexCount = this.vertexCount + vertexData.length / this.vertexFormat.getIntegerSize();
+        this.vertexCount += vertexData.length / this.vertexFormat.getIntegerSize();
     }
 
     public void endVertex()
     {
-        this.vertexCount++;
+        ++this.vertexCount;
         this.growBuffer(this.vertexFormat.getSize());
     }
 
@@ -486,8 +479,8 @@
 
     private void nextVertexFormatIndex()
     {
-        this.vertexFormatIndex++;
-        this.vertexFormatIndex = this.vertexFormatIndex % this.vertexFormat.getElementCount();
+        ++this.vertexFormatIndex;
+        this.vertexFormatIndex %= this.vertexFormat.getElementCount();
         this.vertexFormatElement = this.vertexFormat.getElement(this.vertexFormatIndex);
 
         if (this.vertexFormatElement.getUsage() == VertexFormatElement.EnumUsage.PADDING)
@@ -515,15 +508,15 @@
                 break;
             case USHORT:
             case SHORT:
-                this.byteBuffer.putShort(i, (short)((int)x * 32767 & 65535));
-                this.byteBuffer.putShort(i + 2, (short)((int)y * 32767 & 65535));
-                this.byteBuffer.putShort(i + 4, (short)((int)z * 32767 & 65535));
+                this.byteBuffer.putShort(i, (short)((int)(x * 32767) & 65535));
+                this.byteBuffer.putShort(i + 2, (short)((int)(y * 32767) & 65535));
+                this.byteBuffer.putShort(i + 4, (short)((int)(z * 32767) & 65535));
                 break;
             case UBYTE:
             case BYTE:
-                this.byteBuffer.put(i, (byte)((int)x * 127 & 0xFF));
-                this.byteBuffer.put(i + 1, (byte)((int)y * 127 & 0xFF));
-                this.byteBuffer.put(i + 2, (byte)((int)z * 127 & 0xFF));
+                this.byteBuffer.put(i, (byte)((int)(x * 127) & 255));
+                this.byteBuffer.put(i + 1, (byte)((int)(y * 127) & 255));
+                this.byteBuffer.put(i + 2, (byte)((int)(z * 127) & 255));
         }
 
         this.nextVertexFormatIndex();
@@ -546,8 +539,8 @@
         else
         {
             this.isDrawing = false;
-            ((Buffer)this.byteBuffer).position(0);
-            ((Buffer)this.byteBuffer).limit(this.getBufferSize() * 4);
+            this.byteBuffer.position(0);
+            this.byteBuffer.limit(this.getBufferSize() * 4);
         }
     }
 
@@ -573,7 +566,7 @@
 
     public void putColor4(int argb)
     {
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             this.putColor(argb, i + 1);
         }
@@ -581,7 +574,7 @@
 
     public void putColorRGB_F4(float red, float green, float blue)
     {
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             this.putColorRGB_F(red, green, blue, i + 1);
         }
@@ -613,5 +606,28 @@
         {
             return this.stateVertexFormat;
         }
+    }
+
+
+    //For some unknown reason Mojang changed the vanilla function to hardcode alpha as 255.... So lets re-add the parameter -.-
+    public void putColorRGBA(int index, int red, int green, int blue, int alpha)
+    {
+        if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
+            this.rawIntBuffer.put(index, alpha << 24 | blue << 16 | green << 8 | red);
+        else
+            this.rawIntBuffer.put(index, red << 24 | green << 16 | blue << 8 | alpha);
+    }
+
+    public boolean isColorDisabled()
+    {
+        return this.noColor;
+    }
+
+    public void putBulkData(ByteBuffer buffer)
+    {
+        growBuffer(buffer.limit() + this.vertexFormat.getSize());
+        this.byteBuffer.position(this.vertexCount * this.vertexFormat.getSize());
+        this.byteBuffer.put(buffer);
+        this.vertexCount += buffer.limit() / this.vertexFormat.getSize();
     }
 }
