--- before/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ after/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
+import java.util.Iterator;
 import java.util.List;
 import net.minecraft.client.resources.IResource;
 import net.minecraft.client.resources.data.AnimationFrame;
@@ -19,7 +20,7 @@
 public class TextureAtlasSprite
 {
     private final String field_110984_i;
-    protected List<int[][]> field_110976_a = Lists.newArrayList();
+    protected List<int[][]> field_110976_a = Lists.<int[][]>newArrayList();
     protected int[][] field_176605_b;
     private AnimationMetadataSection field_110982_k;
     protected boolean field_130222_e;
@@ -49,12 +50,10 @@
         this.field_110975_c = p_110971_3_;
         this.field_110974_d = p_110971_4_;
         this.field_130222_e = p_110971_5_;
-        float f = (float)(0.01F / (double)p_110971_1_);
-        float f1 = (float)(0.01F / (double)p_110971_2_);
-        this.field_110979_l = (float)p_110971_3_ / (float)((double)p_110971_1_) + f;
-        this.field_110980_m = (float)(p_110971_3_ + this.field_130223_c) / (float)((double)p_110971_1_) - f;
-        this.field_110977_n = (float)p_110971_4_ / (float)p_110971_2_ + f1;
-        this.field_110978_o = (float)(p_110971_4_ + this.field_130224_d) / (float)p_110971_2_ - f1;
+        this.field_110979_l = (float)p_110971_3_ / (float)p_110971_1_;
+        this.field_110980_m = (float)(p_110971_3_ + this.field_130223_c) / (float)p_110971_1_;
+        this.field_110977_n = (float)p_110971_4_ / (float)p_110971_2_;
+        this.field_110978_o = (float)(p_110971_4_ + this.field_130224_d) / (float)p_110971_2_;
     }
 
     public void func_94217_a(TextureAtlasSprite p_94217_1_)
@@ -153,9 +152,7 @@
 
             if (i != k && k >= 0 && k < this.field_110976_a.size())
             {
-                TextureUtil.func_147955_a(
-                    this.field_110976_a.get(k), this.field_130223_c, this.field_130224_d, this.field_110975_c, this.field_110974_d, false, false
-                );
+                TextureUtil.func_147955_a(this.field_110976_a.get(k), this.field_130223_c, this.field_130224_d, this.field_110975_c, this.field_110974_d, false, false);
             }
         }
         else if (this.field_110982_k.func_177219_e())
@@ -166,15 +163,15 @@
 
     private void func_180599_n()
     {
-        double d0 = 1.0 - (double)this.field_110983_h / (double)this.field_110982_k.func_110472_a(this.field_110973_g);
+        double d0 = 1.0D - (double)this.field_110983_h / (double)this.field_110982_k.func_110472_a(this.field_110973_g);
         int i = this.field_110982_k.func_110468_c(this.field_110973_g);
         int j = this.field_110982_k.func_110473_c() == 0 ? this.field_110976_a.size() : this.field_110982_k.func_110473_c();
         int k = this.field_110982_k.func_110468_c((this.field_110973_g + 1) % j);
 
         if (i != k && k >= 0 && k < this.field_110976_a.size())
         {
-            int[][] aint = (int[][])this.field_110976_a.get(i);
-            int[][] aint1 = (int[][])this.field_110976_a.get(k);
+            int[][] aint = this.field_110976_a.get(i);
+            int[][] aint1 = this.field_110976_a.get(k);
 
             if (this.field_176605_b == null || this.field_176605_b.length != aint.length)
             {
@@ -194,10 +191,10 @@
                     {
                         int j1 = aint[l][i1];
                         int k1 = aint1[l][i1];
-                        int l1 = this.func_188535_a(d0, j1 >> 16 & 0xFF, k1 >> 16 & 0xFF);
-                        int i2 = this.func_188535_a(d0, j1 >> 8 & 0xFF, k1 >> 8 & 0xFF);
-                        int j2 = this.func_188535_a(d0, j1 & 0xFF, k1 & 0xFF);
-                        this.field_176605_b[l][i1] = j1 & 0xFF000000 | l1 << 16 | i2 << 8 | j2;
+                        int l1 = this.func_188535_a(d0, j1 >> 16 & 255, k1 >> 16 & 255);
+                        int i2 = this.func_188535_a(d0, j1 >> 8 & 255, k1 >> 8 & 255);
+                        int j2 = this.func_188535_a(d0, j1 & 255, k1 & 255);
+                        this.field_176605_b[l][i1] = j1 & -16777216 | l1 << 16 | i2 << 8 | j2;
                     }
                 }
             }
@@ -208,7 +205,7 @@
 
     private int func_188535_a(double p_188535_1_, int p_188535_3_, int p_188535_4_)
     {
-        return (int)(p_188535_1_ * (double)p_188535_3_ + (1.0 - p_188535_1_) * (double)p_188535_4_);
+        return (int)(p_188535_1_ * (double)p_188535_3_ + (1.0D - p_188535_1_) * (double)p_188535_4_);
     }
 
     public int[][] func_147965_a(int p_147965_1_)
@@ -250,7 +247,7 @@
     public void func_188539_a(IResource p_188539_1_, int p_188539_2_) throws IOException
     {
         BufferedImage bufferedimage = TextureUtil.func_177053_a(p_188539_1_.func_110527_b());
-        AnimationMetadataSection animationmetadatasection = p_188539_1_.func_110526_a("animation");
+        AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)p_188539_1_.func_110526_a("animation");
         int[][] aint = new int[p_188539_2_][];
         aint[0] = new int[bufferedimage.getWidth() * bufferedimage.getHeight()];
         bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), aint[0], 0, bufferedimage.getWidth());
@@ -265,8 +262,12 @@
 
             if (animationmetadatasection.func_110473_c() > 0)
             {
-                for (int j : animationmetadatasection.func_130073_e())
+                Iterator lvt_7_1_ = animationmetadatasection.func_130073_e().iterator();
+
+                while (lvt_7_1_.hasNext())
                 {
+                    int j = ((Integer)lvt_7_1_.next()).intValue();
+
                     if (j >= i)
                     {
                         throw new RuntimeException("invalid frameindex " + j);
@@ -280,7 +281,7 @@
             }
             else
             {
-                List<AnimationFrame> list = Lists.newArrayList();
+                List<AnimationFrame> list = Lists.<AnimationFrame>newArrayList();
 
                 for (int k = 0; k < i; ++k)
                 {
@@ -288,20 +289,18 @@
                     list.add(new AnimationFrame(k, -1));
                 }
 
-                this.field_110982_k = new AnimationMetadataSection(
-                    list, this.field_130223_c, this.field_130224_d, animationmetadatasection.func_110469_d(), animationmetadatasection.func_177219_e()
-                );
+                this.field_110982_k = new AnimationMetadataSection(list, this.field_130223_c, this.field_130224_d, animationmetadatasection.func_110469_d(), animationmetadatasection.func_177219_e());
             }
         }
     }
 
     public void func_147963_d(int p_147963_1_)
     {
-        List<int[][]> list = Lists.newArrayList();
+        List<int[][]> list = Lists.<int[][]>newArrayList();
 
         for (int i = 0; i < this.field_110976_a.size(); ++i)
         {
-            final int[][] aint = (int[][])this.field_110976_a.get(i);
+            final int[][] aint = this.field_110976_a.get(i);
 
             if (aint != null)
             {
@@ -313,7 +312,7 @@
                 {
                     CrashReport crashreport = CrashReport.func_85055_a(throwable, "Generating mipmaps for frame");
                     CrashReportCategory crashreportcategory = crashreport.func_85058_a("Frame being iterated");
-                    crashreportcategory.func_71507_a("Frame index", i);
+                    crashreportcategory.func_71507_a("Frame index", Integer.valueOf(i));
                     crashreportcategory.func_189529_a("Frame sizes", new ICrashReportDetail<String>()
                     {
                         public String call() throws Exception
@@ -393,32 +392,43 @@
         this.field_110983_h = 0;
     }
 
-    @Override
     public String toString()
     {
-        return "TextureAtlasSprite{name='"
-               + this.field_110984_i
-               + '\''
-               + ", frameCount="
-               + this.field_110976_a.size()
-               + ", rotated="
-               + this.field_130222_e
-               + ", x="
-               + this.field_110975_c
-               + ", y="
-               + this.field_110974_d
-               + ", height="
-               + this.field_130224_d
-               + ", width="
-               + this.field_130223_c
-               + ", u0="
-               + this.field_110979_l
-               + ", u1="
-               + this.field_110980_m
-               + ", v0="
-               + this.field_110977_n
-               + ", v1="
-               + this.field_110978_o
-               + '}';
-    }
+        return "TextureAtlasSprite{name='" + this.field_110984_i + '\'' + ", frameCount=" + this.field_110976_a.size() + ", rotated=" + this.field_130222_e + ", x=" + this.field_110975_c + ", y=" + this.field_110974_d + ", height=" + this.field_130224_d + ", width=" + this.field_130223_c + ", u0=" + this.field_110979_l + ", u1=" + this.field_110980_m + ", v0=" + this.field_110977_n + ", v1=" + this.field_110978_o + '}';
+    }
+
+    /*===================================== FORGE START =====================================*/
+    /**
+     * The result of this function determines is the below 'load' function is called, and the
+     * default vanilla loading code is bypassed completely.
+     * @param manager Main resource manager
+     * @param location File resource location
+     * @return True to use your own custom load code and bypass vanilla loading.
+     */
+    public boolean hasCustomLoader(net.minecraft.client.resources.IResourceManager manager, net.minecraft.util.ResourceLocation location)
+    {
+        return false;
+    }
+
+    /**
+     * Load the specified resource as this sprite's data.
+     * Returning false from this function will prevent this icon from being stitched onto the master texture.
+     * @param manager Main resource manager
+     * @param location File resource location
+     * @param textureGetter accessor for dependencies. All of them will be loaded before this one
+     * @return False to prevent this Icon from being stitched
+     */
+    public boolean load(net.minecraft.client.resources.IResourceManager manager, net.minecraft.util.ResourceLocation location, java.util.function.Function<ResourceLocation, TextureAtlasSprite> textureGetter)
+    {
+        return true;
+    }
+
+    /**
+     * @return all textures that should be loaded before this texture.
+     */
+    public java.util.Collection<ResourceLocation> getDependencies() {
+        return com.google.common.collect.ImmutableList.of();
+    }
+
+    /*===================================== FORGE END ======================================*/
 }
