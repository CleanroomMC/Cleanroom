--- before/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ after/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
+import java.util.Iterator;
 import java.util.List;
 import net.minecraft.client.resources.IResource;
 import net.minecraft.client.resources.data.AnimationFrame;
@@ -19,7 +20,7 @@
 public class TextureAtlasSprite
 {
     private final String iconName;
-    protected List<int[][]> framesTextureData = Lists.newArrayList();
+    protected List<int[][]> framesTextureData = Lists.<int[][]>newArrayList();
     protected int[][] interpolatedFrameData;
     private AnimationMetadataSection animationMetadata;
     protected boolean rotated;
@@ -49,12 +50,10 @@
         this.originX = originInX;
         this.originY = originInY;
         this.rotated = rotatedIn;
-        float f = (float)(0.01F / (double)inX);
-        float f1 = (float)(0.01F / (double)inY);
-        this.minU = (float)originInX / (float)((double)inX) + f;
-        this.maxU = (float)(originInX + this.width) / (float)((double)inX) - f;
-        this.minV = (float)originInY / (float)inY + f1;
-        this.maxV = (float)(originInY + this.height) / (float)inY - f1;
+        this.minU = (float)originInX / (float)inX;
+        this.maxU = (float)(originInX + this.width) / (float)inX;
+        this.minV = (float)originInY / (float)inY;
+        this.maxV = (float)(originInY + this.height) / (float)inY;
     }
 
     public void copyFrom(TextureAtlasSprite atlasSpirit)
@@ -141,7 +140,7 @@
 
     public void updateAnimation()
     {
-        this.tickCounter++;
+        ++this.tickCounter;
 
         if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
         {
@@ -153,9 +152,7 @@
 
             if (i != k && k >= 0 && k < this.framesTextureData.size())
             {
-                TextureUtil.uploadTextureMipmap(
-                    this.framesTextureData.get(k), this.width, this.height, this.originX, this.originY, false, false
-                );
+                TextureUtil.uploadTextureMipmap(this.framesTextureData.get(k), this.width, this.height, this.originX, this.originY, false, false);
             }
         }
         else if (this.animationMetadata.isInterpolate())
@@ -166,7 +163,7 @@
 
     private void updateAnimationInterpolated()
     {
-        double d0 = 1.0 - (double)this.tickCounter / (double)this.animationMetadata.getFrameTimeSingle(this.frameCounter);
+        double d0 = 1.0D - (double)this.tickCounter / (double)this.animationMetadata.getFrameTimeSingle(this.frameCounter);
         int i = this.animationMetadata.getFrameIndex(this.frameCounter);
         int j = this.animationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.animationMetadata.getFrameCount();
         int k = this.animationMetadata.getFrameIndex((this.frameCounter + 1) % j);
@@ -181,7 +178,7 @@
                 this.interpolatedFrameData = new int[aint.length][];
             }
 
-            for (int l = 0; l < aint.length; l++)
+            for (int l = 0; l < aint.length; ++l)
             {
                 if (this.interpolatedFrameData[l] == null)
                 {
@@ -190,14 +187,14 @@
 
                 if (l < aint1.length && aint1[l].length == aint[l].length)
                 {
-                    for (int i1 = 0; i1 < aint[l].length; i1++)
+                    for (int i1 = 0; i1 < aint[l].length; ++i1)
                     {
                         int j1 = aint[l][i1];
                         int k1 = aint1[l][i1];
-                        int l1 = this.interpolateColor(d0, j1 >> 16 & 0xFF, k1 >> 16 & 0xFF);
-                        int i2 = this.interpolateColor(d0, j1 >> 8 & 0xFF, k1 >> 8 & 0xFF);
-                        int j2 = this.interpolateColor(d0, j1 & 0xFF, k1 & 0xFF);
-                        this.interpolatedFrameData[l][i1] = j1 & 0xFF000000 | l1 << 16 | i2 << 8 | j2;
+                        int l1 = this.interpolateColor(d0, j1 >> 16 & 255, k1 >> 16 & 255);
+                        int i2 = this.interpolateColor(d0, j1 >> 8 & 255, k1 >> 8 & 255);
+                        int j2 = this.interpolateColor(d0, j1 & 255, k1 & 255);
+                        this.interpolatedFrameData[l][i1] = j1 & -16777216 | l1 << 16 | i2 << 8 | j2;
                     }
                 }
             }
@@ -208,7 +205,7 @@
 
     private int interpolateColor(double p_188535_1_, int p_188535_3_, int p_188535_4_)
     {
-        return (int)(p_188535_1_ * (double)p_188535_3_ + (1.0 - p_188535_1_) * (double)p_188535_4_);
+        return (int)(p_188535_1_ * (double)p_188535_3_ + (1.0D - p_188535_1_) * (double)p_188535_4_);
     }
 
     public int[][] getFrameTextureData(int index)
@@ -250,7 +247,7 @@
     public void loadSpriteFrames(IResource resource, int mipmaplevels) throws IOException
     {
         BufferedImage bufferedimage = TextureUtil.readBufferedImage(resource.getInputStream());
-        AnimationMetadataSection animationmetadatasection = resource.getMetadata("animation");
+        AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)resource.getMetadata("animation");
         int[][] aint = new int[mipmaplevels][];
         aint[0] = new int[bufferedimage.getWidth() * bufferedimage.getHeight()];
         bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), aint[0], 0, bufferedimage.getWidth());
@@ -265,8 +262,12 @@
 
             if (animationmetadatasection.getFrameCount() > 0)
             {
-                for (int j : animationmetadatasection.getFrameIndexSet())
+                Iterator lvt_7_1_ = animationmetadatasection.getFrameIndexSet().iterator();
+
+                while (lvt_7_1_.hasNext())
                 {
+                    int j = ((Integer)lvt_7_1_.next()).intValue();
+
                     if (j >= i)
                     {
                         throw new RuntimeException("invalid frameindex " + j);
@@ -280,26 +281,24 @@
             }
             else
             {
-                List<AnimationFrame> list = Lists.newArrayList();
+                List<AnimationFrame> list = Lists.<AnimationFrame>newArrayList();
 
-                for (int k = 0; k < i; k++)
+                for (int k = 0; k < i; ++k)
                 {
                     this.framesTextureData.add(getFrameTextureData(aint, this.width, this.width, k));
                     list.add(new AnimationFrame(k, -1));
                 }
 
-                this.animationMetadata = new AnimationMetadataSection(
-                    list, this.width, this.height, animationmetadatasection.getFrameTime(), animationmetadatasection.isInterpolate()
-                );
+                this.animationMetadata = new AnimationMetadataSection(list, this.width, this.height, animationmetadatasection.getFrameTime(), animationmetadatasection.isInterpolate());
             }
         }
     }
 
     public void generateMipmaps(int level)
     {
-        List<int[][]> list = Lists.newArrayList();
+        List<int[][]> list = Lists.<int[][]>newArrayList();
 
-        for (int i = 0; i < this.framesTextureData.size(); i++)
+        for (int i = 0; i < this.framesTextureData.size(); ++i)
         {
             final int[][] aint = this.framesTextureData.get(i);
 
@@ -313,7 +312,7 @@
                 {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Generating mipmaps for frame");
                     CrashReportCategory crashreportcategory = crashreport.makeCategory("Frame being iterated");
-                    crashreportcategory.addCrashSection("Frame index", i);
+                    crashreportcategory.addCrashSection("Frame index", Integer.valueOf(i));
                     crashreportcategory.addDetail("Frame sizes", new ICrashReportDetail<String>()
                     {
                         public String call() throws Exception
@@ -345,7 +344,7 @@
     {
         if (this.framesTextureData.size() <= index)
         {
-            for (int i = this.framesTextureData.size(); i <= index; i++)
+            for (int i = this.framesTextureData.size(); i <= index; ++i)
             {
                 this.framesTextureData.add(null);
             }
@@ -356,7 +355,7 @@
     {
         int[][] aint = new int[data.length][];
 
-        for (int i = 0; i < data.length; i++)
+        for (int i = 0; i < data.length; ++i)
         {
             int[] aint1 = data[i];
 
@@ -393,32 +392,43 @@
         this.tickCounter = 0;
     }
 
-    @Override
     public String toString()
     {
-        return "TextureAtlasSprite{name='"
-               + this.iconName
-               + '\''
-               + ", frameCount="
-               + this.framesTextureData.size()
-               + ", rotated="
-               + this.rotated
-               + ", x="
-               + this.originX
-               + ", y="
-               + this.originY
-               + ", height="
-               + this.height
-               + ", width="
-               + this.width
-               + ", u0="
-               + this.minU
-               + ", u1="
-               + this.maxU
-               + ", v0="
-               + this.minV
-               + ", v1="
-               + this.maxV
-               + '}';
-    }
+        return "TextureAtlasSprite{name='" + this.iconName + '\'' + ", frameCount=" + this.framesTextureData.size() + ", rotated=" + this.rotated + ", x=" + this.originX + ", y=" + this.originY + ", height=" + this.height + ", width=" + this.width + ", u0=" + this.minU + ", u1=" + this.maxU + ", v0=" + this.minV + ", v1=" + this.maxV + '}';
+    }
+
+    /*===================================== FORGE START =====================================*/
+    /**
+     * The result of this function determines is the below 'load' function is called, and the
+     * default vanilla loading code is bypassed completely.
+     * @param manager Main resource manager
+     * @param location File resource location
+     * @return True to use your own custom load code and bypass vanilla loading.
+     */
+    public boolean hasCustomLoader(net.minecraft.client.resources.IResourceManager manager, net.minecraft.util.ResourceLocation location)
+    {
+        return false;
+    }
+
+    /**
+     * Load the specified resource as this sprite's data.
+     * Returning false from this function will prevent this icon from being stitched onto the master texture.
+     * @param manager Main resource manager
+     * @param location File resource location
+     * @param textureGetter accessor for dependencies. All of them will be loaded before this one
+     * @return False to prevent this Icon from being stitched
+     */
+    public boolean load(net.minecraft.client.resources.IResourceManager manager, net.minecraft.util.ResourceLocation location, java.util.function.Function<ResourceLocation, TextureAtlasSprite> textureGetter)
+    {
+        return true;
+    }
+
+    /**
+     * @return all textures that should be loaded before this texture.
+     */
+    public java.util.Collection<ResourceLocation> getDependencies() {
+        return com.google.common.collect.ImmutableList.of();
+    }
+
+    /*===================================== FORGE END ======================================*/
 }
