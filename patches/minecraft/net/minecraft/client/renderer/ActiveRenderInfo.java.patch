--- before/net/minecraft/client/renderer/ActiveRenderInfo.java
+++ after/net/minecraft/client/renderer/ActiveRenderInfo.java
@@ -21,7 +21,7 @@
     private static final FloatBuffer MODELVIEW = GLAllocation.createDirectFloatBuffer(16);
     private static final FloatBuffer PROJECTION = GLAllocation.createDirectFloatBuffer(16);
     private static final FloatBuffer OBJECTCOORDS = GLAllocation.createDirectFloatBuffer(3);
-    private static Vec3d position = new Vec3d(0.0, 0.0, 0.0);
+    private static Vec3d position = new Vec3d(0.0D, 0.0D, 0.0D);
     private static float rotationX;
     private static float rotationXZ;
     private static float rotationZ;
@@ -30,6 +30,11 @@
 
     public static void updateRenderInfo(EntityPlayer entityplayerIn, boolean p_74583_1_)
     {
+        updateRenderInfo((Entity) entityplayerIn, p_74583_1_);
+    }
+
+    public static void updateRenderInfo(Entity entityplayerIn, boolean p_74583_1_)
+    {
         GlStateManager.getFloat(2982, MODELVIEW);
         GlStateManager.getFloat(2983, PROJECTION);
         GlStateManager.glGetInteger(2978, VIEWPORT);
@@ -40,11 +45,11 @@
         int i = p_74583_1_ ? 1 : 0;
         float f2 = entityplayerIn.rotationPitch;
         float f3 = entityplayerIn.rotationYaw;
-        rotationX = MathHelper.cos(f3 * (float)(Math.PI / 180.0)) * (float)(1 - i * 2);
-        rotationZ = MathHelper.sin(f3 * (float)(Math.PI / 180.0)) * (float)(1 - i * 2);
-        rotationYZ = -rotationZ * MathHelper.sin(f2 * (float)(Math.PI / 180.0)) * (float)(1 - i * 2);
-        rotationXY = rotationX * MathHelper.sin(f2 * (float)(Math.PI / 180.0)) * (float)(1 - i * 2);
-        rotationXZ = MathHelper.cos(f2 * (float)(Math.PI / 180.0));
+        rotationX = MathHelper.cos(f3 * 0.017453292F) * (float)(1 - i * 2);
+        rotationZ = MathHelper.sin(f3 * 0.017453292F) * (float)(1 - i * 2);
+        rotationYZ = -rotationZ * MathHelper.sin(f2 * 0.017453292F) * (float)(1 - i * 2);
+        rotationXY = rotationX * MathHelper.sin(f2 * 0.017453292F) * (float)(1 - i * 2);
+        rotationXZ = MathHelper.cos(f2 * 0.017453292F);
     }
 
     public static Vec3d projectViewFromEntity(Entity entityIn, double p_178806_1_)
@@ -70,7 +75,7 @@
 
             if (iblockstate.getBlock() instanceof BlockLiquid)
             {
-                f = BlockLiquid.getLiquidHeightPercent(iblockstate.getValue(BlockLiquid.LEVEL)) - 0.11111111F;
+                f = BlockLiquid.getLiquidHeightPercent(((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue()) - 0.11111111F;
             }
 
             float f1 = (float)(blockpos.getY() + 1) - f;
@@ -81,7 +86,7 @@
             }
         }
 
-        return iblockstate;
+        return iblockstate.getBlock().getStateAtViewpoint(iblockstate, worldIn, blockpos, vec3d);
     }
 
     public static float getRotationX()
@@ -107,5 +112,15 @@
     public static float getRotationXY()
     {
         return rotationXY;
+    }
+
+    /* ======================================== FORGE START =====================================*/
+
+    /**
+     * Vector from render view entity position (corrected for partialTickTime) to the middle of screen
+     */
+    public static Vec3d getCameraPosition()
+    {
+        return position;
     }
 }
