--- before/net/minecraft/client/renderer/entity/RenderFish.java
+++ after/net/minecraft/client/renderer/entity/RenderFish.java
@@ -49,9 +49,7 @@
             float f5 = 0.5F;
             float f6 = 0.5F;
             GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-            GlStateManager.rotate(
-                (float)(this.renderManager.options.thirdPersonView == 2 ? -1 : 1) * -this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F
-            );
+            GlStateManager.rotate((float)(this.renderManager.options.thirdPersonView == 2 ? -1 : 1) * -this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
 
             if (this.renderOutlines)
             {
@@ -60,10 +58,10 @@
             }
 
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_NORMAL);
-            bufferbuilder.pos(-0.5, -0.5, 0.0).tex(0.0625, 0.1875).normal(0.0F, 1.0F, 0.0F).endVertex();
-            bufferbuilder.pos(0.5, -0.5, 0.0).tex(0.125, 0.1875).normal(0.0F, 1.0F, 0.0F).endVertex();
-            bufferbuilder.pos(0.5, 0.5, 0.0).tex(0.125, 0.125).normal(0.0F, 1.0F, 0.0F).endVertex();
-            bufferbuilder.pos(-0.5, 0.5, 0.0).tex(0.0625, 0.125).normal(0.0F, 1.0F, 0.0F).endVertex();
+            bufferbuilder.pos(-0.5D, -0.5D, 0.0D).tex(0.0625D, 0.1875D).normal(0.0F, 1.0F, 0.0F).endVertex();
+            bufferbuilder.pos(0.5D, -0.5D, 0.0D).tex(0.125D, 0.1875D).normal(0.0F, 1.0F, 0.0F).endVertex();
+            bufferbuilder.pos(0.5D, 0.5D, 0.0D).tex(0.125D, 0.125D).normal(0.0F, 1.0F, 0.0F).endVertex();
+            bufferbuilder.pos(-0.5D, 0.5D, 0.0D).tex(0.0625D, 0.125D).normal(0.0F, 1.0F, 0.0F).endVertex();
             tessellator.draw();
 
             if (this.renderOutlines)
@@ -77,35 +75,30 @@
             int k = entityplayer.getPrimaryHand() == EnumHandSide.RIGHT ? 1 : -1;
             ItemStack itemstack = entityplayer.getHeldItemMainhand();
 
-            if (itemstack.getItem() != Items.FISHING_ROD)
+            if (!(itemstack.getItem() instanceof net.minecraft.item.ItemFishingRod))
             {
                 k = -k;
             }
 
             float f7 = entityplayer.getSwingProgress(partialTicks);
-            float f8 = MathHelper.sin(MathHelper.sqrt(f7) * (float) Math.PI);
-            float f9 = (entityplayer.prevRenderYawOffset + (entityplayer.renderYawOffset - entityplayer.prevRenderYawOffset) * partialTicks) * (float)(Math.PI / 180.0);
+            float f8 = MathHelper.sin(MathHelper.sqrt(f7) * (float)Math.PI);
+            float f9 = (entityplayer.prevRenderYawOffset + (entityplayer.renderYawOffset - entityplayer.prevRenderYawOffset) * partialTicks) * 0.017453292F;
             double d0 = (double)MathHelper.sin(f9);
             double d1 = (double)MathHelper.cos(f9);
-            double d2 = (double)k * 0.35;
-            double d3 = 0.8;
+            double d2 = (double)k * 0.35D;
+            double d3 = 0.8D;
             double d4;
             double d5;
             double d6;
             double d7;
 
-            if ((this.renderManager.options == null || this.renderManager.options.thirdPersonView <= 0)
-                    && entityplayer == Minecraft.getMinecraft().player)
+            if ((this.renderManager.options == null || this.renderManager.options.thirdPersonView <= 0) && entityplayer == Minecraft.getMinecraft().player)
             {
                 float f10 = this.renderManager.options.fovSetting;
-                f10 /= 100.0F;
-                Vec3d vec3d = new Vec3d((double)k * -0.36 * (double)f10, -0.045 * (double)f10, 0.4);
-                vec3d = vec3d.rotatePitch(
-                            -(entityplayer.prevRotationPitch + (entityplayer.rotationPitch - entityplayer.prevRotationPitch) * partialTicks) * (float)(Math.PI / 180.0)
-                        );
-                vec3d = vec3d.rotateYaw(
-                            -(entityplayer.prevRotationYaw + (entityplayer.rotationYaw - entityplayer.prevRotationYaw) * partialTicks) * (float)(Math.PI / 180.0)
-                        );
+                f10 = f10 / 100.0F;
+                Vec3d vec3d = new Vec3d((double)k * -0.36D * (double)f10, -0.045D * (double)f10, 0.4D);
+                vec3d = vec3d.rotatePitch(-(entityplayer.prevRotationPitch + (entityplayer.rotationPitch - entityplayer.prevRotationPitch) * partialTicks) * 0.017453292F);
+                vec3d = vec3d.rotateYaw(-(entityplayer.prevRotationYaw + (entityplayer.rotationYaw - entityplayer.prevRotationYaw) * partialTicks) * 0.017453292F);
                 vec3d = vec3d.rotateYaw(f8 * 0.5F);
                 vec3d = vec3d.rotatePitch(-f8 * 0.7F);
                 d4 = entityplayer.prevPosX + (entityplayer.posX - entityplayer.prevPosX) * (double)partialTicks + vec3d.x;
@@ -115,17 +108,14 @@
             }
             else
             {
-                d4 = entityplayer.prevPosX + (entityplayer.posX - entityplayer.prevPosX) * (double)partialTicks - d1 * d2 - d0 * 0.8;
-                d5 = entityplayer.prevPosY
-                     + (double)entityplayer.getEyeHeight()
-                     + (entityplayer.posY - entityplayer.prevPosY) * (double)partialTicks
-                     - 0.45;
-                d6 = entityplayer.prevPosZ + (entityplayer.posZ - entityplayer.prevPosZ) * (double)partialTicks - d0 * d2 + d1 * 0.8;
-                d7 = entityplayer.isSneaking() ? -0.1875 : 0.0;
+                d4 = entityplayer.prevPosX + (entityplayer.posX - entityplayer.prevPosX) * (double)partialTicks - d1 * d2 - d0 * 0.8D;
+                d5 = entityplayer.prevPosY + (double)entityplayer.getEyeHeight() + (entityplayer.posY - entityplayer.prevPosY) * (double)partialTicks - 0.45D;
+                d6 = entityplayer.prevPosZ + (entityplayer.posZ - entityplayer.prevPosZ) * (double)partialTicks - d0 * d2 + d1 * 0.8D;
+                d7 = entityplayer.isSneaking() ? -0.1875D : 0.0D;
             }
 
             double d13 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
-            double d8 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + 0.25;
+            double d8 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + 0.25D;
             double d9 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
             double d10 = (double)((float)(d4 - d13));
             double d11 = (double)((float)(d5 - d8)) + d7;
@@ -135,14 +125,10 @@
             bufferbuilder.begin(3, DefaultVertexFormats.POSITION_COLOR);
             int l = 16;
 
-            for (int i1 = 0; i1 <= 16; i1++)
+            for (int i1 = 0; i1 <= 16; ++i1)
             {
                 float f11 = (float)i1 / 16.0F;
-                bufferbuilder.pos(
-                    x + d10 * (double)f11, y + d11 * (double)(f11 * f11 + f11) * 0.5 + 0.25, z + d12 * (double)f11
-                )
-                .color(0, 0, 0, 255)
-                .endVertex();
+                bufferbuilder.pos(x + d10 * (double)f11, y + d11 * (double)(f11 * f11 + f11) * 0.5D + 0.25D, z + d12 * (double)f11).color(0, 0, 0, 255).endVertex();
             }
 
             tessellator.draw();
