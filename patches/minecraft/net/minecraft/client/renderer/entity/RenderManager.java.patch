--- before/net/minecraft/client/renderer/entity/RenderManager.java
+++ after/net/minecraft/client/renderer/entity/RenderManager.java
@@ -106,6 +106,7 @@
 import net.minecraft.entity.projectile.EntityWitherSkull;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
+import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
@@ -117,8 +118,8 @@
 @SideOnly(Side.CLIENT)
 public class RenderManager
 {
-    public final Map < Class <? extends Entity > , Render <? extends Entity >> entityRenderMap = Maps.newHashMap();
-    private final Map<String, RenderPlayer> skinMap = Maps.newHashMap();
+    public final Map < Class <? extends Entity > , Render <? extends Entity >> entityRenderMap = Maps. < Class <? extends Entity > , Render <? extends Entity >> newHashMap();
+    private final Map<String, RenderPlayer> skinMap = Maps.<String, RenderPlayer>newHashMap();
     private final RenderPlayer playerRenderer;
     private FontRenderer textRenderer;
     private double renderPosX;
@@ -191,13 +192,13 @@
         this.entityRenderMap.put(EntityLeashKnot.class, new RenderLeashKnot(this));
         this.entityRenderMap.put(EntityTippedArrow.class, new RenderTippedArrow(this));
         this.entityRenderMap.put(EntitySpectralArrow.class, new RenderSpectralArrow(this));
-        this.entityRenderMap.put(EntitySnowball.class, new RenderSnowball<>(this, Items.SNOWBALL, itemRendererIn));
-        this.entityRenderMap.put(EntityEnderPearl.class, new RenderSnowball<>(this, Items.ENDER_PEARL, itemRendererIn));
-        this.entityRenderMap.put(EntityEnderEye.class, new RenderSnowball<>(this, Items.ENDER_EYE, itemRendererIn));
-        this.entityRenderMap.put(EntityEgg.class, new RenderSnowball<>(this, Items.EGG, itemRendererIn));
+        this.entityRenderMap.put(EntitySnowball.class, new RenderSnowball(this, Items.SNOWBALL, itemRendererIn));
+        this.entityRenderMap.put(EntityEnderPearl.class, new RenderSnowball(this, Items.ENDER_PEARL, itemRendererIn));
+        this.entityRenderMap.put(EntityEnderEye.class, new RenderSnowball(this, Items.ENDER_EYE, itemRendererIn));
+        this.entityRenderMap.put(EntityEgg.class, new RenderSnowball(this, Items.EGG, itemRendererIn));
         this.entityRenderMap.put(EntityPotion.class, new RenderPotion(this, itemRendererIn));
-        this.entityRenderMap.put(EntityExpBottle.class, new RenderSnowball<>(this, Items.EXPERIENCE_BOTTLE, itemRendererIn));
-        this.entityRenderMap.put(EntityFireworkRocket.class, new RenderSnowball<>(this, Items.FIREWORKS, itemRendererIn));
+        this.entityRenderMap.put(EntityExpBottle.class, new RenderSnowball(this, Items.EXPERIENCE_BOTTLE, itemRendererIn));
+        this.entityRenderMap.put(EntityFireworkRocket.class, new RenderSnowball(this, Items.FIREWORKS, itemRendererIn));
         this.entityRenderMap.put(EntityLargeFireball.class, new RenderFireball(this, 2.0F));
         this.entityRenderMap.put(EntitySmallFireball.class, new RenderFireball(this, 0.5F));
         this.entityRenderMap.put(EntityDragonFireball.class, new RenderDragonFireball(this));
@@ -226,6 +227,11 @@
         this.playerRenderer = new RenderPlayer(this);
         this.skinMap.put("default", this.playerRenderer);
         this.skinMap.put("slim", new RenderPlayer(this, true));
+        net.minecraftforge.fml.client.registry.RenderingRegistry.loadEntityRenderers(this, this.entityRenderMap);
+    }
+
+    public Map<String, RenderPlayer> getSkinMap() {
+        return (Map<String, RenderPlayer>) java.util.Collections.unmodifiableMap(skinMap);
     }
 
     public void setRenderPosition(double renderPosXIn, double renderPosYIn, double renderPosZIn)
@@ -245,7 +251,7 @@
             this.entityRenderMap.put(entityClass, render);
         }
 
-        return (Render<T>)render;
+        return render;
     }
 
     @Nullable
@@ -259,7 +265,7 @@
         }
         else
         {
-            return this.getEntityClassRenderObject(entityIn.getClass());
+            return this.<T>getEntityClassRenderObject(entityIn.getClass());
         }
     }
 
@@ -276,9 +282,9 @@
             IBlockState iblockstate = worldIn.getBlockState(new BlockPos(livingPlayerIn));
             Block block = iblockstate.getBlock();
 
-            if (block == Blocks.BED)
+            if (block.isBed(iblockstate, worldIn, new BlockPos(livingPlayerIn), (EntityLivingBase)livingPlayerIn))
             {
-                int i = iblockstate.getValue(BlockBed.FACING).getHorizontalIndex();
+                int i = block.getBedDirection(iblockstate, worldIn, new BlockPos(livingPlayerIn)).getHorizontalIndex();
                 this.playerViewY = (float)(i * 90 + 180);
                 this.playerViewX = 0.0F;
             }
@@ -331,7 +337,7 @@
 
     public boolean shouldRender(Entity entityIn, ICamera camera, double camX, double camY, double camZ)
     {
-        Render<Entity> render = this.getEntityRenderObject(entityIn);
+        Render<Entity> render = this.<Entity>getEntityRenderObject(entityIn);
         return render != null && render.shouldRender(entityIn, camera, camX, camY, camZ);
     }
 
@@ -362,15 +368,13 @@
         this.renderEntity(entityIn, d0 - this.renderPosX, d1 - this.renderPosY, d2 - this.renderPosZ, f, partialTicks, p_188388_3_);
     }
 
-    public void renderEntity(
-        Entity entityIn, double x, double y, double z, float yaw, float partialTicks, boolean p_188391_10_
-    )
+    public void renderEntity(Entity entityIn, double x, double y, double z, float yaw, float partialTicks, boolean p_188391_10_)
     {
         Render<Entity> render = null;
 
         try
         {
-            render = this.getEntityRenderObject(entityIn);
+            render = this.<Entity>getEntityRenderObject(entityIn);
 
             if (render != null && this.renderEngine != null)
             {
@@ -417,8 +421,8 @@
             CrashReportCategory crashreportcategory1 = crashreport.makeCategory("Renderer details");
             crashreportcategory1.addCrashSection("Assigned renderer", render);
             crashreportcategory1.addCrashSection("Location", CrashReportCategory.getCoordinateInfo(x, y, z));
-            crashreportcategory1.addCrashSection("Rotation", yaw);
-            crashreportcategory1.addCrashSection("Delta", partialTicks);
+            crashreportcategory1.addCrashSection("Rotation", Float.valueOf(yaw));
+            crashreportcategory1.addCrashSection("Delta", Float.valueOf(partialTicks));
             throw new ReportedException(crashreport);
         }
     }
@@ -447,7 +451,7 @@
         int k = i / 65536;
         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-        Render<Entity> render = this.getEntityRenderObject(entityIn);
+        Render<Entity> render = this.<Entity>getEntityRenderObject(entityIn);
 
         if (render != null && this.renderEngine != null)
         {
@@ -464,18 +468,7 @@
         GlStateManager.disableBlend();
         float f = entityIn.width / 2.0F;
         AxisAlignedBB axisalignedbb = entityIn.getEntityBoundingBox();
-        RenderGlobal.drawBoundingBox(
-            axisalignedbb.minX - entityIn.posX + x,
-            axisalignedbb.minY - entityIn.posY + y,
-            axisalignedbb.minZ - entityIn.posZ + z,
-            axisalignedbb.maxX - entityIn.posX + x,
-            axisalignedbb.maxY - entityIn.posY + y,
-            axisalignedbb.maxZ - entityIn.posZ + z,
-            1.0F,
-            1.0F,
-            1.0F,
-            1.0F
-        );
+        RenderGlobal.drawBoundingBox(axisalignedbb.minX - entityIn.posX + x, axisalignedbb.minY - entityIn.posY + y, axisalignedbb.minZ - entityIn.posZ + z, axisalignedbb.maxX - entityIn.posX + x, axisalignedbb.maxY - entityIn.posY + y, axisalignedbb.maxZ - entityIn.posZ + z, 1.0F, 1.0F, 1.0F, 1.0F);
         Entity[] aentity = entityIn.getParts();
 
         if (aentity != null)
@@ -486,36 +479,14 @@
                 double d1 = (entity.posY - entity.prevPosY) * (double)partialTicks;
                 double d2 = (entity.posZ - entity.prevPosZ) * (double)partialTicks;
                 AxisAlignedBB axisalignedbb1 = entity.getEntityBoundingBox();
-                RenderGlobal.drawBoundingBox(
-                    axisalignedbb1.minX - this.renderPosX + d0,
-                    axisalignedbb1.minY - this.renderPosY + d1,
-                    axisalignedbb1.minZ - this.renderPosZ + d2,
-                    axisalignedbb1.maxX - this.renderPosX + d0,
-                    axisalignedbb1.maxY - this.renderPosY + d1,
-                    axisalignedbb1.maxZ - this.renderPosZ + d2,
-                    0.25F,
-                    1.0F,
-                    0.0F,
-                    1.0F
-                );
+                RenderGlobal.drawBoundingBox(axisalignedbb1.minX - this.renderPosX + d0, axisalignedbb1.minY - this.renderPosY + d1, axisalignedbb1.minZ - this.renderPosZ + d2, axisalignedbb1.maxX - this.renderPosX + d0, axisalignedbb1.maxY - this.renderPosY + d1, axisalignedbb1.maxZ - this.renderPosZ + d2, 0.25F, 1.0F, 0.0F, 1.0F);
             }
         }
 
         if (entityIn instanceof EntityLivingBase)
         {
             float f1 = 0.01F;
-            RenderGlobal.drawBoundingBox(
-                x - (double)f,
-                y + (double)entityIn.getEyeHeight() - 0.01F,
-                z - (double)f,
-                x + (double)f,
-                y + (double)entityIn.getEyeHeight() + 0.01F,
-                z + (double)f,
-                1.0F,
-                0.0F,
-                0.0F,
-                1.0F
-            );
+            RenderGlobal.drawBoundingBox(x - (double)f, y + (double)entityIn.getEyeHeight() - 0.009999999776482582D, z - (double)f, x + (double)f, y + (double)entityIn.getEyeHeight() + 0.009999999776482582D, z + (double)f, 1.0F, 0.0F, 0.0F, 1.0F);
         }
 
         Tessellator tessellator = Tessellator.getInstance();
@@ -523,13 +494,7 @@
         Vec3d vec3d = entityIn.getLook(partialTicks);
         bufferbuilder.begin(3, DefaultVertexFormats.POSITION_COLOR);
         bufferbuilder.pos(x, y + (double)entityIn.getEyeHeight(), z).color(0, 0, 255, 255).endVertex();
-        bufferbuilder.pos(
-            x + vec3d.x * 2.0,
-            y + (double)entityIn.getEyeHeight() + vec3d.y * 2.0,
-            z + vec3d.z * 2.0
-        )
-        .color(0, 0, 255, 255)
-        .endVertex();
+        bufferbuilder.pos(x + vec3d.x * 2.0D, y + (double)entityIn.getEyeHeight() + vec3d.y * 2.0D, z + vec3d.z * 2.0D).color(0, 0, 255, 255).endVertex();
         tessellator.draw();
         GlStateManager.enableTexture2D();
         GlStateManager.enableLighting();
