--- before/net/minecraft/client/renderer/block/model/ItemOverrideList.java
+++ after/net/minecraft/client/renderer/block/model/ItemOverrideList.java
@@ -14,7 +14,7 @@
 public class ItemOverrideList
 {
     public static final ItemOverrideList NONE = new ItemOverrideList();
-    private final List<ItemOverride> overrides = Lists.newArrayList();
+    private final List<ItemOverride> overrides = Lists.<ItemOverride>newArrayList();
 
     private ItemOverrideList()
     {
@@ -22,13 +22,14 @@
 
     public ItemOverrideList(List<ItemOverride> overridesIn)
     {
-        for (int i = overridesIn.size() - 1; i >= 0; i--)
+        for (int i = overridesIn.size() - 1; i >= 0; --i)
         {
             this.overrides.add(overridesIn.get(i));
         }
     }
 
     @Nullable
+    @Deprecated
     public ResourceLocation applyOverride(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entityIn)
     {
         if (!this.overrides.isEmpty())
@@ -43,5 +44,23 @@
         }
 
         return null;
+    }
+
+    public IBakedModel handleItemState(IBakedModel originalModel, ItemStack stack, @Nullable World world, @Nullable EntityLivingBase entity)
+    {
+        if (!stack.isEmpty() && stack.getItem().hasCustomProperties())
+        {
+            ResourceLocation location = applyOverride(stack, world, entity);
+            if (location != null)
+            {
+                return net.minecraft.client.Minecraft.getMinecraft().getRenderItem().getItemModelMesher().getModelManager().getModel(net.minecraftforge.client.model.ModelLoader.getInventoryVariant(location.toString()));
+            }
+        }
+        return originalModel;
+    }
+
+    public com.google.common.collect.ImmutableList<ItemOverride> getOverrides()
+    {
+        return com.google.common.collect.ImmutableList.copyOf(overrides);
     }
 }
