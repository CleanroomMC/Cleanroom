--- before/net/minecraft/client/renderer/block/model/FaceBakery.java
+++ after/net/minecraft/client/renderer/block/model/FaceBakery.java
@@ -15,12 +15,11 @@
 @SideOnly(Side.CLIENT)
 public class FaceBakery
 {
-    private static final float SCALE_ROTATION_22_5 = 1.0F / (float)Math.cos((float)(Math.PI / 8)) - 1.0F;
-    private static final float SCALE_ROTATION_GENERAL = 1.0F / (float)Math.cos((float)(Math.PI / 4)) - 1.0F;
+    private static final float SCALE_ROTATION_22_5 = 1.0F / (float)Math.cos(0.39269909262657166D) - 1.0F;
+    private static final float SCALE_ROTATION_GENERAL = 1.0F / (float)Math.cos((Math.PI / 4D)) - 1.0F;
     private static final FaceBakery.Rotation[] UV_ROTATIONS = new FaceBakery.Rotation[ModelRotation.values().length * EnumFacing.values().length];
     private static final FaceBakery.Rotation UV_ROTATION_0 = new FaceBakery.Rotation()
     {
-        @Override
         BlockFaceUV makeRotatedUV(float p_188007_1_, float p_188007_2_, float p_188007_3_, float p_188007_4_)
         {
             return new BlockFaceUV(new float[] {p_188007_1_, p_188007_2_, p_188007_3_, p_188007_4_}, 0);
@@ -28,7 +27,6 @@
     };
     private static final FaceBakery.Rotation UV_ROTATION_270 = new FaceBakery.Rotation()
     {
-        @Override
         BlockFaceUV makeRotatedUV(float p_188007_1_, float p_188007_2_, float p_188007_3_, float p_188007_4_)
         {
             return new BlockFaceUV(new float[] {p_188007_4_, 16.0F - p_188007_1_, p_188007_2_, 16.0F - p_188007_3_}, 270);
@@ -36,7 +34,6 @@
     };
     private static final FaceBakery.Rotation UV_ROTATION_INVERSE = new FaceBakery.Rotation()
     {
-        @Override
         BlockFaceUV makeRotatedUV(float p_188007_1_, float p_188007_2_, float p_188007_3_, float p_188007_4_)
         {
             return new BlockFaceUV(new float[] {16.0F - p_188007_1_, 16.0F - p_188007_2_, 16.0F - p_188007_3_, 16.0F - p_188007_4_}, 0);
@@ -44,35 +41,27 @@
     };
     private static final FaceBakery.Rotation UV_ROTATION_90 = new FaceBakery.Rotation()
     {
-        @Override
         BlockFaceUV makeRotatedUV(float p_188007_1_, float p_188007_2_, float p_188007_3_, float p_188007_4_)
         {
             return new BlockFaceUV(new float[] {16.0F - p_188007_2_, p_188007_3_, 16.0F - p_188007_4_, p_188007_1_}, 90);
         }
     };
 
-    public BakedQuad makeBakedQuad(
-        Vector3f posFrom,
-        Vector3f posTo,
-        BlockPartFace face,
-        TextureAtlasSprite sprite,
-        EnumFacing facing,
-        ModelRotation modelRotationIn,
-        @Nullable BlockPartRotation partRotation,
-        boolean uvLocked,
-        boolean shade
-    )
+    public BakedQuad makeBakedQuad(Vector3f posFrom, Vector3f posTo, BlockPartFace face, TextureAtlasSprite sprite, EnumFacing facing, ModelRotation modelRotationIn, @Nullable BlockPartRotation partRotation, boolean uvLocked, boolean shade)
+    {
+        return makeBakedQuad(posFrom, posTo, face, sprite, facing, (net.minecraftforge.common.model.ITransformation)modelRotationIn, partRotation, uvLocked, shade);
+    }
+
+    public BakedQuad makeBakedQuad(Vector3f posFrom, Vector3f posTo, BlockPartFace face, TextureAtlasSprite sprite, EnumFacing facing, net.minecraftforge.common.model.ITransformation modelRotationIn, BlockPartRotation partRotation, boolean uvLocked, boolean shade)
     {
         BlockFaceUV blockfaceuv = face.blockFaceUV;
 
         if (uvLocked)
         {
-            blockfaceuv = this.applyUVLock(face.blockFaceUV, facing, modelRotationIn);
+            blockfaceuv = net.minecraftforge.client.ForgeHooksClient.applyUVLock(face.blockFaceUV, facing, modelRotationIn);
         }
 
-        int[] aint = this.makeQuadVertexData(
-                         blockfaceuv, sprite, facing, this.getPositionsDiv16(posFrom, posTo), modelRotationIn, partRotation, shade
-                     );
+        int[] aint = this.makeQuadVertexData(blockfaceuv, sprite, facing, this.getPositionsDiv16(posFrom, posTo), modelRotationIn, partRotation, false);
         EnumFacing enumfacing = getFacingFromVertexData(aint);
 
         if (partRotation == null)
@@ -80,7 +69,8 @@
             this.applyFacing(aint, enumfacing);
         }
 
-        return new BakedQuad(aint, face.tintIndex, enumfacing, sprite);
+        net.minecraftforge.client.ForgeHooksClient.fillNormal(aint, enumfacing);
+        return new BakedQuad(aint, face.tintIndex, enumfacing, sprite, shade, net.minecraft.client.renderer.vertex.DefaultVertexFormats.ITEM);
     }
 
     private BlockFaceUV applyUVLock(BlockFaceUV p_188010_1_, EnumFacing p_188010_2_, ModelRotation p_188010_3_)
@@ -88,19 +78,16 @@
         return UV_ROTATIONS[getIndex(p_188010_3_, p_188010_2_)].rotateUV(p_188010_1_);
     }
 
-    private int[] makeQuadVertexData(
-        BlockFaceUV uvs,
-        TextureAtlasSprite sprite,
-        EnumFacing orientation,
-        float[] p_188012_4_,
-        ModelRotation rotationIn,
-        @Nullable BlockPartRotation partRotation,
-        boolean shade
-    )
+    private int[] makeQuadVertexData(BlockFaceUV uvs, TextureAtlasSprite sprite, EnumFacing orientation, float[] p_188012_4_, ModelRotation rotationIn, @Nullable BlockPartRotation partRotation, boolean shade)
+    {
+        return makeQuadVertexData(uvs, sprite, orientation, p_188012_4_, (net.minecraftforge.common.model.ITransformation)rotationIn, partRotation, shade);
+    }
+
+    private int[] makeQuadVertexData(BlockFaceUV uvs, TextureAtlasSprite sprite, EnumFacing orientation, float[] p_188012_4_, net.minecraftforge.common.model.ITransformation rotationIn, BlockPartRotation partRotation, boolean shade)
     {
         int[] aint = new int[28];
 
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             this.fillVertexData(aint, i, orientation, uvs, p_188012_4_, sprite, rotationIn, partRotation, shade);
         }
@@ -112,7 +99,7 @@
     {
         float f = this.getFaceBrightness(facing);
         int i = MathHelper.clamp((int)(f * 255.0F), 0, 255);
-        return 0xFF000000 | i << 16 | i << 8 | i;
+        return -16777216 | i << 16 | i << 8 | i;
     }
 
     private float getFaceBrightness(EnumFacing facing)
@@ -146,42 +133,31 @@
         return afloat;
     }
 
-    private void fillVertexData(
-        int[] p_188015_1_,
-        int p_188015_2_,
-        EnumFacing p_188015_3_,
-        BlockFaceUV p_188015_4_,
-        float[] p_188015_5_,
-        TextureAtlasSprite p_188015_6_,
-        ModelRotation p_188015_7_,
-        @Nullable BlockPartRotation p_188015_8_,
-        boolean p_188015_9_
-    )
-    {
-        EnumFacing enumfacing = p_188015_7_.rotateFace(p_188015_3_);
+    private void fillVertexData(int[] p_188015_1_, int p_188015_2_, EnumFacing p_188015_3_, BlockFaceUV p_188015_4_, float[] p_188015_5_, TextureAtlasSprite p_188015_6_, ModelRotation p_188015_7_, @Nullable BlockPartRotation p_188015_8_, boolean p_188015_9_)
+    {
+        fillVertexData(p_188015_1_, p_188015_2_, p_188015_3_, p_188015_4_, p_188015_5_, p_188015_6_, (net.minecraftforge.common.model.ITransformation)p_188015_7_, p_188015_8_, p_188015_9_);
+    }
+
+    private void fillVertexData(int[] p_188015_1_, int p_188015_2_, EnumFacing p_188015_3_, BlockFaceUV p_188015_4_, float[] p_188015_5_, TextureAtlasSprite p_188015_6_, net.minecraftforge.common.model.ITransformation p_188015_7_, BlockPartRotation p_188015_8_, boolean p_188015_9_)
+    {
+        EnumFacing enumfacing = p_188015_7_.rotate(p_188015_3_);
         int i = p_188015_9_ ? this.getFaceShadeColor(enumfacing) : -1;
         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.getFacing(p_188015_3_).getVertexInformation(p_188015_2_);
-        Vector3f vector3f = new Vector3f(
-            p_188015_5_[enumfacedirection$vertexinformation.xIndex],
-            p_188015_5_[enumfacedirection$vertexinformation.yIndex],
-            p_188015_5_[enumfacedirection$vertexinformation.zIndex]
-        );
+        Vector3f vector3f = new Vector3f(p_188015_5_[enumfacedirection$vertexinformation.xIndex], p_188015_5_[enumfacedirection$vertexinformation.yIndex], p_188015_5_[enumfacedirection$vertexinformation.zIndex]);
         this.rotatePart(vector3f, p_188015_8_);
         int j = this.rotateVertex(vector3f, p_188015_3_, p_188015_2_, p_188015_7_);
         this.storeVertexData(p_188015_1_, j, p_188015_2_, vector3f, i, p_188015_6_, p_188015_4_);
     }
 
-    private void storeVertexData(
-        int[] faceData, int storeIndex, int vertexIndex, Vector3f position, int shadeColor, TextureAtlasSprite sprite, BlockFaceUV faceUV
-    )
+    private void storeVertexData(int[] faceData, int storeIndex, int vertexIndex, Vector3f position, int shadeColor, TextureAtlasSprite sprite, BlockFaceUV faceUV)
     {
         int i = storeIndex * 7;
         faceData[i] = Float.floatToRawIntBits(position.x);
         faceData[i + 1] = Float.floatToRawIntBits(position.y);
         faceData[i + 2] = Float.floatToRawIntBits(position.z);
         faceData[i + 3] = shadeColor;
-        faceData[i + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.getVertexU(vertexIndex)));
-        faceData[i + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.getVertexV(vertexIndex)));
+        faceData[i + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.getVertexU(vertexIndex) * .999 + faceUV.getVertexU((vertexIndex + 2) % 4) * .001));
+        faceData[i + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.getVertexV(vertexIndex) * .999 + faceUV.getVertexV((vertexIndex + 2) % 4) * .001));
     }
 
     private void rotatePart(Vector3f p_178407_1_, @Nullable BlockPartRotation partRotation)
@@ -194,15 +170,15 @@
             switch (partRotation.axis)
             {
                 case X:
-                    Matrix4f.rotate(partRotation.angle * (float)(Math.PI / 180.0), new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
+                    Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
                     vector3f.set(0.0F, 1.0F, 1.0F);
                     break;
                 case Y:
-                    Matrix4f.rotate(partRotation.angle * (float)(Math.PI / 180.0), new Vector3f(0.0F, 1.0F, 0.0F), matrix4f, matrix4f);
+                    Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f, matrix4f);
                     vector3f.set(1.0F, 0.0F, 1.0F);
                     break;
                 case Z:
-                    Matrix4f.rotate(partRotation.angle * (float)(Math.PI / 180.0), new Vector3f(0.0F, 0.0F, 1.0F), matrix4f, matrix4f);
+                    Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(0.0F, 0.0F, 1.0F), matrix4f, matrix4f);
                     vector3f.set(1.0F, 1.0F, 0.0F);
             }
 
@@ -230,14 +206,19 @@
 
     public int rotateVertex(Vector3f p_188011_1_, EnumFacing p_188011_2_, int p_188011_3_, ModelRotation p_188011_4_)
     {
+        return rotateVertex(p_188011_1_, p_188011_2_, p_188011_3_, (net.minecraftforge.common.model.ITransformation)p_188011_4_);
+    }
+
+    public int rotateVertex(Vector3f p_188011_1_, EnumFacing p_188011_2_, int p_188011_3_, net.minecraftforge.common.model.ITransformation p_188011_4_)
+    {
         if (p_188011_4_ == ModelRotation.X0_Y0)
         {
             return p_188011_3_;
         }
         else
         {
-            this.rotateScale(p_188011_1_, new Vector3f(0.5F, 0.5F, 0.5F), p_188011_4_.matrix(), new Vector3f(1.0F, 1.0F, 1.0F));
-            return p_188011_4_.rotateVertex(p_188011_2_, p_188011_3_);
+            net.minecraftforge.client.ForgeHooksClient.transform(p_188011_1_, p_188011_4_.getMatrix());
+            return p_188011_4_.rotate(p_188011_2_, p_188011_3_);
         }
     }
 
@@ -245,9 +226,9 @@
     {
         Vector4f vector4f = new Vector4f(position.x - rotationOrigin.x, position.y - rotationOrigin.y, position.z - rotationOrigin.z, 1.0F);
         Matrix4f.transform(rotationMatrix, vector4f, vector4f);
-        vector4f.x = vector4f.x * scale.x;
-        vector4f.y = vector4f.y * scale.y;
-        vector4f.z = vector4f.z * scale.z;
+        vector4f.x *= scale.x;
+        vector4f.y *= scale.y;
+        vector4f.z *= scale.z;
         position.set(vector4f.x + rotationOrigin.x, vector4f.y + rotationOrigin.y, vector4f.z + rotationOrigin.z);
     }
 
@@ -289,7 +270,14 @@
             }
         }
 
-        return enumfacing == null ? EnumFacing.UP : enumfacing;
+        if (enumfacing == null)
+        {
+            return EnumFacing.UP;
+        }
+        else
+        {
+            return enumfacing;
+        }
     }
 
     private void applyFacing(int[] p_178408_1_, EnumFacing p_178408_2_)
@@ -304,7 +292,7 @@
         afloat[EnumFaceDirection.Constants.UP_INDEX] = -999.0F;
         afloat[EnumFaceDirection.Constants.SOUTH_INDEX] = -999.0F;
 
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             int j = 7 * i;
             float f = Float.intBitsToFloat(aint[j]);
@@ -344,7 +332,7 @@
 
         EnumFaceDirection enumfacedirection = EnumFaceDirection.getFacing(p_178408_2_);
 
-        for (int i1 = 0; i1 < 4; i1++)
+        for (int i1 = 0; i1 < 4; ++i1)
         {
             int j1 = 7 * i1;
             EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = enumfacedirection.getVertexInformation(i1);
@@ -355,7 +343,7 @@
             p_178408_1_[j1 + 1] = Float.floatToRawIntBits(f3);
             p_178408_1_[j1 + 2] = Float.floatToRawIntBits(f4);
 
-            for (int k = 0; k < 4; k++)
+            for (int k = 0; k < 4; ++k)
             {
                 int l = 7 * k;
                 float f5 = Float.intBitsToFloat(aint[l]);
