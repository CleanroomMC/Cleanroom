--- before/net/minecraft/client/renderer/block/model/FaceBakery.java
+++ after/net/minecraft/client/renderer/block/model/FaceBakery.java
@@ -8,9 +8,9 @@
 import net.minecraft.util.math.Vec3i;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
-import org.lwjgl.util.vector.Matrix4f;
-import org.lwjgl.util.vector.Vector3f;
-import org.lwjgl.util.vector.Vector4f;
+import org.lwjglx.util.vector.Matrix4f;
+import org.lwjglx.util.vector.Vector3f;
+import org.lwjglx.util.vector.Vector4f;
 
 @SideOnly(Side.CLIENT)
 public class FaceBakery
@@ -47,24 +47,30 @@
         }
     };
 
-    public BakedQuad func_178414_a(Vector3f p_178414_1_, Vector3f p_178414_2_, BlockPartFace p_178414_3_, TextureAtlasSprite p_178414_4_, EnumFacing p_178414_5_, ModelRotation p_178414_6_, @Nullable BlockPartRotation p_178414_7_, boolean p_178414_8_, boolean p_178414_9_)
-    {
-        BlockFaceUV blockfaceuv = p_178414_3_.field_178243_e;
-
-        if (p_178414_8_)
+    public BakedQuad makeBakedQuad(Vector3f posFrom, Vector3f posTo, BlockPartFace face, TextureAtlasSprite sprite, EnumFacing facing, ModelRotation modelRotationIn, @Nullable BlockPartRotation partRotation, boolean uvLocked, boolean shade)
+    {
+        return makeBakedQuad(posFrom, posTo, face, sprite, facing, (net.minecraftforge.common.model.ITransformation)modelRotationIn, partRotation, uvLocked, shade);
+    }
+
+    public BakedQuad makeBakedQuad(Vector3f posFrom, Vector3f posTo, BlockPartFace face, TextureAtlasSprite sprite, EnumFacing facing, net.minecraftforge.common.model.ITransformation modelRotationIn, BlockPartRotation partRotation, boolean uvLocked, boolean shade)
+    {
+        BlockFaceUV blockfaceuv = face.field_178243_e;
+
+        if (uvLocked)
         {
-            blockfaceuv = this.func_188010_a(p_178414_3_.field_178243_e, p_178414_5_, p_178414_6_);
+            blockfaceuv = net.minecraftforge.client.ForgeHooksClient.applyUVLock(face.field_178243_e, facing, modelRotationIn);
         }
 
-        int[] aint = this.func_188012_a(blockfaceuv, p_178414_4_, p_178414_5_, this.func_178403_a(p_178414_1_, p_178414_2_), p_178414_6_, p_178414_7_, p_178414_9_);
+        int[] aint = this.makeQuadVertexData(blockfaceuv, sprite, facing, this.getPositionsDiv16(posFrom, posTo), modelRotationIn, partRotation, false);
         EnumFacing enumfacing = func_178410_a(aint);
 
-        if (p_178414_7_ == null)
+        if (partRotation == null)
         {
             this.func_178408_a(aint, enumfacing);
         }
 
-        return new BakedQuad(aint, p_178414_3_.field_178245_c, enumfacing, p_178414_4_);
+        net.minecraftforge.client.ForgeHooksClient.fillNormal(aint, enumfacing);
+        return new BakedQuad(aint, face.field_178245_c, enumfacing, sprite, shade, net.minecraft.client.renderer.vertex.DefaultVertexFormats.field_176599_b);
     }
 
     private BlockFaceUV func_188010_a(BlockFaceUV p_188010_1_, EnumFacing p_188010_2_, ModelRotation p_188010_3_)
@@ -74,11 +80,16 @@
 
     private int[] func_188012_a(BlockFaceUV p_188012_1_, TextureAtlasSprite p_188012_2_, EnumFacing p_188012_3_, float[] p_188012_4_, ModelRotation p_188012_5_, @Nullable BlockPartRotation p_188012_6_, boolean p_188012_7_)
     {
+        return makeQuadVertexData(p_188012_1_, p_188012_2_, p_188012_3_, p_188012_4_, (net.minecraftforge.common.model.ITransformation)p_188012_5_, p_188012_6_, p_188012_7_);
+    }
+
+    private int[] makeQuadVertexData(BlockFaceUV uvs, TextureAtlasSprite sprite, EnumFacing orientation, float[] p_188012_4_, net.minecraftforge.common.model.ITransformation rotationIn, BlockPartRotation partRotation, boolean shade)
+    {
         int[] aint = new int[28];
 
         for (int i = 0; i < 4; ++i)
         {
-            this.func_188015_a(aint, i, p_188012_3_, p_188012_1_, p_188012_4_, p_188012_2_, p_188012_5_, p_188012_6_, p_188012_7_);
+            this.fillVertexData(aint, i, orientation, uvs, p_188012_4_, sprite, rotationIn, partRotation, shade);
         }
 
         return aint;
@@ -110,65 +121,70 @@
         }
     }
 
-    private float[] func_178403_a(Vector3f p_178403_1_, Vector3f p_178403_2_)
+    private float[] getPositionsDiv16(Vector3f pos1, Vector3f pos2)
     {
         float[] afloat = new float[EnumFacing.values().length];
-        afloat[EnumFaceDirection.Constants.field_179176_f] = p_178403_1_.x / 16.0F;
-        afloat[EnumFaceDirection.Constants.field_179178_e] = p_178403_1_.y / 16.0F;
-        afloat[EnumFaceDirection.Constants.field_179177_d] = p_178403_1_.z / 16.0F;
-        afloat[EnumFaceDirection.Constants.field_179180_c] = p_178403_2_.x / 16.0F;
-        afloat[EnumFaceDirection.Constants.field_179179_b] = p_178403_2_.y / 16.0F;
-        afloat[EnumFaceDirection.Constants.field_179181_a] = p_178403_2_.z / 16.0F;
+        afloat[EnumFaceDirection.Constants.field_179176_f] = pos1.x / 16.0F;
+        afloat[EnumFaceDirection.Constants.field_179178_e] = pos1.y / 16.0F;
+        afloat[EnumFaceDirection.Constants.field_179177_d] = pos1.z / 16.0F;
+        afloat[EnumFaceDirection.Constants.field_179180_c] = pos2.x / 16.0F;
+        afloat[EnumFaceDirection.Constants.field_179179_b] = pos2.y / 16.0F;
+        afloat[EnumFaceDirection.Constants.field_179181_a] = pos2.z / 16.0F;
         return afloat;
     }
 
     private void func_188015_a(int[] p_188015_1_, int p_188015_2_, EnumFacing p_188015_3_, BlockFaceUV p_188015_4_, float[] p_188015_5_, TextureAtlasSprite p_188015_6_, ModelRotation p_188015_7_, @Nullable BlockPartRotation p_188015_8_, boolean p_188015_9_)
     {
-        EnumFacing enumfacing = p_188015_7_.func_177523_a(p_188015_3_);
+        fillVertexData(p_188015_1_, p_188015_2_, p_188015_3_, p_188015_4_, p_188015_5_, p_188015_6_, (net.minecraftforge.common.model.ITransformation)p_188015_7_, p_188015_8_, p_188015_9_);
+    }
+
+    private void fillVertexData(int[] p_188015_1_, int p_188015_2_, EnumFacing p_188015_3_, BlockFaceUV p_188015_4_, float[] p_188015_5_, TextureAtlasSprite p_188015_6_, net.minecraftforge.common.model.ITransformation p_188015_7_, BlockPartRotation p_188015_8_, boolean p_188015_9_)
+    {
+        EnumFacing enumfacing = p_188015_7_.rotate(p_188015_3_);
         int i = p_188015_9_ ? this.func_178413_a(enumfacing) : -1;
         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.func_179027_a(p_188015_3_).func_179025_a(p_188015_2_);
         Vector3f vector3f = new Vector3f(p_188015_5_[enumfacedirection$vertexinformation.field_179184_a], p_188015_5_[enumfacedirection$vertexinformation.field_179182_b], p_188015_5_[enumfacedirection$vertexinformation.field_179183_c]);
-        this.func_178407_a(vector3f, p_188015_8_);
-        int j = this.func_188011_a(vector3f, p_188015_3_, p_188015_2_, p_188015_7_);
-        this.func_178404_a(p_188015_1_, j, p_188015_2_, vector3f, i, p_188015_6_, p_188015_4_);
-    }
-
-    private void func_178404_a(int[] p_178404_1_, int p_178404_2_, int p_178404_3_, Vector3f p_178404_4_, int p_178404_5_, TextureAtlasSprite p_178404_6_, BlockFaceUV p_178404_7_)
-    {
-        int i = p_178404_2_ * 7;
-        p_178404_1_[i] = Float.floatToRawIntBits(p_178404_4_.x);
-        p_178404_1_[i + 1] = Float.floatToRawIntBits(p_178404_4_.y);
-        p_178404_1_[i + 2] = Float.floatToRawIntBits(p_178404_4_.z);
-        p_178404_1_[i + 3] = p_178404_5_;
-        p_178404_1_[i + 4] = Float.floatToRawIntBits(p_178404_6_.func_94214_a((double)p_178404_7_.func_178348_a(p_178404_3_)));
-        p_178404_1_[i + 4 + 1] = Float.floatToRawIntBits(p_178404_6_.func_94207_b((double)p_178404_7_.func_178346_b(p_178404_3_)));
-    }
-
-    private void func_178407_a(Vector3f p_178407_1_, @Nullable BlockPartRotation p_178407_2_)
-    {
-        if (p_178407_2_ != null)
+        this.rotatePart(vector3f, p_188015_8_);
+        int j = this.rotateVertex(vector3f, p_188015_3_, p_188015_2_, p_188015_7_);
+        this.storeVertexData(p_188015_1_, j, p_188015_2_, vector3f, i, p_188015_6_, p_188015_4_);
+    }
+
+    private void storeVertexData(int[] faceData, int storeIndex, int vertexIndex, Vector3f position, int shadeColor, TextureAtlasSprite sprite, BlockFaceUV faceUV)
+    {
+        int i = storeIndex * 7;
+        faceData[i] = Float.floatToRawIntBits(position.x);
+        faceData[i + 1] = Float.floatToRawIntBits(position.y);
+        faceData[i + 2] = Float.floatToRawIntBits(position.z);
+        faceData[i + 3] = shadeColor;
+        faceData[i + 4] = Float.floatToRawIntBits(sprite.func_94214_a((double)faceUV.func_178348_a(vertexIndex) * .999 + faceUV.func_178348_a((vertexIndex + 2) % 4) * .001));
+        faceData[i + 4 + 1] = Float.floatToRawIntBits(sprite.func_94207_b((double)faceUV.func_178346_b(vertexIndex) * .999 + faceUV.func_178346_b((vertexIndex + 2) % 4) * .001));
+    }
+
+    private void rotatePart(Vector3f p_178407_1_, @Nullable BlockPartRotation partRotation)
+    {
+        if (partRotation != null)
         {
-            Matrix4f matrix4f = this.func_178411_a();
+            Matrix4f matrix4f = this.getMatrixIdentity();
             Vector3f vector3f = new Vector3f(0.0F, 0.0F, 0.0F);
 
-            switch (p_178407_2_.field_178342_b)
+            switch (partRotation.field_178342_b)
             {
                 case X:
-                    Matrix4f.rotate(p_178407_2_.field_178343_c * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
+                    Matrix4f.rotate(partRotation.field_178343_c * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
                     vector3f.set(0.0F, 1.0F, 1.0F);
                     break;
                 case Y:
-                    Matrix4f.rotate(p_178407_2_.field_178343_c * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f, matrix4f);
+                    Matrix4f.rotate(partRotation.field_178343_c * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f, matrix4f);
                     vector3f.set(1.0F, 0.0F, 1.0F);
                     break;
                 case Z:
-                    Matrix4f.rotate(p_178407_2_.field_178343_c * 0.017453292F, new Vector3f(0.0F, 0.0F, 1.0F), matrix4f, matrix4f);
+                    Matrix4f.rotate(partRotation.field_178343_c * 0.017453292F, new Vector3f(0.0F, 0.0F, 1.0F), matrix4f, matrix4f);
                     vector3f.set(1.0F, 1.0F, 0.0F);
             }
 
-            if (p_178407_2_.field_178341_d)
+            if (partRotation.field_178341_d)
             {
-                if (Math.abs(p_178407_2_.field_178343_c) == 22.5F)
+                if (Math.abs(partRotation.field_178343_c) == 22.5F)
                 {
                     vector3f.scale(field_178418_a);
                 }
@@ -184,11 +200,16 @@
                 vector3f.set(1.0F, 1.0F, 1.0F);
             }
 
-            this.func_178406_a(p_178407_1_, new Vector3f(p_178407_2_.field_178344_a), matrix4f, vector3f);
+            this.rotateScale(p_178407_1_, new Vector3f(partRotation.field_178344_a), matrix4f, vector3f);
         }
     }
 
-    public int func_188011_a(Vector3f p_188011_1_, EnumFacing p_188011_2_, int p_188011_3_, ModelRotation p_188011_4_)
+    public int rotateVertex(Vector3f p_188011_1_, EnumFacing p_188011_2_, int p_188011_3_, ModelRotation p_188011_4_)
+    {
+        return rotateVertex(p_188011_1_, p_188011_2_, p_188011_3_, (net.minecraftforge.common.model.ITransformation)p_188011_4_);
+    }
+
+    public int rotateVertex(Vector3f p_188011_1_, EnumFacing p_188011_2_, int p_188011_3_, net.minecraftforge.common.model.ITransformation p_188011_4_)
     {
         if (p_188011_4_ == ModelRotation.X0_Y0)
         {
@@ -196,22 +217,22 @@
         }
         else
         {
-            this.func_178406_a(p_188011_1_, new Vector3f(0.5F, 0.5F, 0.5F), p_188011_4_.func_177525_a(), new Vector3f(1.0F, 1.0F, 1.0F));
-            return p_188011_4_.func_177520_a(p_188011_2_, p_188011_3_);
+            net.minecraftforge.client.ForgeHooksClient.transform(p_188011_1_, p_188011_4_.getMatrix());
+            return p_188011_4_.rotate(p_188011_2_, p_188011_3_);
         }
     }
 
-    private void func_178406_a(Vector3f p_178406_1_, Vector3f p_178406_2_, Matrix4f p_178406_3_, Vector3f p_178406_4_)
+    private void rotateScale(Vector3f position, Vector3f rotationOrigin, Matrix4f rotationMatrix, Vector3f scale)
     {
-        Vector4f vector4f = new Vector4f(p_178406_1_.x - p_178406_2_.x, p_178406_1_.y - p_178406_2_.y, p_178406_1_.z - p_178406_2_.z, 1.0F);
-        Matrix4f.transform(p_178406_3_, vector4f, vector4f);
-        vector4f.x *= p_178406_4_.x;
-        vector4f.y *= p_178406_4_.y;
-        vector4f.z *= p_178406_4_.z;
-        p_178406_1_.set(vector4f.x + p_178406_2_.x, vector4f.y + p_178406_2_.y, vector4f.z + p_178406_2_.z);
+        Vector4f vector4f = new Vector4f(position.x - rotationOrigin.x, position.y - rotationOrigin.y, position.z - rotationOrigin.z, 1.0F);
+        Matrix4f.transform(rotationMatrix, vector4f, vector4f);
+        vector4f.x *= scale.x;
+        vector4f.y *= scale.y;
+        vector4f.z *= scale.z;
+        position.set(vector4f.x + rotationOrigin.x, vector4f.y + rotationOrigin.y, vector4f.z + rotationOrigin.z);
     }
 
-    private Matrix4f func_178411_a()
+    private Matrix4f getMatrixIdentity()
     {
         Matrix4f matrix4f = new Matrix4f();
         matrix4f.setIdentity();
