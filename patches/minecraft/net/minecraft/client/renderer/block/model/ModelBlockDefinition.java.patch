--- before/net/minecraft/client/renderer/block/model/ModelBlockDefinition.java
+++ after/net/minecraft/client/renderer/block/model/ModelBlockDefinition.java
@@ -28,19 +28,18 @@
 public class ModelBlockDefinition
 {
     @VisibleForTesting
-    static final Gson GSON = new GsonBuilder()
-        .registerTypeAdapter(ModelBlockDefinition.class, new ModelBlockDefinition.Deserializer())
-        .registerTypeAdapter(Variant.class, new Variant.Deserializer())
-        .registerTypeAdapter(VariantList.class, new VariantList.Deserializer())
-        .registerTypeAdapter(Multipart.class, new Multipart.Deserializer())
-        .registerTypeAdapter(Selector.class, new Selector.Deserializer())
-        .create();
-    private final Map<String, VariantList> mapVariants = Maps.newHashMap();
+    static final Gson GSON = (new GsonBuilder()).registerTypeAdapter(ModelBlockDefinition.class, new ModelBlockDefinition.Deserializer()).registerTypeAdapter(Variant.class, new Variant.Deserializer()).registerTypeAdapter(VariantList.class, new VariantList.Deserializer()).registerTypeAdapter(Multipart.class, new Multipart.Deserializer()).registerTypeAdapter(Selector.class, new Selector.Deserializer()).create();
+    private final Map<String, VariantList> mapVariants = Maps.<String, VariantList>newHashMap();
     private Multipart multipart;
 
+    @Deprecated
     public static ModelBlockDefinition parseFromReader(Reader reader)
     {
-        return JsonUtils.fromJson(GSON, reader, ModelBlockDefinition.class);
+        return parseFromReader(reader, null);
+    }
+
+    public static ModelBlockDefinition parseFromReader(Reader reader, net.minecraft.util.ResourceLocation location) {
+        return net.minecraftforge.client.model.BlockStateLoader.load(reader, location, GSON);
     }
 
     public ModelBlockDefinition(Map<String, VariantList> variants, Multipart multipartIn)
@@ -89,7 +88,6 @@
         }
     }
 
-    @Override
     public boolean equals(Object p_equals_1_)
     {
         if (this == p_equals_1_)
@@ -112,7 +110,6 @@
         }
     }
 
-    @Override
     public int hashCode()
     {
         return 31 * this.mapVariants.hashCode() + (this.hasMultipartData() ? this.multipart.hashCode() : 0);
@@ -161,7 +158,7 @@
 
             protected Map<String, VariantList> parseMapVariants(JsonDeserializationContext deserializationContext, JsonObject object)
             {
-                Map<String, VariantList> map = Maps.newHashMap();
+                Map<String, VariantList> map = Maps.<String, VariantList>newHashMap();
 
                 if (object.has("variants"))
                 {
@@ -169,7 +166,7 @@
 
                     for (Entry<String, JsonElement> entry : jsonobject.entrySet())
                     {
-                        map.put(entry.getKey(), deserializationContext.deserialize(entry.getValue(), VariantList.class));
+                        map.put(entry.getKey(), (VariantList)deserializationContext.deserialize(entry.getValue(), VariantList.class));
                     }
                 }
 
@@ -186,7 +183,7 @@
                 else
                 {
                     JsonArray jsonarray = JsonUtils.getJsonArray(object, "multipart");
-                    return deserializationContext.deserialize(jsonarray, Multipart.class);
+                    return (Multipart)deserializationContext.deserialize(jsonarray, Multipart.class);
                 }
             }
         }
@@ -194,8 +191,5 @@
     @SideOnly(Side.CLIENT)
     public class MissingVariantException extends RuntimeException
     {
-        protected MissingVariantException()
-        {
-        }
     }
 }
