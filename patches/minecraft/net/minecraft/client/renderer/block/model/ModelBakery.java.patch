--- before/net/minecraft/client/renderer/block/model/ModelBakery.java
+++ after/net/minecraft/client/renderer/block/model/ModelBakery.java
@@ -141,6 +141,21 @@
             {
                 try
                 {
+                    loadBlock(blockstatemapper, block, resourcelocation);
+                }
+                catch (Exception exception)
+                {
+                    LOGGER.warn((String)("Unable to load definition " + resourcelocation), (Throwable)exception);
+                }
+            }
+        }
+    }
+
+    protected void loadBlock(BlockStateMapper blockstatemapper, Block block, final ResourceLocation resourcelocation)
+    {
+        {
+            {
+                {
                     ModelBlockDefinition modelblockdefinition = this.getModelBlockDefinition(resourcelocation);
                     Map<IBlockState, ModelResourceLocation> map = blockstatemapper.getVariants(block);
 
@@ -153,7 +168,6 @@
                         if (collection1 == null)
                         {
                             collection1 = Lists.newArrayList();
-                            this.multipartVariantMap.put(modelblockdefinition, collection1);
                         }
 
                         collection1.addAll(Lists.newArrayList(Iterables.filter(collection, new Predicate<ModelResourceLocation>()
@@ -163,6 +177,7 @@
                                 return resourcelocation.equals(p_apply_1_);
                             }
                         })));
+                        registerMultipartVariant(modelblockdefinition, collection1);
                     }
 
                     for (Entry<IBlockState, ModelResourceLocation> entry : map.entrySet())
@@ -173,7 +188,7 @@
                         {
                             try
                             {
-                                this.variants.put(modelresourcelocation, modelblockdefinition.getVariant(modelresourcelocation.getVariant()));
+                                registerVariant(modelblockdefinition, modelresourcelocation);
                             }
                             catch (RuntimeException runtimeexception)
                             {
@@ -185,10 +200,6 @@
                         }
                     }
                 }
-                catch (Exception exception)
-                {
-                    LOGGER.warn("Unable to load definition {}", resourcelocation, exception);
-                }
             }
         }
     }
@@ -270,7 +281,7 @@
         try
         {
             inputstream = resource.getInputStream();
-            lvt_4_1_ = ModelBlockDefinition.parseFromReader(new InputStreamReader(inputstream, StandardCharsets.UTF_8));
+            lvt_4_1_ = ModelBlockDefinition.parseFromReader(new InputStreamReader(inputstream, StandardCharsets.UTF_8), location);
         }
         catch (Exception exception)
         {
@@ -443,6 +454,7 @@
 
     protected void registerVariantNames()
     {
+        this.variantNames.clear(); // FML clear this to prevent double ups.
         this.variantNames
         .put(
             Item.getItemFromBlock(Blocks.STONE),
@@ -697,6 +709,10 @@
         this.variantNames.put(Items.OAK_DOOR, Lists.newArrayList("oak_door"));
         this.variantNames.put(Items.BOAT, Lists.newArrayList("oak_boat"));
         this.variantNames.put(Items.TOTEM_OF_UNDYING, Lists.newArrayList("totem"));
+        for (Entry<net.minecraftforge.registries.IRegistryDelegate<Item>, Set<String>> e : customVariantNames.entrySet())
+        {
+            this.variantNames.put(e.getKey().get(), Lists.newArrayList(e.getValue().iterator()));
+        }
     }
 
     protected List<String> getVariantNames(Item stack)
@@ -818,7 +834,7 @@
         for (Entry<String, ResourceLocation> entry : this.itemLocations.entrySet())
         {
             ResourceLocation resourcelocation = entry.getValue();
-            ModelResourceLocation modelresourcelocation = new ModelResourceLocation(entry.getKey(), "inventory");
+            ModelResourceLocation modelresourcelocation = net.minecraftforge.client.model.ModelLoader.getInventoryVariant(entry.getKey());
             ModelBlock modelblock = this.models.get(resourcelocation);
 
             if (modelblock == null || !modelblock.isResolved())
@@ -905,6 +921,11 @@
     @Nullable
     private IBakedModel bakeModel(ModelBlock modelBlockIn, ModelRotation modelRotationIn, boolean uvLocked)
     {
+        return bakeModel(modelBlockIn, (net.minecraftforge.common.model.ITransformation)modelRotationIn, uvLocked);
+    }
+
+    protected IBakedModel bakeModel(ModelBlock modelBlockIn, net.minecraftforge.common.model.ITransformation modelRotationIn, boolean uvLocked)
+    {
         TextureAtlasSprite textureatlassprite = this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName("particle")));
         SimpleBakedModel.Builder simplebakedmodel$builder = new SimpleBakedModel.Builder(modelBlockIn, modelBlockIn.createOverrides())
         .setTexture(textureatlassprite);
@@ -922,7 +943,7 @@
                     BlockPartFace blockpartface = blockpart.mapFaces.get(enumfacing);
                     TextureAtlasSprite textureatlassprite1 = this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName(blockpartface.texture)));
 
-                    if (blockpartface.cullFace == null)
+                    if (blockpartface.cullFace == null || !net.minecraftforge.common.model.TRSRTransformation.isInteger(modelRotationIn.getMatrix()))
                     {
                         simplebakedmodel$builder.addGeneralQuad(
                             this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked)
@@ -931,7 +952,7 @@
                     else
                     {
                         simplebakedmodel$builder.addFaceQuad(
-                            modelRotationIn.rotateFace(blockpartface.cullFace),
+                            modelRotationIn.rotate(blockpartface.cullFace),
                             this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked)
                         );
                     }
@@ -946,18 +967,12 @@
         BlockPart blockPartt, BlockPartFace blockPartFaceIn, TextureAtlasSprite sprite, EnumFacing face, ModelRotation transform, boolean uvLocked
     )
     {
-        return this.faceBakery
-               .makeBakedQuad(
-                   blockPartt.positionFrom,
-                   blockPartt.positionTo,
-                   blockPartFaceIn,
-                   sprite,
-                   face,
-                   transform,
-                   blockPartt.partRotation,
-                   uvLocked,
-                   blockPartt.shade
-               );
+        return makeBakedQuad(blockPartt, blockPartFaceIn, sprite, face, (net.minecraftforge.common.model.ITransformation)transform, uvLocked);
+    }
+
+    protected BakedQuad makeBakedQuad(BlockPart blockPartt, BlockPartFace blockPartFaceIn, TextureAtlasSprite sprite, EnumFacing face, net.minecraftforge.common.model.ITransformation transform, boolean uvLocked)
+    {
+        return this.faceBakery.makeBakedQuad(blockPartt.positionFrom, blockPartt.positionTo, blockPartFaceIn, sprite, face, transform, blockPartt.partRotation, uvLocked, blockPartt.shade);
     }
 
     private void loadModelsCheck()
@@ -1182,5 +1197,24 @@
         BUILT_IN_MODELS.put("missing", MISSING_MODEL_MESH);
         MODEL_GENERATED.name = "generation marker";
         MODEL_ENTITY.name = "block entity marker";
+    }
+
+    protected void registerMultipartVariant(ModelBlockDefinition definition, Collection<ModelResourceLocation> locations)
+    {
+        this.multipartVariantMap.put(definition, locations);
+    }
+
+    private static Map<net.minecraftforge.registries.IRegistryDelegate<Item>, Set<String>> customVariantNames = Maps.newHashMap();
+
+    public static void registerItemVariants(Item item, ResourceLocation... names)
+    {
+        if (!customVariantNames.containsKey(item.delegate))
+        {
+            customVariantNames.put(item.delegate, Sets.<String>newHashSet());
+        }
+        for(ResourceLocation name : names)
+        {
+            customVariantNames.get(item.delegate).add(name.toString());
+        }
     }
 }
