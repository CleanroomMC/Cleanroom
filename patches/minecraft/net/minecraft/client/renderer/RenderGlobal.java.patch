--- before/net/minecraft/client/renderer/RenderGlobal.java
+++ after/net/minecraft/client/renderer/RenderGlobal.java
@@ -13,6 +13,7 @@
 import java.util.Queue;
 import java.util.Random;
 import java.util.Set;
+import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
@@ -103,9 +104,9 @@
     private final TextureManager renderEngine;
     private final RenderManager renderManager;
     private WorldClient world;
-    private Set<RenderChunk> chunksToUpdate = Sets.newLinkedHashSet();
-    private List<RenderGlobal.ContainerLocalRenderInformation> renderInfos = Lists.newArrayListWithCapacity(69696);
-    private final Set<TileEntity> setTileEntities = Sets.newHashSet();
+    private Set<RenderChunk> chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
+    private List<RenderGlobal.ContainerLocalRenderInformation> renderInfos = Lists.<RenderGlobal.ContainerLocalRenderInformation>newArrayListWithCapacity(69696);
+    private final Set<TileEntity> setTileEntities = Sets.<TileEntity>newHashSet();
     private ViewFrustum viewFrustum;
     private int starGLCallList = -1;
     private int glSkyList = -1;
@@ -115,8 +116,8 @@
     private VertexBuffer skyVBO;
     private VertexBuffer sky2VBO;
     private int cloudTickCounter;
-    private final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.newHashMap();
-    private final Map<BlockPos, ISound> mapSoundPositions = Maps.newHashMap();
+    private final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.<Integer, DestroyBlockProgress>newHashMap();
+    private final Map<BlockPos, ISound> mapSoundPositions = Maps.<BlockPos, ISound>newHashMap();
     private final TextureAtlasSprite[] destroyBlockIcons = new TextureAtlasSprite[10];
     private Framebuffer entityOutlineFramebuffer;
     private ShaderGroup entityOutlineShader;
@@ -149,7 +150,7 @@
     private double prevRenderSortZ;
     private boolean displayListEntitiesDirty = true;
     private boolean entityOutlinesRendered;
-    private final Set<BlockPos> setLightUpdates = Sets.newHashSet();
+    private final Set<BlockPos> setLightUpdates = Sets.<BlockPos>newHashSet();
 
     public RenderGlobal(Minecraft mcIn)
     {
@@ -181,7 +182,6 @@
         this.generateSky2();
     }
 
-    @Override
     public void onResourceManagerReload(IResourceManager resourceManager)
     {
         this.updateDestroyBlockIcons();
@@ -191,7 +191,7 @@
     {
         TextureMap texturemap = this.mc.getTextureMapBlocks();
 
-        for (int i = 0; i < this.destroyBlockIcons.length; i++)
+        for (int i = 0; i < this.destroyBlockIcons.length; ++i)
         {
             this.destroyBlockIcons[i] = texturemap.getAtlasSprite("minecraft:blocks/destroy_stage_" + i);
         }
@@ -210,9 +210,7 @@
 
             try
             {
-                this.entityOutlineShader = new ShaderGroup(
-                    this.mc.getTextureManager(), this.mc.getResourceManager(), this.mc.getFramebuffer(), resourcelocation
-                );
+                this.entityOutlineShader = new ShaderGroup(this.mc.getTextureManager(), this.mc.getResourceManager(), this.mc.getFramebuffer(), resourcelocation);
                 this.entityOutlineShader.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
                 this.entityOutlineFramebuffer = this.entityOutlineShader.getFramebufferRaw("final");
             }
@@ -241,12 +239,7 @@
         if (this.isRenderEntityOutlines())
         {
             GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(
-                GlStateManager.SourceFactor.SRC_ALPHA,
-                GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                GlStateManager.SourceFactor.ZERO,
-                GlStateManager.DestFactor.ONE
-            );
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE);
             this.entityOutlineFramebuffer.framebufferRenderExt(this.mc.displayWidth, this.mc.displayHeight, false);
             GlStateManager.disableBlend();
         }
@@ -393,7 +386,7 @@
         Random random = new Random(10842L);
         bufferBuilderIn.begin(7, DefaultVertexFormats.POSITION);
 
-        for (int i = 0; i < 1500; i++)
+        for (int i = 0; i < 1500; ++i)
         {
             double d0 = (double)(random.nextFloat() * 2.0F - 1.0F);
             double d1 = (double)(random.nextFloat() * 2.0F - 1.0F);
@@ -401,35 +394,35 @@
             double d3 = (double)(0.15F + random.nextFloat() * 0.1F);
             double d4 = d0 * d0 + d1 * d1 + d2 * d2;
 
-            if (d4 < 1.0 && d4 > 0.01)
+            if (d4 < 1.0D && d4 > 0.01D)
             {
-                d4 = 1.0 / Math.sqrt(d4);
-                d0 *= d4;
-                d1 *= d4;
-                d2 *= d4;
-                double d5 = d0 * 100.0;
-                double d6 = d1 * 100.0;
-                double d7 = d2 * 100.0;
+                d4 = 1.0D / Math.sqrt(d4);
+                d0 = d0 * d4;
+                d1 = d1 * d4;
+                d2 = d2 * d4;
+                double d5 = d0 * 100.0D;
+                double d6 = d1 * 100.0D;
+                double d7 = d2 * 100.0D;
                 double d8 = Math.atan2(d0, d2);
                 double d9 = Math.sin(d8);
                 double d10 = Math.cos(d8);
                 double d11 = Math.atan2(Math.sqrt(d0 * d0 + d2 * d2), d1);
                 double d12 = Math.sin(d11);
                 double d13 = Math.cos(d11);
-                double d14 = random.nextDouble() * Math.PI * 2.0;
+                double d14 = random.nextDouble() * Math.PI * 2.0D;
                 double d15 = Math.sin(d14);
                 double d16 = Math.cos(d14);
 
-                for (int j = 0; j < 4; j++)
+                for (int j = 0; j < 4; ++j)
                 {
-                    double d17 = 0.0;
+                    double d17 = 0.0D;
                     double d18 = (double)((j & 2) - 1) * d3;
                     double d19 = (double)((j + 1 & 2) - 1) * d3;
-                    double d20 = 0.0;
+                    double d20 = 0.0D;
                     double d21 = d18 * d16 - d19 * d15;
                     double d22 = d19 * d16 + d18 * d15;
-                    double d23 = d21 * d12 + 0.0 * d13;
-                    double d24 = 0.0 * d12 - d21 * d13;
+                    double d23 = d21 * d12 + 0.0D * d13;
+                    double d24 = 0.0D * d12 - d21 * d13;
                     double d25 = d24 * d9 - d22 * d10;
                     double d26 = d22 * d9 + d24 * d10;
                     bufferBuilderIn.pos(d5 + d25, d6 + d23, d7 + d26).endVertex();
@@ -560,9 +553,11 @@
 
     public void renderEntities(Entity renderViewEntity, ICamera camera, float partialTicks)
     {
+        int pass = net.minecraftforge.client.MinecraftForgeClient.getRenderPass();
         if (this.renderEntitiesStartupCounter > 0)
         {
-            this.renderEntitiesStartupCounter--;
+            if (pass > 0) return;
+            --this.renderEntitiesStartupCounter;
         }
         else
         {
@@ -570,27 +565,14 @@
             double d1 = renderViewEntity.prevPosY + (renderViewEntity.posY - renderViewEntity.prevPosY) * (double)partialTicks;
             double d2 = renderViewEntity.prevPosZ + (renderViewEntity.posZ - renderViewEntity.prevPosZ) * (double)partialTicks;
             this.world.profiler.startSection("prepare");
-            TileEntityRendererDispatcher.instance
-            .prepare(
-                this.world,
-                this.mc.getTextureManager(),
-                this.mc.fontRenderer,
-                this.mc.getRenderViewEntity(),
-                this.mc.objectMouseOver,
-                partialTicks
-            );
-            this.renderManager
-            .cacheActiveRenderInfo(
-                this.world,
-                this.mc.fontRenderer,
-                this.mc.getRenderViewEntity(),
-                this.mc.pointedEntity,
-                this.mc.gameSettings,
-                partialTicks
-            );
+            TileEntityRendererDispatcher.instance.prepare(this.world, this.mc.getTextureManager(), this.mc.fontRenderer, this.mc.getRenderViewEntity(), this.mc.objectMouseOver, partialTicks);
+            this.renderManager.cacheActiveRenderInfo(this.world, this.mc.fontRenderer, this.mc.getRenderViewEntity(), this.mc.pointedEntity, this.mc.gameSettings, partialTicks);
+            if(pass == 0)
+            {
             this.countEntitiesTotal = 0;
             this.countEntitiesRendered = 0;
             this.countEntitiesHidden = 0;
+            }
             Entity entity = this.mc.getRenderViewEntity();
             double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
             double d4 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
@@ -602,12 +584,16 @@
             this.mc.entityRenderer.enableLightmap();
             this.world.profiler.endStartSection("global");
             List<Entity> list = this.world.getLoadedEntityList();
+            if (pass == 0)
+            {
             this.countEntitiesTotal = list.size();
+            }
 
-            for (int i = 0; i < this.world.weatherEffects.size(); i++)
+            for (int i = 0; i < this.world.weatherEffects.size(); ++i)
             {
                 Entity entity1 = this.world.weatherEffects.get(i);
-                this.countEntitiesRendered++;
+                if (!entity1.shouldRenderInPass(pass)) continue;
+                ++this.countEntitiesRendered;
 
                 if (entity1.isInRangeToRender3d(d0, d1, d2))
                 {
@@ -616,38 +602,29 @@
             }
 
             this.world.profiler.endStartSection("entities");
-            List<Entity> list1 = Lists.newArrayList();
-            List<Entity> list2 = Lists.newArrayList();
+            List<Entity> list1 = Lists.<Entity>newArrayList();
+            List<Entity> list2 = Lists.<Entity>newArrayList();
             BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
 
             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
             {
                 Chunk chunk = this.world.getChunk(renderglobal$containerlocalrenderinformation.renderChunk.getPosition());
-                ClassInheritanceMultiMap<Entity> classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk
-                        .getPosition()
-                        .getY()
-                        / 16];
+                ClassInheritanceMultiMap<Entity> classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk.getPosition().getY() / 16];
 
                 if (!classinheritancemultimap.isEmpty())
                 {
                     for (Entity entity2 : classinheritancemultimap)
                     {
+                        if(!entity2.shouldRenderInPass(pass)) continue;
                         boolean flag = this.renderManager.shouldRender(entity2, camera, d0, d1, d2) || entity2.isRidingOrBeingRiddenBy(this.mc.player);
 
                         if (flag)
                         {
-                            boolean flag1 = this.mc.getRenderViewEntity() instanceof EntityLivingBase
-                                            ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping()
-                                            : false;
+                            boolean flag1 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
 
-                            if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag1)
-                                    && (
-                                        !(entity2.posY >= 0.0)
-                                        || !(entity2.posY < 256.0)
-                                        || this.world.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))
-                                    ))
+                            if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag1) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.world.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
                             {
-                                this.countEntitiesRendered++;
+                                ++this.countEntitiesRendered;
                                 this.renderManager.renderEntityStatic(entity2, partialTicks, false);
 
                                 if (this.isOutlineActive(entity2, entity, camera))
@@ -675,6 +652,7 @@
                 }
             }
 
+            if(pass == 0)
             if (this.isRenderEntityOutlines() && (!list1.isEmpty() || this.entityOutlinesRendered))
             {
                 this.world.profiler.endStartSection("entityOutlines");
@@ -689,7 +667,7 @@
                     RenderHelper.disableStandardItemLighting();
                     this.renderManager.setRenderOutlines(true);
 
-                    for (int j = 0; j < list1.size(); j++)
+                    for (int j = 0; j < list1.size(); ++j)
                     {
                         this.renderManager.renderEntityStatic(list1.get(j), partialTicks, false);
                     }
@@ -714,6 +692,7 @@
             this.world.profiler.endStartSection("blockentities");
             RenderHelper.enableStandardItemLighting();
 
+            TileEntityRendererDispatcher.instance.preDrawBatch();
             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfos)
             {
                 List<TileEntity> list3 = renderglobal$containerlocalrenderinformation1.renderChunk.getCompiledChunk().getTileEntities();
@@ -722,6 +701,7 @@
                 {
                     for (TileEntity tileentity2 : list3)
                     {
+                        if (!tileentity2.shouldRenderInPass(pass) || !camera.isBoundingBoxInFrustum(tileentity2.getRenderBoundingBox())) continue;
                         TileEntityRendererDispatcher.instance.render(tileentity2, partialTicks, -1);
                     }
                 }
@@ -731,9 +711,11 @@
             {
                 for (TileEntity tileentity : this.setTileEntities)
                 {
+                    if (!tileentity.shouldRenderInPass(pass) || !camera.isBoundingBoxInFrustum(tileentity.getRenderBoundingBox())) continue;
                     TileEntityRendererDispatcher.instance.render(tileentity, partialTicks, -1);
                 }
             }
+            TileEntityRendererDispatcher.instance.drawBatch(pass);
 
             this.preRenderDamagedBlocks();
 
@@ -788,15 +770,13 @@
         {
             return true;
         }
+        else if (this.mc.player.isSpectator() && this.mc.gameSettings.keyBindSpectatorOutlines.isKeyDown() && entityIn instanceof EntityPlayer)
+        {
+            return entityIn.ignoreFrustumCheck || camera.isBoundingBoxInFrustum(entityIn.getEntityBoundingBox()) || entityIn.isRidingOrBeingRiddenBy(this.mc.player);
+        }
         else
         {
-            return this.mc.player.isSpectator()
-                   && this.mc.gameSettings.keyBindSpectatorOutlines.isKeyDown()
-                   && entityIn instanceof EntityPlayer
-                   ? entityIn.ignoreFrustumCheck
-                   || camera.isBoundingBoxInFrustum(entityIn.getEntityBoundingBox())
-                   || entityIn.isRidingOrBeingRiddenBy(this.mc.player)
-                   : false;
+            return false;
         }
     }
 
@@ -804,15 +784,7 @@
     {
         int i = this.viewFrustum.renderChunks.length;
         int j = this.getRenderedChunks();
-        return String.format(
-                   "C: %d/%d %sD: %d, L: %d, %s",
-                   j,
-                   i,
-                   this.mc.renderChunksMany ? "(s) " : "",
-                   this.renderDistanceChunks,
-                   this.setLightUpdates.size(),
-                   this.renderDispatcher == null ? "null" : this.renderDispatcher.getDebugInfo()
-               );
+        return String.format("C: %d/%d %sD: %d, L: %d, %s", j, i, this.mc.renderChunksMany ? "(s) " : "", this.renderDistanceChunks, this.setLightUpdates.size(), this.renderDispatcher == null ? "null" : this.renderDispatcher.getDebugInfo());
     }
 
     protected int getRenderedChunks()
@@ -825,7 +797,7 @@
 
             if (compiledchunk != CompiledChunk.DUMMY && !compiledchunk.isEmpty())
             {
-                i++;
+                ++i;
             }
         }
 
@@ -849,10 +821,7 @@
         double d1 = viewEntity.posY - this.frustumUpdatePosY;
         double d2 = viewEntity.posZ - this.frustumUpdatePosZ;
 
-        if (this.frustumUpdatePosChunkX != viewEntity.chunkCoordX
-                || this.frustumUpdatePosChunkY != viewEntity.chunkCoordY
-                || this.frustumUpdatePosChunkZ != viewEntity.chunkCoordZ
-                || d0 * d0 + d1 * d1 + d2 * d2 > 16.0)
+        if (this.frustumUpdatePosChunkX != viewEntity.chunkCoordX || this.frustumUpdatePosChunkY != viewEntity.chunkCoordY || this.frustumUpdatePosChunkZ != viewEntity.chunkCoordZ || d0 * d0 + d1 * d1 + d2 * d2 > 16.0D)
         {
             this.frustumUpdatePosX = viewEntity.posX;
             this.frustumUpdatePosY = viewEntity.posY;
@@ -880,16 +849,8 @@
         this.mc.profiler.endStartSection("culling");
         BlockPos blockpos1 = new BlockPos(d3, d4 + (double)viewEntity.getEyeHeight(), d5);
         RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos1);
-        BlockPos blockpos = new BlockPos(
-            MathHelper.floor(d3 / 16.0) * 16, MathHelper.floor(d4 / 16.0) * 16, MathHelper.floor(d5 / 16.0) * 16
-        );
-        this.displayListEntitiesDirty = this.displayListEntitiesDirty
-                              || !this.chunksToUpdate.isEmpty()
-                              || viewEntity.posX != this.lastViewEntityX
-                              || viewEntity.posY != this.lastViewEntityY
-                              || viewEntity.posZ != this.lastViewEntityZ
-                              || (double)viewEntity.rotationPitch != this.lastViewEntityPitch
-                              || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
+        BlockPos blockpos = new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
+        this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
         this.lastViewEntityX = viewEntity.posX;
         this.lastViewEntityY = viewEntity.posY;
         this.lastViewEntityZ = viewEntity.posZ;
@@ -901,17 +862,15 @@
         if (!flag && this.displayListEntitiesDirty)
         {
             this.displayListEntitiesDirty = false;
-            this.renderInfos = Lists.newArrayList();
-            Queue<RenderGlobal.ContainerLocalRenderInformation> queue = Queues.newArrayDeque();
-            Entity.setRenderDistanceWeight(MathHelper.clamp((double)this.mc.gameSettings.renderDistanceChunks / 8.0, 1.0, 2.5));
+            this.renderInfos = Lists.<RenderGlobal.ContainerLocalRenderInformation>newArrayList();
+            Queue<RenderGlobal.ContainerLocalRenderInformation> queue = Queues.<RenderGlobal.ContainerLocalRenderInformation>newArrayDeque();
+            Entity.setRenderDistanceWeight(MathHelper.clamp((double)this.mc.gameSettings.renderDistanceChunks / 8.0D, 1.0D, 2.5D));
             boolean flag1 = this.mc.renderChunksMany;
 
             if (renderchunk != null)
             {
                 boolean flag2 = false;
-                RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(
-                    renderchunk, null, 0
-                );
+                RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0);
                 Set<EnumFacing> set1 = this.getVisibleFacings(blockpos1);
 
                 if (set1.size() == 1)
@@ -945,16 +904,16 @@
             {
                 int i = blockpos1.getY() > 0 ? 248 : 8;
 
-                for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; j++)
+                for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j)
                 {
-                    for (int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; k++)
+                    for (int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; ++k)
                     {
                         RenderChunk renderchunk1 = this.viewFrustum.getRenderChunk(new BlockPos((j << 4) + 8, i, (k << 4) + 8));
 
-                        if (renderchunk1 != null && camera.isBoundingBoxInFrustum(renderchunk1.boundingBox))
+                        if (renderchunk1 != null && camera.isBoundingBoxInFrustum(renderchunk1.boundingBox.expand(0.0, blockpos1.getY() > 0 ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY, 0.0))) // Forge: fix MC-73139
                         {
                             renderchunk1.setFrameIndex(frameCount);
-                            queue.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk1, null, 0));
+                            queue.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk1, (EnumFacing)null, 0));
                         }
                     }
                 }
@@ -973,15 +932,9 @@
                 {
                     RenderChunk renderchunk2 = this.getRenderChunkOffset(blockpos, renderchunk3, enumfacing1);
 
-                    if ((!flag1 || !renderglobal$containerlocalrenderinformation1.hasDirection(enumfacing1.getOpposite()))
-                            && (!flag1 || enumfacing2 == null || renderchunk3.getCompiledChunk().isVisible(enumfacing2.getOpposite(), enumfacing1))
-                            && renderchunk2 != null
-                            && renderchunk2.setFrameIndex(frameCount)
-                            && camera.isBoundingBoxInFrustum(renderchunk2.boundingBox))
+                    if ((!flag1 || !renderglobal$containerlocalrenderinformation1.hasDirection(enumfacing1.getOpposite())) && (!flag1 || enumfacing2 == null || renderchunk3.getCompiledChunk().isVisible(enumfacing2.getOpposite(), enumfacing1)) && renderchunk2 != null && renderchunk2.setFrameIndex(frameCount) && camera.isBoundingBoxInFrustum(renderchunk2.boundingBox))
                     {
-                        RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = new RenderGlobal.ContainerLocalRenderInformation(
-                            renderchunk2, enumfacing1, renderglobal$containerlocalrenderinformation1.counter + 1
-                        );
+                        RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, enumfacing1, renderglobal$containerlocalrenderinformation1.counter + 1);
                         renderglobal$containerlocalrenderinformation.setDirection(renderglobal$containerlocalrenderinformation1.setFacing, enumfacing1);
                         queue.add(renderglobal$containerlocalrenderinformation);
                     }
@@ -1001,7 +954,7 @@
 
         this.mc.profiler.endStartSection("rebuildNear");
         Set<RenderChunk> set = this.chunksToUpdate;
-        this.chunksToUpdate = Sets.newLinkedHashSet();
+        this.chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
 
         for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 : this.renderInfos)
         {
@@ -1011,9 +964,9 @@
             {
                 this.displayListEntitiesDirty = true;
                 BlockPos blockpos2 = renderchunk4.getPosition().add(8, 8, 8);
-                boolean flag3 = blockpos2.distanceSq(blockpos1) < 768.0;
+                boolean flag3 = blockpos2.distanceSq(blockpos1) < 768.0D;
 
-                if (!renderchunk4.needsImmediateUpdate() && !flag3)
+                if (net.minecraftforge.common.ForgeModContainer.alwaysSetupTerrainOffThread || (!renderchunk4.needsImmediateUpdate() && !flag3))
                 {
                     this.chunksToUpdate.add(renderchunk4);
                 }
@@ -1057,15 +1010,13 @@
         {
             return null;
         }
-        else if (blockpos.getY() < 0 || blockpos.getY() >= 256)
+        else if (blockpos.getY() >= 0 && blockpos.getY() < 256)
         {
-            return null;
+            return MathHelper.abs(playerPos.getZ() - blockpos.getZ()) > this.renderDistanceChunks * 16 ? null : this.viewFrustum.getRenderChunk(blockpos);
         }
         else
         {
-            return MathHelper.abs(playerPos.getZ() - blockpos.getZ()) > this.renderDistanceChunks * 16
-                   ? null
-                   : this.viewFrustum.getRenderChunk(blockpos);
+            return null;
         }
     }
 
@@ -1092,12 +1043,12 @@
         this.debugTerrainMatrix[6] = new Vector4f(1.0F, 1.0F, 1.0F, 1.0F);
         this.debugTerrainMatrix[7] = new Vector4f(-1.0F, 1.0F, 1.0F, 1.0F);
 
-        for (int i = 0; i < 8; i++)
+        for (int i = 0; i < 8; ++i)
         {
             Matrix4f.transform(matrix4f2, this.debugTerrainMatrix[i], this.debugTerrainMatrix[i]);
-            this.debugTerrainMatrix[i].x = this.debugTerrainMatrix[i].x / this.debugTerrainMatrix[i].w;
-            this.debugTerrainMatrix[i].y = this.debugTerrainMatrix[i].y / this.debugTerrainMatrix[i].w;
-            this.debugTerrainMatrix[i].z = this.debugTerrainMatrix[i].z / this.debugTerrainMatrix[i].w;
+            this.debugTerrainMatrix[i].x /= this.debugTerrainMatrix[i].w;
+            this.debugTerrainMatrix[i].y /= this.debugTerrainMatrix[i].w;
+            this.debugTerrainMatrix[i].z /= this.debugTerrainMatrix[i].w;
             this.debugTerrainMatrix[i].w = 1.0F;
         }
     }
@@ -1112,10 +1063,10 @@
             f += 180.0F;
         }
 
-        float f2 = MathHelper.cos(-f1 * (float)(Math.PI / 180.0) - (float) Math.PI);
-        float f3 = MathHelper.sin(-f1 * (float)(Math.PI / 180.0) - (float) Math.PI);
-        float f4 = -MathHelper.cos(-f * (float)(Math.PI / 180.0));
-        float f5 = MathHelper.sin(-f * (float)(Math.PI / 180.0));
+        float f2 = MathHelper.cos(-f1 * 0.017453292F - (float)Math.PI);
+        float f3 = MathHelper.sin(-f1 * 0.017453292F - (float)Math.PI);
+        float f4 = -MathHelper.cos(-f * 0.017453292F);
+        float f5 = MathHelper.sin(-f * 0.017453292F);
         return new Vector3f(f3 * f4, f5, f2 * f4);
     }
 
@@ -1130,7 +1081,7 @@
             double d1 = entityIn.posY - this.prevRenderSortY;
             double d2 = entityIn.posZ - this.prevRenderSortZ;
 
-            if (d0 * d0 + d1 * d1 + d2 * d2 > 1.0)
+            if (d0 * d0 + d1 * d1 + d2 * d2 > 1.0D)
             {
                 this.prevRenderSortX = entityIn.posX;
                 this.prevRenderSortY = entityIn.posY;
@@ -1158,16 +1109,19 @@
 
         for (int j = i1; j != i; j += j1)
         {
-            RenderChunk renderchunk = this.renderInfos.get(j).renderChunk;
+            RenderChunk renderchunk = (this.renderInfos.get(j)).renderChunk;
 
             if (!renderchunk.getCompiledChunk().isLayerEmpty(blockLayerIn))
             {
-                l++;
+                ++l;
                 this.renderContainer.addRenderChunk(renderchunk, blockLayerIn);
             }
         }
 
-        this.mc.profiler.func_194339_b(() -> "render_" + blockLayerIn);
+        this.mc.profiler.func_194339_b(() ->
+        {
+            return "render_" + blockLayerIn;
+        });
         this.renderBlockLayer(blockLayerIn);
         this.mc.profiler.endSection();
         return l;
@@ -1196,7 +1150,7 @@
             for (VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.getElements())
             {
                 VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
-                int i = vertexformatelement.getIndex();
+                int k1 = vertexformatelement.getIndex();
 
                 switch (vertexformatelement$enumusage)
                 {
@@ -1204,7 +1158,7 @@
                         GlStateManager.glDisableClientState(32884);
                         break;
                     case UV:
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i);
+                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k1);
                         GlStateManager.glDisableClientState(32888);
                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
                         break;
@@ -1223,9 +1177,9 @@
         while (iteratorIn.hasNext())
         {
             DestroyBlockProgress destroyblockprogress = iteratorIn.next();
-            int i = destroyblockprogress.getCreationCloudUpdateTick();
+            int k1 = destroyblockprogress.getCreationCloudUpdateTick();
 
-            if (this.cloudTickCounter - i > 400)
+            if (this.cloudTickCounter - k1 > 400)
             {
                 iteratorIn.remove();
             }
@@ -1234,7 +1188,7 @@
 
     public void updateClouds()
     {
-        this.cloudTickCounter++;
+        ++this.cloudTickCounter;
 
         if (this.cloudTickCounter % 20 == 0)
         {
@@ -1249,10 +1203,10 @@
             {
                 BlockPos blockpos = iterator.next();
                 iterator.remove();
-                int i = blockpos.getX();
-                int j = blockpos.getY();
-                int k = blockpos.getZ();
-                this.markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1, false);
+                int k1 = blockpos.getX();
+                int l1 = blockpos.getY();
+                int i2 = blockpos.getZ();
+                this.markBlocksForUpdate(k1 - 1, l1 - 1, i2 - 1, k1 + 1, l1 + 1, i2 + 1, false);
             }
         }
     }
@@ -1262,49 +1216,47 @@
         GlStateManager.disableFog();
         GlStateManager.disableAlpha();
         GlStateManager.enableBlend();
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         RenderHelper.disableStandardItemLighting();
         GlStateManager.depthMask(false);
         this.renderEngine.bindTexture(END_SKY_TEXTURES);
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
 
-        for (int i = 0; i < 6; i++)
+        for (int k1 = 0; k1 < 6; ++k1)
         {
             GlStateManager.pushMatrix();
 
-            if (i == 1)
+            if (k1 == 1)
             {
                 GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
             }
 
-            if (i == 2)
+            if (k1 == 2)
             {
                 GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
             }
 
-            if (i == 3)
+            if (k1 == 3)
             {
                 GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
             }
 
-            if (i == 4)
+            if (k1 == 4)
             {
                 GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
             }
 
-            if (i == 5)
+            if (k1 == 5)
             {
                 GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
             }
 
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-            bufferbuilder.pos(-100.0, -100.0, -100.0).tex(0.0, 0.0).color(40, 40, 40, 255).endVertex();
-            bufferbuilder.pos(-100.0, -100.0, 100.0).tex(0.0, 16.0).color(40, 40, 40, 255).endVertex();
-            bufferbuilder.pos(100.0, -100.0, 100.0).tex(16.0, 16.0).color(40, 40, 40, 255).endVertex();
-            bufferbuilder.pos(100.0, -100.0, -100.0).tex(16.0, 0.0).color(40, 40, 40, 255).endVertex();
+            bufferbuilder.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(40, 40, 40, 255).endVertex();
+            bufferbuilder.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(40, 40, 40, 255).endVertex();
+            bufferbuilder.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(40, 40, 40, 255).endVertex();
+            bufferbuilder.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(40, 40, 40, 255).endVertex();
             tessellator.draw();
             GlStateManager.popMatrix();
         }
@@ -1316,6 +1268,13 @@
 
     public void renderSky(float partialTicks, int pass)
     {
+        net.minecraftforge.client.IRenderHandler renderer = this.world.provider.getSkyRenderer();
+        if (renderer != null)
+        {
+            renderer.render(partialTicks, world, mc);
+            return;
+        }
+
         if (this.mc.world.provider.getDimensionType().getId() == 1)
         {
             this.renderSkyEnd();
@@ -1362,12 +1321,7 @@
             GlStateManager.disableFog();
             GlStateManager.disableAlpha();
             GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(
-                GlStateManager.SourceFactor.SRC_ALPHA,
-                GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                GlStateManager.SourceFactor.ONE,
-                GlStateManager.DestFactor.ZERO
-            );
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
             RenderHelper.disableStandardItemLighting();
             float[] afloat = this.world.provider.calcSunriseSunsetColors(this.world.getCelestialAngle(partialTicks), partialTicks);
 
@@ -1394,17 +1348,15 @@
                 }
 
                 bufferbuilder.begin(6, DefaultVertexFormats.POSITION_COLOR);
-                bufferbuilder.pos(0.0, 100.0, 0.0).color(f6, f7, f8, afloat[3]).endVertex();
-                int j = 16;
+                bufferbuilder.pos(0.0D, 100.0D, 0.0D).color(f6, f7, f8, afloat[3]).endVertex();
+                int l1 = 16;
 
-                for (int l = 0; l <= 16; l++)
+                for (int j2 = 0; j2 <= 16; ++j2)
                 {
-                    float f21 = (float)l * (float)(Math.PI * 2) / 16.0F;
+                    float f21 = (float)j2 * ((float)Math.PI * 2F) / 16.0F;
                     float f12 = MathHelper.sin(f21);
                     float f13 = MathHelper.cos(f21);
-                    bufferbuilder.pos((double)(f12 * 120.0F), (double)(f13 * 120.0F), (double)(-f13 * 40.0F * afloat[3]))
-                    .color(afloat[0], afloat[1], afloat[2], 0.0F)
-                    .endVertex();
+                    bufferbuilder.pos((double)(f12 * 120.0F), (double)(f13 * 120.0F), (double)(-f13 * 40.0F * afloat[3])).color(afloat[0], afloat[1], afloat[2], 0.0F).endVertex();
                 }
 
                 tessellator.draw();
@@ -1413,9 +1365,7 @@
             }
 
             GlStateManager.enableTexture2D();
-            GlStateManager.tryBlendFuncSeparate(
-                GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-            );
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
             GlStateManager.pushMatrix();
             float f16 = 1.0F - this.world.getRainStrength(partialTicks);
             GlStateManager.color(1.0F, 1.0F, 1.0F, f16);
@@ -1424,25 +1374,25 @@
             float f17 = 30.0F;
             this.renderEngine.bindTexture(SUN_TEXTURES);
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-            bufferbuilder.pos((double)(-f17), 100.0, (double)(-f17)).tex(0.0, 0.0).endVertex();
-            bufferbuilder.pos((double)f17, 100.0, (double)(-f17)).tex(1.0, 0.0).endVertex();
-            bufferbuilder.pos((double)f17, 100.0, (double)f17).tex(1.0, 1.0).endVertex();
-            bufferbuilder.pos((double)(-f17), 100.0, (double)f17).tex(0.0, 1.0).endVertex();
+            bufferbuilder.pos((double)(-f17), 100.0D, (double)(-f17)).tex(0.0D, 0.0D).endVertex();
+            bufferbuilder.pos((double)f17, 100.0D, (double)(-f17)).tex(1.0D, 0.0D).endVertex();
+            bufferbuilder.pos((double)f17, 100.0D, (double)f17).tex(1.0D, 1.0D).endVertex();
+            bufferbuilder.pos((double)(-f17), 100.0D, (double)f17).tex(0.0D, 1.0D).endVertex();
             tessellator.draw();
             f17 = 20.0F;
             this.renderEngine.bindTexture(MOON_PHASES_TEXTURES);
-            int i = this.world.getMoonPhase();
-            int k = i % 4;
-            int i1 = i / 4 % 2;
-            float f22 = (float)(k + 0) / 4.0F;
-            float f23 = (float)(i1 + 0) / 2.0F;
-            float f24 = (float)(k + 1) / 4.0F;
-            float f14 = (float)(i1 + 1) / 2.0F;
+            int k1 = this.world.getMoonPhase();
+            int i2 = k1 % 4;
+            int k2 = k1 / 4 % 2;
+            float f22 = (float)(i2 + 0) / 4.0F;
+            float f23 = (float)(k2 + 0) / 2.0F;
+            float f24 = (float)(i2 + 1) / 4.0F;
+            float f14 = (float)(k2 + 1) / 2.0F;
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-            bufferbuilder.pos((double)(-f17), -100.0, (double)f17).tex((double)f24, (double)f14).endVertex();
-            bufferbuilder.pos((double)f17, -100.0, (double)f17).tex((double)f22, (double)f14).endVertex();
-            bufferbuilder.pos((double)f17, -100.0, (double)(-f17)).tex((double)f22, (double)f23).endVertex();
-            bufferbuilder.pos((double)(-f17), -100.0, (double)(-f17)).tex((double)f24, (double)f23).endVertex();
+            bufferbuilder.pos((double)(-f17), -100.0D, (double)f17).tex((double)f24, (double)f14).endVertex();
+            bufferbuilder.pos((double)f17, -100.0D, (double)f17).tex((double)f22, (double)f14).endVertex();
+            bufferbuilder.pos((double)f17, -100.0D, (double)(-f17)).tex((double)f22, (double)f23).endVertex();
+            bufferbuilder.pos((double)(-f17), -100.0D, (double)(-f17)).tex((double)f24, (double)f23).endVertex();
             tessellator.draw();
             GlStateManager.disableTexture2D();
             float f15 = this.world.getStarBrightness(partialTicks) * f16;
@@ -1473,9 +1423,9 @@
             GlStateManager.popMatrix();
             GlStateManager.disableTexture2D();
             GlStateManager.color(0.0F, 0.0F, 0.0F);
-            double d0 = this.mc.player.getPositionEyes(partialTicks).y - this.world.getHorizon();
+            double d3 = this.mc.player.getPositionEyes(partialTicks).y - this.world.getHorizon();
 
-            if (d0 < 0.0)
+            if (d3 < 0.0D)
             {
                 GlStateManager.pushMatrix();
                 GlStateManager.translate(0.0F, 12.0F, 0.0F);
@@ -1496,29 +1446,29 @@
 
                 GlStateManager.popMatrix();
                 float f18 = 1.0F;
-                float f19 = -((float)(d0 + 65.0));
+                float f19 = -((float)(d3 + 65.0D));
                 float f20 = -1.0F;
                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
-                bufferbuilder.pos(-1.0, (double)f19, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, (double)f19, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, -1.0, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, -1.0, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, -1.0, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, -1.0, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, (double)f19, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, (double)f19, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, -1.0, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, -1.0, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, (double)f19, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, (double)f19, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, (double)f19, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, (double)f19, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, -1.0, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, -1.0, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, -1.0, -1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(-1.0, -1.0, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, -1.0, 1.0).color(0, 0, 0, 255).endVertex();
-                bufferbuilder.pos(1.0, -1.0, -1.0).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
+                bufferbuilder.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                 tessellator.draw();
             }
 
@@ -1532,7 +1482,7 @@
             }
 
             GlStateManager.pushMatrix();
-            GlStateManager.translate(0.0F, -((float)(d0 - 16.0)), 0.0F);
+            GlStateManager.translate(0.0F, -((float)(d3 - 16.0D)), 0.0F);
             GlStateManager.callList(this.glSkyList2);
             GlStateManager.popMatrix();
             GlStateManager.enableTexture2D();
@@ -1542,6 +1492,7 @@
 
     public void renderClouds(float partialTicks, int pass, double x, double y, double z)
     {
+        if (net.minecraftforge.fml.client.FMLClientHandler.instance().renderClouds(this.cloudTickCounter, partialTicks)) return;
         if (this.mc.world.provider.isSurfaceWorld())
         {
             if (this.mc.gameSettings.shouldRenderClouds() == 2)
@@ -1551,18 +1502,13 @@
             else
             {
                 GlStateManager.disableCull();
-                int i = 32;
-                int j = 8;
+                int k1 = 32;
+                int l1 = 8;
                 Tessellator tessellator = Tessellator.getInstance();
                 BufferBuilder bufferbuilder = tessellator.getBuffer();
                 this.renderEngine.bindTexture(CLOUDS_TEXTURES);
                 GlStateManager.enableBlend();
-                GlStateManager.tryBlendFuncSeparate(
-                    GlStateManager.SourceFactor.SRC_ALPHA,
-                    GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                    GlStateManager.SourceFactor.ONE,
-                    GlStateManager.DestFactor.ZERO
-                );
+                GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                 Vec3d vec3d = this.world.getCloudColour(partialTicks);
                 float f = (float)vec3d.x;
                 float f1 = (float)vec3d.y;
@@ -1579,37 +1525,25 @@
                 }
 
                 float f9 = 4.8828125E-4F;
-                double d2 = (double)((float)this.cloudTickCounter + partialTicks);
-                double d0 = x + d2 * 0.03F;
-                int k = MathHelper.floor(d0 / 2048.0);
-                int l = MathHelper.floor(z / 2048.0);
-                d0 -= (double)(k * 2048);
-                double lvt_22_1_ = z - (double)(l * 2048);
+                double d5 = (double)((float)this.cloudTickCounter + partialTicks);
+                double d3 = x + d5 * 0.029999999329447746D;
+                int i2 = MathHelper.floor(d3 / 2048.0D);
+                int j2 = MathHelper.floor(z / 2048.0D);
+                d3 = d3 - (double)(i2 * 2048);
+                double lvt_22_1_ = z - (double)(j2 * 2048);
                 float f6 = this.world.provider.getCloudHeight() - (float)y + 0.33F;
-                float f7 = (float)(d0 * 4.8828125E-4);
-                float f8 = (float)(lvt_22_1_ * 4.8828125E-4);
+                float f7 = (float)(d3 * 4.8828125E-4D);
+                float f8 = (float)(lvt_22_1_ * 4.8828125E-4D);
                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
 
-                for (int i1 = -256; i1 < 256; i1 += 32)
+                for (int k2 = -256; k2 < 256; k2 += 32)
                 {
-                    for (int j1 = -256; j1 < 256; j1 += 32)
+                    for (int l2 = -256; l2 < 256; l2 += 32)
                     {
-                        bufferbuilder.pos((double)(i1 + 0), (double)f6, (double)(j1 + 32))
-                        .tex((double)((float)(i1 + 0) * 4.8828125E-4F + f7), (double)((float)(j1 + 32) * 4.8828125E-4F + f8))
-                        .color(f, f1, f2, 0.8F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(i1 + 32), (double)f6, (double)(j1 + 32))
-                        .tex((double)((float)(i1 + 32) * 4.8828125E-4F + f7), (double)((float)(j1 + 32) * 4.8828125E-4F + f8))
-                        .color(f, f1, f2, 0.8F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(i1 + 32), (double)f6, (double)(j1 + 0))
-                        .tex((double)((float)(i1 + 32) * 4.8828125E-4F + f7), (double)((float)(j1 + 0) * 4.8828125E-4F + f8))
-                        .color(f, f1, f2, 0.8F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(i1 + 0), (double)f6, (double)(j1 + 0))
-                        .tex((double)((float)(i1 + 0) * 4.8828125E-4F + f7), (double)((float)(j1 + 0) * 4.8828125E-4F + f8))
-                        .color(f, f1, f2, 0.8F)
-                        .endVertex();
+                        bufferbuilder.pos((double)(k2 + 0), (double)f6, (double)(l2 + 32)).tex((double)((float)(k2 + 0) * 4.8828125E-4F + f7), (double)((float)(l2 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
+                        bufferbuilder.pos((double)(k2 + 32), (double)f6, (double)(l2 + 32)).tex((double)((float)(k2 + 32) * 4.8828125E-4F + f7), (double)((float)(l2 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
+                        bufferbuilder.pos((double)(k2 + 32), (double)f6, (double)(l2 + 0)).tex((double)((float)(k2 + 32) * 4.8828125E-4F + f7), (double)((float)(l2 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
+                        bufferbuilder.pos((double)(k2 + 0), (double)f6, (double)(l2 + 0)).tex((double)((float)(k2 + 0) * 4.8828125E-4F + f7), (double)((float)(l2 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
                     }
                 }
 
@@ -1633,19 +1567,17 @@
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         float f = 12.0F;
         float f1 = 4.0F;
-        double d0 = (double)((float)this.cloudTickCounter + partialTicks);
-        double d1 = (x + d0 * 0.03F) / 12.0;
-        double d2 = z / 12.0 + 0.33F;
+        double d3 = (double)((float)this.cloudTickCounter + partialTicks);
+        double d4 = (x + d3 * 0.029999999329447746D) / 12.0D;
+        double d5 = z / 12.0D + 0.33000001311302185D;
         float f2 = this.world.provider.getCloudHeight() - (float)y + 0.33F;
-        int i = MathHelper.floor(d1 / 2048.0);
-        int j = MathHelper.floor(d2 / 2048.0);
-        d1 -= (double)(i * 2048);
-        d2 -= (double)(j * 2048);
+        int k1 = MathHelper.floor(d4 / 2048.0D);
+        int l1 = MathHelper.floor(d5 / 2048.0D);
+        d4 = d4 - (double)(k1 * 2048);
+        d5 = d5 - (double)(l1 * 2048);
         this.renderEngine.bindTexture(CLOUDS_TEXTURES);
         GlStateManager.enableBlend();
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         Vec3d vec3d = this.world.getCloudColour(partialTicks);
         float f3 = (float)vec3d.x;
         float f4 = (float)vec3d.y;
@@ -1671,18 +1603,18 @@
         float f13 = f4 * 0.8F;
         float f14 = f5 * 0.8F;
         float f15 = 0.00390625F;
-        float f16 = (float)MathHelper.floor(d1) * 0.00390625F;
-        float f17 = (float)MathHelper.floor(d2) * 0.00390625F;
-        float f18 = (float)(d1 - (double)MathHelper.floor(d1));
-        float f19 = (float)(d2 - (double)MathHelper.floor(d2));
-        int k = 8;
-        int l = 4;
+        float f16 = (float)MathHelper.floor(d4) * 0.00390625F;
+        float f17 = (float)MathHelper.floor(d5) * 0.00390625F;
+        float f18 = (float)(d4 - (double)MathHelper.floor(d4));
+        float f19 = (float)(d5 - (double)MathHelper.floor(d5));
+        int i2 = 8;
+        int j2 = 4;
         float f20 = 9.765625E-4F;
         GlStateManager.scale(12.0F, 1.0F, 12.0F);
 
-        for (int i1 = 0; i1 < 2; i1++)
+        for (int k2 = 0; k2 < 2; ++k2)
         {
-            if (i1 == 0)
+            if (k2 == 0)
             {
                 GlStateManager.colorMask(false, false, false, false);
             }
@@ -1701,169 +1633,73 @@
                 }
             }
 
-            for (int j1 = -3; j1 <= 4; j1++)
+            for (int l2 = -3; l2 <= 4; ++l2)
             {
-                for (int k1 = -3; k1 <= 4; k1++)
+                for (int i3 = -3; i3 <= 4; ++i3)
                 {
                     bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
-                    float f21 = (float)(j1 * 8);
-                    float f22 = (float)(k1 * 8);
+                    float f21 = (float)(l2 * 8);
+                    float f22 = (float)(i3 * 8);
                     float f23 = f21 - f18;
                     float f24 = f22 - f19;
 
                     if (f2 > -5.0F)
                     {
-                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F))
-                        .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                        .color(f9, f10, f11, 0.8F)
-                        .normal(0.0F, -1.0F, 0.0F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F))
-                        .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                        .color(f9, f10, f11, 0.8F)
-                        .normal(0.0F, -1.0F, 0.0F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F))
-                        .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                        .color(f9, f10, f11, 0.8F)
-                        .normal(0.0F, -1.0F, 0.0F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F))
-                        .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                        .color(f9, f10, f11, 0.8F)
-                        .normal(0.0F, -1.0F, 0.0F)
-                        .endVertex();
+                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f9, f10, f11, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
+                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f9, f10, f11, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
+                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f9, f10, f11, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
+                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f9, f10, f11, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
                     }
 
                     if (f2 <= 5.0F)
                     {
-                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 8.0F))
-                        .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                        .color(f3, f4, f5, 0.8F)
-                        .normal(0.0F, 1.0F, 0.0F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 8.0F))
-                        .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                        .color(f3, f4, f5, 0.8F)
-                        .normal(0.0F, 1.0F, 0.0F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 0.0F))
-                        .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                        .color(f3, f4, f5, 0.8F)
-                        .normal(0.0F, 1.0F, 0.0F)
-                        .endVertex();
-                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 0.0F))
-                        .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                        .color(f3, f4, f5, 0.8F)
-                        .normal(0.0F, 1.0F, 0.0F)
-                        .endVertex();
-                    }
-
-                    if (j1 > -1)
-                    {
-                        for (int l1 = 0; l1 < 8; l1++)
-                        {
-                            bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F))
-                            .tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(-1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 8.0F))
-                            .tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(-1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 0.0F))
-                            .tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(-1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F))
-                            .tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(-1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                        }
-                    }
-
-                    if (j1 <= 1)
-                    {
-                        for (int i2 = 0; i2 < 8; i2++)
-                        {
-                            bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 8.0F))
-                            .tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 8.0F))
-                            .tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 0.0F))
-                            .tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 0.0F))
-                            .tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17))
-                            .color(f25, f26, f27, 0.8F)
-                            .normal(1.0F, 0.0F, 0.0F)
-                            .endVertex();
-                        }
-                    }
-
-                    if (k1 > -1)
-                    {
-                        for (int j2 = 0; j2 < 8; j2++)
-                        {
-                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)j2 + 0.0F))
-                            .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, -1.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)j2 + 0.0F))
-                            .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, -1.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)j2 + 0.0F))
-                            .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, -1.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)j2 + 0.0F))
-                            .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, -1.0F)
-                            .endVertex();
-                        }
-                    }
-
-                    if (k1 <= 1)
-                    {
-                        for (int k2 = 0; k2 < 8; k2++)
-                        {
-                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F))
-                            .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, 1.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F))
-                            .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, 1.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F))
-                            .tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, 1.0F)
-                            .endVertex();
-                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F))
-                            .tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17))
-                            .color(f12, f13, f14, 0.8F)
-                            .normal(0.0F, 0.0F, 1.0F)
-                            .endVertex();
+                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 8.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f3, f4, f5, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
+                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 8.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f3, f4, f5, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
+                        bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f3, f4, f5, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
+                        bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f3, f4, f5, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
+                    }
+
+                    if (l2 > -1)
+                    {
+                        for (int j3 = 0; j3 < 8; ++j3)
+                        {
+                            bufferbuilder.pos((double)(f23 + (float)j3 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)j3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + (float)j3 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)j3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + (float)j3 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)j3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + (float)j3 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)j3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
+                        }
+                    }
+
+                    if (l2 <= 1)
+                    {
+                        for (int k3 = 0; k3 < 8; ++k3)
+                        {
+                            bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
+                        }
+                    }
+
+                    if (i3 > -1)
+                    {
+                        for (int l3 = 0; l3 < 8; ++l3)
+                        {
+                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
+                        }
+                    }
+
+                    if (i3 <= 1)
+                    {
+                        for (int i4 = 0; i4 < 8; ++i4)
+                        {
+                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
+                            bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
                         }
                     }
 
@@ -1879,7 +1715,7 @@
 
     public void updateChunks(long finishTimeNano)
     {
-        this.displayListEntitiesDirty = this.displayListEntitiesDirty | this.renderDispatcher.runChunkUploads(finishTimeNano);
+        this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
 
         if (!this.chunksToUpdate.isEmpty())
         {
@@ -1887,28 +1723,28 @@
 
             while (iterator.hasNext())
             {
-                RenderChunk renderchunk = iterator.next();
-                boolean flag;
+                RenderChunk renderchunk1 = iterator.next();
+                boolean flag1;
 
-                if (renderchunk.needsImmediateUpdate())
+                if (renderchunk1.needsImmediateUpdate())
                 {
-                    flag = this.renderDispatcher.updateChunkNow(renderchunk);
+                    flag1 = this.renderDispatcher.updateChunkNow(renderchunk1);
                 }
                 else
                 {
-                    flag = this.renderDispatcher.updateChunkLater(renderchunk);
+                    flag1 = this.renderDispatcher.updateChunkLater(renderchunk1);
                 }
 
-                if (!flag)
+                if (!flag1)
                 {
                     break;
                 }
 
-                renderchunk.clearNeedsUpdate();
+                renderchunk1.clearNeedsUpdate();
                 iterator.remove();
-                long i = finishTimeNano - System.nanoTime();
+                long k1 = finishTimeNano - System.nanoTime();
 
-                if (i < 0L)
+                if (k1 < 0L)
                 {
                     break;
                 }
@@ -1921,30 +1757,25 @@
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         WorldBorder worldborder = this.world.getWorldBorder();
-        double d0 = (double)(this.mc.gameSettings.renderDistanceChunks * 16);
+        double d3 = (double)(this.mc.gameSettings.renderDistanceChunks * 16);
 
-        if (!(entityIn.posX < worldborder.maxX() - d0)
-                || !(entityIn.posX > worldborder.minX() + d0)
-                || !(entityIn.posZ < worldborder.maxZ() - d0)
-                || !(entityIn.posZ > worldborder.minZ() + d0))
+        if (entityIn.posX >= worldborder.maxX() - d3 || entityIn.posX <= worldborder.minX() + d3 || entityIn.posZ >= worldborder.maxZ() - d3 || entityIn.posZ <= worldborder.minZ() + d3)
         {
-            double d1 = 1.0 - worldborder.getClosestDistance(entityIn) / d0;
-            d1 = Math.pow(d1, 4.0);
-            double d2 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
-            double d3 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
-            double d4 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
+            double d4 = 1.0D - worldborder.getClosestDistance(entityIn) / d3;
+            d4 = Math.pow(d4, 4.0D);
+            double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
+            double d6 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
+            double d7 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
             GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(
-                GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-            );
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
             this.renderEngine.bindTexture(FORCEFIELD_TEXTURES);
             GlStateManager.depthMask(false);
             GlStateManager.pushMatrix();
-            int i = worldborder.getStatus().getColor();
-            float f = (float)(i >> 16 & 0xFF) / 255.0F;
-            float f1 = (float)(i >> 8 & 0xFF) / 255.0F;
-            float f2 = (float)(i & 0xFF) / 255.0F;
-            GlStateManager.color(f, f1, f2, (float)d1);
+            int k1 = worldborder.getStatus().getColor();
+            float f = (float)(k1 >> 16 & 255) / 255.0F;
+            float f1 = (float)(k1 >> 8 & 255) / 255.0F;
+            float f2 = (float)(k1 & 255) / 255.0F;
+            GlStateManager.color(f, f1, f2, (float)d4);
             GlStateManager.doPolygonOffset(-3.0F, -3.0F);
             GlStateManager.enablePolygonOffset();
             GlStateManager.alphaFunc(516, 0.1F);
@@ -1955,95 +1786,79 @@
             float f5 = 0.0F;
             float f6 = 128.0F;
             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-            bufferbuilder.setTranslation(-d2, -d3, -d4);
-            double d5 = Math.max((double)MathHelper.floor(d4 - d0), worldborder.minZ());
-            double d6 = Math.min((double)MathHelper.ceil(d4 + d0), worldborder.maxZ());
+            bufferbuilder.setTranslation(-d5, -d6, -d7);
+            double d8 = Math.max((double)MathHelper.floor(d7 - d3), worldborder.minZ());
+            double d9 = Math.min((double)MathHelper.ceil(d7 + d3), worldborder.maxZ());
 
-            if (d2 > worldborder.maxX() - d0)
+            if (d5 > worldborder.maxX() - d3)
             {
                 float f7 = 0.0F;
 
-                for (double d7 = d5; d7 < d6; f7 += 0.5F)
+                for (double d10 = d8; d10 < d9; f7 += 0.5F)
                 {
-                    double d8 = Math.min(1.0, d6 - d7);
-                    float f8 = (float)d8 * 0.5F;
-                    bufferbuilder.pos(worldborder.maxX(), 256.0, d7).tex((double)(f3 + f7), (double)(f3 + 0.0F)).endVertex();
-                    bufferbuilder.pos(worldborder.maxX(), 256.0, d7 + d8)
-                    .tex((double)(f3 + f8 + f7), (double)(f3 + 0.0F))
-                    .endVertex();
-                    bufferbuilder.pos(worldborder.maxX(), 0.0, d7 + d8)
-                    .tex((double)(f3 + f8 + f7), (double)(f3 + 128.0F))
-                    .endVertex();
-                    bufferbuilder.pos(worldborder.maxX(), 0.0, d7).tex((double)(f3 + f7), (double)(f3 + 128.0F)).endVertex();
-                    d7++;
+                    double d11 = Math.min(1.0D, d9 - d10);
+                    float f8 = (float)d11 * 0.5F;
+                    bufferbuilder.pos(worldborder.maxX(), 256.0D, d10).tex((double)(f3 + f7), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(worldborder.maxX(), 256.0D, d10 + d11).tex((double)(f3 + f8 + f7), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(worldborder.maxX(), 0.0D, d10 + d11).tex((double)(f3 + f8 + f7), (double)(f3 + 128.0F)).endVertex();
+                    bufferbuilder.pos(worldborder.maxX(), 0.0D, d10).tex((double)(f3 + f7), (double)(f3 + 128.0F)).endVertex();
+                    ++d10;
                 }
             }
 
-            if (d2 < worldborder.minX() + d0)
+            if (d5 < worldborder.minX() + d3)
             {
                 float f9 = 0.0F;
 
-                for (double d9 = d5; d9 < d6; f9 += 0.5F)
+                for (double d12 = d8; d12 < d9; f9 += 0.5F)
                 {
-                    double d12 = Math.min(1.0, d6 - d9);
-                    float f12 = (float)d12 * 0.5F;
-                    bufferbuilder.pos(worldborder.minX(), 256.0, d9).tex((double)(f3 + f9), (double)(f3 + 0.0F)).endVertex();
-                    bufferbuilder.pos(worldborder.minX(), 256.0, d9 + d12)
-                    .tex((double)(f3 + f12 + f9), (double)(f3 + 0.0F))
-                    .endVertex();
-                    bufferbuilder.pos(worldborder.minX(), 0.0, d9 + d12)
-                    .tex((double)(f3 + f12 + f9), (double)(f3 + 128.0F))
-                    .endVertex();
-                    bufferbuilder.pos(worldborder.minX(), 0.0, d9).tex((double)(f3 + f9), (double)(f3 + 128.0F)).endVertex();
-                    d9++;
+                    double d15 = Math.min(1.0D, d9 - d12);
+                    float f12 = (float)d15 * 0.5F;
+                    bufferbuilder.pos(worldborder.minX(), 256.0D, d12).tex((double)(f3 + f9), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(worldborder.minX(), 256.0D, d12 + d15).tex((double)(f3 + f12 + f9), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(worldborder.minX(), 0.0D, d12 + d15).tex((double)(f3 + f12 + f9), (double)(f3 + 128.0F)).endVertex();
+                    bufferbuilder.pos(worldborder.minX(), 0.0D, d12).tex((double)(f3 + f9), (double)(f3 + 128.0F)).endVertex();
+                    ++d12;
                 }
             }
 
-            d5 = Math.max((double)MathHelper.floor(d2 - d0), worldborder.minX());
-            d6 = Math.min((double)MathHelper.ceil(d2 + d0), worldborder.maxX());
+            d8 = Math.max((double)MathHelper.floor(d5 - d3), worldborder.minX());
+            d9 = Math.min((double)MathHelper.ceil(d5 + d3), worldborder.maxX());
 
-            if (d4 > worldborder.maxZ() - d0)
+            if (d7 > worldborder.maxZ() - d3)
             {
                 float f10 = 0.0F;
 
-                for (double d10 = d5; d10 < d6; f10 += 0.5F)
+                for (double d13 = d8; d13 < d9; f10 += 0.5F)
                 {
-                    double d13 = Math.min(1.0, d6 - d10);
-                    float f13 = (float)d13 * 0.5F;
-                    bufferbuilder.pos(d10, 256.0, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 0.0F)).endVertex();
-                    bufferbuilder.pos(d10 + d13, 256.0, worldborder.maxZ())
-                    .tex((double)(f3 + f13 + f10), (double)(f3 + 0.0F))
-                    .endVertex();
-                    bufferbuilder.pos(d10 + d13, 0.0, worldborder.maxZ())
-                    .tex((double)(f3 + f13 + f10), (double)(f3 + 128.0F))
-                    .endVertex();
-                    bufferbuilder.pos(d10, 0.0, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 128.0F)).endVertex();
-                    d10++;
+                    double d16 = Math.min(1.0D, d9 - d13);
+                    float f13 = (float)d16 * 0.5F;
+                    bufferbuilder.pos(d13, 256.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(d13 + d16, 256.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(d13 + d16, 0.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 128.0F)).endVertex();
+                    bufferbuilder.pos(d13, 0.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 128.0F)).endVertex();
+                    ++d13;
                 }
             }
 
-            if (d4 < worldborder.minZ() + d0)
+            if (d7 < worldborder.minZ() + d3)
             {
                 float f11 = 0.0F;
 
-                for (double d11 = d5; d11 < d6; f11 += 0.5F)
+                for (double d14 = d8; d14 < d9; f11 += 0.5F)
                 {
-                    double d14 = Math.min(1.0, d6 - d11);
-                    float f14 = (float)d14 * 0.5F;
-                    bufferbuilder.pos(d11, 256.0, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 0.0F)).endVertex();
-                    bufferbuilder.pos(d11 + d14, 256.0, worldborder.minZ())
-                    .tex((double)(f3 + f14 + f11), (double)(f3 + 0.0F))
-                    .endVertex();
-                    bufferbuilder.pos(d11 + d14, 0.0, worldborder.minZ())
-                    .tex((double)(f3 + f14 + f11), (double)(f3 + 128.0F))
-                    .endVertex();
-                    bufferbuilder.pos(d11, 0.0, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 128.0F)).endVertex();
-                    d11++;
+                    double d17 = Math.min(1.0D, d9 - d14);
+                    float f14 = (float)d17 * 0.5F;
+                    bufferbuilder.pos(d14, 256.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(d14 + d17, 256.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 0.0F)).endVertex();
+                    bufferbuilder.pos(d14 + d17, 0.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 128.0F)).endVertex();
+                    bufferbuilder.pos(d14, 0.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 128.0F)).endVertex();
+                    ++d14;
                 }
             }
 
             tessellator.draw();
-            bufferbuilder.setTranslation(0.0, 0.0, 0.0);
+            bufferbuilder.setTranslation(0.0D, 0.0D, 0.0D);
             GlStateManager.enableCull();
             GlStateManager.disableAlpha();
             GlStateManager.doPolygonOffset(0.0F, 0.0F);
@@ -2057,12 +1872,11 @@
 
     private void preRenderDamagedBlocks()
     {
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.DST_COLOR, GlStateManager.DestFactor.SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.DST_COLOR, GlStateManager.DestFactor.SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         GlStateManager.enableBlend();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 0.5F);
-        GlStateManager.doPolygonOffset(-3.0F, -3.0F);
+        // FORGE: Fix MC-234
+        GlStateManager.doPolygonOffset(-1.0F, -10.0F);
         GlStateManager.enablePolygonOffset();
         GlStateManager.alphaFunc(516, 0.1F);
         GlStateManager.enableAlpha();
@@ -2081,16 +1895,16 @@
 
     public void drawBlockDamageTexture(Tessellator tessellatorIn, BufferBuilder bufferBuilderIn, Entity entityIn, float partialTicks)
     {
-        double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
-        double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
-        double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
+        double d3 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
+        double d4 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
+        double d5 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
 
         if (!this.damagedBlocks.isEmpty())
         {
             this.renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
             this.preRenderDamagedBlocks();
             bufferBuilderIn.begin(7, DefaultVertexFormats.BLOCK);
-            bufferBuilderIn.setTranslation(-d0, -d1, -d2);
+            bufferBuilderIn.setTranslation(-d3, -d4, -d5);
             bufferBuilderIn.noColor();
             Iterator<DestroyBlockProgress> iterator = this.damagedBlocks.values().iterator();
 
@@ -2098,14 +1912,17 @@
             {
                 DestroyBlockProgress destroyblockprogress = iterator.next();
                 BlockPos blockpos = destroyblockprogress.getPosition();
-                double d3 = (double)blockpos.getX() - d0;
-                double d4 = (double)blockpos.getY() - d1;
-                double d5 = (double)blockpos.getZ() - d2;
+                double d6 = (double)blockpos.getX() - d3;
+                double d7 = (double)blockpos.getY() - d4;
+                double d8 = (double)blockpos.getZ() - d5;
                 Block block = this.world.getBlockState(blockpos).getBlock();
+                TileEntity te = this.world.getTileEntity(blockpos);
+                boolean hasBreak = block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull;
+                if (!hasBreak) hasBreak = te != null && te.canRenderBreaking();
 
-                if (!(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull))
+                if (!hasBreak)
                 {
-                    if (d3 * d3 + d4 * d4 + d5 * d5 > 1024.0)
+                    if (d6 * d6 + d7 * d7 + d8 * d8 > 1024.0D)
                     {
                         iterator.remove();
                     }
@@ -2115,8 +1932,8 @@
 
                         if (iblockstate.getMaterial() != Material.AIR)
                         {
-                            int i = destroyblockprogress.getPartialBlockDamage();
-                            TextureAtlasSprite textureatlassprite = this.destroyBlockIcons[i];
+                            int k1 = destroyblockprogress.getPartialBlockDamage();
+                            TextureAtlasSprite textureatlassprite = this.destroyBlockIcons[k1];
                             BlockRendererDispatcher blockrendererdispatcher = this.mc.getBlockRendererDispatcher();
                             blockrendererdispatcher.renderBlockDamage(iblockstate, blockpos, textureatlassprite, this.world);
                         }
@@ -2125,7 +1942,7 @@
             }
 
             tessellatorIn.draw();
-            bufferBuilderIn.setTranslation(0.0, 0.0, 0.0);
+            bufferBuilderIn.setTranslation(0.0D, 0.0D, 0.0D);
             this.postRenderDamagedBlocks();
         }
     }
@@ -2135,12 +1952,7 @@
         if (execute == 0 && movingObjectPositionIn.typeOfHit == RayTraceResult.Type.BLOCK)
         {
             GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(
-                GlStateManager.SourceFactor.SRC_ALPHA,
-                GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                GlStateManager.SourceFactor.ONE,
-                GlStateManager.DestFactor.ZERO
-            );
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
             GlStateManager.glLineWidth(2.0F);
             GlStateManager.disableTexture2D();
             GlStateManager.depthMask(false);
@@ -2149,10 +1961,10 @@
 
             if (iblockstate.getMaterial() != Material.AIR && this.world.getWorldBorder().contains(blockpos))
             {
-                double d0 = player.lastTickPosX + (player.posX - player.lastTickPosX) * (double)partialTicks;
-                double d1 = player.lastTickPosY + (player.posY - player.lastTickPosY) * (double)partialTicks;
-                double d2 = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * (double)partialTicks;
-                drawSelectionBoundingBox(iblockstate.getSelectedBoundingBox(this.world, blockpos).grow(0.002F).offset(-d0, -d1, -d2), 0.0F, 0.0F, 0.0F, 0.4F);
+                double d3 = player.lastTickPosX + (player.posX - player.lastTickPosX) * (double)partialTicks;
+                double d4 = player.lastTickPosY + (player.posY - player.lastTickPosY) * (double)partialTicks;
+                double d5 = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * (double)partialTicks;
+                drawSelectionBoundingBox(iblockstate.getSelectedBoundingBox(this.world, blockpos).grow(0.0020000000949949026D).offset(-d3, -d4, -d5), 0.0F, 0.0F, 0.0F, 0.4F);
             }
 
             GlStateManager.depthMask(true);
@@ -2163,55 +1975,19 @@
 
     public static void drawSelectionBoundingBox(AxisAlignedBB box, float red, float green, float blue, float alpha)
     {
-        drawBoundingBox(
-            box.minX,
-            box.minY,
-            box.minZ,
-            box.maxX,
-            box.maxY,
-            box.maxZ,
-            red,
-            green,
-            blue,
-            alpha
-        );
+        drawBoundingBox(box.minX, box.minY, box.minZ, box.maxX, box.maxY, box.maxZ, red, green, blue, alpha);
     }
 
-    public static void drawBoundingBox(
-            double minX,
-            double minY,
-            double minZ,
-            double maxX,
-            double maxY,
-            double maxZ,
-            float red,
-            float green,
-            float blue,
-            float alpha
-        )
+    public static void drawBoundingBox(double minX, double minY, double minZ, double maxX, double maxY, double maxZ, float red, float green, float blue, float alpha)
     {
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(3, DefaultVertexFormats.POSITION_COLOR);
-        drawBoundingBox(
-            bufferbuilder, minX, minY, minZ, maxX, maxY, maxZ, red, green, blue, alpha
-        );
+        drawBoundingBox(bufferbuilder, minX, minY, minZ, maxX, maxY, maxZ, red, green, blue, alpha);
         tessellator.draw();
     }
 
-    public static void drawBoundingBox(
-            BufferBuilder buffer,
-            double minX,
-            double minY,
-            double minZ,
-            double maxX,
-            double maxY,
-            double maxZ,
-            float red,
-            float green,
-            float blue,
-            float alpha
-        )
+    public static void drawBoundingBox(BufferBuilder buffer, double minX, double minY, double minZ, double maxX, double maxY, double maxZ, float red, float green, float blue, float alpha)
     {
         buffer.pos(minX, minY, minZ).color(red, green, blue, 0.0F).endVertex();
         buffer.pos(minX, minY, minZ).color(red, green, blue, alpha).endVertex();
@@ -2235,55 +2011,19 @@
 
     public static void renderFilledBox(AxisAlignedBB aabb, float red, float green, float blue, float alpha)
     {
-        renderFilledBox(
-            aabb.minX,
-            aabb.minY,
-            aabb.minZ,
-            aabb.maxX,
-            aabb.maxY,
-            aabb.maxZ,
-            red,
-            green,
-            blue,
-            alpha
-        );
+        renderFilledBox(aabb.minX, aabb.minY, aabb.minZ, aabb.maxX, aabb.maxY, aabb.maxZ, red, green, blue, alpha);
     }
 
-    public static void renderFilledBox(
-            double minX,
-            double minY,
-            double minZ,
-            double maxX,
-            double maxY,
-            double maxZ,
-            float red,
-            float green,
-            float blue,
-            float alpha
-        )
+    public static void renderFilledBox(double minX, double minY, double minZ, double maxX, double maxY, double maxZ, float red, float green, float blue, float alpha)
     {
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
-        addChainedFilledBoxVertices(
-            bufferbuilder, minX, minY, minZ, maxX, maxY, maxZ, red, green, blue, alpha
-        );
+        addChainedFilledBoxVertices(bufferbuilder, minX, minY, minZ, maxX, maxY, maxZ, red, green, blue, alpha);
         tessellator.draw();
     }
 
-    public static void addChainedFilledBoxVertices(
-            BufferBuilder builder,
-            double x1,
-            double y1,
-            double z1,
-            double x2,
-            double y2,
-            double z2,
-            float red,
-            float green,
-            float blue,
-            float alpha
-        )
+    public static void addChainedFilledBoxVertices(BufferBuilder builder, double x1, double y1, double z1, double x2, double y2, double z2, float red, float green, float blue, float alpha)
     {
         builder.pos(x1, y1, z1).color(red, green, blue, alpha).endVertex();
         builder.pos(x1, y1, z1).color(red, green, blue, alpha).endVertex();
@@ -2322,28 +2062,24 @@
         this.viewFrustum.markBlocksForUpdate(minX, minY, minZ, maxX, maxY, maxZ, updateImmediately);
     }
 
-    @Override
     public void notifyBlockUpdate(World worldIn, BlockPos pos, IBlockState oldState, IBlockState newState, int flags)
     {
-        int i = pos.getX();
-        int j = pos.getY();
-        int k = pos.getZ();
-        this.markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1, (flags & 8) != 0);
+        int k1 = pos.getX();
+        int l1 = pos.getY();
+        int i2 = pos.getZ();
+        this.markBlocksForUpdate(k1 - 1, l1 - 1, i2 - 1, k1 + 1, l1 + 1, i2 + 1, (flags & 8) != 0);
     }
 
-    @Override
     public void notifyLightSet(BlockPos pos)
     {
         this.setLightUpdates.add(pos.toImmutable());
     }
 
-    @Override
     public void markBlockRangeForRenderUpdate(int x1, int y1, int z1, int x2, int y2, int z2)
     {
         this.markBlocksForUpdate(x1 - 1, y1 - 1, z1 - 1, x2 + 1, y2 + 1, z2 + 1, false);
     }
 
-    @Override
     public void playRecord(@Nullable SoundEvent soundIn, BlockPos pos)
     {
         ISound isound = this.mapSoundPositions.get(pos);
@@ -2363,9 +2099,7 @@
                 this.mc.ingameGUI.setRecordPlayingMessage(itemrecord.getRecordNameLocal());
             }
 
-            ISound positionedsoundrecord = PositionedSoundRecord.getRecordSoundRecord(
-                                               soundIn, (float)pos.getX(), (float)pos.getY(), (float)pos.getZ()
-                                           );
+            ISound positionedsoundrecord = PositionedSoundRecord.getRecordSoundRecord(soundIn, (float)pos.getX(), (float)pos.getY(), (float)pos.getZ());
             this.mapSoundPositions.put(pos, positionedsoundrecord);
             this.mc.getSoundHandler().playSound(positionedsoundrecord);
         }
@@ -2375,67 +2109,32 @@
 
     private void setPartying(World worldIn, BlockPos pos, boolean isPartying)
     {
-        for (EntityLivingBase entitylivingbase : worldIn.getEntitiesWithinAABB(EntityLivingBase.class, new AxisAlignedBB(pos).grow(3.0)))
+        for (EntityLivingBase entitylivingbase : worldIn.getEntitiesWithinAABB(EntityLivingBase.class, (new AxisAlignedBB(pos)).grow(3.0D)))
         {
             entitylivingbase.setPartying(pos, isPartying);
         }
     }
 
-    @Override
-    public void playSoundToAllNearExcept(
-        @Nullable EntityPlayer player,
-        SoundEvent soundIn,
-        SoundCategory category,
-        double x,
-        double y,
-        double z,
-        float volume,
-        float pitch
-    )
+    public void playSoundToAllNearExcept(@Nullable EntityPlayer player, SoundEvent soundIn, SoundCategory category, double x, double y, double z, float volume, float pitch)
     {
     }
 
-    @Override
-    public void spawnParticle(
-        int particleID,
-        boolean ignoreRange,
-        double xCoord,
-        double yCoord,
-        double zCoord,
-        double xSpeed,
-        double ySpeed,
-        double zSpeed,
-        int... parameters
-    )
+    public void spawnParticle(int particleID, boolean ignoreRange, double xCoord, double yCoord, double zCoord, double xSpeed, double ySpeed, double zSpeed, int... parameters)
     {
         this.spawnParticle(particleID, ignoreRange, false, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
     }
 
-    @Override
-    public void spawnParticle(
-        int id,
-        boolean ignoreRange,
-        boolean minimiseParticleLevel,
-        final double x,
-        final double y,
-        final double z,
-        double xSpeed,
-        double ySpeed,
-        double zSpeed,
-        int... parameters
-    )
+    public void spawnParticle(int id, boolean ignoreRange, boolean minimiseParticleLevel, final double x, final double y, final double z, double xSpeed, double ySpeed, double zSpeed, int... parameters)
     {
         try
         {
-            this.spawnParticle0(
-                id, ignoreRange, minimiseParticleLevel, x, y, z, xSpeed, ySpeed, zSpeed, parameters
-            );
+            this.spawnParticle0(id, ignoreRange, minimiseParticleLevel, x, y, z, xSpeed, ySpeed, zSpeed, parameters);
         }
         catch (Throwable throwable)
         {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception while adding particle");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being added");
-            crashreportcategory.addCrashSection("ID", id);
+            crashreportcategory.addCrashSection("ID", Integer.valueOf(id));
 
             if (parameters != null)
             {
@@ -2453,78 +2152,40 @@
         }
     }
 
-    private void spawnParticle(
-        EnumParticleTypes particleIn,
-        double xCoord,
-        double yCoord,
-        double zCoord,
-        double xSpeed,
-        double ySpeed,
-        double zSpeed,
-        int... parameters
-    )
+    private void spawnParticle(EnumParticleTypes particleIn, double xCoord, double yCoord, double zCoord, double xSpeed, double ySpeed, double zSpeed, int... parameters)
     {
-        this.spawnParticle(
-            particleIn.getParticleID(), particleIn.getShouldIgnoreRange(), xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters
-        );
+        this.spawnParticle(particleIn.getParticleID(), particleIn.getShouldIgnoreRange(), xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
     }
 
     @Nullable
-    private Particle spawnParticle0(
-        int particleID,
-        boolean ignoreRange,
-        double xCoord,
-        double yCoord,
-        double zCoord,
-        double xSpeed,
-        double ySpeed,
-        double zSpeed,
-        int... parameters
-    )
+    private Particle spawnParticle0(int particleID, boolean ignoreRange, double xCoord, double yCoord, double zCoord, double xSpeed, double ySpeed, double zSpeed, int... parameters)
     {
         return this.spawnParticle0(particleID, ignoreRange, false, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
     }
 
     @Nullable
-    private Particle spawnParticle0(
-        int particleID,
-        boolean ignoreRange,
-        boolean minParticles,
-        double xCoord,
-        double yCoord,
-        double zCoord,
-        double xSpeed,
-        double ySpeed,
-        double zSpeed,
-        int... parameters
-    )
+    private Particle spawnParticle0(int particleID, boolean ignoreRange, boolean minParticles, double xCoord, double yCoord, double zCoord, double xSpeed, double ySpeed, double zSpeed, int... parameters)
     {
         Entity entity = this.mc.getRenderViewEntity();
 
         if (this.mc != null && entity != null && this.mc.effectRenderer != null)
         {
-            int i = this.calculateParticleLevel(minParticles);
-            double d0 = entity.posX - xCoord;
-            double d1 = entity.posY - yCoord;
-            double d2 = entity.posZ - zCoord;
+            int k1 = this.calculateParticleLevel(minParticles);
+            double d3 = entity.posX - xCoord;
+            double d4 = entity.posY - yCoord;
+            double d5 = entity.posZ - zCoord;
 
             if (ignoreRange)
             {
-                return this.mc
-                       .effectRenderer
-                       .spawnEffectParticle(particleID, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
+                return this.mc.effectRenderer.spawnEffectParticle(particleID, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
             }
-            else if (d0 * d0 + d1 * d1 + d2 * d2 > 1024.0)
+            else if (d3 * d3 + d4 * d4 + d5 * d5 > 1024.0D)
             {
                 return null;
             }
             else
             {
-                return i > 1
-                       ? null
-                       : this.mc
-                       .effectRenderer
-                       .spawnEffectParticle(particleID, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
+                return k1 > 1 ? null : this.mc.effectRenderer.spawnEffectParticle(particleID, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
             }
         }
         else
@@ -2535,27 +2196,25 @@
 
     private int calculateParticleLevel(boolean minimiseLevel)
     {
-        int i = this.mc.gameSettings.particleSetting;
-
-        if (minimiseLevel && i == 2 && this.world.rand.nextInt(10) == 0)
-        {
-            i = 1;
-        }
-
-        if (i == 1 && this.world.rand.nextInt(3) == 0)
-        {
-            i = 2;
-        }
-
-        return i;
+        int k1 = this.mc.gameSettings.particleSetting;
+
+        if (minimiseLevel && k1 == 2 && this.world.rand.nextInt(10) == 0)
+        {
+            k1 = 1;
+        }
+
+        if (k1 == 1 && this.world.rand.nextInt(3) == 0)
+        {
+            k1 = 2;
+        }
+
+        return k1;
     }
 
-    @Override
     public void onEntityAdded(Entity entityIn)
     {
     }
 
-    @Override
     public void onEntityRemoved(Entity entityIn)
     {
     }
@@ -2564,7 +2223,6 @@
     {
     }
 
-    @Override
     public void broadcastSound(int soundID, BlockPos pos, int data)
     {
         switch (soundID)
@@ -2576,38 +2234,39 @@
 
                 if (entity != null)
                 {
-                    double d0 = (double)pos.getX() - entity.posX;
-                    double d1 = (double)pos.getY() - entity.posY;
-                    double d2 = (double)pos.getZ() - entity.posZ;
-                    double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
-                    double d4 = entity.posX;
-                    double d5 = entity.posY;
-                    double d6 = entity.posZ;
+                    double d3 = (double)pos.getX() - entity.posX;
+                    double d4 = (double)pos.getY() - entity.posY;
+                    double d5 = (double)pos.getZ() - entity.posZ;
+                    double d6 = Math.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+                    double d7 = entity.posX;
+                    double d8 = entity.posY;
+                    double d9 = entity.posZ;
 
-                    if (d3 > 0.0)
+                    if (d6 > 0.0D)
                     {
-                        d4 += d0 / d3 * 2.0;
-                        d5 += d1 / d3 * 2.0;
-                        d6 += d2 / d3 * 2.0;
+                        d7 += d3 / d6 * 2.0D;
+                        d8 += d4 / d6 * 2.0D;
+                        d9 += d5 / d6 * 2.0D;
                     }
 
                     if (soundID == 1023)
                     {
-                        this.world.playSound(d4, d5, d6, SoundEvents.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
+                        this.world.playSound(d7, d8, d9, SoundEvents.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
                     }
                     else if (soundID == 1038)
                     {
-                        this.world.playSound(d4, d5, d6, SoundEvents.BLOCK_END_PORTAL_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
+                        this.world.playSound(d7, d8, d9, SoundEvents.BLOCK_END_PORTAL_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
                     }
                     else
                     {
-                        this.world.playSound(d4, d5, d6, SoundEvents.ENTITY_ENDERDRAGON_DEATH, SoundCategory.HOSTILE, 5.0F, 1.0F, false);
+                        this.world.playSound(d7, d8, d9, SoundEvents.ENTITY_ENDERDRAGON_DEATH, SoundCategory.HOSTILE, 5.0F, 1.0F, false);
                     }
                 }
+
+            default:
         }
     }
 
-    @Override
     public void playEvent(EntityPlayer player, int type, BlockPos blockPosIn, int data)
     {
         Random random = this.world.rand;
@@ -2630,34 +2289,19 @@
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_FIREWORK_SHOOT, SoundCategory.NEUTRAL, 1.0F, 1.2F, false);
                 break;
             case 1005:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_IRON_DOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_DOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1006:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1007:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1008:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_FENCE_GATE_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_FENCE_GATE_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1009:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_FIRE_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (random.nextFloat() - random.nextFloat()) * 0.8F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_FIRE_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (random.nextFloat() - random.nextFloat()) * 0.8F, false);
                 break;
             case 1010:
 
@@ -2667,128 +2311,69 @@
                 }
                 else
                 {
-                    this.world.playRecord(blockPosIn, null);
+                    this.world.playRecord(blockPosIn, (SoundEvent)null);
                 }
 
                 break;
             case 1011:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1012:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1013:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1014:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_FENCE_GATE_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_FENCE_GATE_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1015:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_GHAST_WARN, SoundCategory.HOSTILE, 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_GHAST_WARN, SoundCategory.HOSTILE, 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1016:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_GHAST_SHOOT, SoundCategory.HOSTILE, 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_GHAST_SHOOT, SoundCategory.HOSTILE, 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1017:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ENDERDRAGON_SHOOT, SoundCategory.HOSTILE, 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ENDERDRAGON_SHOOT, SoundCategory.HOSTILE, 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1018:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_BLAZE_SHOOT, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_BLAZE_SHOOT, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1019:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_DOOR_WOOD, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_DOOR_WOOD, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1020:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_IRON_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_IRON_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1021:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ZOMBIE_BREAK_DOOR_WOOD, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_BREAK_DOOR_WOOD, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1022:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_WITHER_BREAK_BLOCK, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_WITHER_BREAK_BLOCK, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1024:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_WITHER_SHOOT, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_WITHER_SHOOT, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1025:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_BAT_TAKEOFF, SoundCategory.NEUTRAL, 0.05F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_BAT_TAKEOFF, SoundCategory.NEUTRAL, 0.05F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1026:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ZOMBIE_INFECT, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_INFECT, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1027:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ZOMBIE_VILLAGER_CONVERTED, SoundCategory.NEUTRAL, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_VILLAGER_CONVERTED, SoundCategory.NEUTRAL, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
             case 1029:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_ANVIL_DESTROY, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_DESTROY, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1030:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_ANVIL_USE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_USE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1031:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_ANVIL_LAND, SoundCategory.BLOCKS, 0.3F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_LAND, SoundCategory.BLOCKS, 0.3F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1032:
-                this.mc
-                .getSoundHandler()
-                .playSound(PositionedSoundRecord.getMasterRecord(SoundEvents.BLOCK_PORTAL_TRAVEL, random.nextFloat() * 0.4F + 0.8F));
+                this.mc.getSoundHandler().playSound(PositionedSoundRecord.getMasterRecord(SoundEvents.BLOCK_PORTAL_TRAVEL, random.nextFloat() * 0.4F + 0.8F));
                 break;
             case 1033:
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_CHORUS_FLOWER_GROW, SoundCategory.BLOCKS, 1.0F, 1.0F, false);
@@ -2800,169 +2385,119 @@
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_BREWING_STAND_BREW, SoundCategory.BLOCKS, 1.0F, 1.0F, false);
                 break;
             case 1036:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 1037:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_OPEN, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 2000:
-                int l = data % 3 - 1;
-                int i = data / 3 % 3 - 1;
-                double d8 = (double)blockPosIn.getX() + (double)l * 0.6 + 0.5;
-                double d10 = (double)blockPosIn.getY() + 0.5;
-                double d12 = (double)blockPosIn.getZ() + (double)i * 0.6 + 0.5;
+                int j2 = data % 3 - 1;
+                int k1 = data / 3 % 3 - 1;
+                double d11 = (double)blockPosIn.getX() + (double)j2 * 0.6D + 0.5D;
+                double d13 = (double)blockPosIn.getY() + 0.5D;
+                double d15 = (double)blockPosIn.getZ() + (double)k1 * 0.6D + 0.5D;
 
-                for (int j1 = 0; j1 < 10; j1++)
+                for (int l2 = 0; l2 < 10; ++l2)
                 {
-                    double d13 = random.nextDouble() * 0.2 + 0.01;
-                    double d16 = d8 + (double)l * 0.01 + (random.nextDouble() - 0.5) * (double)i * 0.5;
-                    double d19 = d10 + (random.nextDouble() - 0.5) * 0.5;
-                    double d22 = d12 + (double)i * 0.01 + (random.nextDouble() - 0.5) * (double)l * 0.5;
-                    double d24 = (double)l * d13 + random.nextGaussian() * 0.01;
-                    double d26 = -0.03 + random.nextGaussian() * 0.01;
-                    double d27 = (double)i * d13 + random.nextGaussian() * 0.01;
-                    this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d16, d19, d22, d24, d26, d27);
+                    double d16 = random.nextDouble() * 0.2D + 0.01D;
+                    double d19 = d11 + (double)j2 * 0.01D + (random.nextDouble() - 0.5D) * (double)k1 * 0.5D;
+                    double d22 = d13 + (random.nextDouble() - 0.5D) * 0.5D;
+                    double d25 = d15 + (double)k1 * 0.01D + (random.nextDouble() - 0.5D) * (double)j2 * 0.5D;
+                    double d27 = (double)j2 * d16 + random.nextGaussian() * 0.01D;
+                    double d29 = -0.03D + random.nextGaussian() * 0.01D;
+                    double d30 = (double)k1 * d16 + random.nextGaussian() * 0.01D;
+                    this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d19, d22, d25, d27, d29, d30);
                 }
 
-                break;
+                return;
             case 2001:
                 Block block = Block.getBlockById(data & 4095);
 
                 if (block.getDefaultState().getMaterial() != Material.AIR)
                 {
-                    SoundType soundtype = block.getSoundType();
-                    this.world
-                    .playSound(
-                        blockPosIn,
-                        soundtype.getBreakSound(),
-                        SoundCategory.BLOCKS,
-                        (soundtype.getVolume() + 1.0F) / 2.0F,
-                        soundtype.getPitch() * 0.8F,
-                        false
-                    );
+                    SoundType soundtype = block.getSoundType(Block.getStateById(data), world, blockPosIn, null);
+                    this.world.playSound(blockPosIn, soundtype.getBreakSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F, false);
                 }
 
-                this.mc.effectRenderer.addBlockDestroyEffects(blockPosIn, block.getStateFromMeta(data >> 12 & 0xFF));
+                this.mc.effectRenderer.addBlockDestroyEffects(blockPosIn, block.getStateFromMeta(data >> 12 & 255));
                 break;
             case 2002:
             case 2007:
-                double d6 = (double)blockPosIn.getX();
-                double d7 = (double)blockPosIn.getY();
-                double d9 = (double)blockPosIn.getZ();
+                double d9 = (double)blockPosIn.getX();
+                double d10 = (double)blockPosIn.getY();
+                double d12 = (double)blockPosIn.getZ();
 
-                for (int i1 = 0; i1 < 8; i1++)
+                for (int k2 = 0; k2 < 8; ++k2)
                 {
-                    this.spawnParticle(
-                        EnumParticleTypes.ITEM_CRACK,
-                        d6,
-                        d7,
-                        d9,
-                        random.nextGaussian() * 0.15,
-                        random.nextDouble() * 0.2,
-                        random.nextGaussian() * 0.15,
-                        Item.getIdFromItem(Items.SPLASH_POTION)
-                    );
+                    this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d9, d10, d12, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.SPLASH_POTION));
                 }
 
-                float f5 = (float)(data >> 16 & 0xFF) / 255.0F;
-                float f = (float)(data >> 8 & 0xFF) / 255.0F;
-                float f1 = (float)(data >> 0 & 0xFF) / 255.0F;
+                float f5 = (float)(data >> 16 & 255) / 255.0F;
+                float f = (float)(data >> 8 & 255) / 255.0F;
+                float f1 = (float)(data >> 0 & 255) / 255.0F;
                 EnumParticleTypes enumparticletypes = type == 2007 ? EnumParticleTypes.SPELL_INSTANT : EnumParticleTypes.SPELL;
 
-                for (int l1 = 0; l1 < 100; l1++)
+                for (int j3 = 0; j3 < 100; ++j3)
                 {
-                    double d15 = random.nextDouble() * 4.0;
-                    double d18 = random.nextDouble() * Math.PI * 2.0;
-                    double d21 = Math.cos(d18) * d15;
-                    double d23 = 0.01 + random.nextDouble() * 0.5;
-                    double d25 = Math.sin(d18) * d15;
-                    Particle particle1 = this.spawnParticle0(
-                                             enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d6 + d21 * 0.1, d7 + 0.3, d9 + d25 * 0.1, d21, d23, d25
-                                         );
+                    double d18 = random.nextDouble() * 4.0D;
+                    double d21 = random.nextDouble() * Math.PI * 2.0D;
+                    double d24 = Math.cos(d21) * d18;
+                    double d26 = 0.01D + random.nextDouble() * 0.5D;
+                    double d28 = Math.sin(d21) * d18;
+                    Particle particle1 = this.spawnParticle0(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d9 + d24 * 0.1D, d10 + 0.3D, d12 + d28 * 0.1D, d24, d26, d28);
 
                     if (particle1 != null)
                     {
                         float f4 = 0.75F + random.nextFloat() * 0.25F;
                         particle1.setRBGColorF(f5 * f4, f * f4, f1 * f4);
-                        particle1.multiplyVelocity((float)d15);
+                        particle1.multiplyVelocity((float)d18);
                     }
                 }
 
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_SPLASH_POTION_BREAK, SoundCategory.NEUTRAL, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_SPLASH_POTION_BREAK, SoundCategory.NEUTRAL, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 2003:
-                double d0 = (double)blockPosIn.getX() + 0.5;
-                double d1 = (double)blockPosIn.getY();
-                double d2 = (double)blockPosIn.getZ() + 0.5;
-
-                for (int j = 0; j < 8; j++)
-                {
-                    this.spawnParticle(
-                        EnumParticleTypes.ITEM_CRACK,
-                        d0,
-                        d1,
-                        d2,
-                        random.nextGaussian() * 0.15,
-                        random.nextDouble() * 0.2,
-                        random.nextGaussian() * 0.15,
-                        Item.getIdFromItem(Items.ENDER_EYE)
-                    );
-                }
-
-                for (double d11 = 0.0; d11 < Math.PI * 2; d11 += Math.PI / 20)
-                {
-                    this.spawnParticle(
-                        EnumParticleTypes.PORTAL, d0 + Math.cos(d11) * 5.0, d1 - 0.4, d2 + Math.sin(d11) * 5.0, Math.cos(d11) * -5.0, 0.0, Math.sin(d11) * -5.0
-                    );
-                    this.spawnParticle(
-                        EnumParticleTypes.PORTAL, d0 + Math.cos(d11) * 5.0, d1 - 0.4, d2 + Math.sin(d11) * 5.0, Math.cos(d11) * -7.0, 0.0, Math.sin(d11) * -7.0
-                    );
-                }
-
-                break;
+                double d3 = (double)blockPosIn.getX() + 0.5D;
+                double d4 = (double)blockPosIn.getY();
+                double d5 = (double)blockPosIn.getZ() + 0.5D;
+
+                for (int l1 = 0; l1 < 8; ++l1)
+                {
+                    this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d3, d4, d5, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.ENDER_EYE));
+                }
+
+                for (double d14 = 0.0D; d14 < (Math.PI * 2D); d14 += 0.15707963267948966D)
+                {
+                    this.spawnParticle(EnumParticleTypes.PORTAL, d3 + Math.cos(d14) * 5.0D, d4 - 0.4D, d5 + Math.sin(d14) * 5.0D, Math.cos(d14) * -5.0D, 0.0D, Math.sin(d14) * -5.0D);
+                    this.spawnParticle(EnumParticleTypes.PORTAL, d3 + Math.cos(d14) * 5.0D, d4 - 0.4D, d5 + Math.sin(d14) * 5.0D, Math.cos(d14) * -7.0D, 0.0D, Math.sin(d14) * -7.0D);
+                }
+
+                return;
             case 2004:
 
-                for (int k1 = 0; k1 < 20; k1++)
+                for (int i3 = 0; i3 < 20; ++i3)
                 {
-                    double d14 = (double)blockPosIn.getX() + 0.5 + ((double)this.world.rand.nextFloat() - 0.5) * 2.0;
-                    double d17 = (double)blockPosIn.getY() + 0.5 + ((double)this.world.rand.nextFloat() - 0.5) * 2.0;
-                    double d20 = (double)blockPosIn.getZ() + 0.5 + ((double)this.world.rand.nextFloat() - 0.5) * 2.0;
-                    this.world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d14, d17, d20, 0.0, 0.0, 0.0, new int[0]);
-                    this.world.spawnParticle(EnumParticleTypes.FLAME, d14, d17, d20, 0.0, 0.0, 0.0, new int[0]);
+                    double d17 = (double)blockPosIn.getX() + 0.5D + ((double)this.world.rand.nextFloat() - 0.5D) * 2.0D;
+                    double d20 = (double)blockPosIn.getY() + 0.5D + ((double)this.world.rand.nextFloat() - 0.5D) * 2.0D;
+                    double d23 = (double)blockPosIn.getZ() + 0.5D + ((double)this.world.rand.nextFloat() - 0.5D) * 2.0D;
+                    this.world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d17, d20, d23, 0.0D, 0.0D, 0.0D, new int[0]);
+                    this.world.spawnParticle(EnumParticleTypes.FLAME, d17, d20, d23, 0.0D, 0.0D, 0.0D, new int[0]);
                 }
 
-                break;
+                return;
             case 2005:
                 ItemDye.spawnBonemealParticles(this.world, blockPosIn, data);
                 break;
             case 2006:
 
-                for (int k = 0; k < 200; k++)
+                for (int i2 = 0; i2 < 200; ++i2)
                 {
                     float f2 = random.nextFloat() * 4.0F;
-                    float f3 = random.nextFloat() * (float)(Math.PI * 2);
-                    double d3 = (double)(MathHelper.cos(f3) * f2);
-                    double d4 = 0.01 + random.nextDouble() * 0.5;
-                    double d5 = (double)(MathHelper.sin(f3) * f2);
-                    Particle particle = this.spawnParticle0(
-                                            EnumParticleTypes.DRAGON_BREATH.getParticleID(),
-                                            false,
-                                            (double)blockPosIn.getX() + d3 * 0.1,
-                                            (double)blockPosIn.getY() + 0.3,
-                                            (double)blockPosIn.getZ() + d5 * 0.1,
-                                            d3,
-                                            d4,
-                                            d5
-                                        );
+                    float f3 = random.nextFloat() * ((float)Math.PI * 2F);
+                    double d6 = (double)(MathHelper.cos(f3) * f2);
+                    double d7 = 0.01D + random.nextDouble() * 0.5D;
+                    double d8 = (double)(MathHelper.sin(f3) * f2);
+                    Particle particle = this.spawnParticle0(EnumParticleTypes.DRAGON_BREATH.getParticleID(), false, (double)blockPosIn.getX() + d6 * 0.1D, (double)blockPosIn.getY() + 0.3D, (double)blockPosIn.getZ() + d8 * 0.1D, d6, d7, d8);
 
                     if (particle != null)
                     {
@@ -2970,56 +2505,27 @@
                     }
                 }
 
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ENDERDRAGON_FIREBALL_EPLD, SoundCategory.HOSTILE, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ENDERDRAGON_FIREBALL_EPLD, SoundCategory.HOSTILE, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
             case 3000:
-                this.world
-                .spawnParticle(
-                    EnumParticleTypes.EXPLOSION_HUGE,
-                    true,
-                    (double)blockPosIn.getX() + 0.5,
-                    (double)blockPosIn.getY() + 0.5,
-                    (double)blockPosIn.getZ() + 0.5,
-                    0.0,
-                    0.0,
-                    0.0,
-                    new int[0]
-                );
-                this.world
-                .playSound(
-                    blockPosIn,
-                    SoundEvents.BLOCK_END_GATEWAY_SPAWN,
-                    SoundCategory.BLOCKS,
-                    10.0F,
-                    (1.0F + (this.world.rand.nextFloat() - this.world.rand.nextFloat()) * 0.2F) * 0.7F,
-                    false
-                );
+                this.world.spawnParticle(EnumParticleTypes.EXPLOSION_HUGE, true, (double)blockPosIn.getX() + 0.5D, (double)blockPosIn.getY() + 0.5D, (double)blockPosIn.getZ() + 0.5D, 0.0D, 0.0D, 0.0D, new int[0]);
+                this.world.playSound(blockPosIn, SoundEvents.BLOCK_END_GATEWAY_SPAWN, SoundCategory.BLOCKS, 10.0F, (1.0F + (this.world.rand.nextFloat() - this.world.rand.nextFloat()) * 0.2F) * 0.7F, false);
                 break;
             case 3001:
-                this.world
-                .playSound(
-                    blockPosIn, SoundEvents.ENTITY_ENDERDRAGON_GROWL, SoundCategory.HOSTILE, 64.0F, 0.8F + this.world.rand.nextFloat() * 0.3F, false
-                );
+                this.world.playSound(blockPosIn, SoundEvents.ENTITY_ENDERDRAGON_GROWL, SoundCategory.HOSTILE, 64.0F, 0.8F + this.world.rand.nextFloat() * 0.3F, false);
         }
     }
 
-    @Override
     public void sendBlockBreakProgress(int breakerId, BlockPos pos, int progress)
     {
         if (progress >= 0 && progress < 10)
         {
-            DestroyBlockProgress destroyblockprogress = this.damagedBlocks.get(breakerId);
+            DestroyBlockProgress destroyblockprogress = this.damagedBlocks.get(Integer.valueOf(breakerId));
 
-            if (destroyblockprogress == null
-                    || destroyblockprogress.getPosition().getX() != pos.getX()
-                    || destroyblockprogress.getPosition().getY() != pos.getY()
-                    || destroyblockprogress.getPosition().getZ() != pos.getZ())
+            if (destroyblockprogress == null || destroyblockprogress.getPosition().getX() != pos.getX() || destroyblockprogress.getPosition().getY() != pos.getY() || destroyblockprogress.getPosition().getZ() != pos.getZ())
             {
                 destroyblockprogress = new DestroyBlockProgress(breakerId, pos);
-                this.damagedBlocks.put(breakerId, destroyblockprogress);
+                this.damagedBlocks.put(Integer.valueOf(breakerId), destroyblockprogress);
             }
 
             destroyblockprogress.setPartialBlockDamage(progress);
@@ -3027,7 +2533,7 @@
         }
         else
         {
-            this.damagedBlocks.remove(breakerId);
+            this.damagedBlocks.remove(Integer.valueOf(breakerId));
         }
     }
 
