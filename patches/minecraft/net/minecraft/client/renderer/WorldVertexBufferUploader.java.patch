--- before/net/minecraft/client/renderer/WorldVertexBufferUploader.java
+++ after/net/minecraft/client/renderer/WorldVertexBufferUploader.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer;
 
-import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.List;
 import net.minecraft.client.renderer.vertex.VertexFormat;
@@ -20,62 +19,29 @@
             ByteBuffer bytebuffer = bufferBuilderIn.getByteBuffer();
             List<VertexFormatElement> list = vertexformat.getElements();
 
-            for (int j = 0; j < list.size(); j++)
+            for (int j = 0; j < list.size(); ++j)
             {
                 VertexFormatElement vertexformatelement = list.get(j);
                 VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
                 int k = vertexformatelement.getType().getGlConstant();
                 int l = vertexformatelement.getIndex();
-                ((Buffer)bytebuffer).position(vertexformat.getOffset(j));
+                bytebuffer.position(vertexformat.getOffset(j));
 
-                switch (vertexformatelement$enumusage)
-                {
-                    case POSITION:
-                        GlStateManager.glVertexPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
-                        GlStateManager.glEnableClientState(32884);
-                        break;
-                    case UV:
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + l);
-                        GlStateManager.glTexCoordPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
-                        GlStateManager.glEnableClientState(32888);
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-                        break;
-                    case COLOR:
-                        GlStateManager.glColorPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
-                        GlStateManager.glEnableClientState(32886);
-                        break;
-                    case NORMAL:
-                        GlStateManager.glNormalPointer(k, i, bytebuffer);
-                        GlStateManager.glEnableClientState(32885);
-                }
+                // moved to VertexFormatElement.preDraw
+                vertexformatelement.getUsage().preDraw(vertexformat, j, i, bytebuffer);
             }
 
             GlStateManager.glDrawArrays(bufferBuilderIn.getDrawMode(), 0, bufferBuilderIn.getVertexCount());
             int i1 = 0;
 
-            for (int j1 = list.size(); i1 < j1; i1++)
+            for (int j1 = list.size(); i1 < j1; ++i1)
             {
                 VertexFormatElement vertexformatelement1 = list.get(i1);
                 VertexFormatElement.EnumUsage vertexformatelement$enumusage1 = vertexformatelement1.getUsage();
                 int k1 = vertexformatelement1.getIndex();
 
-                switch (vertexformatelement$enumusage1)
-                {
-                    case POSITION:
-                        GlStateManager.glDisableClientState(32884);
-                        break;
-                    case UV:
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k1);
-                        GlStateManager.glDisableClientState(32888);
-                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-                        break;
-                    case COLOR:
-                        GlStateManager.glDisableClientState(32886);
-                        GlStateManager.resetColor();
-                        break;
-                    case NORMAL:
-                        GlStateManager.glDisableClientState(32885);
-                }
+                // moved to VertexFormatElement.postDraw
+                vertexformatelement1.getUsage().postDraw(vertexformat, i1, i, bytebuffer);
             }
         }
 
