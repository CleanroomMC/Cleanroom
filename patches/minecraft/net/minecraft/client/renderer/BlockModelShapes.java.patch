--- before/net/minecraft/client/renderer/BlockModelShapes.java
+++ after/net/minecraft/client/renderer/BlockModelShapes.java
@@ -58,7 +58,7 @@
 @SideOnly(Side.CLIENT)
 public class BlockModelShapes
 {
-    private final Map<IBlockState, IBakedModel> bakedModelStore = Maps.newIdentityHashMap();
+    private final Map<IBlockState, IBakedModel> bakedModelStore = Maps.<IBlockState, IBakedModel>newIdentityHashMap();
     private final BlockStateMapper blockStateMapper = new BlockStateMapper();
     private final ModelManager modelManager;
 
@@ -80,13 +80,7 @@
 
         if (ibakedmodel == null || ibakedmodel == this.modelManager.getMissingModel())
         {
-            if (block == Blocks.WALL_SIGN
-                    || block == Blocks.STANDING_SIGN
-                    || block == Blocks.CHEST
-                    || block == Blocks.TRAPPED_CHEST
-                    || block == Blocks.STANDING_BANNER
-                    || block == Blocks.WALL_BANNER
-                    || block == Blocks.BED)
+            if (block == Blocks.WALL_SIGN || block == Blocks.STANDING_SIGN || block == Blocks.CHEST || block == Blocks.TRAPPED_CHEST || block == Blocks.STANDING_BANNER || block == Blocks.WALL_BANNER || block == Blocks.BED)
             {
                 return this.modelManager.getTextureMap().getAtlasSprite("minecraft:blocks/planks_oak");
             }
@@ -249,131 +243,65 @@
 
     private void registerAllBlocks()
     {
-        this.registerBuiltInBlocks(
-            Blocks.AIR,
-            Blocks.FLOWING_WATER,
-            Blocks.WATER,
-            Blocks.FLOWING_LAVA,
-            Blocks.LAVA,
-            Blocks.PISTON_EXTENSION,
-            Blocks.CHEST,
-            Blocks.ENDER_CHEST,
-            Blocks.TRAPPED_CHEST,
-            Blocks.STANDING_SIGN,
-            Blocks.SKULL,
-            Blocks.END_PORTAL,
-            Blocks.BARRIER,
-            Blocks.WALL_SIGN,
-            Blocks.WALL_BANNER,
-            Blocks.STANDING_BANNER,
-            Blocks.END_GATEWAY,
-            Blocks.STRUCTURE_VOID,
-            Blocks.WHITE_SHULKER_BOX,
-            Blocks.ORANGE_SHULKER_BOX,
-            Blocks.MAGENTA_SHULKER_BOX,
-            Blocks.LIGHT_BLUE_SHULKER_BOX,
-            Blocks.YELLOW_SHULKER_BOX,
-            Blocks.LIME_SHULKER_BOX,
-            Blocks.PINK_SHULKER_BOX,
-            Blocks.GRAY_SHULKER_BOX,
-            Blocks.SILVER_SHULKER_BOX,
-            Blocks.CYAN_SHULKER_BOX,
-            Blocks.PURPLE_SHULKER_BOX,
-            Blocks.BLUE_SHULKER_BOX,
-            Blocks.BROWN_SHULKER_BOX,
-            Blocks.GREEN_SHULKER_BOX,
-            Blocks.RED_SHULKER_BOX,
-            Blocks.BLACK_SHULKER_BOX,
-            Blocks.BED
-        );
-        this.registerBlockWithStateMapper(Blocks.STONE, new StateMap.Builder().withName(BlockStone.VARIANT).build());
-        this.registerBlockWithStateMapper(Blocks.PRISMARINE, new StateMap.Builder().withName(BlockPrismarine.VARIANT).build());
-        this.registerBlockWithStateMapper(
-            Blocks.LEAVES,
-            new StateMap.Builder()
-            .withName(BlockOldLeaf.VARIANT)
-            .withSuffix("_leaves")
-            .ignore(BlockLeaves.CHECK_DECAY, BlockLeaves.DECAYABLE)
-            .build()
-        );
-        this.registerBlockWithStateMapper(
-            Blocks.LEAVES2,
-            new StateMap.Builder()
-            .withName(BlockNewLeaf.VARIANT)
-            .withSuffix("_leaves")
-            .ignore(BlockLeaves.CHECK_DECAY, BlockLeaves.DECAYABLE)
-            .build()
-        );
-        this.registerBlockWithStateMapper(Blocks.CACTUS, new StateMap.Builder().ignore(BlockCactus.AGE).build());
-        this.registerBlockWithStateMapper(Blocks.REEDS, new StateMap.Builder().ignore(BlockReed.AGE).build());
-        this.registerBlockWithStateMapper(Blocks.JUKEBOX, new StateMap.Builder().ignore(BlockJukebox.HAS_RECORD).build());
-        this.registerBlockWithStateMapper(Blocks.COBBLESTONE_WALL, new StateMap.Builder().withName(BlockWall.VARIANT).withSuffix("_wall").build());
-        this.registerBlockWithStateMapper(
-            Blocks.DOUBLE_PLANT,
-            new StateMap.Builder().withName(BlockDoublePlant.VARIANT).ignore(BlockDoublePlant.FACING).build()
-        );
-        this.registerBlockWithStateMapper(Blocks.OAK_FENCE_GATE, new StateMap.Builder().ignore(BlockFenceGate.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.SPRUCE_FENCE_GATE, new StateMap.Builder().ignore(BlockFenceGate.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.BIRCH_FENCE_GATE, new StateMap.Builder().ignore(BlockFenceGate.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.JUNGLE_FENCE_GATE, new StateMap.Builder().ignore(BlockFenceGate.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.DARK_OAK_FENCE_GATE, new StateMap.Builder().ignore(BlockFenceGate.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.ACACIA_FENCE_GATE, new StateMap.Builder().ignore(BlockFenceGate.POWERED).build());
-        this.registerBlockWithStateMapper(
-            Blocks.TRIPWIRE, new StateMap.Builder().ignore(BlockTripWire.DISARMED, BlockTripWire.POWERED).build()
-        );
-        this.registerBlockWithStateMapper(Blocks.DOUBLE_WOODEN_SLAB, new StateMap.Builder().withName(BlockPlanks.VARIANT).withSuffix("_double_slab").build());
-        this.registerBlockWithStateMapper(Blocks.WOODEN_SLAB, new StateMap.Builder().withName(BlockPlanks.VARIANT).withSuffix("_slab").build());
-        this.registerBlockWithStateMapper(Blocks.TNT, new StateMap.Builder().ignore(BlockTNT.EXPLODE).build());
-        this.registerBlockWithStateMapper(Blocks.FIRE, new StateMap.Builder().ignore(BlockFire.AGE).build());
-        this.registerBlockWithStateMapper(Blocks.REDSTONE_WIRE, new StateMap.Builder().ignore(BlockRedstoneWire.POWER).build());
-        this.registerBlockWithStateMapper(Blocks.OAK_DOOR, new StateMap.Builder().ignore(BlockDoor.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.SPRUCE_DOOR, new StateMap.Builder().ignore(BlockDoor.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.BIRCH_DOOR, new StateMap.Builder().ignore(BlockDoor.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.JUNGLE_DOOR, new StateMap.Builder().ignore(BlockDoor.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.ACACIA_DOOR, new StateMap.Builder().ignore(BlockDoor.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.DARK_OAK_DOOR, new StateMap.Builder().ignore(BlockDoor.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.IRON_DOOR, new StateMap.Builder().ignore(BlockDoor.POWERED).build());
-        this.registerBlockWithStateMapper(Blocks.WOOL, new StateMap.Builder().withName(BlockColored.COLOR).withSuffix("_wool").build());
-        this.registerBlockWithStateMapper(Blocks.CARPET, new StateMap.Builder().withName(BlockColored.COLOR).withSuffix("_carpet").build());
-        this.registerBlockWithStateMapper(
-            Blocks.STAINED_HARDENED_CLAY, new StateMap.Builder().withName(BlockColored.COLOR).withSuffix("_stained_hardened_clay").build()
-        );
-        this.registerBlockWithStateMapper(
-            Blocks.STAINED_GLASS_PANE, new StateMap.Builder().withName(BlockColored.COLOR).withSuffix("_stained_glass_pane").build()
-        );
-        this.registerBlockWithStateMapper(
-            Blocks.STAINED_GLASS, new StateMap.Builder().withName(BlockColored.COLOR).withSuffix("_stained_glass").build()
-        );
-        this.registerBlockWithStateMapper(Blocks.SANDSTONE, new StateMap.Builder().withName(BlockSandStone.TYPE).build());
-        this.registerBlockWithStateMapper(Blocks.RED_SANDSTONE, new StateMap.Builder().withName(BlockRedSandstone.TYPE).build());
-        this.registerBlockWithStateMapper(Blocks.TALLGRASS, new StateMap.Builder().withName(BlockTallGrass.TYPE).build());
-        this.registerBlockWithStateMapper(Blocks.YELLOW_FLOWER, new StateMap.Builder().withName(Blocks.YELLOW_FLOWER.getTypeProperty()).build());
-        this.registerBlockWithStateMapper(Blocks.RED_FLOWER, new StateMap.Builder().withName(Blocks.RED_FLOWER.getTypeProperty()).build());
-        this.registerBlockWithStateMapper(Blocks.STONE_SLAB, new StateMap.Builder().withName(BlockStoneSlab.VARIANT).withSuffix("_slab").build());
-        this.registerBlockWithStateMapper(Blocks.STONE_SLAB2, new StateMap.Builder().withName(BlockStoneSlabNew.VARIANT).withSuffix("_slab").build());
-        this.registerBlockWithStateMapper(
-            Blocks.MONSTER_EGG, new StateMap.Builder().withName(BlockSilverfish.VARIANT).withSuffix("_monster_egg").build()
-        );
-        this.registerBlockWithStateMapper(Blocks.STONEBRICK, new StateMap.Builder().withName(BlockStoneBrick.VARIANT).build());
-        this.registerBlockWithStateMapper(Blocks.DISPENSER, new StateMap.Builder().ignore(BlockDispenser.TRIGGERED).build());
-        this.registerBlockWithStateMapper(Blocks.DROPPER, new StateMap.Builder().ignore(BlockDropper.TRIGGERED).build());
-        this.registerBlockWithStateMapper(Blocks.LOG, new StateMap.Builder().withName(BlockOldLog.VARIANT).withSuffix("_log").build());
-        this.registerBlockWithStateMapper(Blocks.LOG2, new StateMap.Builder().withName(BlockNewLog.VARIANT).withSuffix("_log").build());
-        this.registerBlockWithStateMapper(Blocks.PLANKS, new StateMap.Builder().withName(BlockPlanks.VARIANT).withSuffix("_planks").build());
-        this.registerBlockWithStateMapper(Blocks.SAPLING, new StateMap.Builder().withName(BlockSapling.TYPE).withSuffix("_sapling").build());
-        this.registerBlockWithStateMapper(Blocks.SAND, new StateMap.Builder().withName(BlockSand.VARIANT).build());
-        this.registerBlockWithStateMapper(Blocks.HOPPER, new StateMap.Builder().ignore(BlockHopper.ENABLED).build());
-        this.registerBlockWithStateMapper(Blocks.FLOWER_POT, new StateMap.Builder().ignore(BlockFlowerPot.LEGACY_DATA).build());
-        this.registerBlockWithStateMapper(Blocks.CONCRETE, new StateMap.Builder().withName(BlockColored.COLOR).withSuffix("_concrete").build());
-        this.registerBlockWithStateMapper(
-            Blocks.CONCRETE_POWDER, new StateMap.Builder().withName(BlockColored.COLOR).withSuffix("_concrete_powder").build()
-        );
+        this.registerBuiltInBlocks(Blocks.AIR, Blocks.FLOWING_WATER, Blocks.WATER, Blocks.FLOWING_LAVA, Blocks.LAVA, Blocks.PISTON_EXTENSION, Blocks.CHEST, Blocks.ENDER_CHEST, Blocks.TRAPPED_CHEST, Blocks.STANDING_SIGN, Blocks.SKULL, Blocks.END_PORTAL, Blocks.BARRIER, Blocks.WALL_SIGN, Blocks.WALL_BANNER, Blocks.STANDING_BANNER, Blocks.END_GATEWAY, Blocks.STRUCTURE_VOID, Blocks.WHITE_SHULKER_BOX, Blocks.ORANGE_SHULKER_BOX, Blocks.MAGENTA_SHULKER_BOX, Blocks.LIGHT_BLUE_SHULKER_BOX, Blocks.YELLOW_SHULKER_BOX, Blocks.LIME_SHULKER_BOX, Blocks.PINK_SHULKER_BOX, Blocks.GRAY_SHULKER_BOX, Blocks.SILVER_SHULKER_BOX, Blocks.CYAN_SHULKER_BOX, Blocks.PURPLE_SHULKER_BOX, Blocks.BLUE_SHULKER_BOX, Blocks.BROWN_SHULKER_BOX, Blocks.GREEN_SHULKER_BOX, Blocks.RED_SHULKER_BOX, Blocks.BLACK_SHULKER_BOX, Blocks.BED);
+        this.registerBlockWithStateMapper(Blocks.STONE, (new StateMap.Builder()).withName(BlockStone.VARIANT).build());
+        this.registerBlockWithStateMapper(Blocks.PRISMARINE, (new StateMap.Builder()).withName(BlockPrismarine.VARIANT).build());
+        this.registerBlockWithStateMapper(Blocks.LEAVES, (new StateMap.Builder()).withName(BlockOldLeaf.VARIANT).withSuffix("_leaves").ignore(BlockLeaves.CHECK_DECAY, BlockLeaves.DECAYABLE).build());
+        this.registerBlockWithStateMapper(Blocks.LEAVES2, (new StateMap.Builder()).withName(BlockNewLeaf.VARIANT).withSuffix("_leaves").ignore(BlockLeaves.CHECK_DECAY, BlockLeaves.DECAYABLE).build());
+        this.registerBlockWithStateMapper(Blocks.CACTUS, (new StateMap.Builder()).ignore(BlockCactus.AGE).build());
+        this.registerBlockWithStateMapper(Blocks.REEDS, (new StateMap.Builder()).ignore(BlockReed.AGE).build());
+        this.registerBlockWithStateMapper(Blocks.JUKEBOX, (new StateMap.Builder()).ignore(BlockJukebox.HAS_RECORD).build());
+        this.registerBlockWithStateMapper(Blocks.COBBLESTONE_WALL, (new StateMap.Builder()).withName(BlockWall.VARIANT).withSuffix("_wall").build());
+        this.registerBlockWithStateMapper(Blocks.DOUBLE_PLANT, (new StateMap.Builder()).withName(BlockDoublePlant.VARIANT).ignore(BlockDoublePlant.FACING).build());
+        this.registerBlockWithStateMapper(Blocks.OAK_FENCE_GATE, (new StateMap.Builder()).ignore(BlockFenceGate.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.SPRUCE_FENCE_GATE, (new StateMap.Builder()).ignore(BlockFenceGate.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.BIRCH_FENCE_GATE, (new StateMap.Builder()).ignore(BlockFenceGate.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.JUNGLE_FENCE_GATE, (new StateMap.Builder()).ignore(BlockFenceGate.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.DARK_OAK_FENCE_GATE, (new StateMap.Builder()).ignore(BlockFenceGate.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.ACACIA_FENCE_GATE, (new StateMap.Builder()).ignore(BlockFenceGate.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.TRIPWIRE, (new StateMap.Builder()).ignore(BlockTripWire.DISARMED, BlockTripWire.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.DOUBLE_WOODEN_SLAB, (new StateMap.Builder()).withName(BlockPlanks.VARIANT).withSuffix("_double_slab").build());
+        this.registerBlockWithStateMapper(Blocks.WOODEN_SLAB, (new StateMap.Builder()).withName(BlockPlanks.VARIANT).withSuffix("_slab").build());
+        this.registerBlockWithStateMapper(Blocks.TNT, (new StateMap.Builder()).ignore(BlockTNT.EXPLODE).build());
+        this.registerBlockWithStateMapper(Blocks.FIRE, (new StateMap.Builder()).ignore(BlockFire.AGE).build());
+        this.registerBlockWithStateMapper(Blocks.REDSTONE_WIRE, (new StateMap.Builder()).ignore(BlockRedstoneWire.POWER).build());
+        this.registerBlockWithStateMapper(Blocks.OAK_DOOR, (new StateMap.Builder()).ignore(BlockDoor.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.SPRUCE_DOOR, (new StateMap.Builder()).ignore(BlockDoor.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.BIRCH_DOOR, (new StateMap.Builder()).ignore(BlockDoor.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.JUNGLE_DOOR, (new StateMap.Builder()).ignore(BlockDoor.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.ACACIA_DOOR, (new StateMap.Builder()).ignore(BlockDoor.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.DARK_OAK_DOOR, (new StateMap.Builder()).ignore(BlockDoor.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.IRON_DOOR, (new StateMap.Builder()).ignore(BlockDoor.POWERED).build());
+        this.registerBlockWithStateMapper(Blocks.WOOL, (new StateMap.Builder()).withName(BlockColored.COLOR).withSuffix("_wool").build());
+        this.registerBlockWithStateMapper(Blocks.CARPET, (new StateMap.Builder()).withName(BlockColored.COLOR).withSuffix("_carpet").build());
+        this.registerBlockWithStateMapper(Blocks.STAINED_HARDENED_CLAY, (new StateMap.Builder()).withName(BlockColored.COLOR).withSuffix("_stained_hardened_clay").build());
+        this.registerBlockWithStateMapper(Blocks.STAINED_GLASS_PANE, (new StateMap.Builder()).withName(BlockColored.COLOR).withSuffix("_stained_glass_pane").build());
+        this.registerBlockWithStateMapper(Blocks.STAINED_GLASS, (new StateMap.Builder()).withName(BlockColored.COLOR).withSuffix("_stained_glass").build());
+        this.registerBlockWithStateMapper(Blocks.SANDSTONE, (new StateMap.Builder()).withName(BlockSandStone.TYPE).build());
+        this.registerBlockWithStateMapper(Blocks.RED_SANDSTONE, (new StateMap.Builder()).withName(BlockRedSandstone.TYPE).build());
+        this.registerBlockWithStateMapper(Blocks.TALLGRASS, (new StateMap.Builder()).withName(BlockTallGrass.TYPE).build());
+        this.registerBlockWithStateMapper(Blocks.YELLOW_FLOWER, (new StateMap.Builder()).withName(Blocks.YELLOW_FLOWER.getTypeProperty()).build());
+        this.registerBlockWithStateMapper(Blocks.RED_FLOWER, (new StateMap.Builder()).withName(Blocks.RED_FLOWER.getTypeProperty()).build());
+        this.registerBlockWithStateMapper(Blocks.STONE_SLAB, (new StateMap.Builder()).withName(BlockStoneSlab.VARIANT).withSuffix("_slab").build());
+        this.registerBlockWithStateMapper(Blocks.STONE_SLAB2, (new StateMap.Builder()).withName(BlockStoneSlabNew.VARIANT).withSuffix("_slab").build());
+        this.registerBlockWithStateMapper(Blocks.MONSTER_EGG, (new StateMap.Builder()).withName(BlockSilverfish.VARIANT).withSuffix("_monster_egg").build());
+        this.registerBlockWithStateMapper(Blocks.STONEBRICK, (new StateMap.Builder()).withName(BlockStoneBrick.VARIANT).build());
+        this.registerBlockWithStateMapper(Blocks.DISPENSER, (new StateMap.Builder()).ignore(BlockDispenser.TRIGGERED).build());
+        this.registerBlockWithStateMapper(Blocks.DROPPER, (new StateMap.Builder()).ignore(BlockDropper.TRIGGERED).build());
+        this.registerBlockWithStateMapper(Blocks.LOG, (new StateMap.Builder()).withName(BlockOldLog.VARIANT).withSuffix("_log").build());
+        this.registerBlockWithStateMapper(Blocks.LOG2, (new StateMap.Builder()).withName(BlockNewLog.VARIANT).withSuffix("_log").build());
+        this.registerBlockWithStateMapper(Blocks.PLANKS, (new StateMap.Builder()).withName(BlockPlanks.VARIANT).withSuffix("_planks").build());
+        this.registerBlockWithStateMapper(Blocks.SAPLING, (new StateMap.Builder()).withName(BlockSapling.TYPE).withSuffix("_sapling").build());
+        this.registerBlockWithStateMapper(Blocks.SAND, (new StateMap.Builder()).withName(BlockSand.VARIANT).build());
+        this.registerBlockWithStateMapper(Blocks.HOPPER, (new StateMap.Builder()).ignore(BlockHopper.ENABLED).build());
+        this.registerBlockWithStateMapper(Blocks.FLOWER_POT, (new StateMap.Builder()).ignore(BlockFlowerPot.LEGACY_DATA).build());
+        this.registerBlockWithStateMapper(Blocks.CONCRETE, (new StateMap.Builder()).withName(BlockColored.COLOR).withSuffix("_concrete").build());
+        this.registerBlockWithStateMapper(Blocks.CONCRETE_POWDER, (new StateMap.Builder()).withName(BlockColored.COLOR).withSuffix("_concrete_powder").build());
         this.registerBlockWithStateMapper(Blocks.QUARTZ_BLOCK, new StateMapperBase()
         {
-            @Override
             protected ModelResourceLocation getModelResourceLocation(IBlockState state)
             {
-                BlockQuartz.EnumType blockquartz$enumtype = state.getValue(BlockQuartz.VARIANT);
+                BlockQuartz.EnumType blockquartz$enumtype = (BlockQuartz.EnumType)state.getValue(BlockQuartz.VARIANT);
 
                 switch (blockquartz$enumtype)
                 {
@@ -393,7 +321,6 @@
         });
         this.registerBlockWithStateMapper(Blocks.DEADBUSH, new StateMapperBase()
         {
-            @Override
             protected ModelResourceLocation getModelResourceLocation(IBlockState state)
             {
                 return new ModelResourceLocation("dead_bush", "normal");
@@ -401,10 +328,9 @@
         });
         this.registerBlockWithStateMapper(Blocks.PUMPKIN_STEM, new StateMapperBase()
         {
-            @Override
             protected ModelResourceLocation getModelResourceLocation(IBlockState state)
             {
-                Map < IProperty<?>, Comparable<? >> map = Maps.newLinkedHashMap(state.getProperties());
+                Map < IProperty<?>, Comparable<? >> map = Maps. < IProperty<?>, Comparable<? >> newLinkedHashMap(state.getProperties());
 
                 if (state.getValue(BlockStem.FACING) != EnumFacing.UP)
                 {
@@ -416,10 +342,9 @@
         });
         this.registerBlockWithStateMapper(Blocks.MELON_STEM, new StateMapperBase()
         {
-            @Override
             protected ModelResourceLocation getModelResourceLocation(IBlockState state)
             {
-                Map < IProperty<?>, Comparable<? >> map = Maps.newLinkedHashMap(state.getProperties());
+                Map < IProperty<?>, Comparable<? >> map = Maps. < IProperty<?>, Comparable<? >> newLinkedHashMap(state.getProperties());
 
                 if (state.getValue(BlockStem.FACING) != EnumFacing.UP)
                 {
@@ -431,10 +356,9 @@
         });
         this.registerBlockWithStateMapper(Blocks.DIRT, new StateMapperBase()
         {
-            @Override
             protected ModelResourceLocation getModelResourceLocation(IBlockState state)
             {
-                Map < IProperty<?>, Comparable<? >> map = Maps.newLinkedHashMap(state.getProperties());
+                Map < IProperty<?>, Comparable<? >> map = Maps. < IProperty<?>, Comparable<? >> newLinkedHashMap(state.getProperties());
                 String s = BlockDirt.VARIANT.getName((BlockDirt.DirtType)map.remove(BlockDirt.VARIANT));
 
                 if (BlockDirt.DirtType.PODZOL != state.getValue(BlockDirt.VARIANT))
@@ -447,27 +371,26 @@
         });
         this.registerBlockWithStateMapper(Blocks.DOUBLE_STONE_SLAB, new StateMapperBase()
         {
-            @Override
             protected ModelResourceLocation getModelResourceLocation(IBlockState state)
             {
-                Map < IProperty<?>, Comparable<? >> map = Maps.newLinkedHashMap(state.getProperties());
+                Map < IProperty<?>, Comparable<? >> map = Maps. < IProperty<?>, Comparable<? >> newLinkedHashMap(state.getProperties());
                 String s = BlockStoneSlab.VARIANT.getName((BlockStoneSlab.EnumType)map.remove(BlockStoneSlab.VARIANT));
                 map.remove(BlockStoneSlab.SEAMLESS);
-                String s1 = state.getValue(BlockStoneSlab.SEAMLESS) ? "all" : "normal";
+                String s1 = ((Boolean)state.getValue(BlockStoneSlab.SEAMLESS)).booleanValue() ? "all" : "normal";
                 return new ModelResourceLocation(s + "_double_slab", s1);
             }
         });
         this.registerBlockWithStateMapper(Blocks.DOUBLE_STONE_SLAB2, new StateMapperBase()
         {
-            @Override
             protected ModelResourceLocation getModelResourceLocation(IBlockState state)
             {
-                Map < IProperty<?>, Comparable<? >> map = Maps.newLinkedHashMap(state.getProperties());
+                Map < IProperty<?>, Comparable<? >> map = Maps. < IProperty<?>, Comparable<? >> newLinkedHashMap(state.getProperties());
                 String s = BlockStoneSlabNew.VARIANT.getName((BlockStoneSlabNew.EnumType)map.remove(BlockStoneSlabNew.VARIANT));
                 map.remove(BlockStoneSlab.SEAMLESS);
-                String s1 = state.getValue(BlockStoneSlabNew.SEAMLESS) ? "all" : "normal";
+                String s1 = ((Boolean)state.getValue(BlockStoneSlabNew.SEAMLESS)).booleanValue() ? "all" : "normal";
                 return new ModelResourceLocation(s + "_double_slab", s1);
             }
         });
+        net.minecraftforge.client.model.ModelLoader.onRegisterAllBlocks(this);
     }
 }
