--- before/net/minecraft/client/renderer/color/BlockColors.java
+++ after/net/minecraft/client/renderer/color/BlockColors.java
@@ -27,7 +27,8 @@
 @SideOnly(Side.CLIENT)
 public class BlockColors
 {
-    private final ObjectIntIdentityMap<IBlockColor> mapBlockColors = new ObjectIntIdentityMap<>(32);
+    // FORGE: Use RegistryDelegates as non-Vanilla block ids are not constant
+    private final java.util.Map<net.minecraftforge.registries.IRegistryDelegate<Block>, IBlockColor> blockColorMap = com.google.common.collect.Maps.newHashMap();
 
     public static BlockColors init()
     {
@@ -196,12 +197,13 @@
                 return worldIn != null && pos != null ? 2129968 : 7455580;
             }
         }, Blocks.WATERLILY);
+        net.minecraftforge.client.ForgeHooksClient.onBlockColorsInit(blockcolors);
         return blockcolors;
     }
 
     public int getColor(IBlockState state, World p_189991_2_, BlockPos p_189991_3_)
     {
-        IBlockColor iblockcolor = this.mapBlockColors.getByValue(Block.getIdFromBlock(state.getBlock()));
+        IBlockColor iblockcolor = this.blockColorMap.get(state.getBlock().delegate);
 
         if (iblockcolor != null)
         {
@@ -216,7 +218,7 @@
 
     public int colorMultiplier(IBlockState state, @Nullable IBlockAccess blockAccess, @Nullable BlockPos pos, int tintIndex)
     {
-        IBlockColor iblockcolor = this.mapBlockColors.getByValue(Block.getIdFromBlock(state.getBlock()));
+        IBlockColor iblockcolor = this.blockColorMap.get(state.getBlock().delegate);
         return iblockcolor == null ? -1 : iblockcolor.colorMultiplier(state, blockAccess, pos, tintIndex);
     }
 
@@ -224,7 +226,9 @@
     {
         for (Block block : blocksIn)
         {
-            this.mapBlockColors.put(blockColor, Block.getIdFromBlock(block));
+            if (block == null) throw new IllegalArgumentException("Block registered to block color handler cannot be null!");
+            if (block.getRegistryName() == null) throw new IllegalArgumentException("Block must be registered before assigning color handler.");
+            this.blockColorMap.put(block.delegate, blockColor);
         }
     }
 }
