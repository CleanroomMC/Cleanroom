--- before/net/minecraft/client/renderer/color/ItemColors.java
+++ after/net/minecraft/client/renderer/color/ItemColors.java
@@ -17,44 +17,38 @@
 import net.minecraft.nbt.NBTTagIntArray;
 import net.minecraft.potion.PotionUtils;
 import net.minecraft.util.ObjectIntIdentityMap;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.ColorizerGrass;
+import net.minecraft.world.IBlockAccess;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
 public class ItemColors
 {
-    private final ObjectIntIdentityMap<IItemColor> mapItemColors = new ObjectIntIdentityMap<>(32);
+    // FORGE: Use RegistryDelegates as non-Vanilla item ids are not constant
+    private final java.util.Map<net.minecraftforge.registries.IRegistryDelegate<Item>, IItemColor> itemColorMap = com.google.common.collect.Maps.newHashMap();
 
     public static ItemColors init(final BlockColors colors)
     {
         ItemColors itemcolors = new ItemColors();
         itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 return tintIndex > 0 ? -1 : ((ItemArmor)stack.getItem()).getColor(stack);
             }
         }, Items.LEATHER_HELMET, Items.LEATHER_CHESTPLATE, Items.LEATHER_LEGGINGS, Items.LEATHER_BOOTS);
-        itemcolors.registerItemColorHandler(
-            new IItemColor()
+        itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 BlockDoublePlant.EnumPlantType blockdoubleplant$enumplanttype = BlockDoublePlant.EnumPlantType.byMetadata(stack.getMetadata());
-                return blockdoubleplant$enumplanttype != BlockDoublePlant.EnumPlantType.GRASS
-                       && blockdoubleplant$enumplanttype != BlockDoublePlant.EnumPlantType.FERN
-                       ? -1
-                       : ColorizerGrass.getGrassColor(0.5, 1.0);
+                return blockdoubleplant$enumplanttype != BlockDoublePlant.EnumPlantType.GRASS && blockdoubleplant$enumplanttype != BlockDoublePlant.EnumPlantType.FERN ? -1 : ColorizerGrass.getGrassColor(0.5D, 1.0D);
             }
-        },
-        Blocks.DOUBLE_PLANT
-        );
+        }, Blocks.DOUBLE_PLANT);
         itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 if (tintIndex != 1)
@@ -85,14 +79,14 @@
 
                             for (int l : aint)
                             {
-                                i += (l & 0xFF0000) >> 16;
-                                j += (l & 0xFF00) >> 8;
-                                k += (l & 0xFF) >> 0;
+                                i += (l & 16711680) >> 16;
+                                j += (l & 65280) >> 8;
+                                k += (l & 255) >> 0;
                             }
 
-                            i /= aint.length;
-                            j /= aint.length;
-                            k /= aint.length;
+                            i = i / aint.length;
+                            j = j / aint.length;
+                            k = k / aint.length;
                             return i << 16 | j << 8 | k;
                         }
                     }
@@ -101,7 +95,6 @@
         }, Items.FIREWORK_CHARGE);
         itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 return tintIndex > 0 ? -1 : PotionUtils.getColor(stack);
@@ -109,7 +102,6 @@
         }, Items.POTIONITEM, Items.SPLASH_POTION, Items.LINGERING_POTION);
         itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 EntityList.EntityEggInfo entitylist$entityegginfo = EntityList.ENTITY_EGGS.get(ItemMonsterPlacer.getNamedIdFrom(stack));
@@ -126,16 +118,14 @@
         }, Items.SPAWN_EGG);
         itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 IBlockState iblockstate = ((ItemBlock)stack.getItem()).getBlock().getStateFromMeta(stack.getMetadata());
-                return colors.colorMultiplier(iblockstate, null, null, tintIndex);
+                return colors.colorMultiplier(iblockstate, (IBlockAccess)null, (BlockPos)null, tintIndex);
             }
         }, Blocks.GRASS, Blocks.TALLGRASS, Blocks.VINE, Blocks.LEAVES, Blocks.LEAVES2, Blocks.WATERLILY);
         itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 return tintIndex == 0 ? PotionUtils.getColor(stack) : -1;
@@ -143,18 +133,18 @@
         }, Items.TIPPED_ARROW);
         itemcolors.registerItemColorHandler(new IItemColor()
         {
-            @Override
             public int colorMultiplier(ItemStack stack, int tintIndex)
             {
                 return tintIndex == 0 ? -1 : ItemMap.getColor(stack);
             }
         }, Items.FILLED_MAP);
+        net.minecraftforge.client.ForgeHooksClient.onItemColorsInit(itemcolors, colors);
         return itemcolors;
     }
 
     public int colorMultiplier(ItemStack stack, int tintIndex)
     {
-        IItemColor iitemcolor = this.mapItemColors.getByValue(Item.REGISTRY.getIDForObject(stack.getItem()));
+        IItemColor iitemcolor = this.itemColorMap.get(stack.getItem().delegate);
         return iitemcolor == null ? -1 : iitemcolor.colorMultiplier(stack, tintIndex);
     }
 
@@ -162,7 +152,9 @@
     {
         for (Block block : blocksIn)
         {
-            this.mapItemColors.put(itemColor, Item.getIdFromItem(Item.getItemFromBlock(block)));
+            if (block == null) throw new IllegalArgumentException("Block registered to item color handler cannot be null!");
+            if (block.getRegistryName() == null) throw new IllegalArgumentException("Block must be registered before assigning color handler.");
+            this.itemColorMap.put(Item.getItemFromBlock(block).delegate, itemColor);
         }
     }
 
@@ -170,7 +162,9 @@
     {
         for (Item item : itemsIn)
         {
-            this.mapItemColors.put(itemColor, Item.getIdFromItem(item));
+            if (item == null) throw new IllegalArgumentException("Item registered to item color handler cannot be null!");
+            if (item.getRegistryName() == null) throw new IllegalArgumentException("Item must be registered before assigning color handler.");
+            this.itemColorMap.put(item.delegate, itemColor);
         }
     }
 }
