--- before/net/minecraft/client/renderer/BlockModelRenderer.java
+++ after/net/minecraft/client/renderer/BlockModelRenderer.java
@@ -33,50 +33,30 @@
         this.blockColors = blockColorsIn;
     }
 
-    public boolean renderModel(
-        IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder buffer, boolean checkSides
-    )
+    public boolean renderModel(IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder buffer, boolean checkSides)
     {
         return this.renderModel(blockAccessIn, modelIn, blockStateIn, blockPosIn, buffer, checkSides, MathHelper.getPositionRandom(blockPosIn));
     }
 
-    public boolean renderModel(
-        IBlockAccess worldIn,
-        IBakedModel modelIn,
-        IBlockState stateIn,
-        BlockPos posIn,
-        BufferBuilder buffer,
-        boolean checkSides,
-        long rand
-    )
+    public boolean renderModel(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
     {
-        boolean flag = Minecraft.isAmbientOcclusionEnabled() && stateIn.getLightValue() == 0 && modelIn.isAmbientOcclusion();
+        boolean flag = Minecraft.isAmbientOcclusionEnabled() && stateIn.getLightValue(worldIn, posIn) == 0 && modelIn.isAmbientOcclusion(stateIn);
 
         try
         {
-            return flag
-                   ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand)
-                   : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
+            return flag ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
         }
         catch (Throwable throwable)
         {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Tesselating block model");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Block model being tesselated");
             CrashReportCategory.addBlockInfo(crashreportcategory, posIn, stateIn);
-            crashreportcategory.addCrashSection("Using AO", flag);
+            crashreportcategory.addCrashSection("Using AO", Boolean.valueOf(flag));
             throw new ReportedException(crashreport);
         }
     }
 
-    public boolean renderModelSmooth(
-        IBlockAccess worldIn,
-        IBakedModel modelIn,
-        IBlockState stateIn,
-        BlockPos posIn,
-        BufferBuilder buffer,
-        boolean checkSides,
-        long rand
-    )
+    public boolean renderModelSmooth(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
     {
         boolean flag = false;
         float[] afloat = new float[EnumFacing.values().length * 2];
@@ -94,7 +74,7 @@
             }
         }
 
-        List<BakedQuad> list1 = modelIn.getQuads(stateIn, null, rand);
+        List<BakedQuad> list1 = modelIn.getQuads(stateIn, (EnumFacing)null, rand);
 
         if (!list1.isEmpty())
         {
@@ -105,15 +85,7 @@
         return flag;
     }
 
-    public boolean renderModelFlat(
-        IBlockAccess worldIn,
-        IBakedModel modelIn,
-        IBlockState stateIn,
-        BlockPos posIn,
-        BufferBuilder buffer,
-        boolean checkSides,
-        long rand
-    )
+    public boolean renderModelFlat(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
     {
         boolean flag = false;
         BitSet bitset = new BitSet(3);
@@ -130,7 +102,7 @@
             }
         }
 
-        List<BakedQuad> list1 = modelIn.getQuads(stateIn, null, rand);
+        List<BakedQuad> list1 = modelIn.getQuads(stateIn, (EnumFacing)null, rand);
 
         if (!list1.isEmpty())
         {
@@ -141,16 +113,7 @@
         return flag;
     }
 
-    private void renderQuadsSmooth(
-        IBlockAccess blockAccessIn,
-        IBlockState stateIn,
-        BlockPos posIn,
-        BufferBuilder buffer,
-        List<BakedQuad> list,
-        float[] quadBounds,
-        BitSet bitSet,
-        BlockModelRenderer.AmbientOcclusionFace aoFace
-    )
+    private void renderQuadsSmooth(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, List<BakedQuad> list, float[] quadBounds, BitSet bitSet, BlockModelRenderer.AmbientOcclusionFace aoFace)
     {
         Vec3d vec3d = stateIn.getOffset(blockAccessIn, posIn);
         double d0 = (double)posIn.getX() + vec3d.x;
@@ -158,14 +121,21 @@
         double d2 = (double)posIn.getZ() + vec3d.z;
         int i = 0;
 
-        for (int j = list.size(); i < j; i++)
+        for (int j = list.size(); i < j; ++i)
         {
             BakedQuad bakedquad = list.get(i);
             this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), quadBounds, bitSet);
             aoFace.updateVertexBrightness(blockAccessIn, stateIn, posIn, bakedquad.getFace(), quadBounds, bitSet);
             buffer.addVertexData(bakedquad.getVertexData());
             buffer.putBrightness4(aoFace.vertexBrightness[0], aoFace.vertexBrightness[1], aoFace.vertexBrightness[2], aoFace.vertexBrightness[3]);
-
+            if(bakedquad.shouldApplyDiffuseLighting())
+            {
+                float diffuse = net.minecraftforge.client.model.pipeline.LightUtil.diffuseLight(bakedquad.getFace());
+                aoFace.vertexColorMultiplier[0] *= diffuse;
+                aoFace.vertexColorMultiplier[1] *= diffuse;
+                aoFace.vertexColorMultiplier[2] *= diffuse;
+                aoFace.vertexColorMultiplier[3] *= diffuse;
+            }
             if (bakedquad.hasTintIndex())
             {
                 int k = this.blockColors.colorMultiplier(stateIn, blockAccessIn, posIn, bakedquad.getTintIndex());
@@ -175,9 +145,9 @@
                     k = TextureUtil.anaglyphColor(k);
                 }
 
-                float f = (float)(k >> 16 & 0xFF) / 255.0F;
-                float f1 = (float)(k >> 8 & 0xFF) / 255.0F;
-                float f2 = (float)(k & 0xFF) / 255.0F;
+                float f = (float)(k >> 16 & 255) / 255.0F;
+                float f1 = (float)(k >> 8 & 255) / 255.0F;
+                float f2 = (float)(k & 255) / 255.0F;
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[0] * f, aoFace.vertexColorMultiplier[0] * f1, aoFace.vertexColorMultiplier[0] * f2, 4);
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[1] * f, aoFace.vertexColorMultiplier[1] * f1, aoFace.vertexColorMultiplier[1] * f2, 3);
                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[2] * f, aoFace.vertexColorMultiplier[2] * f1, aoFace.vertexColorMultiplier[2] * f2, 2);
@@ -204,7 +174,7 @@
         float f4 = -32.0F;
         float f5 = -32.0F;
 
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             float f6 = Float.intBitsToFloat(vertexData[i * 7]);
             float f7 = Float.intBitsToFloat(vertexData[i * 7 + 1]);
@@ -265,16 +235,7 @@
         }
     }
 
-    private void renderQuadsFlat(
-        IBlockAccess blockAccessIn,
-        IBlockState stateIn,
-        BlockPos posIn,
-        int brightnessIn,
-        boolean ownBrightness,
-        BufferBuilder buffer,
-        List<BakedQuad> list,
-        BitSet bitSet
-    )
+    private void renderQuadsFlat(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, int brightnessIn, boolean ownBrightness, BufferBuilder buffer, List<BakedQuad> list, BitSet bitSet)
     {
         Vec3d vec3d = stateIn.getOffset(blockAccessIn, posIn);
         double d0 = (double)posIn.getX() + vec3d.x;
@@ -282,13 +243,13 @@
         double d2 = (double)posIn.getZ() + vec3d.z;
         int i = 0;
 
-        for (int j = list.size(); i < j; i++)
+        for (int j = list.size(); i < j; ++i)
         {
             BakedQuad bakedquad = list.get(i);
 
             if (ownBrightness)
             {
-                this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), null, bitSet);
+                this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitSet);
                 BlockPos blockpos = bitSet.get(0) ? posIn.offset(bakedquad.getFace()) : posIn;
                 brightnessIn = stateIn.getPackedLightmapCoords(blockAccessIn, blockpos);
             }
@@ -305,14 +266,29 @@
                     k = TextureUtil.anaglyphColor(k);
                 }
 
-                float f = (float)(k >> 16 & 0xFF) / 255.0F;
-                float f1 = (float)(k >> 8 & 0xFF) / 255.0F;
-                float f2 = (float)(k & 0xFF) / 255.0F;
+                float f = (float)(k >> 16 & 255) / 255.0F;
+                float f1 = (float)(k >> 8 & 255) / 255.0F;
+                float f2 = (float)(k & 255) / 255.0F;
+                if(bakedquad.shouldApplyDiffuseLighting())
+                {
+                    float diffuse = net.minecraftforge.client.model.pipeline.LightUtil.diffuseLight(bakedquad.getFace());
+                    f *= diffuse;
+                    f1 *= diffuse;
+                    f2 *= diffuse;
+                }
                 buffer.putColorMultiplier(f, f1, f2, 4);
                 buffer.putColorMultiplier(f, f1, f2, 3);
                 buffer.putColorMultiplier(f, f1, f2, 2);
                 buffer.putColorMultiplier(f, f1, f2, 1);
             }
+            else if(bakedquad.shouldApplyDiffuseLighting())
+            {
+                float diffuse = net.minecraftforge.client.model.pipeline.LightUtil.diffuseLight(bakedquad.getFace());
+                buffer.putColorMultiplier(diffuse, diffuse, diffuse, 4);
+                buffer.putColorMultiplier(diffuse, diffuse, diffuse, 3);
+                buffer.putColorMultiplier(diffuse, diffuse, diffuse, 2);
+                buffer.putColorMultiplier(diffuse, diffuse, diffuse, 1);
+            }
 
             buffer.putPosition(d0, d1, d2);
         }
@@ -320,7 +296,7 @@
 
     public void renderModelBrightnessColor(IBakedModel bakedModel, float p_178262_2_, float red, float green, float blue)
     {
-        this.renderModelBrightnessColor(null, bakedModel, p_178262_2_, red, green, blue);
+        this.renderModelBrightnessColor((IBlockState)null, bakedModel, p_178262_2_, red, green, blue);
     }
 
     public void renderModelBrightnessColor(IBlockState state, IBakedModel p_187495_2_, float p_187495_3_, float p_187495_4_, float p_187495_5_, float p_187495_6_)
@@ -330,23 +306,23 @@
             this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, enumfacing, 0L));
         }
 
-        this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, null, 0L));
+        this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, (EnumFacing)null, 0L));
     }
 
     public void renderModelBrightness(IBakedModel model, IBlockState state, float brightness, boolean p_178266_4_)
     {
         Block block = state.getBlock();
         GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
-        int i = this.blockColors.colorMultiplier(state, null, null, 0);
+        int i = this.blockColors.colorMultiplier(state, (IBlockAccess)null, (BlockPos)null, 0);
 
         if (EntityRenderer.anaglyphEnable)
         {
             i = TextureUtil.anaglyphColor(i);
         }
 
-        float f = (float)(i >> 16 & 0xFF) / 255.0F;
-        float f1 = (float)(i >> 8 & 0xFF) / 255.0F;
-        float f2 = (float)(i & 0xFF) / 255.0F;
+        float f = (float)(i >> 16 & 255) / 255.0F;
+        float f1 = (float)(i >> 8 & 255) / 255.0F;
+        float f2 = (float)(i & 255) / 255.0F;
 
         if (!p_178266_4_)
         {
@@ -362,7 +338,7 @@
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         int i = 0;
 
-        for (int j = listQuads.size(); i < j; i++)
+        for (int j = listQuads.size(); i < j; ++i)
         {
             BakedQuad bakedquad = listQuads.get(i);
             bufferbuilder.begin(7, DefaultVertexFormats.ITEM);
@@ -389,25 +365,15 @@
         private final float[] vertexColorMultiplier = new float[4];
         private final int[] vertexBrightness = new int[4];
 
-        public AmbientOcclusionFace()
-        {
-        }
-
-        public void updateVertexBrightness(
-            IBlockAccess worldIn, IBlockState state, BlockPos centerPos, EnumFacing direction, float[] faceShape, BitSet shapeState
-        )
+        public void updateVertexBrightness(IBlockAccess worldIn, IBlockState state, BlockPos centerPos, EnumFacing direction, float[] faceShape, BitSet shapeState)
         {
             BlockPos blockpos = shapeState.get(0) ? centerPos.offset(direction) : centerPos;
             BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
             BlockModelRenderer.EnumNeighborInfo blockmodelrenderer$enumneighborinfo = BlockModelRenderer.EnumNeighborInfo.getNeighbourInfo(direction);
-            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos1 = BlockPos.PooledMutableBlockPos.retain(blockpos)
-                    .move(blockmodelrenderer$enumneighborinfo.corners[0]);
-            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos2 = BlockPos.PooledMutableBlockPos.retain(blockpos)
-                    .move(blockmodelrenderer$enumneighborinfo.corners[1]);
-            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos3 = BlockPos.PooledMutableBlockPos.retain(blockpos)
-                    .move(blockmodelrenderer$enumneighborinfo.corners[2]);
-            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos4 = BlockPos.PooledMutableBlockPos.retain(blockpos)
-                    .move(blockmodelrenderer$enumneighborinfo.corners[3]);
+            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos1 = BlockPos.PooledMutableBlockPos.retain(blockpos).move(blockmodelrenderer$enumneighborinfo.corners[0]);
+            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos2 = BlockPos.PooledMutableBlockPos.retain(blockpos).move(blockmodelrenderer$enumneighborinfo.corners[1]);
+            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos3 = BlockPos.PooledMutableBlockPos.retain(blockpos).move(blockmodelrenderer$enumneighborinfo.corners[2]);
+            BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos4 = BlockPos.PooledMutableBlockPos.retain(blockpos).move(blockmodelrenderer$enumneighborinfo.corners[3]);
             int i = state.getPackedLightmapCoords(worldIn, blockpos$pooledmutableblockpos1);
             int j = state.getPackedLightmapCoords(worldIn, blockpos$pooledmutableblockpos2);
             int k = state.getPackedLightmapCoords(worldIn, blockpos$pooledmutableblockpos3);
@@ -416,14 +382,10 @@
             float f1 = worldIn.getBlockState(blockpos$pooledmutableblockpos2).getAmbientOcclusionLightValue();
             float f2 = worldIn.getBlockState(blockpos$pooledmutableblockpos3).getAmbientOcclusionLightValue();
             float f3 = worldIn.getBlockState(blockpos$pooledmutableblockpos4).getAmbientOcclusionLightValue();
-            boolean flag = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(direction))
-                           .isTranslucent();
-            boolean flag1 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(direction))
-                            .isTranslucent();
-            boolean flag2 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos3).move(direction))
-                            .isTranslucent();
-            boolean flag3 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos4).move(direction))
-                            .isTranslucent();
+            boolean flag = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(direction)).isTranslucent();
+            boolean flag1 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(direction)).isTranslucent();
+            boolean flag2 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos3).move(direction)).isTranslucent();
+            boolean flag3 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos4).move(direction)).isTranslucent();
             float f4;
             int i1;
 
@@ -434,8 +396,7 @@
             }
             else
             {
-                BlockPos blockpos1 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1)
-                                     .move(blockmodelrenderer$enumneighborinfo.corners[2]);
+                BlockPos blockpos1 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[2]);
                 f4 = worldIn.getBlockState(blockpos1).getAmbientOcclusionLightValue();
                 i1 = state.getPackedLightmapCoords(worldIn, blockpos1);
             }
@@ -450,8 +411,7 @@
             }
             else
             {
-                BlockPos blockpos2 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1)
-                                     .move(blockmodelrenderer$enumneighborinfo.corners[3]);
+                BlockPos blockpos2 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[3]);
                 f5 = worldIn.getBlockState(blockpos2).getAmbientOcclusionLightValue();
                 j1 = state.getPackedLightmapCoords(worldIn, blockpos2);
             }
@@ -466,8 +426,7 @@
             }
             else
             {
-                BlockPos blockpos3 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2)
-                                     .move(blockmodelrenderer$enumneighborinfo.corners[2]);
+                BlockPos blockpos3 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[2]);
                 f6 = worldIn.getBlockState(blockpos3).getAmbientOcclusionLightValue();
                 k1 = state.getPackedLightmapCoords(worldIn, blockpos3);
             }
@@ -482,8 +441,7 @@
             }
             else
             {
-                BlockPos blockpos4 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2)
-                                     .move(blockmodelrenderer$enumneighborinfo.corners[3]);
+                BlockPos blockpos4 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[3]);
                 f7 = worldIn.getBlockState(blockpos4).getAmbientOcclusionLightValue();
                 l1 = state.getPackedLightmapCoords(worldIn, blockpos4);
             }
@@ -509,38 +467,22 @@
                 float f30 = (f2 + f + f4 + f8) * 0.25F;
                 float f31 = (f2 + f1 + f6 + f8) * 0.25F;
                 float f32 = (f3 + f1 + f7 + f8) * 0.25F;
-                float f13 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[0].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[1].shape];
-                float f14 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[2].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[3].shape];
-                float f15 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[4].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[5].shape];
-                float f16 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[6].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[7].shape];
-                float f17 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[0].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[1].shape];
-                float f18 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[2].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[3].shape];
-                float f19 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[4].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[5].shape];
-                float f20 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[6].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[7].shape];
-                float f21 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[0].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[1].shape];
-                float f22 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[2].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[3].shape];
-                float f23 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[4].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[5].shape];
-                float f24 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[6].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[7].shape];
-                float f25 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[0].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[1].shape];
-                float f26 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[2].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[3].shape];
-                float f27 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[4].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[5].shape];
-                float f28 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[6].shape]
-                            * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[7].shape];
+                float f13 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[1].shape];
+                float f14 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[3].shape];
+                float f15 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[5].shape];
+                float f16 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[7].shape];
+                float f17 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[1].shape];
+                float f18 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[3].shape];
+                float f19 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[5].shape];
+                float f20 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[7].shape];
+                float f21 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[1].shape];
+                float f22 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[3].shape];
+                float f23 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[5].shape];
+                float f24 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[7].shape];
+                float f25 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[1].shape];
+                float f26 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[3].shape];
+                float f27 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[5].shape];
+                float f28 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[7].shape];
                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f29 * f13 + f30 * f14 + f31 * f15 + f32 * f16;
                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f29 * f17 + f30 * f18 + f31 * f19 + f32 * f20;
                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f29 * f21 + f30 * f22 + f31 * f23 + f32 * f24;
@@ -591,24 +533,10 @@
             return br1 + br2 + br3 + br4 >> 2 & 16711935;
         }
 
-        private int getVertexBrightness(
-            int p_178203_1_, int p_178203_2_, int p_178203_3_, int p_178203_4_, float p_178203_5_, float p_178203_6_, float p_178203_7_, float p_178203_8_
-        )
+        private int getVertexBrightness(int p_178203_1_, int p_178203_2_, int p_178203_3_, int p_178203_4_, float p_178203_5_, float p_178203_6_, float p_178203_7_, float p_178203_8_)
         {
-            int i = (int)(
-                        (float)(p_178203_1_ >> 16 & 0xFF) * p_178203_5_
-                        + (float)(p_178203_2_ >> 16 & 0xFF) * p_178203_6_
-                        + (float)(p_178203_3_ >> 16 & 0xFF) * p_178203_7_
-                        + (float)(p_178203_4_ >> 16 & 0xFF) * p_178203_8_
-                    )
-                    & 0xFF;
-            int j = (int)(
-                        (float)(p_178203_1_ & 0xFF) * p_178203_5_
-                        + (float)(p_178203_2_ & 0xFF) * p_178203_6_
-                        + (float)(p_178203_3_ & 0xFF) * p_178203_7_
-                        + (float)(p_178203_4_ & 0xFF) * p_178203_8_
-                    )
-                    & 0xFF;
+            int i = (int)((float)(p_178203_1_ >> 16 & 255) * p_178203_5_ + (float)(p_178203_2_ >> 16 & 255) * p_178203_6_ + (float)(p_178203_3_ >> 16 & 255) * p_178203_7_ + (float)(p_178203_4_ >> 16 & 255) * p_178203_8_) & 255;
+            int j = (int)((float)(p_178203_1_ & 255) * p_178203_5_ + (float)(p_178203_2_ & 255) * p_178203_6_ + (float)(p_178203_3_ & 255) * p_178203_7_ + (float)(p_178203_4_ & 255) * p_178203_8_) & 255;
             return i << 16 | j;
         }
     }
@@ -616,276 +544,12 @@
     @SideOnly(Side.CLIENT)
     public static enum EnumNeighborInfo
     {
-        DOWN(
-            new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.NORTH, EnumFacing.SOUTH},
-            0.5F,
-            true,
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.SOUTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.SOUTH
-            }
-        ),
-        UP(
-            new EnumFacing[]{EnumFacing.EAST, EnumFacing.WEST, EnumFacing.NORTH, EnumFacing.SOUTH},
-            1.0F,
-            true,
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.SOUTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.SOUTH
-            }
-        ),
-        NORTH(
-            new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.EAST, EnumFacing.WEST},
-            0.8F,
-            true,
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_WEST
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_EAST
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_EAST
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_WEST
-            }
-        ),
-        SOUTH(
-            new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.DOWN, EnumFacing.UP},
-            0.8F,
-            true,
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.WEST
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_WEST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.WEST,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.WEST
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.EAST
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_EAST,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.EAST,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.EAST
-            }
-        ),
-        WEST(
-            new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.NORTH, EnumFacing.SOUTH},
-            0.6F,
-            true,
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.SOUTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.SOUTH
-            }
-        ),
-        EAST(
-            new EnumFacing[]{EnumFacing.DOWN, EnumFacing.UP, EnumFacing.NORTH, EnumFacing.SOUTH},
-            0.6F,
-            true,
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.SOUTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.FLIP_DOWN,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.DOWN,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.NORTH,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_NORTH,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.NORTH
-            },
-            new BlockModelRenderer.Orientation[]{
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.SOUTH,
-                BlockModelRenderer.Orientation.FLIP_UP,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.FLIP_SOUTH,
-                BlockModelRenderer.Orientation.UP,
-                BlockModelRenderer.Orientation.SOUTH
-            }
-        );
+        DOWN(new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.5F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.SOUTH}),
+        UP(new EnumFacing[]{EnumFacing.EAST, EnumFacing.WEST, EnumFacing.NORTH, EnumFacing.SOUTH}, 1.0F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.SOUTH}),
+        NORTH(new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.EAST, EnumFacing.WEST}, 0.8F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_WEST}),
+        SOUTH(new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.DOWN, EnumFacing.UP}, 0.8F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.EAST}),
+        WEST(new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.6F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.SOUTH}),
+        EAST(new EnumFacing[]{EnumFacing.DOWN, EnumFacing.UP, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.6F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.SOUTH});
 
         private final EnumFacing[] corners;
         private final float shadeWeight;
@@ -896,15 +560,7 @@
         private final BlockModelRenderer.Orientation[] vert3Weights;
         private static final BlockModelRenderer.EnumNeighborInfo[] VALUES = new BlockModelRenderer.EnumNeighborInfo[6];
 
-        private EnumNeighborInfo(
-            EnumFacing[] p_i46236_3_,
-            float p_i46236_4_,
-            boolean p_i46236_5_,
-            BlockModelRenderer.Orientation[] p_i46236_6_,
-            BlockModelRenderer.Orientation[] p_i46236_7_,
-            BlockModelRenderer.Orientation[] p_i46236_8_,
-            BlockModelRenderer.Orientation[] p_i46236_9_
-        )
+        private EnumNeighborInfo(EnumFacing[] p_i46236_3_, float p_i46236_4_, boolean p_i46236_5_, BlockModelRenderer.Orientation[] p_i46236_6_, BlockModelRenderer.Orientation[] p_i46236_7_, BlockModelRenderer.Orientation[] p_i46236_8_, BlockModelRenderer.Orientation[] p_i46236_9_)
         {
             this.corners = p_i46236_3_;
             this.shadeWeight = p_i46236_4_;
