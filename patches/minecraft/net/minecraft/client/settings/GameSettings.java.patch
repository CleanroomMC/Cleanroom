--- before/net/minecraft/client/settings/GameSettings.java
+++ after/net/minecraft/client/settings/GameSettings.java
@@ -52,35 +52,26 @@
     private static final Gson field_151450_ay = new Gson();
     private static final Type field_151449_az = new ParameterizedType()
     {
-        @Override
         public Type[] getActualTypeArguments()
         {
             return new Type[] {String.class};
         }
-        @Override
         public Type getRawType()
         {
             return List.class;
         }
-        @Override
         public Type getOwnerType()
         {
             return null;
         }
     };
     public static final Splitter field_189990_a = Splitter.on(':');
-    private static final String[] field_74367_ae = new String[]
-        {
-            "options.guiScale.auto", "options.guiScale.small", "options.guiScale.normal", "options.guiScale.large"
-        };
+    private static final String[] field_74367_ae = new String[] {"options.guiScale.auto", "options.guiScale.small", "options.guiScale.normal", "options.guiScale.large"};
     private static final String[] field_74364_ag = new String[] {"options.particles.all", "options.particles.decreased", "options.particles.minimal"};
     private static final String[] field_98303_au = new String[] {"options.ao.off", "options.ao.min", "options.ao.max"};
     private static final String[] field_181149_aW = new String[] {"options.off", "options.clouds.fast", "options.clouds.fancy"};
     private static final String[] field_186713_aK = new String[] {"options.off", "options.attack.crosshair", "options.attack.hotbar"};
-    public static final String[] field_193632_b = new String[]
-        {
-            "options.narrator.off", "options.narrator.all", "options.narrator.chat", "options.narrator.system"
-        };
+    public static final String[] field_193632_b = new String[] {"options.narrator.off", "options.narrator.all", "options.narrator.chat", "options.narrator.system"};
     public float field_74341_c = 0.5F;
     public boolean field_74338_d;
     public int field_151451_c = -1;
@@ -91,8 +82,8 @@
     public int field_74345_l = 2;
     public boolean field_74347_j = true;
     public int field_74348_k = 2;
-    public List<String> field_151453_l = Lists.newArrayList();
-    public List<String> field_183018_l = Lists.newArrayList();
+    public List<String> field_151453_l = Lists.<String>newArrayList();
+    public List<String> field_183018_l = Lists.<String>newArrayList();
     public EntityPlayer.EnumChatVisibility field_74343_n = EntityPlayer.EnumChatVisibility.FULL;
     public boolean field_74344_o = true;
     public boolean field_74359_p = true;
@@ -148,72 +139,38 @@
     public KeyBinding field_152395_am = new KeyBinding("key.fullscreen", 87, "key.categories.misc");
     public KeyBinding field_178883_an = new KeyBinding("key.spectatorOutlines", 0, "key.categories.misc");
     public KeyBinding field_194146_ao = new KeyBinding("key.advancements", 38, "key.categories.misc");
-    public KeyBinding[] field_151456_ac = new KeyBinding[]
-    {
-        new KeyBinding("key.hotbar.1", 2, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.2", 3, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.3", 4, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.4", 5, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.5", 6, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.6", 7, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.7", 8, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.8", 9, "key.categories.inventory"),
-        new KeyBinding("key.hotbar.9", 10, "key.categories.inventory")
-    };
+    public KeyBinding[] field_151456_ac = new KeyBinding[] {new KeyBinding("key.hotbar.1", 2, "key.categories.inventory"), new KeyBinding("key.hotbar.2", 3, "key.categories.inventory"), new KeyBinding("key.hotbar.3", 4, "key.categories.inventory"), new KeyBinding("key.hotbar.4", 5, "key.categories.inventory"), new KeyBinding("key.hotbar.5", 6, "key.categories.inventory"), new KeyBinding("key.hotbar.6", 7, "key.categories.inventory"), new KeyBinding("key.hotbar.7", 8, "key.categories.inventory"), new KeyBinding("key.hotbar.8", 9, "key.categories.inventory"), new KeyBinding("key.hotbar.9", 10, "key.categories.inventory")};
     public KeyBinding field_193629_ap = new KeyBinding("key.saveToolbarActivator", 46, "key.categories.creative");
     public KeyBinding field_193630_aq = new KeyBinding("key.loadToolbarActivator", 45, "key.categories.creative");
-    public KeyBinding[] field_74324_K = ArrayUtils.addAll(
-                                            new KeyBinding[]
-                                            {
-                                                this.field_74312_F,
-                                                this.field_74313_G,
-                                                this.field_74351_w,
-                                                this.field_74370_x,
-                                                this.field_74368_y,
-                                                this.field_74366_z,
-                                                this.field_74314_A,
-                                                this.field_74311_E,
-                                                this.field_151444_V,
-                                                this.field_74316_C,
-                                                this.field_151445_Q,
-                                                this.field_74310_D,
-                                                this.field_74321_H,
-                                                this.field_74322_I,
-                                                this.field_74323_J,
-                                                this.field_151447_Z,
-                                                this.field_151457_aa,
-                                                this.field_151458_ab,
-                                                this.field_152395_am,
-                                                this.field_178883_an,
-                                                this.field_186718_X,
-                                                this.field_193629_ap,
-                                                this.field_193630_aq,
-                                                this.field_194146_ao
-                                            },
-                                            this.field_151456_ac
-                                        );
+    public KeyBinding[] field_74324_K;
     protected Minecraft field_74317_L;
     private File field_74354_ai;
-    public EnumDifficulty field_74318_M = EnumDifficulty.NORMAL;
+    public EnumDifficulty field_74318_M;
     public boolean field_74319_N;
     public int field_74320_O;
     public boolean field_74330_P;
     public boolean field_74329_Q;
     public boolean field_181657_aC;
-    public String field_74332_R = "";
+    public String field_74332_R;
     public boolean field_74326_T;
     public boolean field_74325_U;
-    public float field_74334_X = 70.0F;
+    public float field_74334_X;
     public float field_74333_Y;
     public float field_151452_as;
     public int field_74335_Z;
     public int field_74362_aa;
     public int field_192571_R;
-    public String field_74363_ab = "en_us";
+    public String field_74363_ab;
     public boolean field_151455_aw;
 
     public GameSettings(Minecraft p_i46326_1_, File p_i46326_2_)
     {
+        setForgeKeybindProperties();
+        this.field_74324_K = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152395_am, this.field_178883_an, this.field_186718_X, this.field_193629_ap, this.field_193630_aq, this.field_194146_ao}, this.field_151456_ac);
+        this.field_74318_M = EnumDifficulty.NORMAL;
+        this.field_74332_R = "";
+        this.field_74334_X = 70.0F;
+        this.field_74363_ab = "en_us";
         this.field_74317_L = p_i46326_1_;
         this.field_74354_ai = new File(p_i46326_2_, "options.txt");
 
@@ -232,6 +189,12 @@
 
     public GameSettings()
     {
+        setForgeKeybindProperties();
+        this.field_74324_K = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152395_am, this.field_178883_an, this.field_186718_X, this.field_193629_ap, this.field_193630_aq, this.field_194146_ao}, this.field_151456_ac);
+        this.field_74318_M = EnumDifficulty.NORMAL;
+        this.field_74332_R = "";
+        this.field_74334_X = 70.0F;
+        this.field_74363_ab = "en_us";
     }
 
     public static String func_74298_c(int p_74298_0_)
@@ -260,14 +223,14 @@
     {
         int i = p_100015_0_.func_151463_i();
 
-        if (i == 0 || i >= 256)
-        {
-            return false;
-        }
-        else
+        if (i != 0 && i < 256)
         {
             return i < 0 ? Mouse.isButtonDown(i + 100) : Keyboard.isKeyDown(i);
         }
+        else
+        {
+            return false;
+        }
     }
 
     public void func_151440_a(KeyBinding p_151440_1_, int p_151440_2_)
@@ -338,7 +301,7 @@
                 this.field_74317_L.func_147117_R().func_147633_a(this.field_151442_I);
                 this.field_74317_L.func_110434_K().func_110577_a(TextureMap.field_110575_b);
                 this.field_74317_L.func_147117_R().func_174937_a(false, this.field_151442_I > 0);
-                this.field_74317_L.func_175603_A();
+                this.needsBlockModelRefresh = true; // FORGE: fix for MC-64581 very laggy mipmap slider
             }
         }
 
@@ -353,9 +316,7 @@
     {
         if (p_74306_1_ == GameSettings.Options.RENDER_DISTANCE)
         {
-            this.func_74304_a(
-                p_74306_1_, MathHelper.func_76131_a((float)(this.field_151451_c + p_74306_2_), p_74306_1_.func_186707_e(), p_74306_1_.func_148267_f())
-            );
+            this.func_74304_a(p_74306_1_, MathHelper.func_76131_a((float)(this.field_151451_c + p_74306_2_), p_74306_1_.func_186707_e(), p_74306_1_.func_148267_f()));
         }
 
         if (p_74306_1_ == GameSettings.Options.MAIN_HAND)
@@ -402,7 +363,7 @@
         if (p_74306_1_ == GameSettings.Options.ANAGLYPH)
         {
             this.field_74337_g = !this.field_74337_g;
-            this.field_74317_L.func_110436_a();
+            net.minecraftforge.fml.client.FMLClientHandler.instance().refreshResources(net.minecraftforge.client.resource.VanillaResourceType.TEXTURES);
         }
 
         if (p_74306_1_ == GameSettings.Options.GRAPHICS)
@@ -658,9 +619,7 @@
             }
             else if (p_74297_1_ == GameSettings.Options.FRAMERATE_LIMIT)
             {
-                return f1 == p_74297_1_.field_148272_O
-                       ? s + I18n.func_135052_a("options.framerateLimit.max")
-                       : s + I18n.func_135052_a("options.framerate", (int)f1);
+                return f1 == p_74297_1_.field_148272_O ? s + I18n.func_135052_a("options.framerateLimit.max") : s + I18n.func_135052_a("options.framerate", (int)f1);
             }
             else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS)
             {
@@ -757,9 +716,7 @@
         }
         else if (p_74297_1_ == GameSettings.Options.NARRATOR)
         {
-            return NarratorChatListener.field_193643_a.func_193640_a()
-                   ? s + func_74299_a(field_193632_b, this.field_192571_R)
-                   : s + I18n.func_135052_a("options.narrator.notavailable");
+            return NarratorChatListener.field_193643_a.func_193640_a() ? s + func_74299_a(field_193632_b, this.field_192571_R) : s + I18n.func_135052_a("options.narrator.notavailable");
         }
         else
         {
@@ -769,6 +726,7 @@
 
     public void func_74300_a()
     {
+        FileInputStream fileInputStream = null; // Forge: fix MC-151173
         try
         {
             if (!this.field_74354_ai.exists())
@@ -777,7 +735,7 @@
             }
 
             this.field_186714_aM.clear();
-            List<String> list = IOUtils.readLines(new FileInputStream(this.field_74354_ai));
+            List<String> list = IOUtils.readLines(fileInputStream = new FileInputStream(this.field_74354_ai), StandardCharsets.UTF_8); // Forge: fix MC-117449, MC-151173
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
             for (String s : list)
@@ -787,9 +745,9 @@
                     Iterator<String> iterator = field_189990_a.omitEmptyStrings().limit(2).split(s).iterator();
                     nbttagcompound.func_74778_a(iterator.next(), iterator.next());
                 }
-                catch (Exception exception)
+                catch (Exception var10)
                 {
-                    field_151454_ax.warn("Skipping bad option: {}", s);
+                    field_151454_ax.warn("Skipping bad option: {}", (Object)s);
                 }
             }
 
@@ -926,21 +884,21 @@
 
                     if ("resourcePacks".equals(s1))
                     {
-                        this.field_151453_l = JsonUtils.func_193840_a(field_151450_ay, s2, field_151449_az);
+                        this.field_151453_l = (List)JsonUtils.func_193840_a(field_151450_ay, s2, field_151449_az);
 
                         if (this.field_151453_l == null)
                         {
-                            this.field_151453_l = Lists.newArrayList();
+                            this.field_151453_l = Lists.<String>newArrayList();
                         }
                     }
 
                     if ("incompatibleResourcePacks".equals(s1))
                     {
-                        this.field_183018_l = JsonUtils.func_193840_a(field_151450_ay, s2, field_151449_az);
+                        this.field_183018_l = (List)JsonUtils.func_193840_a(field_151450_ay, s2, field_151449_az);
 
                         if (this.field_183018_l == null)
                         {
-                            this.field_183018_l = Lists.newArrayList();
+                            this.field_183018_l = Lists.<String>newArrayList();
                         }
                     }
 
@@ -1113,7 +1071,12 @@
                     {
                         if (s1.equals("key_" + keybinding.func_151464_g()))
                         {
-                            keybinding.func_151462_b(Integer.parseInt(s2));
+                            if (s2.indexOf(':') != -1)
+                            {
+                                String[] t = s2.split(":");
+                                keybinding.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.valueFromString(t[1]), Integer.parseInt(t[0]));
+                            } else
+                            keybinding.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.NONE, Integer.parseInt(s2));
                         }
                     }
 
@@ -1121,7 +1084,7 @@
                     {
                         if (s1.equals("soundCategory_" + soundcategory.func_187948_a()))
                         {
-                            this.field_186714_aM.put(soundcategory, this.func_74305_a(s2));
+                            this.field_186714_aM.put(soundcategory, Float.valueOf(this.func_74305_a(s2)));
                         }
                     }
 
@@ -1133,7 +1096,7 @@
                         }
                     }
                 }
-                catch (Exception exception1)
+                catch (Exception var11)
                 {
                     field_151454_ax.warn("Skipping bad option: {}:{}", s1, s2);
                 }
@@ -1141,10 +1104,11 @@
 
             KeyBinding.func_74508_b();
         }
-        catch (Exception exception2)
+        catch (Exception exception)
         {
-            field_151454_ax.error("Failed to load options", (Throwable)exception2);
+            field_151454_ax.error("Failed to load options", (Throwable)exception);
         }
+        finally { IOUtils.closeQuietly(fileInputStream); } // Forge: fix MC-151173
     }
 
     private NBTTagCompound func_189988_a(NBTTagCompound p_189988_1_)
@@ -1155,8 +1119,9 @@
         {
             i = Integer.parseInt(p_189988_1_.func_74779_i("version"));
         }
-        catch (RuntimeException runtimeexception)
+        catch (RuntimeException var4)
         {
+            ;
         }
 
         return this.field_74317_L.func_184126_aj().func_188251_a(FixTypes.OPTIONS, p_189988_1_, i);
@@ -1176,6 +1141,7 @@
 
     public void func_74303_b()
     {
+        if (net.minecraftforge.fml.client.FMLClientHandler.instance().isLoading()) return;
         PrintWriter printwriter = null;
 
         try
@@ -1250,7 +1216,8 @@
 
             for (KeyBinding keybinding : this.field_74324_K)
             {
-                printwriter.println("key_" + keybinding.func_151464_g() + ":" + keybinding.func_151463_i());
+                String keyString = "key_" + keybinding.func_151464_g() + ":" + keybinding.func_151463_i();
+                printwriter.println(keybinding.getKeyModifier() != net.minecraftforge.client.settings.KeyModifier.NONE ? keyString + ":" + keybinding.getKeyModifier() : keyString);
             }
 
             for (SoundCategory soundcategory : SoundCategory.values())
@@ -1277,13 +1244,13 @@
 
     public float func_186711_a(SoundCategory p_186711_1_)
     {
-        return this.field_186714_aM.containsKey(p_186711_1_) ? this.field_186714_aM.get(p_186711_1_) : 1.0F;
+        return this.field_186714_aM.containsKey(p_186711_1_) ? ((Float)this.field_186714_aM.get(p_186711_1_)).floatValue() : 1.0F;
     }
 
     public void func_186712_a(SoundCategory p_186712_1_, float p_186712_2_)
     {
         this.field_74317_L.func_147118_V().func_184399_a(p_186712_1_, p_186712_2_);
-        this.field_186714_aM.put(p_186712_1_, p_186712_2_);
+        this.field_186714_aM.put(p_186712_1_, Float.valueOf(p_186712_2_));
     }
 
     public void func_82879_c()
@@ -1297,10 +1264,7 @@
                 i |= enumplayermodelparts.func_179327_a();
             }
 
-            this.field_74317_L
-            .field_71439_g
-            .field_71174_a
-            .func_147297_a(new CPacketClientSettings(this.field_74363_ab, this.field_151451_c, this.field_74343_n, this.field_74344_o, i, this.field_186715_A));
+            this.field_74317_L.field_71439_g.field_71174_a.func_147297_a(new CPacketClientSettings(this.field_74363_ab, this.field_151451_c, this.field_74343_n, this.field_74344_o, i, this.field_186715_A));
         }
     }
 
@@ -1487,4 +1451,35 @@
             return p_148264_1_;
         }
     }
+
+    /******* Forge Start ***********/
+    private void setForgeKeybindProperties() {
+        net.minecraftforge.client.settings.KeyConflictContext inGame = net.minecraftforge.client.settings.KeyConflictContext.IN_GAME;
+        field_74351_w.setKeyConflictContext(inGame);
+        field_74370_x.setKeyConflictContext(inGame);
+        field_74368_y.setKeyConflictContext(inGame);
+        field_74366_z.setKeyConflictContext(inGame);
+        field_74314_A.setKeyConflictContext(inGame);
+        field_74311_E.setKeyConflictContext(inGame);
+        field_151444_V.setKeyConflictContext(inGame);
+        field_74312_F.setKeyConflictContext(inGame);
+        field_74310_D.setKeyConflictContext(inGame);
+        field_74321_H.setKeyConflictContext(inGame);
+        field_74323_J.setKeyConflictContext(inGame);
+        field_151457_aa.setKeyConflictContext(inGame);
+        field_151458_ab.setKeyConflictContext(inGame);
+        field_186718_X.setKeyConflictContext(inGame);
+    }
+
+    // FORGE: fix for MC-64581 very laggy mipmap slider
+    private boolean needsBlockModelRefresh = false;
+    public void onGuiClosed()
+    {
+        if (needsBlockModelRefresh)
+        {
+            net.minecraftforge.fml.client.FMLClientHandler.instance().scheduleResourcesRefresh(net.minecraftforge.client.resource.VanillaResourceType.MODELS);
+            this.needsBlockModelRefresh = false;
+        }
+    }
+    /******* Forge End ***********/
 }
