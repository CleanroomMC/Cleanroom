--- before/net/minecraft/client/particle/Particle.java
+++ after/net/minecraft/client/particle/Particle.java
@@ -16,7 +16,7 @@
 @SideOnly(Side.CLIENT)
 public class Particle
 {
-    private static final AxisAlignedBB EMPTY_AABB = new AxisAlignedBB(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
+    private static final AxisAlignedBB EMPTY_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
     protected World world;
     protected double prevPosX;
     protected double prevPosY;
@@ -27,13 +27,13 @@
     protected double motionX;
     protected double motionY;
     protected double motionZ;
-    private AxisAlignedBB boundingBox = EMPTY_AABB;
+    private AxisAlignedBB boundingBox;
     protected boolean onGround;
     protected boolean canCollide;
     protected boolean isExpired;
-    protected float width = 0.6F;
-    protected float height = 1.8F;
-    protected Random rand = new Random();
+    protected float width;
+    protected float height;
+    protected Random rand;
     protected int particleTextureIndexX;
     protected int particleTextureIndexY;
     protected float particleTextureJitterX;
@@ -45,7 +45,7 @@
     protected float particleRed;
     protected float particleGreen;
     protected float particleBlue;
-    protected float particleAlpha = 1.0F;
+    protected float particleAlpha;
     protected TextureAtlasSprite particleTexture;
     protected float particleAngle;
     protected float prevParticleAngle;
@@ -56,6 +56,11 @@
 
     protected Particle(World worldIn, double posXIn, double posYIn, double posZIn)
     {
+        this.boundingBox = EMPTY_AABB;
+        this.width = 0.6F;
+        this.height = 1.8F;
+        this.rand = new Random();
+        this.particleAlpha = 1.0F;
         this.world = worldIn;
         this.setSize(0.2F, 0.2F);
         this.setPosition(posXIn, posYIn, posZIn);
@@ -76,22 +81,20 @@
     public Particle(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn, double ySpeedIn, double zSpeedIn)
     {
         this(worldIn, xCoordIn, yCoordIn, zCoordIn);
-        this.motionX = xSpeedIn + (Math.random() * 2.0 - 1.0) * 0.4F;
-        this.motionY = ySpeedIn + (Math.random() * 2.0 - 1.0) * 0.4F;
-        this.motionZ = zSpeedIn + (Math.random() * 2.0 - 1.0) * 0.4F;
-        float f = (float)(Math.random() + Math.random() + 1.0) * 0.15F;
-        float f1 = MathHelper.sqrt(
-                       this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ
-                   );
-        this.motionX = this.motionX / (double)f1 * (double)f * 0.4F;
-        this.motionY = this.motionY / (double)f1 * (double)f * 0.4F + 0.1F;
-        this.motionZ = this.motionZ / (double)f1 * (double)f * 0.4F;
+        this.motionX = xSpeedIn + (Math.random() * 2.0D - 1.0D) * 0.4000000059604645D;
+        this.motionY = ySpeedIn + (Math.random() * 2.0D - 1.0D) * 0.4000000059604645D;
+        this.motionZ = zSpeedIn + (Math.random() * 2.0D - 1.0D) * 0.4000000059604645D;
+        float f = (float)(Math.random() + Math.random() + 1.0D) * 0.15F;
+        float f1 = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+        this.motionX = this.motionX / (double)f1 * (double)f * 0.4000000059604645D;
+        this.motionY = this.motionY / (double)f1 * (double)f * 0.4000000059604645D + 0.10000000149011612D;
+        this.motionZ = this.motionZ / (double)f1 * (double)f * 0.4000000059604645D;
     }
 
     public Particle multiplyVelocity(float multiplier)
     {
         this.motionX *= (double)multiplier;
-        this.motionY = (this.motionY - 0.1F) * (double)multiplier + 0.1F;
+        this.motionY = (this.motionY - 0.10000000149011612D) * (double)multiplier + 0.10000000149011612D;
         this.motionZ *= (double)multiplier;
         return this;
     }
@@ -151,29 +154,20 @@
             this.setExpired();
         }
 
-        this.motionY = this.motionY - 0.04 * (double)this.particleGravity;
+        this.motionY -= 0.04D * (double)this.particleGravity;
         this.move(this.motionX, this.motionY, this.motionZ);
-        this.motionX *= 0.98F;
-        this.motionY *= 0.98F;
-        this.motionZ *= 0.98F;
+        this.motionX *= 0.9800000190734863D;
+        this.motionY *= 0.9800000190734863D;
+        this.motionZ *= 0.9800000190734863D;
 
         if (this.onGround)
         {
-            this.motionX *= 0.7F;
-            this.motionZ *= 0.7F;
+            this.motionX *= 0.699999988079071D;
+            this.motionZ *= 0.699999988079071D;
         }
     }
 
-    public void renderParticle(
-        BufferBuilder buffer,
-        Entity entityIn,
-        float partialTicks,
-        float rotationX,
-        float rotationZ,
-        float rotationYZ,
-        float rotationXY,
-        float rotationXZ
-    )
+    public void renderParticle(BufferBuilder buffer, Entity entityIn, float partialTicks, float rotationX, float rotationZ, float rotationYZ, float rotationXY, float rotationXZ)
     {
         float f = (float)this.particleTextureIndexX / 16.0F;
         float f1 = f + 0.0624375F;
@@ -195,13 +189,7 @@
         int i = this.getBrightnessForRender(partialTicks);
         int j = i >> 16 & 65535;
         int k = i & 65535;
-        Vec3d[] avec3d = new Vec3d[]
-        {
-            new Vec3d((double)(-rotationX * f4 - rotationXY * f4), (double)(-rotationZ * f4), (double)(-rotationYZ * f4 - rotationXZ * f4)),
-            new Vec3d((double)(-rotationX * f4 + rotationXY * f4), (double)(rotationZ * f4), (double)(-rotationYZ * f4 + rotationXZ * f4)),
-            new Vec3d((double)(rotationX * f4 + rotationXY * f4), (double)(rotationZ * f4), (double)(rotationYZ * f4 + rotationXZ * f4)),
-            new Vec3d((double)(rotationX * f4 - rotationXY * f4), (double)(-rotationZ * f4), (double)(rotationYZ * f4 - rotationXZ * f4))
-        };
+        Vec3d[] avec3d = new Vec3d[] {new Vec3d((double)(-rotationX * f4 - rotationXY * f4), (double)(-rotationZ * f4), (double)(-rotationYZ * f4 - rotationXZ * f4)), new Vec3d((double)(-rotationX * f4 + rotationXY * f4), (double)(rotationZ * f4), (double)(-rotationYZ * f4 + rotationXZ * f4)), new Vec3d((double)(rotationX * f4 + rotationXY * f4), (double)(rotationZ * f4), (double)(rotationYZ * f4 + rotationXZ * f4)), new Vec3d((double)(rotationX * f4 - rotationXY * f4), (double)(-rotationZ * f4), (double)(rotationYZ * f4 - rotationXZ * f4))};
 
         if (this.particleAngle != 0.0F)
         {
@@ -212,34 +200,16 @@
             float f12 = MathHelper.sin(f8 * 0.5F) * (float)cameraViewDir.z;
             Vec3d vec3d = new Vec3d((double)f10, (double)f11, (double)f12);
 
-            for (int l = 0; l < 4; l++)
+            for (int l = 0; l < 4; ++l)
             {
-                avec3d[l] = vec3d.scale(2.0 * avec3d[l].dotProduct(vec3d))
-                            .add(avec3d[l].scale((double)(f9 * f9) - vec3d.dotProduct(vec3d)))
-                            .add(vec3d.crossProduct(avec3d[l]).scale((double)(2.0F * f9)));
+                avec3d[l] = vec3d.scale(2.0D * avec3d[l].dotProduct(vec3d)).add(avec3d[l].scale((double)(f9 * f9) - vec3d.dotProduct(vec3d))).add(vec3d.crossProduct(avec3d[l]).scale((double)(2.0F * f9)));
             }
         }
 
-        buffer.pos((double)f5 + avec3d[0].x, (double)f6 + avec3d[0].y, (double)f7 + avec3d[0].z)
-        .tex((double)f1, (double)f3)
-        .color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha)
-        .lightmap(j, k)
-        .endVertex();
-        buffer.pos((double)f5 + avec3d[1].x, (double)f6 + avec3d[1].y, (double)f7 + avec3d[1].z)
-        .tex((double)f1, (double)f2)
-        .color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha)
-        .lightmap(j, k)
-        .endVertex();
-        buffer.pos((double)f5 + avec3d[2].x, (double)f6 + avec3d[2].y, (double)f7 + avec3d[2].z)
-        .tex((double)f, (double)f2)
-        .color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha)
-        .lightmap(j, k)
-        .endVertex();
-        buffer.pos((double)f5 + avec3d[3].x, (double)f6 + avec3d[3].y, (double)f7 + avec3d[3].z)
-        .tex((double)f, (double)f3)
-        .color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha)
-        .lightmap(j, k)
-        .endVertex();
+        buffer.pos((double)f5 + avec3d[0].x, (double)f6 + avec3d[0].y, (double)f7 + avec3d[0].z).tex((double)f1, (double)f3).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
+        buffer.pos((double)f5 + avec3d[1].x, (double)f6 + avec3d[1].y, (double)f7 + avec3d[1].z).tex((double)f1, (double)f2).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
+        buffer.pos((double)f5 + avec3d[2].x, (double)f6 + avec3d[2].y, (double)f7 + avec3d[2].z).tex((double)f, (double)f2).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
+        buffer.pos((double)f5 + avec3d[3].x, (double)f6 + avec3d[3].y, (double)f7 + avec3d[3].z).tex((double)f, (double)f3).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
     }
 
     public int getFXLayer()
@@ -276,29 +246,12 @@
 
     public void nextTextureIndexX()
     {
-        this.particleTextureIndexX++;
+        ++this.particleTextureIndexX;
     }
 
-    @Override
     public String toString()
     {
-        return this.getClass().getSimpleName()
-               + ", Pos ("
-               + this.posX
-               + ","
-               + this.posY
-               + ","
-               + this.posZ
-               + "), RGBA ("
-               + this.particleRed
-               + ","
-               + this.particleGreen
-               + ","
-               + this.particleBlue
-               + ","
-               + this.particleAlpha
-               + "), Age "
-               + this.particleAge;
+        return this.getClass().getSimpleName() + ", Pos (" + this.posX + "," + this.posY + "," + this.posZ + "), RGBA (" + this.particleRed + "," + this.particleGreen + "," + this.particleBlue + "," + this.particleAlpha + "), Age " + this.particleAge;
     }
 
     public void setExpired()
@@ -312,17 +265,8 @@
         {
             this.width = particleWidth;
             this.height = particleHeight;
-            AxisAlignedBB axisalignedbb = this.getBoundingBox();
-            this.setBoundingBox(
-                new AxisAlignedBB(
-                    axisalignedbb.minX,
-                    axisalignedbb.minY,
-                    axisalignedbb.minZ,
-                    axisalignedbb.minX + (double)this.width,
-                    axisalignedbb.minY + (double)this.height,
-                    axisalignedbb.minZ + (double)this.width
-                )
-            );
+            // FORGE: Fix MC-12269 - Glitchy movement when setSize is called without setPosition
+            setPosition(posX, posY, posZ);
         }
     }
 
@@ -333,43 +277,39 @@
         this.posZ = z;
         float f = this.width / 2.0F;
         float f1 = this.height;
-        this.setBoundingBox(
-            new AxisAlignedBB(
-                x - (double)f, y, z - (double)f, x + (double)f, y + (double)f1, z + (double)f
-            )
-        );
+        this.setBoundingBox(new AxisAlignedBB(x - (double)f, y, z - (double)f, x + (double)f, y + (double)f1, z + (double)f));
     }
 
     public void move(double x, double y, double z)
     {
-        double d0 = x;
-        double d1 = y;
-        double d2 = z;
+        double d0 = y;
+        double origX = x;
+        double origZ = z;
 
         if (this.canCollide)
         {
-            List<AxisAlignedBB> list = this.world.getCollisionBoxes(null, this.getBoundingBox().expand(x, y, z));
+            List<AxisAlignedBB> list = this.world.getCollisionBoxes((Entity)null, this.getBoundingBox().expand(x, y, z));
 
             for (AxisAlignedBB axisalignedbb : list)
             {
                 y = axisalignedbb.calculateYOffset(this.getBoundingBox(), y);
             }
 
-            this.setBoundingBox(this.getBoundingBox().offset(0.0, y, 0.0));
+            this.setBoundingBox(this.getBoundingBox().offset(0.0D, y, 0.0D));
 
             for (AxisAlignedBB axisalignedbb1 : list)
             {
                 x = axisalignedbb1.calculateXOffset(this.getBoundingBox(), x);
             }
 
-            this.setBoundingBox(this.getBoundingBox().offset(x, 0.0, 0.0));
+            this.setBoundingBox(this.getBoundingBox().offset(x, 0.0D, 0.0D));
 
             for (AxisAlignedBB axisalignedbb2 : list)
             {
                 z = axisalignedbb2.calculateZOffset(this.getBoundingBox(), z);
             }
 
-            this.setBoundingBox(this.getBoundingBox().offset(0.0, 0.0, z));
+            this.setBoundingBox(this.getBoundingBox().offset(0.0D, 0.0D, z));
         }
         else
         {
@@ -377,25 +317,25 @@
         }
 
         this.resetPositionToBB();
-        this.onGround = d1 != y && d1 < 0.0;
+        this.onGround = d0 != y && d0 < 0.0D;
 
-        if (d0 != x)
+        if (origX != x)
         {
-            this.motionX = 0.0;
+            this.motionX = 0.0D;
         }
 
-        if (d2 != z)
+        if (origZ != z)
         {
-            this.motionZ = 0.0;
+            this.motionZ = 0.0D;
         }
     }
 
     protected void resetPositionToBB()
     {
         AxisAlignedBB axisalignedbb = this.getBoundingBox();
-        this.posX = (axisalignedbb.minX + axisalignedbb.maxX) / 2.0;
+        this.posX = (axisalignedbb.minX + axisalignedbb.maxX) / 2.0D;
         this.posY = axisalignedbb.minY;
-        this.posZ = (axisalignedbb.minZ + axisalignedbb.maxZ) / 2.0;
+        this.posZ = (axisalignedbb.minZ + axisalignedbb.maxZ) / 2.0D;
     }
 
     public int getBrightnessForRender(float partialTick)
