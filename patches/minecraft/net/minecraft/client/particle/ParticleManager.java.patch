--- before/net/minecraft/client/particle/ParticleManager.java
+++ after/net/minecraft/client/particle/ParticleManager.java
@@ -41,22 +41,22 @@
     private static final ResourceLocation PARTICLE_TEXTURES = new ResourceLocation("textures/particle/particles.png");
     protected World world;
     private final ArrayDeque<Particle>[][] fxLayers = new ArrayDeque[4][];
-    private final Queue<ParticleEmitter> particleEmitters = Queues.newArrayDeque();
+    private final Queue<ParticleEmitter> particleEmitters = Queues.<ParticleEmitter>newArrayDeque();
     private final TextureManager renderer;
     private final Random rand = new Random();
-    private final Map<Integer, IParticleFactory> particleTypes = Maps.newHashMap();
-    private final Queue<Particle> queue = Queues.newArrayDeque();
+    private final Map<Integer, IParticleFactory> particleTypes = Maps.<Integer, IParticleFactory>newHashMap();
+    private final Queue<Particle> queue = Queues.<Particle>newArrayDeque();
 
     public ParticleManager(World worldIn, TextureManager rendererIn)
     {
         this.world = worldIn;
         this.renderer = rendererIn;
 
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             this.fxLayers[i] = new ArrayDeque[2];
 
-            for (int j = 0; j < 2; j++)
+            for (int j = 0; j < 2; ++j)
             {
                 this.fxLayers[i][j] = Queues.newArrayDeque();
             }
@@ -119,7 +119,7 @@
 
     public void registerParticle(int id, IParticleFactory particleFactory)
     {
-        this.particleTypes.put(id, particleFactory);
+        this.particleTypes.put(Integer.valueOf(id), particleFactory);
     }
 
     public void emitParticleAtEntity(Entity entityIn, EnumParticleTypes particleTypes)
@@ -133,24 +133,13 @@
     }
 
     @Nullable
-    public Particle spawnEffectParticle(
-        int particleId,
-        double xCoord,
-        double yCoord,
-        double zCoord,
-        double xSpeed,
-        double ySpeed,
-        double zSpeed,
-        int... parameters
-    )
+    public Particle spawnEffectParticle(int particleId, double xCoord, double yCoord, double zCoord, double xSpeed, double ySpeed, double zSpeed, int... parameters)
     {
-        IParticleFactory iparticlefactory = this.particleTypes.get(particleId);
+        IParticleFactory iparticlefactory = this.particleTypes.get(Integer.valueOf(particleId));
 
         if (iparticlefactory != null)
         {
-            Particle particle = iparticlefactory.createParticle(
-                                    particleId, this.world, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters
-                                );
+            Particle particle = iparticlefactory.createParticle(particleId, this.world, xCoord, yCoord, zCoord, xSpeed, ySpeed, zSpeed, parameters);
 
             if (particle != null)
             {
@@ -164,19 +153,20 @@
 
     public void addEffect(Particle effect)
     {
+        if (effect == null) return; //Forge: Prevent modders from being bad and adding nulls causing untraceable NPEs.
         this.queue.add(effect);
     }
 
     public void updateEffects()
     {
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
             this.updateEffectLayer(i);
         }
 
         if (!this.particleEmitters.isEmpty())
         {
-            List<ParticleEmitter> list = Lists.newArrayList();
+            List<ParticleEmitter> list = Lists.<ParticleEmitter>newArrayList();
 
             for (ParticleEmitter particleemitter : this.particleEmitters)
             {
@@ -212,7 +202,7 @@
     {
         this.world.profiler.startSection(String.valueOf(layer));
 
-        for (int i = 0; i < 2; i++)
+        for (int i = 0; i < 2; ++i)
         {
             this.world.profiler.startSection(String.valueOf(i));
             this.tickParticleList(this.fxLayers[layer][i]);
@@ -296,11 +286,11 @@
         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
         GlStateManager.alphaFunc(516, 0.003921569F);
 
-        for (int i_nf = 0; i_nf < 3; i_nf++)
+        for (int i_nf = 0; i_nf < 3; ++i_nf)
         {
             final int i = i_nf;
 
-            for (int j = 0; j < 2; j++)
+            for (int j = 0; j < 2; ++j)
             {
                 if (!this.fxLayers[i][j].isEmpty())
                 {
@@ -379,14 +369,14 @@
 
     public void renderLitParticles(Entity entityIn, float partialTick)
     {
-        float f = (float)(Math.PI / 180.0);
-        float f1 = MathHelper.cos(entityIn.rotationYaw * (float)(Math.PI / 180.0));
-        float f2 = MathHelper.sin(entityIn.rotationYaw * (float)(Math.PI / 180.0));
-        float f3 = -f2 * MathHelper.sin(entityIn.rotationPitch * (float)(Math.PI / 180.0));
-        float f4 = f1 * MathHelper.sin(entityIn.rotationPitch * (float)(Math.PI / 180.0));
-        float f5 = MathHelper.cos(entityIn.rotationPitch * (float)(Math.PI / 180.0));
+        float f = 0.017453292F;
+        float f1 = MathHelper.cos(entityIn.rotationYaw * 0.017453292F);
+        float f2 = MathHelper.sin(entityIn.rotationYaw * 0.017453292F);
+        float f3 = -f2 * MathHelper.sin(entityIn.rotationPitch * 0.017453292F);
+        float f4 = f1 * MathHelper.sin(entityIn.rotationPitch * 0.017453292F);
+        float f5 = MathHelper.cos(entityIn.rotationPitch * 0.017453292F);
 
-        for (int i = 0; i < 2; i++)
+        for (int i = 0; i < 2; ++i)
         {
             Queue<Particle> queue = this.fxLayers[3][i];
 
@@ -407,9 +397,9 @@
     {
         this.world = worldIn;
 
-        for (int i = 0; i < 4; i++)
+        for (int i = 0; i < 4; ++i)
         {
-            for (int j = 0; j < 2; j++)
+            for (int j = 0; j < 2; ++j)
             {
                 this.fxLayers[i][j].clear();
             }
@@ -420,33 +410,21 @@
 
     public void addBlockDestroyEffects(BlockPos pos, IBlockState state)
     {
-        if (state.getMaterial() != Material.AIR)
+        if (!state.getBlock().isAir(state, this.world, pos) && !state.getBlock().addDestroyEffects(world, pos, this))
         {
             state = state.getActualState(this.world, pos);
             int i = 4;
 
-            for (int j = 0; j < 4; j++)
+            for (int j = 0; j < 4; ++j)
             {
-                for (int k = 0; k < 4; k++)
+                for (int k = 0; k < 4; ++k)
                 {
-                    for (int l = 0; l < 4; l++)
+                    for (int l = 0; l < 4; ++l)
                     {
-                        double d0 = ((double)j + 0.5) / 4.0;
-                        double d1 = ((double)k + 0.5) / 4.0;
-                        double d2 = ((double)l + 0.5) / 4.0;
-                        this.addEffect(
-                            new ParticleDigging(
-                                this.world,
-                                (double)pos.getX() + d0,
-                                (double)pos.getY() + d1,
-                                (double)pos.getZ() + d2,
-                                d0 - 0.5,
-                                d1 - 0.5,
-                                d2 - 0.5,
-                                state
-                            )
-                            .setBlockPos(pos)
-                        );
+                        double d0 = ((double)j + 0.5D) / 4.0D;
+                        double d1 = ((double)k + 0.5D) / 4.0D;
+                        double d2 = ((double)l + 0.5D) / 4.0D;
+                        this.addEffect((new ParticleDigging(this.world, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, state)).setBlockPos(pos));
                     }
                 }
             }
@@ -464,52 +442,41 @@
             int k = pos.getZ();
             float f = 0.1F;
             AxisAlignedBB axisalignedbb = iblockstate.getBoundingBox(this.world, pos);
-            double d0 = (double)i
-                        + this.rand.nextDouble() * (axisalignedbb.maxX - axisalignedbb.minX - 0.2F)
-                        + 0.1F
-                        + axisalignedbb.minX;
-            double d1 = (double)j
-                        + this.rand.nextDouble() * (axisalignedbb.maxY - axisalignedbb.minY - 0.2F)
-                        + 0.1F
-                        + axisalignedbb.minY;
-            double d2 = (double)k
-                        + this.rand.nextDouble() * (axisalignedbb.maxZ - axisalignedbb.minZ - 0.2F)
-                        + 0.1F
-                        + axisalignedbb.minZ;
+            double d0 = (double)i + this.rand.nextDouble() * (axisalignedbb.maxX - axisalignedbb.minX - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minX;
+            double d1 = (double)j + this.rand.nextDouble() * (axisalignedbb.maxY - axisalignedbb.minY - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minY;
+            double d2 = (double)k + this.rand.nextDouble() * (axisalignedbb.maxZ - axisalignedbb.minZ - 0.20000000298023224D) + 0.10000000149011612D + axisalignedbb.minZ;
 
             if (side == EnumFacing.DOWN)
             {
-                d1 = (double)j + axisalignedbb.minY - 0.1F;
+                d1 = (double)j + axisalignedbb.minY - 0.10000000149011612D;
             }
 
             if (side == EnumFacing.UP)
             {
-                d1 = (double)j + axisalignedbb.maxY + 0.1F;
+                d1 = (double)j + axisalignedbb.maxY + 0.10000000149011612D;
             }
 
             if (side == EnumFacing.NORTH)
             {
-                d2 = (double)k + axisalignedbb.minZ - 0.1F;
+                d2 = (double)k + axisalignedbb.minZ - 0.10000000149011612D;
             }
 
             if (side == EnumFacing.SOUTH)
             {
-                d2 = (double)k + axisalignedbb.maxZ + 0.1F;
+                d2 = (double)k + axisalignedbb.maxZ + 0.10000000149011612D;
             }
 
             if (side == EnumFacing.WEST)
             {
-                d0 = (double)i + axisalignedbb.minX - 0.1F;
+                d0 = (double)i + axisalignedbb.minX - 0.10000000149011612D;
             }
 
             if (side == EnumFacing.EAST)
             {
-                d0 = (double)i + axisalignedbb.maxX + 0.1F;
+                d0 = (double)i + axisalignedbb.maxX + 0.10000000149011612D;
             }
 
-            this.addEffect(
-                new ParticleDigging(this.world, d0, d1, d2, 0.0, 0.0, 0.0, iblockstate).setBlockPos(pos).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F)
-            );
+            this.addEffect((new ParticleDigging(this.world, d0, d1, d2, 0.0D, 0.0D, 0.0D, iblockstate)).setBlockPos(pos).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
         }
     }
 
@@ -517,9 +484,9 @@
     {
         int i = 0;
 
-        for (int j = 0; j < 4; j++)
+        for (int j = 0; j < 4; ++j)
         {
-            for (int k = 0; k < 2; k++)
+            for (int k = 0; k < 2; ++k)
             {
                 i += this.fxLayers[j][k].size();
             }
@@ -527,4 +494,13 @@
 
         return "" + i;
     }
+
+    public void addBlockHitEffects(BlockPos pos, net.minecraft.util.math.RayTraceResult target)
+    {
+        IBlockState state = world.getBlockState(pos);
+        if (state != null && !state.getBlock().addHitEffects(state, world, target, this))
+        {
+            addBlockHitEffects(pos, target.sideHit);
+        }
+     }
 }
