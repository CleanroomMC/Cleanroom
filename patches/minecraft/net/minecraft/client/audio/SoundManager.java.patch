--- before/net/minecraft/client/audio/SoundManager.java
+++ after/net/minecraft/client/audio/SoundManager.java
@@ -45,23 +45,30 @@
 {
     private static final Marker LOG_MARKER = MarkerManager.getMarker("SOUNDS");
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Set<ResourceLocation> UNABLE_TO_PLAY = Sets.newHashSet();
+    private static final Set<ResourceLocation> UNABLE_TO_PLAY = Sets.<ResourceLocation>newHashSet();
     public final SoundHandler sndHandler;
     private final GameSettings options;
     private SoundManager.SoundSystemStarterThread sndSystem;
     private boolean loaded;
     private int playTime;
-    private final Map<String, ISound> playingSounds = HashBiMap.create();
-    private final Map<ISound, String> invPlayingSounds = ((BiMap)this.playingSounds).inverse();
-    private final Multimap<SoundCategory, String> categorySounds = HashMultimap.create();
-    private final List<ITickableSound> tickableSounds = Lists.newArrayList();
-    private final Map<ISound, Integer> delayedSounds = Maps.newHashMap();
-    private final Map<String, Integer> playingSoundsStopTime = Maps.newHashMap();
-    private final List<ISoundEventListener> listeners = Lists.newArrayList();
-    private final List<String> pausedChannels = Lists.newArrayList();
+    private final Map<String, ISound> playingSounds = HashBiMap.<String, ISound>create();
+    private final Map<ISound, String> invPlayingSounds;
+    private final Multimap<SoundCategory, String> categorySounds;
+    private final List<ITickableSound> tickableSounds;
+    private final Map<ISound, Integer> delayedSounds;
+    private final Map<String, Integer> playingSoundsStopTime;
+    private final List<ISoundEventListener> listeners;
+    private final List<String> pausedChannels;
 
     public SoundManager(SoundHandler p_i45119_1_, GameSettings p_i45119_2_)
     {
+        this.invPlayingSounds = ((BiMap)this.playingSounds).inverse();
+        this.categorySounds = HashMultimap.<SoundCategory, String>create();
+        this.tickableSounds = Lists.<ITickableSound>newArrayList();
+        this.delayedSounds = Maps.<ISound, Integer>newHashMap();
+        this.playingSoundsStopTime = Maps.<String, Integer>newHashMap();
+        this.listeners = Lists.<ISoundEventListener>newArrayList();
+        this.pausedChannels = Lists.<String>newArrayList();
         this.sndHandler = p_i45119_1_;
         this.options = p_i45119_2_;
 
@@ -69,6 +76,7 @@
         {
             SoundSystemConfig.addLibrary(LibraryLWJGLOpenAL.class);
             SoundSystemConfig.setCodec("ogg", CodecJOrbis.class);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.SoundSetupEvent(this));
         }
         catch (SoundSystemException soundsystemexception)
         {
@@ -93,6 +101,7 @@
 
         this.unloadSoundSystem();
         this.loadSoundSystem();
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.SoundLoadEvent(this));
     }
 
     private synchronized void loadSoundSystem()
@@ -101,14 +110,12 @@
         {
             try
             {
-                new Thread(new Runnable()
+                (new Thread(new Runnable()
                 {
-                    @Override
                     public void run()
                     {
                         SoundSystemConfig.setLogger(new SoundSystemLogger()
                         {
-                            @Override
                             public void message(String p_message_1_, int p_message_2_)
                             {
                                 if (!p_message_1_.isEmpty())
@@ -116,7 +123,6 @@
                                     SoundManager.LOGGER.info(p_message_1_);
                                 }
                             }
-                            @Override
                             public void importantMessage(String p_importantMessage_1_, int p_importantMessage_2_)
                             {
                                 if (!p_importantMessage_1_.isEmpty())
@@ -124,12 +130,11 @@
                                     SoundManager.LOGGER.warn(p_importantMessage_1_);
                                 }
                             }
-                            @Override
                             public void errorMessage(String p_errorMessage_1_, String p_errorMessage_2_, int p_errorMessage_3_)
                             {
                                 if (!p_errorMessage_2_.isEmpty())
                                 {
-                                    SoundManager.LOGGER.error("Error in class '{}'", p_errorMessage_1_);
+                                    SoundManager.LOGGER.error("Error in class '{}'", (Object)p_errorMessage_1_);
                                     SoundManager.LOGGER.error(p_errorMessage_2_);
                                 }
                             }
@@ -139,7 +144,7 @@
                         SoundManager.this.sndSystem.setMasterVolume(SoundManager.this.options.getSoundLevel(SoundCategory.MASTER));
                         SoundManager.LOGGER.info(SoundManager.LOG_MARKER, "Sound engine started");
                     }
-                }, "Sound Library Loader").start();
+                }, "Sound Library Loader")).start();
             }
             catch (RuntimeException runtimeexception)
             {
@@ -202,6 +207,7 @@
                 this.sndSystem.stop(s);
             }
 
+            this.pausedChannels.clear(); //Forge: MC-35856 Fixed paused sounds repeating when switching worlds
             this.playingSounds.clear();
             this.delayedSounds.clear();
             this.tickableSounds.clear();
@@ -222,7 +228,7 @@
 
     public void updateAllSounds()
     {
-        this.playTime++;
+        ++this.playTime;
 
         for (ITickableSound itickablesound : this.tickableSounds)
         {
@@ -245,13 +251,13 @@
 
         while (iterator.hasNext())
         {
-            Entry<String, ISound> entry = iterator.next();
+            Entry<String, ISound> entry = (Entry)iterator.next();
             String s1 = entry.getKey();
             ISound isound = entry.getValue();
 
             if (!this.sndSystem.playing(s1))
             {
-                int i = this.playingSoundsStopTime.get(s1);
+                int i = ((Integer)this.playingSoundsStopTime.get(s1)).intValue();
 
                 if (i <= this.playTime)
                 {
@@ -259,11 +265,11 @@
 
                     if (isound.canRepeat() && j > 0)
                     {
-                        this.delayedSounds.put(isound, this.playTime + j);
+                        this.delayedSounds.put(isound, Integer.valueOf(this.playTime + j));
                     }
 
                     iterator.remove();
-                    LOGGER.debug(LOG_MARKER, "Removed channel {} because it's not playing anymore", s1);
+                    LOGGER.debug(LOG_MARKER, "Removed channel {} because it's not playing anymore", (Object)s1);
                     this.sndSystem.removeSource(s1);
                     this.playingSoundsStopTime.remove(s1);
 
@@ -271,8 +277,9 @@
                     {
                         this.categorySounds.remove(isound.getCategory(), s1);
                     }
-                    catch (RuntimeException runtimeexception)
+                    catch (RuntimeException var8)
                     {
+                        ;
                     }
 
                     if (isound instanceof ITickableSound)
@@ -287,9 +294,9 @@
 
         while (iterator1.hasNext())
         {
-            Entry<ISound, Integer> entry1 = iterator1.next();
+            Entry<ISound, Integer> entry1 = (Entry)iterator1.next();
 
-            if (this.playTime >= entry1.getValue())
+            if (this.playTime >= ((Integer)entry1.getValue()).intValue())
             {
                 ISound isound1 = entry1.getKey();
 
@@ -313,7 +320,15 @@
         else
         {
             String s = this.invPlayingSounds.get(sound);
-            return s == null ? false : this.sndSystem.playing(s) || this.playingSoundsStopTime.containsKey(s) && this.playingSoundsStopTime.get(s) <= this.playTime;
+
+            if (s == null)
+            {
+                return false;
+            }
+            else
+            {
+                return this.sndSystem.playing(s) || this.playingSoundsStopTime.containsKey(s) && ((Integer)this.playingSoundsStopTime.get(s)).intValue() <= this.playTime;
+            }
         }
     }
 
@@ -334,6 +349,9 @@
     {
         if (this.loaded)
         {
+            p_sound = net.minecraftforge.client.ForgeHooksClient.playSound(this, p_sound);
+            if (p_sound == null) return;
+
             SoundEventAccessor soundeventaccessor = p_sound.createAccessor(this.sndHandler);
             ResourceLocation resourcelocation = p_sound.getSoundLocation();
 
@@ -341,7 +359,7 @@
             {
                 if (UNABLE_TO_PLAY.add(resourcelocation))
                 {
-                    LOGGER.warn(LOG_MARKER, "Unable to play unknown soundEvent: {}", resourcelocation);
+                    LOGGER.warn(LOG_MARKER, "Unable to play unknown soundEvent: {}", (Object)resourcelocation);
                 }
             }
             else
@@ -356,7 +374,7 @@
 
                 if (this.sndSystem.getMasterVolume() <= 0.0F)
                 {
-                    LOGGER.debug(LOG_MARKER, "Skipped playing soundEvent: {}, master volume was zero", resourcelocation);
+                    LOGGER.debug(LOG_MARKER, "Skipped playing soundEvent: {}, master volume was zero", (Object)resourcelocation);
                 }
                 else
                 {
@@ -366,7 +384,7 @@
                     {
                         if (UNABLE_TO_PLAY.add(resourcelocation))
                         {
-                            LOGGER.warn(LOG_MARKER, "Unable to play empty soundEvent: {}", resourcelocation);
+                            LOGGER.warn(LOG_MARKER, "Unable to play empty soundEvent: {}", (Object)resourcelocation);
                         }
                     }
                     else
@@ -385,7 +403,7 @@
 
                         if (f1 == 0.0F)
                         {
-                            LOGGER.debug(LOG_MARKER, "Skipped playing sound {}, volume was zero.", sound.getSoundLocation());
+                            LOGGER.debug(LOG_MARKER, "Skipped playing sound {}, volume was zero.", (Object)sound.getSoundLocation());
                         }
                         else
                         {
@@ -395,42 +413,20 @@
 
                             if (sound.isStreaming())
                             {
-                                this.sndSystem
-                                .newStreamingSource(
-                                    false,
-                                    s,
-                                    getURLForSoundResource(resourcelocation1),
-                                    resourcelocation1.toString(),
-                                    flag,
-                                    p_sound.getXPosF(),
-                                    p_sound.getYPosF(),
-                                    p_sound.getZPosF(),
-                                    p_sound.getAttenuationType().getTypeInt(),
-                                    f
-                                );
+                                this.sndSystem.newStreamingSource(false, s, getURLForSoundResource(resourcelocation1), resourcelocation1.toString(), flag, p_sound.getXPosF(), p_sound.getYPosF(), p_sound.getZPosF(), p_sound.getAttenuationType().getTypeInt(), f);
+                                net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.PlayStreamingSourceEvent(this, p_sound, s));
                             }
                             else
                             {
-                                this.sndSystem
-                                .newSource(
-                                    false,
-                                    s,
-                                    getURLForSoundResource(resourcelocation1),
-                                    resourcelocation1.toString(),
-                                    flag,
-                                    p_sound.getXPosF(),
-                                    p_sound.getYPosF(),
-                                    p_sound.getZPosF(),
-                                    p_sound.getAttenuationType().getTypeInt(),
-                                    f
-                                );
+                                this.sndSystem.newSource(false, s, getURLForSoundResource(resourcelocation1), resourcelocation1.toString(), flag, p_sound.getXPosF(), p_sound.getYPosF(), p_sound.getZPosF(), p_sound.getAttenuationType().getTypeInt(), f);
+                                net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.PlaySoundSourceEvent(this, p_sound, s));
                             }
 
                             LOGGER.debug(LOG_MARKER, "Playing sound {} for event {} as channel {}", sound.getSoundLocation(), resourcelocation, s);
                             this.sndSystem.setPitch(s, f2);
                             this.sndSystem.setVolume(s, f1);
                             this.sndSystem.play(s);
-                            this.playingSoundsStopTime.put(s, this.playTime + 20);
+                            this.playingSoundsStopTime.put(s, Integer.valueOf(this.playTime + 20));
                             this.playingSounds.put(s, p_sound);
                             this.categorySounds.put(soundcategory, s);
 
@@ -464,7 +460,7 @@
 
             if (flag)
             {
-                LOGGER.debug(LOG_MARKER, "Pausing channel {}", s);
+                LOGGER.debug(LOG_MARKER, "Pausing channel {}", (Object)s);
                 this.sndSystem.pause(s);
                 this.pausedChannels.add(s);
             }
@@ -475,7 +471,7 @@
     {
         for (String s : this.pausedChannels)
         {
-            LOGGER.debug(LOG_MARKER, "Resuming channel {}", s);
+            LOGGER.debug(LOG_MARKER, "Resuming channel {}", (Object)s);
             this.sndSystem.play(s);
         }
 
@@ -484,7 +480,7 @@
 
     public void playDelayedSound(ISound sound, int delay)
     {
-        this.delayedSounds.put(sound, this.playTime + delay);
+        this.delayedSounds.put(sound, Integer.valueOf(this.playTime + delay));
     }
 
     private static URL getURLForSoundResource(final ResourceLocation p_148612_0_)
@@ -492,16 +488,13 @@
         String s = String.format("%s:%s:%s", "mcsounddomain", p_148612_0_.getNamespace(), p_148612_0_.getPath());
         URLStreamHandler urlstreamhandler = new URLStreamHandler()
         {
-            @Override
             protected URLConnection openConnection(URL p_openConnection_1_)
             {
                 return new URLConnection(p_openConnection_1_)
                 {
-                    @Override
                     public void connect() throws IOException
                     {
                     }
-                    @Override
                     public InputStream getInputStream() throws IOException
                     {
                         return Minecraft.getMinecraft().getResourceManager().getResource(p_148612_0_).getInputStream();
@@ -512,9 +505,9 @@
 
         try
         {
-            return new URL(null, s, urlstreamhandler);
+            return new URL((URL)null, s, urlstreamhandler);
         }
-        catch (MalformedURLException malformedurlexception)
+        catch (MalformedURLException var4)
         {
             throw new Error("TODO: Sanely handle url exception! :D");
         }
@@ -522,21 +515,24 @@
 
     public void setListener(EntityPlayer player, float p_148615_2_)
     {
+        setListener((net.minecraft.entity.Entity) player, p_148615_2_);
+    }
+
+    public void setListener(net.minecraft.entity.Entity player, float p_148615_2_)
+    {
         if (this.loaded && player != null)
         {
             float f = player.prevRotationPitch + (player.rotationPitch - player.prevRotationPitch) * p_148615_2_;
             float f1 = player.prevRotationYaw + (player.rotationYaw - player.prevRotationYaw) * p_148615_2_;
             double d0 = player.prevPosX + (player.posX - player.prevPosX) * (double)p_148615_2_;
-            double d1 = player.prevPosY
-                        + (player.posY - player.prevPosY) * (double)p_148615_2_
-                        + (double)player.getEyeHeight();
+            double d1 = player.prevPosY + (player.posY - player.prevPosY) * (double)p_148615_2_ + (double)player.getEyeHeight();
             double d2 = player.prevPosZ + (player.posZ - player.prevPosZ) * (double)p_148615_2_;
-            float f2 = MathHelper.cos((f1 + 90.0F) * (float)(Math.PI / 180.0));
-            float f3 = MathHelper.sin((f1 + 90.0F) * (float)(Math.PI / 180.0));
-            float f4 = MathHelper.cos(-f * (float)(Math.PI / 180.0));
-            float f5 = MathHelper.sin(-f * (float)(Math.PI / 180.0));
-            float f6 = MathHelper.cos((-f + 90.0F) * (float)(Math.PI / 180.0));
-            float f7 = MathHelper.sin((-f + 90.0F) * (float)(Math.PI / 180.0));
+            float f2 = MathHelper.cos((f1 + 90.0F) * 0.017453292F);
+            float f3 = MathHelper.sin((f1 + 90.0F) * 0.017453292F);
+            float f4 = MathHelper.cos(-f * 0.017453292F);
+            float f5 = MathHelper.sin(-f * 0.017453292F);
+            float f6 = MathHelper.cos((-f + 90.0F) * 0.017453292F);
+            float f7 = MathHelper.sin((-f + 90.0F) * 0.017453292F);
             float f8 = f2 * f4;
             float f9 = f3 * f4;
             float f10 = f2 * f6;
@@ -587,7 +583,6 @@
         {
         }
 
-        @Override
         public boolean playing(String p_playing_1_)
         {
             synchronized (SoundSystemConfig.THREAD_SYNC)
@@ -598,8 +593,16 @@
                 }
                 else
                 {
-                    Source source = this.soundLibrary.getSources().get(p_playing_1_);
-                    return source == null ? false : source.playing() || source.paused() || source.preLoad;
+                    Source source = (Source)this.soundLibrary.getSources().get(p_playing_1_);
+
+                    if (source == null)
+                    {
+                        return false;
+                    }
+                    else
+                    {
+                        return source.playing() || source.paused() || source.preLoad;
+                    }
                 }
             }
         }
