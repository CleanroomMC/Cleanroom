--- before/net/minecraft/client/entity/EntityOtherPlayerMP.java
+++ after/net/minecraft/client/entity/EntityOtherPlayerMP.java
@@ -28,30 +28,26 @@
         this.renderOffsetY = 0.25F;
     }
 
-    @Override
     public boolean isInRangeToRenderDist(double distance)
     {
-        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 10.0;
+        double d0 = this.getEntityBoundingBox().getAverageEdgeLength() * 10.0D;
 
         if (Double.isNaN(d0))
         {
-            d0 = 1.0;
+            d0 = 1.0D;
         }
 
-        d0 *= 64.0 * getRenderDistanceWeight();
+        d0 = d0 * 64.0D * getRenderDistanceWeight();
         return distance < d0 * d0;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
+        net.minecraftforge.common.ForgeHooks.onPlayerAttack(this, source, amount);
         return true;
     }
 
-    @Override
-    public void setPositionAndRotationDirect(
-        double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport
-    )
+    public void setPositionAndRotationDirect(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean teleport)
     {
         this.otherPlayerMPX = x;
         this.otherPlayerMPY = y;
@@ -61,7 +57,6 @@
         this.otherPlayerMPPosRotationIncrements = posRotationIncrements;
     }
 
-    @Override
     public void onUpdate()
     {
         this.renderOffsetY = 0.0F;
@@ -76,11 +71,10 @@
             f = 1.0F;
         }
 
-        this.limbSwingAmount = this.limbSwingAmount + (f - this.limbSwingAmount) * 0.4F;
-        this.limbSwing = this.limbSwing + this.limbSwingAmount;
+        this.limbSwingAmount += (f - this.limbSwingAmount) * 0.4F;
+        this.limbSwing += this.limbSwingAmount;
     }
 
-    @Override
     public void onLivingUpdate()
     {
         if (this.otherPlayerMPPosRotationIncrements > 0)
@@ -88,21 +82,21 @@
             double d0 = this.posX + (this.otherPlayerMPX - this.posX) / (double)this.otherPlayerMPPosRotationIncrements;
             double d1 = this.posY + (this.otherPlayerMPY - this.posY) / (double)this.otherPlayerMPPosRotationIncrements;
             double d2 = this.posZ + (this.otherPlayerMPZ - this.posZ) / (double)this.otherPlayerMPPosRotationIncrements;
-            double d3 = this.otherPlayerMPYaw - (double)this.rotationYaw;
+            double d3;
 
-            while (d3 < -180.0)
+            for (d3 = this.otherPlayerMPYaw - (double)this.rotationYaw; d3 < -180.0D; d3 += 360.0D)
             {
-                d3 += 360.0;
+                ;
             }
 
-            while (d3 >= 180.0)
+            while (d3 >= 180.0D)
             {
-                d3 -= 360.0;
+                d3 -= 360.0D;
             }
 
             this.rotationYaw = (float)((double)this.rotationYaw + d3 / (double)this.otherPlayerMPPosRotationIncrements);
             this.rotationPitch = (float)((double)this.rotationPitch + (this.otherPlayerMPPitch - (double)this.rotationPitch) / (double)this.otherPlayerMPPosRotationIncrements);
-            this.otherPlayerMPPosRotationIncrements--;
+            --this.otherPlayerMPPosRotationIncrements;
             this.setPosition(d0, d1, d2);
             this.setRotation(this.rotationYaw, this.rotationPitch);
         }
@@ -110,7 +104,7 @@
         this.prevCameraYaw = this.cameraYaw;
         this.updateArmSwingProgress();
         float f1 = MathHelper.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-        float f = (float)Math.atan(-this.motionY * 0.2F) * 15.0F;
+        float f = (float)Math.atan(-this.motionY * 0.20000000298023224D) * 15.0F;
 
         if (f1 > 0.1F)
         {
@@ -127,28 +121,25 @@
             f = 0.0F;
         }
 
-        this.cameraYaw = this.cameraYaw + (f1 - this.cameraYaw) * 0.4F;
-        this.cameraPitch = this.cameraPitch + (f - this.cameraPitch) * 0.8F;
+        this.cameraYaw += (f1 - this.cameraYaw) * 0.4F;
+        this.cameraPitch += (f - this.cameraPitch) * 0.8F;
         this.world.profiler.startSection("push");
         this.collideWithNearbyEntities();
         this.world.profiler.endSection();
     }
 
-    @Override
     public void sendMessage(ITextComponent component)
     {
         Minecraft.getMinecraft().ingameGUI.getChatGUI().printChatMessage(component);
     }
 
-    @Override
     public boolean canUseCommand(int permLevel, String commandName)
     {
         return false;
     }
 
-    @Override
     public BlockPos getPosition()
     {
-        return new BlockPos(this.posX + 0.5, this.posY + 0.5, this.posZ + 0.5);
+        return new BlockPos(this.posX + 0.5D, this.posY + 0.5D, this.posZ + 0.5D);
     }
 }
