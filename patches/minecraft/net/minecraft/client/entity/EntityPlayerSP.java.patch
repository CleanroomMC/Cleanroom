--- before/net/minecraft/client/entity/EntityPlayerSP.java
+++ after/net/minecraft/client/entity/EntityPlayerSP.java
@@ -12,6 +12,7 @@
 import net.minecraft.client.gui.GuiHopper;
 import net.minecraft.client.gui.GuiMerchant;
 import net.minecraft.client.gui.GuiRepair;
+import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.gui.GuiScreenBook;
 import net.minecraft.client.gui.inventory.GuiBeacon;
 import net.minecraft.client.gui.inventory.GuiBrewingStand;
@@ -128,18 +129,16 @@
         this.dimension = 0;
     }
 
-    @Override
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
+        net.minecraftforge.common.ForgeHooks.onPlayerAttack(this, source, amount);
         return false;
     }
 
-    @Override
     public void heal(float healAmount)
     {
     }
 
-    @Override
     public boolean startRiding(Entity entityIn, boolean force)
     {
         if (!super.startRiding(entityIn, force))
@@ -164,31 +163,27 @@
         }
     }
 
-    @Override
     public void dismountRidingEntity()
     {
         super.dismountRidingEntity();
         this.rowingBoat = false;
     }
 
-    @Override
     public Vec3d getLook(float partialTicks)
     {
         return this.getVectorForRotation(this.rotationPitch, this.rotationYaw);
     }
 
-    @Override
     public void onUpdate()
     {
-        if (this.world.isBlockLoaded(new BlockPos(this.posX, 0.0, this.posZ)))
+        if (this.world.isBlockLoaded(new BlockPos(this.posX, 0.0D, this.posZ)))
         {
             super.onUpdate();
 
             if (this.isRiding())
             {
                 this.connection.sendPacket(new CPacketPlayer.Rotation(this.rotationYaw, this.rotationPitch, this.onGround));
-                this.connection
-                .sendPacket(new CPacketInput(this.moveStrafing, this.moveForward, this.movementInput.jump, this.movementInput.sneak));
+                this.connection.sendPacket(new CPacketInput(this.moveStrafing, this.moveForward, this.movementInput.jump, this.movementInput.sneak));
                 Entity entity = this.getLowestRidingEntity();
 
                 if (entity != this && entity.canPassengerSteer())
@@ -245,31 +240,22 @@
             double d2 = this.posZ - this.lastReportedPosZ;
             double d3 = (double)(this.rotationYaw - this.lastReportedYaw);
             double d4 = (double)(this.rotationPitch - this.lastReportedPitch);
-            this.positionUpdateTicks++;
-            boolean flag2 = d0 * d0 + d1 * d1 + d2 * d2 > 9.0E-4 || this.positionUpdateTicks >= 20;
-            boolean flag3 = d3 != 0.0 || d4 != 0.0;
+            ++this.positionUpdateTicks;
+            boolean flag2 = d0 * d0 + d1 * d1 + d2 * d2 > 9.0E-4D || this.positionUpdateTicks >= 20;
+            boolean flag3 = d3 != 0.0D || d4 != 0.0D;
 
             if (this.isRiding())
             {
-                this.connection
-                .sendPacket(
-                    new CPacketPlayer.PositionRotation(this.motionX, -999.0, this.motionZ, this.rotationYaw, this.rotationPitch, this.onGround)
-                );
+                this.connection.sendPacket(new CPacketPlayer.PositionRotation(this.motionX, -999.0D, this.motionZ, this.rotationYaw, this.rotationPitch, this.onGround));
                 flag2 = false;
             }
             else if (flag2 && flag3)
             {
-                this.connection
-                .sendPacket(
-                    new CPacketPlayer.PositionRotation(
-                        this.posX, axisalignedbb.minY, this.posZ, this.rotationYaw, this.rotationPitch, this.onGround
-                    )
-                );
+                this.connection.sendPacket(new CPacketPlayer.PositionRotation(this.posX, axisalignedbb.minY, this.posZ, this.rotationYaw, this.rotationPitch, this.onGround));
             }
             else if (flag2)
             {
-                this.connection
-                .sendPacket(new CPacketPlayer.Position(this.posX, axisalignedbb.minY, this.posZ, this.onGround));
+                this.connection.sendPacket(new CPacketPlayer.Position(this.posX, axisalignedbb.minY, this.posZ, this.onGround));
             }
             else if (flag3)
             {
@@ -300,7 +286,6 @@
     }
 
     @Nullable
-    @Override
     public EntityItem dropItem(boolean dropAll)
     {
         CPacketPlayerDigging.Action cpacketplayerdigging$action = dropAll ? CPacketPlayerDigging.Action.DROP_ALL_ITEMS : CPacketPlayerDigging.Action.DROP_ITEM;
@@ -308,7 +293,6 @@
         return null;
     }
 
-    @Override
     public ItemStack dropItemAndGetStack(EntityItem p_184816_1_)
     {
         return ItemStack.EMPTY;
@@ -319,20 +303,17 @@
         this.connection.sendPacket(new CPacketChatMessage(message));
     }
 
-    @Override
     public void swingArm(EnumHand hand)
     {
         super.swingArm(hand);
         this.connection.sendPacket(new CPacketAnimation(hand));
     }
 
-    @Override
     public void respawnPlayer()
     {
         this.connection.sendPacket(new CPacketClientStatus(CPacketClientStatus.State.PERFORM_RESPAWN));
     }
 
-    @Override
     protected void damageEntity(DamageSource damageSrc, float damageAmount)
     {
         if (!this.isEntityInvulnerable(damageSrc))
@@ -341,7 +322,6 @@
         }
     }
 
-    @Override
     public void closeScreen()
     {
         this.connection.sendPacket(new CPacketCloseWindow(this.openContainer.windowId));
@@ -352,7 +332,7 @@
     {
         this.inventory.setItemStack(ItemStack.EMPTY);
         super.closeScreen();
-        this.mc.displayGuiScreen(null);
+        this.mc.displayGuiScreen((GuiScreen)null);
     }
 
     public void setPlayerSPHealth(float health)
@@ -387,7 +367,6 @@
         }
     }
 
-    @Override
     public void addStat(StatBase stat, int amount)
     {
         if (stat != null)
@@ -399,13 +378,11 @@
         }
     }
 
-    @Override
     public void sendPlayerAbilities()
     {
         this.connection.sendPacket(new CPacketPlayerAbilities(this.capabilities));
     }
 
-    @Override
     public boolean isUser()
     {
         return true;
@@ -413,8 +390,7 @@
 
     protected void sendHorseJump()
     {
-        this.connection
-        .sendPacket(new CPacketEntityAction(this, CPacketEntityAction.Action.START_RIDING_JUMP, MathHelper.floor(this.getHorseJumpPower() * 100.0F)));
+        this.connection.sendPacket(new CPacketEntityAction(this, CPacketEntityAction.Action.START_RIDING_JUMP, MathHelper.floor(this.getHorseJumpPower() * 100.0F)));
     }
 
     public void sendHorseInventory()
@@ -461,7 +437,6 @@
         this.permissionLevel = p_184839_1_;
     }
 
-    @Override
     public void sendStatusMessage(ITextComponent chatComponent, boolean actionBar)
     {
         if (actionBar)
@@ -474,7 +449,15 @@
         }
     }
 
-    @Override
+    private boolean isHeadspaceFree(BlockPos pos, int height)
+    {
+        for (int y = 0; y < height; y++)
+        {
+            if (!isOpenBlockSpace(pos.add(0, y, 0))) return false;
+        }
+        return true;
+    }
+
     protected boolean pushOutOfBlocks(double x, double y, double z)
     {
         if (this.noClip)
@@ -487,32 +470,36 @@
             double d0 = x - (double)blockpos.getX();
             double d1 = z - (double)blockpos.getZ();
 
-            if (!this.isOpenBlockSpace(blockpos))
+            int entHeight = Math.max((int)Math.ceil(this.height), 1);
+
+            boolean inTranslucentBlock = !this.isHeadspaceFree(blockpos, entHeight);
+
+            if (inTranslucentBlock)
             {
                 int i = -1;
-                double d2 = 9999.0;
+                double d2 = 9999.0D;
 
-                if (this.isOpenBlockSpace(blockpos.west()) && d0 < d2)
+                if (this.isHeadspaceFree(blockpos.west(), entHeight) && d0 < d2)
                 {
                     d2 = d0;
                     i = 0;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.east()) && 1.0 - d0 < d2)
+                if (this.isHeadspaceFree(blockpos.east(), entHeight) && 1.0D - d0 < d2)
                 {
-                    d2 = 1.0 - d0;
+                    d2 = 1.0D - d0;
                     i = 1;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.north()) && d1 < d2)
+                if (this.isHeadspaceFree(blockpos.north(), entHeight) && d1 < d2)
                 {
                     d2 = d1;
                     i = 4;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.south()) && 1.0 - d1 < d2)
+                if (this.isHeadspaceFree(blockpos.south(), entHeight) && 1.0D - d1 < d2)
                 {
-                    d2 = 1.0 - d1;
+                    d2 = 1.0D - d1;
                     i = 5;
                 }
 
@@ -520,22 +507,22 @@
 
                 if (i == 0)
                 {
-                    this.motionX = -0.1F;
+                    this.motionX = -0.10000000149011612D;
                 }
 
                 if (i == 1)
                 {
-                    this.motionX = 0.1F;
+                    this.motionX = 0.10000000149011612D;
                 }
 
                 if (i == 4)
                 {
-                    this.motionZ = -0.1F;
+                    this.motionZ = -0.10000000149011612D;
                 }
 
                 if (i == 5)
                 {
-                    this.motionZ = 0.1F;
+                    this.motionZ = 0.10000000149011612D;
                 }
             }
 
@@ -545,10 +532,10 @@
 
     private boolean isOpenBlockSpace(BlockPos pos)
     {
-        return !this.world.getBlockState(pos).isNormalCube() && !this.world.getBlockState(pos.up()).isNormalCube();
+        IBlockState iblockstate = world.getBlockState(pos);
+        return !iblockstate.getBlock().isNormalCube(iblockstate, world, pos);
     }
 
-    @Override
     public void setSprinting(boolean sprinting)
     {
         super.setSprinting(sprinting);
@@ -562,19 +549,16 @@
         this.experienceLevel = level;
     }
 
-    @Override
     public void sendMessage(ITextComponent component)
     {
         this.mc.ingameGUI.getChatGUI().printChatMessage(component);
     }
 
-    @Override
     public boolean canUseCommand(int permLevel, String commandName)
     {
         return permLevel <= this.getPermissionLevel();
     }
 
-    @Override
     public void handleStatusUpdate(byte id)
     {
         if (id >= 24 && id <= 28)
@@ -587,26 +571,27 @@
         }
     }
 
-    @Override
     public BlockPos getPosition()
     {
-        return new BlockPos(this.posX + 0.5, this.posY + 0.5, this.posZ + 0.5);
+        return new BlockPos(this.posX + 0.5D, this.posY + 0.5D, this.posZ + 0.5D);
     }
 
-    @Override
     public void playSound(SoundEvent soundIn, float volume, float pitch)
     {
-        this.world
-        .playSound(this.posX, this.posY, this.posZ, soundIn, this.getSoundCategory(), volume, pitch, false);
+        net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(this, soundIn, this.getSoundCategory(), volume, pitch);
+        if (event.isCanceled() || event.getSound() == null) return;
+        soundIn = event.getSound();
+        volume = event.getVolume();
+        pitch = event.getPitch();
+
+        this.world.playSound(this.posX, this.posY, this.posZ, soundIn, event.getCategory(), volume, pitch, false);
     }
 
-    @Override
     public boolean isServerWorld()
     {
         return true;
     }
 
-    @Override
     public void setActiveHand(EnumHand hand)
     {
         ItemStack itemstack = this.getHeldItem(hand);
@@ -619,34 +604,30 @@
         }
     }
 
-    @Override
     public boolean isHandActive()
     {
         return this.handActive;
     }
 
-    @Override
     public void resetActiveHand()
     {
         super.resetActiveHand();
         this.handActive = false;
     }
 
-    @Override
     public EnumHand getActiveHand()
     {
         return this.activeHand;
     }
 
-    @Override
     public void notifyDataManagerChange(DataParameter<?> key)
     {
         super.notifyDataManagerChange(key);
 
         if (HAND_STATES.equals(key))
         {
-            boolean flag = (this.dataManager.get(HAND_STATES) & 1) > 0;
-            EnumHand enumhand = (this.dataManager.get(HAND_STATES) & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
+            boolean flag = (((Byte)this.dataManager.get(HAND_STATES)).byteValue() & 1) > 0;
+            EnumHand enumhand = (((Byte)this.dataManager.get(HAND_STATES)).byteValue() & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
 
             if (flag && !this.handActive)
             {
@@ -675,31 +656,26 @@
         return this.horseJumpPower;
     }
 
-    @Override
     public void openEditSign(TileEntitySign signTile)
     {
         this.mc.displayGuiScreen(new GuiEditSign(signTile));
     }
 
-    @Override
     public void displayGuiEditCommandCart(CommandBlockBaseLogic commandBlock)
     {
         this.mc.displayGuiScreen(new GuiEditCommandBlockMinecart(commandBlock));
     }
 
-    @Override
     public void displayGuiCommandBlock(TileEntityCommandBlock commandBlock)
     {
         this.mc.displayGuiScreen(new GuiCommandBlock(commandBlock));
     }
 
-    @Override
     public void openEditStructure(TileEntityStructure structure)
     {
         this.mc.displayGuiScreen(new GuiEditStructure(structure));
     }
 
-    @Override
     public void openBook(ItemStack stack, EnumHand hand)
     {
         Item item = stack.getItem();
@@ -710,7 +686,6 @@
         }
     }
 
-    @Override
     public void displayGUIChest(IInventory chestInventory)
     {
         String s = chestInventory instanceof IInteractionObject ? ((IInteractionObject)chestInventory).getGuiID() : "minecraft:container";
@@ -735,27 +710,28 @@
         {
             this.mc.displayGuiScreen(new GuiBeacon(this.inventory, chestInventory));
         }
-        else if ("minecraft:dispenser".equals(s) || "minecraft:dropper".equals(s))
+        else if (!"minecraft:dispenser".equals(s) && !"minecraft:dropper".equals(s))
+        {
+            if ("minecraft:shulker_box".equals(s))
+            {
+                this.mc.displayGuiScreen(new GuiShulkerBox(this.inventory, chestInventory));
+            }
+            else
+            {
+                this.mc.displayGuiScreen(new GuiChest(this.inventory, chestInventory));
+            }
+        }
+        else
         {
             this.mc.displayGuiScreen(new GuiDispenser(this.inventory, chestInventory));
         }
-        else if ("minecraft:shulker_box".equals(s))
-        {
-            this.mc.displayGuiScreen(new GuiShulkerBox(this.inventory, chestInventory));
-        }
-        else
-        {
-            this.mc.displayGuiScreen(new GuiChest(this.inventory, chestInventory));
-        }
     }
 
-    @Override
     public void openGuiHorseInventory(AbstractHorse horse, IInventory inventoryIn)
     {
         this.mc.displayGuiScreen(new GuiScreenHorseInventory(this.inventory, inventoryIn, horse));
     }
 
-    @Override
     public void displayGui(IInteractionObject guiOwner)
     {
         String s = guiOwner.getGuiID();
@@ -774,32 +750,27 @@
         }
     }
 
-    @Override
     public void displayVillagerTradeGui(IMerchant villager)
     {
         this.mc.displayGuiScreen(new GuiMerchant(this.inventory, villager, this.world));
     }
 
-    @Override
     public void onCriticalHit(Entity entityHit)
     {
         this.mc.effectRenderer.emitParticleAtEntity(entityHit, EnumParticleTypes.CRIT);
     }
 
-    @Override
     public void onEnchantmentCritical(Entity entityHit)
     {
         this.mc.effectRenderer.emitParticleAtEntity(entityHit, EnumParticleTypes.CRIT_MAGIC);
     }
 
-    @Override
     public boolean isSneaking()
     {
         boolean flag = this.movementInput != null && this.movementInput.sneak;
         return flag && !this.sleeping;
     }
 
-    @Override
     public void updateEntityActionState()
     {
         super.updateEntityActionState();
@@ -811,8 +782,8 @@
             this.isJumping = this.movementInput.jump;
             this.prevRenderArmYaw = this.renderArmYaw;
             this.prevRenderArmPitch = this.renderArmPitch;
-            this.renderArmPitch = (float)((double)this.renderArmPitch + (double)(this.rotationPitch - this.renderArmPitch) * 0.5);
-            this.renderArmYaw = (float)((double)this.renderArmYaw + (double)(this.rotationYaw - this.renderArmYaw) * 0.5);
+            this.renderArmPitch = (float)((double)this.renderArmPitch + (double)(this.rotationPitch - this.renderArmPitch) * 0.5D);
+            this.renderArmYaw = (float)((double)this.renderArmYaw + (double)(this.rotationYaw - this.renderArmYaw) * 0.5D);
         }
     }
 
@@ -821,14 +792,13 @@
         return this.mc.getRenderViewEntity() == this;
     }
 
-    @Override
     public void onLivingUpdate()
     {
-        this.sprintingTicksLeft++;
+        ++this.sprintingTicksLeft;
 
         if (this.sprintToggleTimer > 0)
         {
-            this.sprintToggleTimer--;
+            --this.sprintToggleTimer;
         }
 
         this.prevTimeInPortal = this.timeInPortal;
@@ -842,14 +812,12 @@
                     this.closeScreen();
                 }
 
-                this.mc.displayGuiScreen(null);
+                this.mc.displayGuiScreen((GuiScreen)null);
             }
 
             if (this.timeInPortal == 0.0F)
             {
-                this.mc
-                .getSoundHandler()
-                .playSound(PositionedSoundRecord.getMasterRecord(SoundEvents.BLOCK_PORTAL_TRIGGER, this.rand.nextFloat() * 0.4F + 0.8F));
+                this.mc.getSoundHandler().playSound(PositionedSoundRecord.getMasterRecord(SoundEvents.BLOCK_PORTAL_TRIGGER, this.rand.nextFloat() * 0.4F + 0.8F));
             }
 
             this.timeInPortal += 0.0125F;
@@ -885,7 +853,7 @@
 
         if (this.timeUntilPortal > 0)
         {
-            this.timeUntilPortal--;
+            --this.timeUntilPortal;
         }
 
         boolean flag = this.movementInput.jump;
@@ -893,6 +861,7 @@
         float f = 0.8F;
         boolean flag2 = this.movementInput.moveForward >= 0.8F;
         this.movementInput.updatePlayerMoveState();
+        net.minecraftforge.client.ForgeHooksClient.onInputUpdate(this, this.movementInput);
         this.mc.getTutorial().handleMovement(this.movementInput);
 
         if (this.isHandActive() && !this.isRiding())
@@ -906,34 +875,22 @@
 
         if (this.autoJumpTime > 0)
         {
-            this.autoJumpTime--;
+            --this.autoJumpTime;
             flag3 = true;
             this.movementInput.jump = true;
         }
 
         AxisAlignedBB axisalignedbb = this.getEntityBoundingBox();
-        this.pushOutOfBlocks(
-            this.posX - (double)this.width * 0.35, axisalignedbb.minY + 0.5, this.posZ + (double)this.width * 0.35
-        );
-        this.pushOutOfBlocks(
-            this.posX - (double)this.width * 0.35, axisalignedbb.minY + 0.5, this.posZ - (double)this.width * 0.35
-        );
-        this.pushOutOfBlocks(
-            this.posX + (double)this.width * 0.35, axisalignedbb.minY + 0.5, this.posZ - (double)this.width * 0.35
-        );
-        this.pushOutOfBlocks(
-            this.posX + (double)this.width * 0.35, axisalignedbb.minY + 0.5, this.posZ + (double)this.width * 0.35
-        );
+        net.minecraftforge.client.event.PlayerSPPushOutOfBlocksEvent event = new net.minecraftforge.client.event.PlayerSPPushOutOfBlocksEvent(this, axisalignedbb);
+        if(!net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) { axisalignedbb = event.getEntityBoundingBox();
+        this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, axisalignedbb.minY + 0.5D, this.posZ + (double)this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, axisalignedbb.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, axisalignedbb.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, axisalignedbb.minY + 0.5D, this.posZ + (double)this.width * 0.35D);
+        }
         boolean flag4 = (float)this.getFoodStats().getFoodLevel() > 6.0F || this.capabilities.allowFlying;
 
-        if (this.onGround
-                && !flag1
-                && !flag2
-                && this.movementInput.moveForward >= 0.8F
-                && !this.isSprinting()
-                && flag4
-                && !this.isHandActive()
-                && !this.isPotionActive(MobEffects.BLINDNESS))
+        if (this.onGround && !flag1 && !flag2 && this.movementInput.moveForward >= 0.8F && !this.isSprinting() && flag4 && !this.isHandActive() && !this.isPotionActive(MobEffects.BLINDNESS))
         {
             if (this.sprintToggleTimer <= 0 && !this.mc.gameSettings.keyBindSprint.isKeyDown())
             {
@@ -945,12 +902,7 @@
             }
         }
 
-        if (!this.isSprinting()
-                && this.movementInput.moveForward >= 0.8F
-                && flag4
-                && !this.isHandActive()
-                && !this.isPotionActive(MobEffects.BLINDNESS)
-                && this.mc.gameSettings.keyBindSprint.isKeyDown())
+        if (!this.isSprinting() && this.movementInput.moveForward >= 0.8F && flag4 && !this.isHandActive() && !this.isPotionActive(MobEffects.BLINDNESS) && this.mc.gameSettings.keyBindSprint.isKeyDown())
         {
             this.setSprinting(true);
         }
@@ -985,12 +937,7 @@
             }
         }
 
-        if (this.movementInput.jump
-                && !flag
-                && !this.onGround
-                && this.motionY < 0.0
-                && !this.isElytraFlying()
-                && !this.capabilities.isFlying)
+        if (this.movementInput.jump && !flag && !this.onGround && this.motionY < 0.0D && !this.isElytraFlying() && !this.capabilities.isFlying)
         {
             ItemStack itemstack = this.getItemStackFromSlot(EntityEquipmentSlot.CHEST);
 
@@ -1006,14 +953,14 @@
         {
             if (this.movementInput.sneak)
             {
-                this.movementInput.moveStrafe = (float)((double)this.movementInput.moveStrafe / 0.3);
-                this.movementInput.moveForward = (float)((double)this.movementInput.moveForward / 0.3);
-                this.motionY = this.motionY - (double)(this.capabilities.getFlySpeed() * 3.0F);
+                this.movementInput.moveStrafe = (float)((double)this.movementInput.moveStrafe / 0.3D);
+                this.movementInput.moveForward = (float)((double)this.movementInput.moveForward / 0.3D);
+                this.motionY -= (double)(this.capabilities.getFlySpeed() * 3.0F);
             }
 
             if (this.movementInput.jump)
             {
-                this.motionY = this.motionY + (double)(this.capabilities.getFlySpeed() * 3.0F);
+                this.motionY += (double)(this.capabilities.getFlySpeed() * 3.0F);
             }
         }
 
@@ -1023,7 +970,7 @@
 
             if (this.horseJumpPowerCounter < 0)
             {
-                this.horseJumpPowerCounter++;
+                ++this.horseJumpPowerCounter;
 
                 if (this.horseJumpPowerCounter == 0)
                 {
@@ -1044,7 +991,7 @@
             }
             else if (flag)
             {
-                this.horseJumpPowerCounter++;
+                ++this.horseJumpPowerCounter;
 
                 if (this.horseJumpPowerCounter < 10)
                 {
@@ -1070,7 +1017,6 @@
         }
     }
 
-    @Override
     public void updateRidden()
     {
         super.updateRidden();
@@ -1079,11 +1025,8 @@
         if (this.getRidingEntity() instanceof EntityBoat)
         {
             EntityBoat entityboat = (EntityBoat)this.getRidingEntity();
-            entityboat.updateInputs(
-                this.movementInput.leftKeyDown, this.movementInput.rightKeyDown, this.movementInput.forwardKeyDown, this.movementInput.backKeyDown
-            );
-            this.rowingBoat = this.rowingBoat
-                                   | (this.movementInput.leftKeyDown || this.movementInput.rightKeyDown || this.movementInput.forwardKeyDown || this.movementInput.backKeyDown);
+            entityboat.updateInputs(this.movementInput.leftKeyDown, this.movementInput.rightKeyDown, this.movementInput.forwardKeyDown, this.movementInput.backKeyDown);
+            this.rowingBoat |= this.movementInput.leftKeyDown || this.movementInput.rightKeyDown || this.movementInput.forwardKeyDown || this.movementInput.backKeyDown;
         }
     }
 
@@ -1093,7 +1036,6 @@
     }
 
     @Nullable
-    @Override
     public PotionEffect removeActivePotionEffect(@Nullable Potion potioneffectin)
     {
         if (potioneffectin == MobEffects.NAUSEA)
@@ -1105,7 +1047,6 @@
         return super.removeActivePotionEffect(potioneffectin);
     }
 
-    @Override
     public void move(MoverType type, double x, double y, double z)
     {
         double d0 = this.posX;
@@ -1130,8 +1071,10 @@
                 if (vec2f.x != 0.0F || vec2f.y != 0.0F)
                 {
                     Vec3d vec3d = new Vec3d(this.posX, this.getEntityBoundingBox().minY, this.posZ);
-                    Vec3d vec3d1 = new Vec3d(this.posX + (double)p_189810_1_, this.getEntityBoundingBox().minY, this.posZ + (double)p_189810_2_);
-                    Vec3d vec3d2 = new Vec3d((double)p_189810_1_, 0.0, (double)p_189810_2_);
+                    double d0 = this.posX + (double)p_189810_1_;
+                    double d1 = this.posZ + (double)p_189810_2_;
+                    Vec3d vec3d1 = new Vec3d(d0, this.getEntityBoundingBox().minY, d1);
+                    Vec3d vec3d2 = new Vec3d((double)p_189810_1_, 0.0D, (double)p_189810_2_);
                     float f = this.getAIMoveSpeed();
                     float f1 = (float)vec3d2.lengthSquared();
 
@@ -1139,8 +1082,8 @@
                     {
                         float f2 = f * vec2f.x;
                         float f3 = f * vec2f.y;
-                        float f4 = MathHelper.sin(this.rotationYaw * (float)(Math.PI / 180.0));
-                        float f5 = MathHelper.cos(this.rotationYaw * (float)(Math.PI / 180.0));
+                        float f4 = MathHelper.sin(this.rotationYaw * 0.017453292F);
+                        float f5 = MathHelper.cos(this.rotationYaw * 0.017453292F);
                         vec3d2 = new Vec3d((double)(f2 * f5 - f3 * f4), vec3d2.y, (double)(f3 * f5 + f2 * f4));
                         f1 = (float)vec3d2.lengthSquared();
 
@@ -1155,7 +1098,7 @@
                     Vec3d vec3d13 = this.getForward();
                     float f13 = (float)(vec3d13.x * vec3d12.x + vec3d13.z * vec3d12.z);
 
-                    if (!(f13 < -0.15F))
+                    if (f13 >= -0.15F)
                     {
                         BlockPos blockpos = new BlockPos(this.posX, this.getEntityBoundingBox().maxY, this.posZ);
                         IBlockState iblockstate = this.world.getBlockState(blockpos);
@@ -1179,11 +1122,10 @@
                                 Vec3d vec3d4 = vec3d1.add(vec3d12.scale((double)f8));
                                 float f9 = this.width;
                                 float f10 = this.height;
-                                AxisAlignedBB axisalignedbb = new AxisAlignedBB(vec3d, vec3d4.add(0.0, (double)f10, 0.0))
-                                .grow((double)f9, 0.0, (double)f9);
-                                Vec3d lvt_19_1_ = vec3d.add(0.0, 0.51F, 0.0);
-                                vec3d4 = vec3d4.add(0.0, 0.51F, 0.0);
-                                Vec3d vec3d5 = vec3d12.crossProduct(new Vec3d(0.0, 1.0, 0.0));
+                                AxisAlignedBB axisalignedbb = (new AxisAlignedBB(vec3d, vec3d4.add(0.0D, (double)f10, 0.0D))).grow((double)f9, 0.0D, (double)f9);
+                                Vec3d lvt_19_1_ = vec3d.add(0.0D, 0.5099999904632568D, 0.0D);
+                                vec3d4 = vec3d4.add(0.0D, 0.5099999904632568D, 0.0D);
+                                Vec3d vec3d5 = vec3d12.crossProduct(new Vec3d(0.0D, 1.0D, 0.0D));
                                 Vec3d vec3d6 = vec3d5.scale((double)(f9 * 0.5F));
                                 Vec3d vec3d7 = lvt_19_1_.subtract(vec3d6);
                                 Vec3d vec3d8 = vec3d4.subtract(vec3d6);
@@ -1193,9 +1135,11 @@
 
                                 if (!list.isEmpty())
                                 {
+                                    ;
                                 }
 
                                 float f11 = Float.MIN_VALUE;
+                                label86:
 
                                 for (AxisAlignedBB axisalignedbb2 : list)
                                 {
@@ -1204,9 +1148,15 @@
                                         f11 = (float)axisalignedbb2.maxY;
                                         Vec3d vec3d11 = axisalignedbb2.getCenter();
                                         BlockPos blockpos1 = new BlockPos(vec3d11);
+                                        int i = 1;
 
-                                        for (int i = 1; (float)i < f7; i++)
+                                        while (true)
                                         {
+                                            if ((float)i >= f7)
+                                            {
+                                                break label86;
+                                            }
+
                                             BlockPos blockpos2 = blockpos1.up(i);
                                             IBlockState iblockstate2 = this.world.getBlockState(blockpos2);
                                             AxisAlignedBB axisalignedbb1;
@@ -1231,9 +1181,9 @@
                                                     return;
                                                 }
                                             }
+
+                                            ++i;
                                         }
-
-                                        break;
                                     }
                                 }
 
@@ -1241,7 +1191,7 @@
                                 {
                                     float f14 = (float)((double)f11 - this.getEntityBoundingBox().minY);
 
-                                    if (!(f14 <= 0.5F) && !(f14 > f7))
+                                    if (f14 > 0.5F && f14 <= f7)
                                     {
                                         this.autoJumpTime = 1;
                                     }
@@ -1252,5 +1202,18 @@
                 }
             }
         }
+    }
+
+    public void updateSyncFields(EntityPlayerSP old)
+    {
+        this.lastReportedPosX = old.lastReportedPosX;
+        this.lastReportedPosY = old.lastReportedPosY;
+        this.lastReportedPosZ = old.lastReportedPosZ;
+        this.lastReportedYaw = old.lastReportedYaw;
+        this.lastReportedPitch = old.lastReportedPitch;
+        this.prevOnGround = old.prevOnGround;
+        this.serverSneakState = old.serverSneakState;
+        this.serverSprintState = old.serverSprintState;
+        this.positionUpdateTicks = old.positionUpdateTicks;
     }
 }
