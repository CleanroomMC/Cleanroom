--- before/net/minecraft/client/gui/inventory/GuiContainerCreative.java
+++ after/net/minecraft/client/gui/inventory/GuiContainerCreative.java
@@ -57,6 +57,8 @@
     private Slot destroyItemSlot;
     private boolean clearSearch;
     private CreativeCrafting listener;
+    private static int tabPage = 0;
+    private int maxPages = 0;
 
     public GuiContainerCreative(EntityPlayer player)
     {
@@ -305,6 +307,13 @@
             this.setCurrentCreativeTab(CreativeTabs.CREATIVE_TAB_ARRAY[i]);
             this.listener = new CreativeCrafting(this.mc);
             this.mc.player.inventoryContainer.addListener(this.listener);
+            int tabCount = CreativeTabs.CREATIVE_TAB_ARRAY.length;
+            if (tabCount > 12)
+            {
+                buttonList.add(new GuiButton(101, guiLeft,              guiTop - 50, 20, 20, "<"));
+                buttonList.add(new GuiButton(102, guiLeft + xSize - 20, guiTop - 50, 20, 20, ">"));
+                maxPages = (int) Math.ceil((tabCount - 12) / 10D);
+            }
         }
         else
         {
@@ -328,7 +337,7 @@
     @Override
     protected void keyTyped(char typedChar, int keyCode) throws IOException
     {
-        if (selectedTabIndex != CreativeTabs.SEARCH.getIndex())
+        if (!CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex].hasSearchBar())
         {
             if (GameSettings.isKeyDown(this.mc.gameSettings.keyBindChat))
             {
@@ -366,6 +375,34 @@
         GuiContainerCreative.ContainerCreative guicontainercreative$containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
         guicontainercreative$containercreative.itemList.clear();
 
+        CreativeTabs tab = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
+        if (tab.hasSearchBar() && tab != CreativeTabs.SEARCH)
+        {
+            tab.displayAllRelevantItems(guicontainercreative$containercreative.itemList);
+            if (!this.searchField.getText().isEmpty())
+            {
+                //TODO: Make this a SearchTree not a manual search
+                String search = this.searchField.getText().toLowerCase(Locale.ROOT);
+                java.util.Iterator<ItemStack> itr = guicontainercreative$containercreative.itemList.iterator();
+                while (itr.hasNext()) {
+                    ItemStack stack = itr.next();
+                    boolean matches = false;
+                    for (String line : stack.getTooltip(this.mc.player, this.mc.gameSettings.advancedItemTooltips ? ITooltipFlag.TooltipFlags.ADVANCED : ITooltipFlag.TooltipFlags.NORMAL))
+                    {
+                        if (TextFormatting.getTextWithoutFormattingCodes(line).toLowerCase(Locale.ROOT).contains(search)) {
+                            matches = true;
+                            break;
+                        }
+                    }
+                    if (!matches)
+                        itr.remove();
+                }
+            }
+            this.currentScroll = 0.0F;
+            guicontainercreative$containercreative.scrollTo(0.0F);
+            return;
+        }
+
         if (this.searchField.getText().isEmpty())
         {
             for (Item item : Item.REGISTRY)
@@ -390,10 +427,10 @@
     {
         CreativeTabs creativetabs = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
 
-        if (creativetabs.drawInForegroundOfTab())
+        if (creativetabs != null && creativetabs.drawInForegroundOfTab())
         {
             GlStateManager.disableBlend();
-            this.fontRenderer.drawString(I18n.format(creativetabs.getTranslationKey()), 8, 6, 4210752);
+            this.fontRenderer.drawString(I18n.format(creativetabs.getTranslationKey()), 8, 6, creativetabs.getLabelColor());
         }
     }
 
@@ -427,7 +464,7 @@
 
             for (CreativeTabs creativetabs : CreativeTabs.CREATIVE_TAB_ARRAY)
             {
-                if (this.isMouseOverTab(creativetabs, i, j))
+                if (creativetabs != null && this.isMouseOverTab(creativetabs, i, j))
                 {
                     this.setCurrentCreativeTab(creativetabs);
                     return;
@@ -440,6 +477,7 @@
 
     private boolean needsScrollBars()
     {
+        if (CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex] == null) return false;
         return selectedTabIndex != CreativeTabs.INVENTORY.getIndex()
                && CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex].hasScrollbar()
                && ((GuiContainerCreative.ContainerCreative)this.inventorySlots).canScroll();
@@ -447,6 +485,7 @@
 
     private void setCurrentCreativeTab(CreativeTabs tab)
     {
+        if (tab == null) return;
         int i = selectedTabIndex;
         selectedTabIndex = tab.getIndex();
         GuiContainerCreative.ContainerCreative guicontainercreative$containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
@@ -552,7 +591,7 @@
 
         if (this.searchField != null)
         {
-            if (tab == CreativeTabs.SEARCH)
+            if (tab.hasSearchBar())
             {
                 this.searchField.setVisible(true);
                 this.searchField.setCanLoseFocus(false);
@@ -631,21 +670,43 @@
 
         super.drawScreen(mouseX, mouseY, partialTicks);
 
-        for (CreativeTabs creativetabs : CreativeTabs.CREATIVE_TAB_ARRAY)
+        int start = tabPage * 10;
+        int end = Math.min(CreativeTabs.CREATIVE_TAB_ARRAY.length, ((tabPage + 1) * 10) + 2);
+        if (tabPage != 0) start += 2;
+        boolean rendered = false;
+
+        for (CreativeTabs creativetabs : java.util.Arrays.copyOfRange(CreativeTabs.CREATIVE_TAB_ARRAY,start,end))
         {
+            if (creativetabs == null) continue;
             if (this.renderCreativeInventoryHoveringText(creativetabs, mouseX, mouseY))
             {
+                rendered = true;
                 break;
             }
         }
 
-        if (this.destroyItemSlot != null
-                && selectedTabIndex == CreativeTabs.INVENTORY.getIndex()
-                && this.isPointInRegion(this.destroyItemSlot.xPos, this.destroyItemSlot.yPos, 16, 16, mouseX, mouseY))
+        if (!rendered && !renderCreativeInventoryHoveringText(CreativeTabs.SEARCH, mouseX, mouseY))
+        {
+            renderCreativeInventoryHoveringText(CreativeTabs.INVENTORY, mouseX, mouseY);
+        }
+
+        if (this.destroyItemSlot != null && selectedTabIndex == CreativeTabs.INVENTORY.getIndex() && this.isPointInRegion(this.destroyItemSlot.xPos, this.destroyItemSlot.yPos, 16, 16, mouseX, mouseY))
         {
             this.drawHoveringText(I18n.format("inventory.binSlot"), mouseX, mouseY);
         }
 
+        if (maxPages != 0)
+        {
+            String page = String.format("%d / %d", tabPage + 1, maxPages + 1);
+            int width = fontRenderer.getStringWidth(page);
+            GlStateManager.disableLighting();
+            this.zLevel = 300.0F;
+            itemRender.zLevel = 300.0F;
+            fontRenderer.drawString(page, guiLeft + (xSize / 2) - (width / 2), guiTop - 44, -1);
+            this.zLevel = 0.0F;
+            itemRender.zLevel = 0.0F;
+        }
+
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableLighting();
         this.renderHoveredToolTip(mouseX, mouseY);
@@ -690,7 +751,7 @@
             {
                 if (i == 0)
                 {
-                    list.set(i, stack.getRarity().color + list.get(i));
+                    list.set(i, stack.getItem().getForgeRarity(stack).getColor() + list.get(i));
                 }
                 else
                 {
@@ -698,7 +759,10 @@
                 }
             }
 
-            this.drawHoveringText(list, x, y);
+            net.minecraft.client.gui.FontRenderer font = stack.getItem().getFontRenderer(stack);
+            net.minecraftforge.fml.client.config.GuiUtils.preItemToolTip(stack);
+            this.drawHoveringText(list, x, y, (font == null ? fontRenderer : font));
+            net.minecraftforge.fml.client.config.GuiUtils.postItemToolTip();
         }
         else
         {
@@ -713,17 +777,36 @@
         RenderHelper.enableGUIStandardItemLighting();
         CreativeTabs creativetabs = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
 
-        for (CreativeTabs creativetabs1 : CreativeTabs.CREATIVE_TAB_ARRAY)
+        int start = tabPage * 10;
+        int end = Math.min(CreativeTabs.CREATIVE_TAB_ARRAY.length, ((tabPage + 1) * 10 + 2));
+        if (tabPage != 0) start += 2;
+
+        for (CreativeTabs creativetabs1 : java.util.Arrays.copyOfRange(CreativeTabs.CREATIVE_TAB_ARRAY,start,end))
         {
             this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
 
+            if (creativetabs1 == null) continue;
             if (creativetabs1.getIndex() != selectedTabIndex)
             {
                 this.drawTab(creativetabs1);
             }
         }
 
-        this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
+        if (tabPage != 0)
+        {
+            if (creativetabs != CreativeTabs.SEARCH)
+            {
+                this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
+                drawTab(CreativeTabs.SEARCH);
+            }
+            if (creativetabs != CreativeTabs.INVENTORY)
+            {
+                this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
+                drawTab(CreativeTabs.INVENTORY);
+            }
+        }
+
+        this.mc.getTextureManager().bindTexture(creativetabs.getBackgroundImage());
         this.drawTexturedModalRect(this.guiLeft, this.guiTop, 0, 0, this.xSize, this.ySize);
         this.searchField.drawTextBox();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
@@ -737,6 +820,14 @@
             this.drawTexturedModalRect(i, j + (int)((float)(k - j - 17) * this.currentScroll), 232 + (this.needsScrollBars() ? 0 : 12), 0, 12, 15);
         }
 
+        if (creativetabs == null || creativetabs.getTabPage() != tabPage)
+        {
+            if (creativetabs != CreativeTabs.SEARCH && creativetabs != CreativeTabs.INVENTORY)
+            {
+                return;
+            }
+        }
+
         this.drawTab(creativetabs);
 
         if (creativetabs == CreativeTabs.INVENTORY)
@@ -754,6 +845,14 @@
 
     protected boolean isMouseOverTab(CreativeTabs tab, int mouseX, int mouseY)
     {
+        if (tab.getTabPage() != tabPage)
+        {
+            if (tab != CreativeTabs.SEARCH && tab != CreativeTabs.INVENTORY)
+            {
+                return false;
+            }
+        }
+
         int i = tab.getColumn();
         int j = 28 * i;
         int k = 0;
@@ -850,6 +949,8 @@
         }
 
         GlStateManager.disableLighting();
+        GlStateManager.color(1F, 1F, 1F); //Forge: Reset color in case Items change it.
+        GlStateManager.enableBlend(); //Forge: Make sure blend is enabled else tabs show a white border.
         this.drawTexturedModalRect(l, i1, j, k, 28, 32);
         this.zLevel = 100.0F;
         this.itemRender.zLevel = 100.0F;
@@ -872,6 +973,15 @@
         {
             this.mc.displayGuiScreen(new GuiStats(this, this.mc.player.getStatFileWriter()));
         }
+
+        if (button.id == 101)
+        {
+            tabPage = Math.max(tabPage - 1, 0);
+        }
+        else if (button.id == 102)
+        {
+            tabPage = Math.min(tabPage + 1, maxPages);
+        }
     }
 
     public int getSelectedTabIndex()
@@ -1093,6 +1203,39 @@
         {
             return this.slot.canTakeStack(playerIn);
         }
+
+        /*========================================= FORGE START =====================================*/
+        public net.minecraft.util.ResourceLocation getBackgroundLocation()
+        {
+            return this.slot.getBackgroundLocation();
+        }
+
+        public void setBackgroundLocation(net.minecraft.util.ResourceLocation texture)
+        {
+            this.slot.setBackgroundLocation(texture);
+        }
+
+        public void setBackgroundName(@Nullable String name)
+        {
+            this.slot.setBackgroundName(name);
+        }
+
+        @Nullable
+        public net.minecraft.client.renderer.texture.TextureAtlasSprite getBackgroundSprite()
+        {
+            return this.slot.getBackgroundSprite();
+        }
+
+        public int getSlotIndex()
+        {
+            return this.slot.getSlotIndex();
+        }
+
+        public boolean isSameInventory(Slot other)
+        {
+            return this.slot.isSameInventory(other);
+        }
+        /*========================================= FORGE END =====================================*/
     }
 
     @SideOnly(Side.CLIENT)
