--- before/net/minecraft/client/gui/GuiIngame.java
+++ after/net/minecraft/client/gui/GuiIngame.java
@@ -90,7 +90,7 @@
     protected int lastPlayerHealth;
     protected long lastSystemTime;
     protected long healthUpdateCounter;
-    protected final Map<ChatType, List<IChatListener>> chatListeners = Maps.newHashMap();
+    protected final Map<ChatType, List<IChatListener>> chatListeners = Maps.<ChatType, List<IChatListener>>newHashMap();
 
     public GuiIngame(Minecraft mcIn)
     {
@@ -109,11 +109,11 @@
         }
 
         IChatListener ichatlistener = NarratorChatListener.INSTANCE;
-        this.chatListeners.get(ChatType.CHAT).add(new NormalChatListener(mcIn));
-        this.chatListeners.get(ChatType.CHAT).add(ichatlistener);
-        this.chatListeners.get(ChatType.SYSTEM).add(new NormalChatListener(mcIn));
-        this.chatListeners.get(ChatType.SYSTEM).add(ichatlistener);
-        this.chatListeners.get(ChatType.GAME_INFO).add(new OverlayChatListener(mcIn));
+        (this.chatListeners.get(ChatType.CHAT)).add(new NormalChatListener(mcIn));
+        (this.chatListeners.get(ChatType.CHAT)).add(ichatlistener);
+        (this.chatListeners.get(ChatType.SYSTEM)).add(new NormalChatListener(mcIn));
+        (this.chatListeners.get(ChatType.SYSTEM)).add(ichatlistener);
+        (this.chatListeners.get(ChatType.GAME_INFO)).add(new OverlayChatListener(mcIn));
         this.setDefaultTitlesTimes();
     }
 
@@ -139,12 +139,7 @@
         else
         {
             GlStateManager.enableDepth();
-            GlStateManager.tryBlendFuncSeparate(
-                GlStateManager.SourceFactor.SRC_ALPHA,
-                GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                GlStateManager.SourceFactor.ONE,
-                GlStateManager.DestFactor.ZERO
-            );
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         }
 
         ItemStack itemstack = this.mc.player.inventory.armorItemInSlot(3);
@@ -156,8 +151,7 @@
 
         if (!this.mc.player.isPotionActive(MobEffects.NAUSEA))
         {
-            float f = this.mc.player.prevTimeInPortal
-                      + (this.mc.player.timeInPortal - this.mc.player.prevTimeInPortal) * partialTicks;
+            float f = this.mc.player.prevTimeInPortal + (this.mc.player.timeInPortal - this.mc.player.prevTimeInPortal) * partialTicks;
 
             if (f > 0.0F)
             {
@@ -178,9 +172,7 @@
         this.mc.getTextureManager().bindTexture(ICONS);
         GlStateManager.enableBlend();
         this.renderAttackIndicator(partialTicks, scaledresolution);
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         this.mc.profiler.startSection("bossHealth");
         this.overlayBoss.renderBossHealth();
         this.mc.profiler.endSection();
@@ -264,12 +256,7 @@
                 GlStateManager.pushMatrix();
                 GlStateManager.translate((float)(i / 2), (float)(j - 68), 0.0F);
                 GlStateManager.enableBlend();
-                GlStateManager.tryBlendFuncSeparate(
-                    GlStateManager.SourceFactor.SRC_ALPHA,
-                    GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                    GlStateManager.SourceFactor.ONE,
-                    GlStateManager.DestFactor.ZERO
-                );
+                GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                 int l = 16777215;
 
                 if (this.animateOverlayMessageColor)
@@ -277,7 +264,7 @@
                     l = MathHelper.hsvToRGB(f2 / 50.0F, 0.7F, 0.6F) & 16777215;
                 }
 
-                fontrenderer.drawString(this.overlayMessage, -fontrenderer.getStringWidth(this.overlayMessage) / 2, -4, l + (l1 << 24 & 0xFF000000));
+                fontrenderer.drawString(this.overlayMessage, -fontrenderer.getStringWidth(this.overlayMessage) / 2, -4, l + (l1 << 24 & -16777216));
                 GlStateManager.disableBlend();
                 GlStateManager.popMatrix();
             }
@@ -311,15 +298,10 @@
                 GlStateManager.pushMatrix();
                 GlStateManager.translate((float)(i / 2), (float)(j / 2), 0.0F);
                 GlStateManager.enableBlend();
-                GlStateManager.tryBlendFuncSeparate(
-                    GlStateManager.SourceFactor.SRC_ALPHA,
-                    GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                    GlStateManager.SourceFactor.ONE,
-                    GlStateManager.DestFactor.ZERO
-                );
+                GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                 GlStateManager.pushMatrix();
                 GlStateManager.scale(4.0F, 4.0F, 4.0F);
-                int j2 = i2 << 24 & 0xFF000000;
+                int j2 = i2 << 24 & -16777216;
                 fontrenderer.drawString(this.displayedTitle, (float)(-fontrenderer.getStringWidth(this.displayedTitle) / 2), -10.0F, 16777215 | j2, true);
                 GlStateManager.popMatrix();
                 GlStateManager.pushMatrix();
@@ -355,9 +337,7 @@
         }
 
         GlStateManager.enableBlend();
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         GlStateManager.disableAlpha();
         GlStateManager.pushMatrix();
         GlStateManager.translate(0.0F, (float)(j - 48), 0.0F);
@@ -367,8 +347,7 @@
         GlStateManager.popMatrix();
         scoreobjective1 = scoreboard.getObjectiveInDisplaySlot(0);
 
-        if (!this.mc.gameSettings.keyBindPlayerList.isKeyDown()
-                || this.mc.isIntegratedServerRunning() && this.mc.player.connection.getPlayerInfoMap().size() <= 1 && scoreobjective1 == null)
+        if (!this.mc.gameSettings.keyBindPlayerList.isKeyDown() || this.mc.isIntegratedServerRunning() && this.mc.player.connection.getPlayerInfoMap().size() <= 1 && scoreobjective1 == null)
         {
             this.overlayPlayerList.updatePlayerList(false);
         }
@@ -400,8 +379,8 @@
 
                 BlockPos blockpos = raytraceresult.getBlockPos();
 
-                if (!this.mc.world.getBlockState(blockpos).getBlock().hasTileEntity()
-                        || !(this.mc.world.getTileEntity(blockpos) instanceof IInventory))
+                net.minecraft.block.state.IBlockState state = this.mc.world.getBlockState(blockpos);
+                if (!state.getBlock().hasTileEntity(state) || !(this.mc.world.getTileEntity(blockpos) instanceof IInventory))
                 {
                     return;
                 }
@@ -423,12 +402,7 @@
             }
             else
             {
-                GlStateManager.tryBlendFuncSeparate(
-                    GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR,
-                    GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR,
-                    GlStateManager.SourceFactor.ONE,
-                    GlStateManager.DestFactor.ZERO
-                );
+                GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                 GlStateManager.enableAlpha();
                 this.drawTexturedModalRect(l / 2 - 7, i1 / 2 - 7, 0, 0, 16, 16);
 
@@ -440,7 +414,7 @@
                     if (this.mc.pointedEntity != null && this.mc.pointedEntity instanceof EntityLivingBase && f >= 1.0F)
                     {
                         flag = this.mc.player.getCooldownPeriod() > 5.0F;
-                        flag &= ((EntityLivingBase)this.mc.pointedEntity).isEntityAlive();
+                        flag = flag & ((EntityLivingBase)this.mc.pointedEntity).isEntityAlive();
                     }
 
                     int i = i1 / 2 - 7 + 16;
@@ -476,7 +450,10 @@
             {
                 Potion potion = potioneffect.getPotion();
 
-                if (potion.hasStatusIcon() && potioneffect.doesShowParticles())
+                if (!potion.shouldRenderHUD(potioneffect)) continue;
+                // Rebind in case previous renderHUDEffect changed texture
+                this.mc.getTextureManager().bindTexture(GuiContainer.INVENTORY_BACKGROUND);
+                if (potioneffect.doesShowParticles())
                 {
                     int k = resolution.getScaledWidth();
                     int l = 1;
@@ -490,13 +467,13 @@
 
                     if (potion.isBeneficial())
                     {
-                        i++;
-                        k -= 25 * i;
+                        ++i;
+                        k = k - 25 * i;
                     }
                     else
                     {
-                        j++;
-                        k -= 25 * j;
+                        ++j;
+                        k = k - 25 * j;
                         l += 26;
                     }
 
@@ -514,14 +491,15 @@
                         if (potioneffect.getDuration() <= 200)
                         {
                             int j1 = 10 - potioneffect.getDuration() / 20;
-                            f = MathHelper.clamp((float)potioneffect.getDuration() / 10.0F / 5.0F * 0.5F, 0.0F, 0.5F)
-                                + MathHelper.cos((float)potioneffect.getDuration() * (float) Math.PI / 5.0F)
-                                * MathHelper.clamp((float)j1 / 10.0F * 0.25F, 0.0F, 0.25F);
+                            f = MathHelper.clamp((float)potioneffect.getDuration() / 10.0F / 5.0F * 0.5F, 0.0F, 0.5F) + MathHelper.cos((float)potioneffect.getDuration() * (float)Math.PI / 5.0F) * MathHelper.clamp((float)j1 / 10.0F * 0.25F, 0.0F, 0.25F);
                         }
                     }
 
                     GlStateManager.color(1.0F, 1.0F, 1.0F, f);
+                    // FORGE - Move status icon check down from above so renderHUDEffect will still be called without a status icon
+                    if (potion.hasStatusIcon())
                     this.drawTexturedModalRect(k + 3, l + 3, i1 % 8 * 18, 198 + i1 / 8 * 18, 18, 18);
+                    potion.renderHUDEffect(potioneffect, this, k, l, this.zLevel, f);
                 }
             }
         }
@@ -559,15 +537,10 @@
             this.zLevel = f;
             GlStateManager.enableRescaleNormal();
             GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(
-                GlStateManager.SourceFactor.SRC_ALPHA,
-                GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                GlStateManager.SourceFactor.ONE,
-                GlStateManager.DestFactor.ZERO
-            );
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
             RenderHelper.enableGUIStandardItemLighting();
 
-            for (int l = 0; l < 9; l++)
+            for (int l = 0; l < 9; ++l)
             {
                 int i1 = i - 90 + l * 20 + 2;
                 int j1 = sr.getScaledHeight() - 16 - 3;
@@ -702,12 +675,7 @@
             {
                 GlStateManager.pushMatrix();
                 GlStateManager.enableBlend();
-                GlStateManager.tryBlendFuncSeparate(
-                    GlStateManager.SourceFactor.SRC_ALPHA,
-                    GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA,
-                    GlStateManager.SourceFactor.ONE,
-                    GlStateManager.DestFactor.ZERO
-                );
+                GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                 this.getFontRenderer().drawStringWithShadow(s, (float)i, (float)j, 16777215 + (k << 24));
                 GlStateManager.disableBlend();
                 GlStateManager.popMatrix();
@@ -774,7 +742,7 @@
 
         for (Score score1 : collection)
         {
-            j++;
+            ++j;
             ScorePlayerTeam scoreplayerteam1 = scoreboard.getPlayersTeam(score1.getPlayerName());
             String s1 = ScorePlayerTeam.formatPlayerName(scoreplayerteam1, score1.getPlayerName());
             String s2 = TextFormatting.RED + "" + score1.getScorePoints();
@@ -846,7 +814,7 @@
 
             this.mc.profiler.startSection("armor");
 
-            for (int k3 = 0; k3 < 10; k3++)
+            for (int k3 = 0; k3 < 10; ++k3)
             {
                 if (i3 > 0)
                 {
@@ -871,7 +839,7 @@
 
             this.mc.profiler.endStartSection("health");
 
-            for (int j5 = MathHelper.ceil((f + (float)k1) / 2.0F) - 1; j5 >= 0; j5--)
+            for (int j5 = MathHelper.ceil((f + (float)k1) / 2.0F) - 1; j5 >= 0; --j5)
             {
                 int k5 = 16;
 
@@ -932,7 +900,7 @@
                     if (l2 == k1 && k1 % 2 == 1)
                     {
                         this.drawTexturedModalRect(k4, l4, k5 + 153, 9 * i5, 9, 9);
-                        l2--;
+                        --l2;
                     }
                     else
                     {
@@ -960,7 +928,7 @@
             {
                 this.mc.profiler.endStartSection("food");
 
-                for (int l5 = 0; l5 < 10; l5++)
+                for (int l5 = 0; l5 < 10; ++l5)
                 {
                     int j6 = j1;
                     int l6 = 16;
@@ -997,10 +965,10 @@
             if (entityplayer.isInsideOfMaterial(Material.WATER))
             {
                 int i6 = this.mc.player.getAir();
-                int k6 = MathHelper.ceil((double)(i6 - 2) * 10.0 / 300.0);
-                int i7 = MathHelper.ceil((double)i6 * 10.0 / 300.0) - k6;
+                int k6 = MathHelper.ceil((double)(i6 - 2) * 10.0D / 300.0D);
+                int i7 = MathHelper.ceil((double)i6 * 10.0D / 300.0D) - k6;
 
-                for (int k7 = 0; k7 < k6 + i7; k7++)
+                for (int k7 = 0; k7 < k6 + i7; ++k7)
                 {
                     if (k7 < k6)
                     {
@@ -1047,7 +1015,7 @@
                     int k1 = Math.min(j, 10);
                     j -= k1;
 
-                    for (int l1 = 0; l1 < k1; l1++)
+                    for (int l1 = 0; l1 < k1; ++l1)
                     {
                         int i2 = 52;
                         int j2 = 0;
@@ -1075,19 +1043,17 @@
     {
         GlStateManager.disableDepth();
         GlStateManager.depthMask(false);
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableAlpha();
         this.mc.getTextureManager().bindTexture(PUMPKIN_BLUR_TEX_PATH);
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-        bufferbuilder.pos(0.0, (double)scaledRes.getScaledHeight(), -90.0).tex(0.0, 1.0).endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0).tex(1.0, 1.0).endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0, -90.0).tex(1.0, 0.0).endVertex();
-        bufferbuilder.pos(0.0, 0.0, -90.0).tex(0.0, 0.0).endVertex();
+        bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
+        bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
+        bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
         tessellator.draw();
         GlStateManager.depthMask(true);
         GlStateManager.enableDepth();
@@ -1101,9 +1067,7 @@
         lightLevel = MathHelper.clamp(lightLevel, 0.0F, 1.0F);
         WorldBorder worldborder = this.mc.world.getWorldBorder();
         float f = (float)worldborder.getClosestDistance(this.mc.player);
-        double d0 = Math.min(
-                        worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter())
-                    );
+        double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
         double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
 
         if ((double)f < d1)
@@ -1115,12 +1079,10 @@
             f = 0.0F;
         }
 
-        this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(lightLevel - this.prevVignetteBrightness) * 0.01);
+        this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(lightLevel - this.prevVignetteBrightness) * 0.01D);
         GlStateManager.disableDepth();
         GlStateManager.depthMask(false);
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
 
         if (f > 0.0F)
         {
@@ -1135,34 +1097,30 @@
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-        bufferbuilder.pos(0.0, (double)scaledRes.getScaledHeight(), -90.0).tex(0.0, 1.0).endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0).tex(1.0, 1.0).endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0, -90.0).tex(1.0, 0.0).endVertex();
-        bufferbuilder.pos(0.0, 0.0, -90.0).tex(0.0, 0.0).endVertex();
+        bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
+        bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
+        bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
         tessellator.draw();
         GlStateManager.depthMask(true);
         GlStateManager.enableDepth();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
     }
 
     protected void renderPortal(float timeInPortal, ScaledResolution scaledRes)
     {
         if (timeInPortal < 1.0F)
         {
-            timeInPortal *= timeInPortal;
-            timeInPortal *= timeInPortal;
+            timeInPortal = timeInPortal * timeInPortal;
+            timeInPortal = timeInPortal * timeInPortal;
             timeInPortal = timeInPortal * 0.8F + 0.2F;
         }
 
         GlStateManager.disableAlpha();
         GlStateManager.disableDepth();
         GlStateManager.depthMask(false);
-        GlStateManager.tryBlendFuncSeparate(
-            GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO
-        );
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         GlStateManager.color(1.0F, 1.0F, 1.0F, timeInPortal);
         this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         TextureAtlasSprite textureatlassprite = this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(Blocks.PORTAL.getDefaultState());
@@ -1173,12 +1131,10 @@
         Tessellator tessellator = Tessellator.getInstance();
         BufferBuilder bufferbuilder = tessellator.getBuffer();
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-        bufferbuilder.pos(0.0, (double)scaledRes.getScaledHeight(), -90.0).tex((double)f, (double)f3).endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0)
-        .tex((double)f2, (double)f3)
-        .endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0, -90.0).tex((double)f2, (double)f1).endVertex();
-        bufferbuilder.pos(0.0, 0.0, -90.0).tex((double)f, (double)f1).endVertex();
+        bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f, (double)f3).endVertex();
+        bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f2, (double)f3).endVertex();
+        bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex((double)f2, (double)f1).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex((double)f, (double)f1).endVertex();
         tessellator.draw();
         GlStateManager.depthMask(true);
         GlStateManager.enableDepth();
@@ -1216,12 +1172,12 @@
     {
         if (this.overlayMessageTime > 0)
         {
-            this.overlayMessageTime--;
+            --this.overlayMessageTime;
         }
 
         if (this.titlesTimer > 0)
         {
-            this.titlesTimer--;
+            --this.titlesTimer;
 
             if (this.titlesTimer <= 0)
             {
@@ -1230,7 +1186,7 @@
             }
         }
 
-        this.updateCounter++;
+        ++this.updateCounter;
 
         if (this.mc.player != null)
         {
@@ -1240,14 +1196,11 @@
             {
                 this.remainingHighlightTicks = 0;
             }
-            else if (!this.highlightingItemStack.isEmpty()
-                     && itemstack.getItem() == this.highlightingItemStack.getItem()
-                     && ItemStack.areItemStackTagsEqual(itemstack, this.highlightingItemStack)
-                     && (itemstack.isItemStackDamageable() || itemstack.getMetadata() == this.highlightingItemStack.getMetadata()))
+            else if (!this.highlightingItemStack.isEmpty() && itemstack.getItem() == this.highlightingItemStack.getItem() && ItemStack.areItemStackTagsEqual(itemstack, this.highlightingItemStack) && (itemstack.isItemStackDamageable() || itemstack.getMetadata() == this.highlightingItemStack.getMetadata()))
             {
                 if (this.remainingHighlightTicks > 0)
                 {
-                    this.remainingHighlightTicks--;
+                    --this.remainingHighlightTicks;
                 }
             }
             else
