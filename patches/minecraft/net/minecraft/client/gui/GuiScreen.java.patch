--- before/net/minecraft/client/gui/GuiScreen.java
+++ after/net/minecraft/client/gui/GuiScreen.java
@@ -4,6 +4,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.awt.Toolkit;
+import java.awt.datatransfer.ClipboardOwner;
 import java.awt.datatransfer.DataFlavor;
 import java.awt.datatransfer.StringSelection;
 import java.awt.datatransfer.Transferable;
@@ -50,8 +51,8 @@
     protected RenderItem itemRender;
     public int width;
     public int height;
-    protected List<GuiButton> buttonList = Lists.newArrayList();
-    protected List<GuiLabel> labelList = Lists.newArrayList();
+    protected List<GuiButton> buttonList = Lists.<GuiButton>newArrayList();
+    protected List<GuiLabel> labelList = Lists.<GuiLabel>newArrayList();
     public boolean allowUserInput;
     protected FontRenderer fontRenderer;
     protected GuiButton selectedButton;
@@ -60,17 +61,18 @@
     private int touchValue;
     private URI clickedLinkURI;
     private boolean focused;
+    protected boolean keyHandled, mouseHandled; // Forge: allow canceling key and mouse Post events from handleMouseInput and handleKeyboardInput
 
     public void drawScreen(int mouseX, int mouseY, float partialTicks)
     {
-        for (int i = 0; i < this.buttonList.size(); i++)
+        for (int i = 0; i < this.buttonList.size(); ++i)
         {
-            this.buttonList.get(i).drawButton(this.mc, mouseX, mouseY, partialTicks);
+            ((GuiButton)this.buttonList.get(i)).drawButton(this.mc, mouseX, mouseY, partialTicks);
         }
 
-        for (int j = 0; j < this.labelList.size(); j++)
+        for (int j = 0; j < this.labelList.size(); ++j)
         {
-            this.labelList.get(j).drawLabel(this.mc, mouseX, mouseY);
+            ((GuiLabel)this.labelList.get(j)).drawLabel(this.mc, mouseX, mouseY);
         }
     }
 
@@ -78,7 +80,7 @@
     {
         if (keyCode == 1)
         {
-            this.mc.displayGuiScreen(null);
+            this.mc.displayGuiScreen((GuiScreen)null);
 
             if (this.mc.currentScreen == null)
             {
@@ -97,15 +99,16 @@
     {
         try
         {
-            Transferable transferable = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
+            Transferable transferable = Toolkit.getDefaultToolkit().getSystemClipboard().getContents((Object)null);
 
             if (transferable != null && transferable.isDataFlavorSupported(DataFlavor.stringFlavor))
             {
                 return (String)transferable.getTransferData(DataFlavor.stringFlavor);
             }
         }
-        catch (Exception exception)
+        catch (Exception var1)
         {
+            ;
         }
 
         return "";
@@ -118,35 +121,36 @@
             try
             {
                 StringSelection stringselection = new StringSelection(copyText);
-                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringselection, null);
+                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringselection, (ClipboardOwner)null);
             }
-            catch (Exception exception)
+            catch (Exception var2)
             {
+                ;
             }
         }
     }
 
     protected void renderToolTip(ItemStack stack, int x, int y)
     {
-        this.drawHoveringText(this.getItemToolTip(stack), x, y);
+        FontRenderer font = stack.getItem().getFontRenderer(stack);
+        net.minecraftforge.fml.client.config.GuiUtils.preItemToolTip(stack);
+        this.drawHoveringText(this.getItemToolTip(stack), x, y, (font == null ? fontRenderer : font));
+        net.minecraftforge.fml.client.config.GuiUtils.postItemToolTip();
     }
 
     public List<String> getItemToolTip(ItemStack p_191927_1_)
     {
-        List<String> list = p_191927_1_.getTooltip(
-                                this.mc.player,
-                                this.mc.gameSettings.advancedItemTooltips ? ITooltipFlag.TooltipFlags.ADVANCED : ITooltipFlag.TooltipFlags.NORMAL
-                            );
+        List<String> list = p_191927_1_.getTooltip(this.mc.player, this.mc.gameSettings.advancedItemTooltips ? ITooltipFlag.TooltipFlags.ADVANCED : ITooltipFlag.TooltipFlags.NORMAL);
 
-        for (int i = 0; i < list.size(); i++)
+        for (int i = 0; i < list.size(); ++i)
         {
             if (i == 0)
             {
-                list.set(i, p_191927_1_.getRarity().color + list.get(i));
+                list.set(i, p_191927_1_.getItem().getForgeRarity(p_191927_1_).getColor() + (String)list.get(i));
             }
             else
             {
-                list.set(i, TextFormatting.GRAY + list.get(i));
+                list.set(i, TextFormatting.GRAY + (String)list.get(i));
             }
         }
 
@@ -170,7 +174,13 @@
 
     public void drawHoveringText(List<String> textLines, int x, int y)
     {
-        if (!textLines.isEmpty())
+        drawHoveringText(textLines, x, y, fontRenderer);
+    }
+
+    protected void drawHoveringText(List<String> textLines, int x, int y, FontRenderer font)
+    {
+        net.minecraftforge.fml.client.config.GuiUtils.drawHoveringText(textLines, x, y, width, height, -1, font);
+        if (false && !textLines.isEmpty())
         {
             GlStateManager.disableRescaleNormal();
             RenderHelper.disableStandardItemLighting();
@@ -222,7 +232,7 @@
             this.drawGradientRect(l1 - 3, i2 - 3, l1 + i + 3, i2 - 3 + 1, 1347420415, 1347420415);
             this.drawGradientRect(l1 - 3, i2 + k + 2, l1 + i + 3, i2 + k + 3, 1344798847, 1344798847);
 
-            for (int k1 = 0; k1 < textLines.size(); k1++)
+            for (int k1 = 0; k1 < textLines.size(); ++k1)
             {
                 String s1 = textLines.get(k1);
                 this.fontRenderer.drawStringWithShadow(s1, (float)l1, (float)i2, -1);
@@ -263,8 +273,9 @@
                         itemstack = new ItemStack((NBTTagCompound)nbtbase);
                     }
                 }
-                catch (NBTException nbtexception1)
+                catch (NBTException var9)
                 {
+                    ;
                 }
 
                 if (itemstack.isEmpty())
@@ -283,7 +294,7 @@
                     try
                     {
                         NBTTagCompound nbttagcompound = JsonToNBT.getTagFromJson(hoverevent.getValue().getUnformattedText());
-                        List<String> list = Lists.newArrayList();
+                        List<String> list = Lists.<String>newArrayList();
                         list.add(nbttagcompound.getString("name"));
 
                         if (nbttagcompound.hasKey("type", 8))
@@ -295,7 +306,7 @@
                         list.add(nbttagcompound.getString("id"));
                         this.drawHoveringText(list, x, y);
                     }
-                    catch (NBTException nbtexception)
+                    catch (NBTException var8)
                     {
                         this.drawHoveringText(TextFormatting.RED + "Invalid Entity!", x, y);
                     }
@@ -303,11 +314,7 @@
             }
             else if (hoverevent.getAction() == HoverEvent.Action.SHOW_TEXT)
             {
-                this.drawHoveringText(
-                    this.mc.fontRenderer.listFormattedStringToWidth(hoverevent.getValue().getFormattedText(), Math.max(this.width / 2, 200)),
-                    x,
-                    y
-                );
+                this.drawHoveringText(this.mc.fontRenderer.listFormattedStringToWidth(hoverevent.getValue().getFormattedText(), Math.max(this.width / 2, 200)), x, y);
             }
 
             GlStateManager.disableLighting();
@@ -376,7 +383,7 @@
                 }
                 else if (clickevent.getAction() == ClickEvent.Action.OPEN_FILE)
                 {
-                    URI uri1 = new File(clickevent.getValue()).toURI();
+                    URI uri1 = (new File(clickevent.getValue())).toURI();
                     this.openWebLink(uri1);
                 }
                 else if (clickevent.getAction() == ClickEvent.Action.SUGGEST_COMMAND)
@@ -389,7 +396,7 @@
                 }
                 else
                 {
-                    LOGGER.error("Don't know how to handle {}", clickevent);
+                    LOGGER.error("Don't know how to handle {}", (Object)clickevent);
                 }
 
                 return true;
@@ -406,10 +413,13 @@
 
     public void sendChatMessage(String msg, boolean addToChat)
     {
+        msg = net.minecraftforge.event.ForgeEventFactory.onClientSendMessage(msg);
+        if (msg.isEmpty()) return;
         if (addToChat)
         {
             this.mc.ingameGUI.getChatGUI().addToSentMessages(msg);
         }
+        if (net.minecraftforge.client.ClientCommandHandler.instance.executeCommand(mc.player, msg) != 0) return;
 
         this.mc.player.sendChatMessage(msg);
     }
@@ -418,15 +428,21 @@
     {
         if (mouseButton == 0)
         {
-            for (int i = 0; i < this.buttonList.size(); i++)
+            for (int i = 0; i < this.buttonList.size(); ++i)
             {
                 GuiButton guibutton = this.buttonList.get(i);
 
                 if (guibutton.mousePressed(this.mc, mouseX, mouseY))
                 {
+                    net.minecraftforge.client.event.GuiScreenEvent.ActionPerformedEvent.Pre event = new net.minecraftforge.client.event.GuiScreenEvent.ActionPerformedEvent.Pre(this, guibutton, this.buttonList);
+                    if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event))
+                        break;
+                    guibutton = event.getButton();
                     this.selectedButton = guibutton;
                     guibutton.playPressSound(this.mc.getSoundHandler());
                     this.actionPerformed(guibutton);
+                    if (this.equals(this.mc.currentScreen))
+                        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.ActionPerformedEvent.Post(this, event.getButton(), this.buttonList));
                 }
             }
         }
@@ -456,8 +472,12 @@
         this.fontRenderer = mc.fontRenderer;
         this.width = width;
         this.height = height;
+        if (!net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.InitGuiEvent.Pre(this, this.buttonList)))
+        {
         this.buttonList.clear();
         this.initGui();
+        }
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.InitGuiEvent.Post(this, this.buttonList));
     }
 
     public void setGuiSize(int w, int h)
@@ -476,7 +496,10 @@
         {
             while (Mouse.next())
             {
+                this.mouseHandled = false;
+                if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.MouseInputEvent.Pre(this))) continue;
                 this.handleMouseInput();
+                if (this.equals(this.mc.currentScreen) && !this.mouseHandled) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.MouseInputEvent.Post(this));
             }
         }
 
@@ -484,7 +507,10 @@
         {
             while (Keyboard.next())
             {
+                this.keyHandled = false;
+                if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.KeyboardInputEvent.Pre(this))) continue;
                 this.handleKeyboardInput();
+                if (this.equals(this.mc.currentScreen) && !this.keyHandled) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.KeyboardInputEvent.Post(this));
             }
         }
     }
@@ -546,6 +572,7 @@
     public void drawDefaultBackground()
     {
         this.drawWorldBackground(0);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiScreenEvent.BackgroundDrawnEvent(this));
     }
 
     public void drawWorldBackground(int tint)
@@ -570,19 +597,10 @@
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         float f = 32.0F;
         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-        bufferbuilder.pos(0.0, (double)this.height, 0.0)
-        .tex(0.0, (double)((float)this.height / 32.0F + (float)tint))
-        .color(64, 64, 64, 255)
-        .endVertex();
-        bufferbuilder.pos((double)this.width, (double)this.height, 0.0)
-        .tex((double)((float)this.width / 32.0F), (double)((float)this.height / 32.0F + (float)tint))
-        .color(64, 64, 64, 255)
-        .endVertex();
-        bufferbuilder.pos((double)this.width, 0.0, 0.0)
-        .tex((double)((float)this.width / 32.0F), (double)tint)
-        .color(64, 64, 64, 255)
-        .endVertex();
-        bufferbuilder.pos(0.0, 0.0, 0.0).tex(0.0, (double)tint).color(64, 64, 64, 255).endVertex();
+        bufferbuilder.pos(0.0D, (double)this.height, 0.0D).tex(0.0D, (double)((float)this.height / 32.0F + (float)tint)).color(64, 64, 64, 255).endVertex();
+        bufferbuilder.pos((double)this.width, (double)this.height, 0.0D).tex((double)((float)this.width / 32.0F), (double)((float)this.height / 32.0F + (float)tint)).color(64, 64, 64, 255).endVertex();
+        bufferbuilder.pos((double)this.width, 0.0D, 0.0D).tex((double)((float)this.width / 32.0F), (double)tint).color(64, 64, 64, 255).endVertex();
+        bufferbuilder.pos(0.0D, 0.0D, 0.0D).tex(0.0D, (double)tint).color(64, 64, 64, 255).endVertex();
         tessellator.draw();
     }
 
@@ -591,7 +609,6 @@
         return true;
     }
 
-    @Override
     public void confirmClicked(boolean result, int id)
     {
         if (id == 31102009)
@@ -611,19 +628,26 @@
         try
         {
             Class<?> oclass = Class.forName("java.awt.Desktop");
-            Object object = oclass.getMethod("getDesktop").invoke(null);
+            Object object = oclass.getMethod("getDesktop").invoke((Object)null);
             oclass.getMethod("browse", URI.class).invoke(object, url);
         }
         catch (Throwable throwable1)
         {
             Throwable throwable = throwable1.getCause();
-            LOGGER.error("Couldn't open link: {}", throwable == null ? "<UNKNOWN>" : throwable.getMessage());
+            LOGGER.error("Couldn't open link: {}", (Object)(throwable == null ? "<UNKNOWN>" : throwable.getMessage()));
         }
     }
 
     public static boolean isCtrlKeyDown()
     {
-        return Minecraft.IS_RUNNING_ON_MAC ? Keyboard.isKeyDown(219) || Keyboard.isKeyDown(220) : Keyboard.isKeyDown(29) || Keyboard.isKeyDown(157);
+        if (Minecraft.IS_RUNNING_ON_MAC)
+        {
+            return Keyboard.isKeyDown(219) || Keyboard.isKeyDown(220);
+        }
+        else
+        {
+            return Keyboard.isKeyDown(29) || Keyboard.isKeyDown(157);
+        }
     }
 
     public static boolean isShiftKeyDown()
