--- before/net/minecraft/client/gui/GuiKeyBindingList.java
+++ after/net/minecraft/client/gui/GuiKeyBindingList.java
@@ -23,7 +23,7 @@
         super(mcIn, controls.width + 45, controls.height, 63, controls.height - 32, 20);
         this.controlsScreen = controls;
         this.mc = mcIn;
-        KeyBinding[] akeybinding = ArrayUtils.clone(mcIn.gameSettings.keyBindings);
+        KeyBinding[] akeybinding = (KeyBinding[])ArrayUtils.clone(mcIn.gameSettings.keyBindings);
         this.listEntries = new GuiListExtended.IGuiListEntry[akeybinding.length + KeyBinding.getKeybinds().size()];
         Arrays.sort((Object[])akeybinding);
         int i = 0;
@@ -50,25 +50,21 @@
         }
     }
 
-    @Override
     protected int getSize()
     {
         return this.listEntries.length;
     }
 
-    @Override
     public GuiListExtended.IGuiListEntry getListEntry(int index)
     {
         return this.listEntries[index];
     }
 
-    @Override
     protected int getScrollBarX()
     {
-        return super.getScrollBarX() + 15;
+        return super.getScrollBarX() + 35;
     }
 
-    @Override
     public int getListWidth()
     {
         return super.getListWidth() + 32;
@@ -86,41 +82,20 @@
             this.labelWidth = GuiKeyBindingList.this.mc.fontRenderer.getStringWidth(this.labelText);
         }
 
-        @Override
-        public void drawEntry(
-            int slotIndex,
-            int x,
-            int y,
-            int listWidth,
-            int slotHeight,
-            int mouseX,
-            int mouseY,
-            boolean isSelected,
-            float partialTicks
-        )
+        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partialTicks)
         {
-            GuiKeyBindingList.this.mc
-            .fontRenderer
-            .drawString(
-                this.labelText,
-                GuiKeyBindingList.this.mc.currentScreen.width / 2 - this.labelWidth / 2,
-                y + slotHeight - GuiKeyBindingList.this.mc.fontRenderer.FONT_HEIGHT - 1,
-                16777215
-            );
+            GuiKeyBindingList.this.mc.fontRenderer.drawString(this.labelText, GuiKeyBindingList.this.mc.currentScreen.width / 2 - this.labelWidth / 2, y + slotHeight - GuiKeyBindingList.this.mc.fontRenderer.FONT_HEIGHT - 1, 16777215);
         }
 
-        @Override
         public boolean mousePressed(int slotIndex, int mouseX, int mouseY, int mouseEvent, int relativeX, int relativeY)
         {
             return false;
         }
 
-        @Override
         public void mouseReleased(int slotIndex, int x, int y, int mouseEvent, int relativeX, int relativeY)
         {
         }
 
-        @Override
         public void updatePosition(int slotIndex, int x, int y, float partialTicks)
         {
         }
@@ -138,71 +113,48 @@
         {
             this.keybinding = name;
             this.keyDesc = I18n.format(name.getKeyDescription());
-            this.btnChangeKeyBinding = new GuiButton(0, 0, 0, 75, 20, I18n.format(name.getKeyDescription()));
+            this.btnChangeKeyBinding = new GuiButton(0, 0, 0, 95, 20, I18n.format(name.getKeyDescription()));
             this.btnReset = new GuiButton(0, 0, 0, 50, 20, I18n.format("controls.reset"));
         }
 
-        @Override
-        public void drawEntry(
-            int slotIndex,
-            int x,
-            int y,
-            int listWidth,
-            int slotHeight,
-            int mouseX,
-            int mouseY,
-            boolean isSelected,
-            float partialTicks
-        )
+        public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected, float partialTicks)
         {
             boolean flag = GuiKeyBindingList.this.controlsScreen.buttonId == this.keybinding;
-            GuiKeyBindingList.this.mc
-            .fontRenderer
-            .drawString(
-                this.keyDesc,
-                x + 90 - GuiKeyBindingList.this.maxListLabelWidth,
-                y + slotHeight / 2 - GuiKeyBindingList.this.mc.fontRenderer.FONT_HEIGHT / 2,
-                16777215
-            );
-            this.btnReset.x = x + 190;
+            GuiKeyBindingList.this.mc.fontRenderer.drawString(this.keyDesc, x + 90 - GuiKeyBindingList.this.maxListLabelWidth, y + slotHeight / 2 - GuiKeyBindingList.this.mc.fontRenderer.FONT_HEIGHT / 2, 16777215);
+            this.btnReset.x = x + 210;
             this.btnReset.y = y;
-            this.btnReset.enabled = this.keybinding.getKeyCode() != this.keybinding.getKeyCodeDefault();
+            this.btnReset.enabled = !this.keybinding.isSetToDefaultValue();
             this.btnReset.drawButton(GuiKeyBindingList.this.mc, mouseX, mouseY, partialTicks);
             this.btnChangeKeyBinding.x = x + 105;
             this.btnChangeKeyBinding.y = y;
-            this.btnChangeKeyBinding.displayString = GameSettings.getKeyDisplayString(this.keybinding.getKeyCode());
+            this.btnChangeKeyBinding.displayString = this.keybinding.getDisplayName();
             boolean flag1 = false;
+            boolean keyCodeModifierConflict = true; // less severe form of conflict, like SHIFT conflicting with SHIFT+G
 
             if (this.keybinding.getKeyCode() != 0)
             {
                 for (KeyBinding keybinding : GuiKeyBindingList.this.mc.gameSettings.keyBindings)
                 {
-                    if (keybinding != this.keybinding && keybinding.getKeyCode() == this.keybinding.getKeyCode())
+                    if (keybinding != this.keybinding && keybinding.conflicts(this.keybinding))
                     {
                         flag1 = true;
-                        break;
+                        keyCodeModifierConflict &= keybinding.hasKeyCodeModifierConflict(this.keybinding);
                     }
                 }
             }
 
             if (flag)
             {
-                this.btnChangeKeyBinding.displayString = TextFormatting.WHITE
-                                                     + "> "
-                                                     + TextFormatting.YELLOW
-                                                     + this.btnChangeKeyBinding.displayString
-                                                     + TextFormatting.WHITE
-                                                     + " <";
+                this.btnChangeKeyBinding.displayString = TextFormatting.WHITE + "> " + TextFormatting.YELLOW + this.btnChangeKeyBinding.displayString + TextFormatting.WHITE + " <";
             }
             else if (flag1)
             {
-                this.btnChangeKeyBinding.displayString = TextFormatting.RED + this.btnChangeKeyBinding.displayString;
+                this.btnChangeKeyBinding.displayString = (keyCodeModifierConflict ? TextFormatting.GOLD : TextFormatting.RED) + this.btnChangeKeyBinding.displayString;
             }
 
             this.btnChangeKeyBinding.drawButton(GuiKeyBindingList.this.mc, mouseX, mouseY, partialTicks);
         }
 
-        @Override
         public boolean mousePressed(int slotIndex, int mouseX, int mouseY, int mouseEvent, int relativeX, int relativeY)
         {
             if (this.btnChangeKeyBinding.mousePressed(GuiKeyBindingList.this.mc, mouseX, mouseY))
@@ -212,6 +164,7 @@
             }
             else if (this.btnReset.mousePressed(GuiKeyBindingList.this.mc, mouseX, mouseY))
             {
+                this.keybinding.setToDefault();
                 GuiKeyBindingList.this.mc.gameSettings.setOptionKeyBinding(this.keybinding, this.keybinding.getKeyCodeDefault());
                 KeyBinding.resetKeyBindingArrayAndHash();
                 return true;
@@ -222,14 +175,12 @@
             }
         }
 
-        @Override
         public void mouseReleased(int slotIndex, int x, int y, int mouseEvent, int relativeX, int relativeY)
         {
             this.btnChangeKeyBinding.mouseReleased(x, y);
             this.btnReset.mouseReleased(x, y);
         }
 
-        @Override
         public void updatePosition(int slotIndex, int x, int y, float partialTicks)
         {
         }
