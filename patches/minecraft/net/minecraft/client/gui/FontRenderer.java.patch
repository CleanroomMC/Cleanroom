--- before/net/minecraft/client/gui/FontRenderer.java
+++ after/net/minecraft/client/gui/FontRenderer.java
@@ -1,11 +1,12 @@
 package net.minecraft.client.gui;
 
+import com.cleanroommc.client.BreakIteratorHolder;
 import com.ibm.icu.text.ArabicShaping;
 import com.ibm.icu.text.ArabicShapingException;
 import com.ibm.icu.text.Bidi;
+
 import java.awt.image.BufferedImage;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
 import java.util.Random;
@@ -24,6 +25,9 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang3.tuple.Pair;
+
+import java.util.*;
 
 @SideOnly(Side.CLIENT)
 public class FontRenderer implements IResourceManagerReloadListener
@@ -56,7 +60,7 @@
         this.field_111273_g = p_i1035_2_;
         this.field_78298_i = p_i1035_3_;
         this.field_78293_l = p_i1035_4_;
-        p_i1035_3_.func_110577_a(this.field_111273_g);
+        bindTexture(this.field_111273_g);
 
         for (int i = 0; i < 32; ++i)
         {
@@ -107,7 +111,7 @@
 
         try
         {
-            iresource = Minecraft.func_71410_x().func_110442_L().func_110536_a(this.field_111273_g);
+            iresource = getResource(this.field_111273_g);
             bufferedimage = TextureUtil.func_177053_a(iresource.func_110527_b());
         }
         catch (IOException ioexception)
@@ -171,7 +175,7 @@
 
         try
         {
-            iresource = Minecraft.func_71410_x().func_110442_L().func_110536_a(new ResourceLocation("font/glyph_sizes.bin"));
+            iresource = getResource(new ResourceLocation("font/glyph_sizes.bin"));
             iresource.func_110527_b().read(this.field_78287_e);
         }
         catch (IOException ioexception)
@@ -186,6 +190,7 @@
 
     private float func_181559_a(char p_181559_1_, boolean p_181559_2_)
     {
+        if (p_181559_1_ == 160) return 4.0F; // forge: display nbsp as space. MC-2595
         if (p_181559_1_ == ' ')
         {
             return 4.0F;
@@ -203,7 +208,7 @@
         int i = p_78266_1_ % 16 * 8;
         int j = p_78266_1_ / 16 * 8;
         int k = p_78266_2_ ? 1 : 0;
-        this.field_78298_i.func_110577_a(this.field_111273_g);
+        bindTexture(this.field_111273_g);
         int l = this.field_78286_d[p_78266_1_];
         float f = (float)l - 0.01F;
         GlStateManager.func_187447_r(5);
@@ -231,7 +236,7 @@
 
     private void func_78257_a(int p_78257_1_)
     {
-        this.field_78298_i.func_110577_a(this.func_111271_a(p_78257_1_));
+        bindTexture(this.func_111271_a(p_78257_1_));
     }
 
     protected float func_78277_a(char p_78277_1_, boolean p_78277_2_)
@@ -280,7 +285,7 @@
 
     public int func_175065_a(String p_175065_1_, float p_175065_2_, float p_175065_3_, int p_175065_4_, boolean p_175065_5_)
     {
-        GlStateManager.func_179141_d();
+        enableAlpha();
         this.func_78265_b();
         int i;
 
@@ -328,20 +333,19 @@
 
             if (c0 == 167 && i + 1 < p_78255_1_.length())
             {
-                int i1 = "0123456789abcdefklmnor".indexOf(String.valueOf(p_78255_1_.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
+                int i1 = "0123456789abcdefklmnor§".indexOf(String.valueOf(p_78255_1_.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
 
-                if (i1 < 16)
+                if (i1 < 0)
+                {
+                    continue;
+                }
+                else if (i1 < 16)
                 {
                     this.field_78303_s = false;
                     this.field_78302_t = false;
                     this.field_78299_w = false;
                     this.field_78300_v = false;
                     this.field_78301_u = false;
-
-                    if (i1 < 0 || i1 > 15)
-                    {
-                        i1 = 15;
-                    }
 
                     if (p_78255_2_)
                     {
@@ -350,7 +354,7 @@
 
                     int j1 = this.field_78285_g[i1];
                     this.field_78304_r = j1;
-                    GlStateManager.func_179131_c((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 0xFF) / 255.0F, (float)(j1 & 0xFF) / 255.0F, this.field_78305_q);
+                    setColor((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.field_78305_q);
                 }
                 else if (i1 == 16)
                 {
@@ -379,7 +383,11 @@
                     this.field_78299_w = false;
                     this.field_78300_v = false;
                     this.field_78301_u = false;
-                    GlStateManager.func_179131_c(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
+                    setColor(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
+                }
+                else
+                {
+                    i--;
                 }
 
                 ++i;
@@ -409,7 +417,7 @@
                     c0 = c1;
                 }
 
-                float f1 = this.field_78293_l ? 0.5F : 1.0F;
+                float f1 = j == -1 || this.field_78293_l ? 0.5f : 1f;
                 boolean flag = (c0 == 0 || j == -1 || this.field_78293_l) && p_78255_2_;
 
                 if (flag)
@@ -447,6 +455,15 @@
 
                     ++f;
                 }
+                doDraw(f);
+            }
+        }
+    }
+
+    protected void doDraw(float f)
+    {
+        {
+            {
 
                 if (this.field_78299_w)
                 {
@@ -526,7 +543,7 @@
             this.field_78292_o = (float)(p_180455_4_ >> 8 & 0xFF) / 255.0F;
             this.field_78306_p = (float)(p_180455_4_ & 0xFF) / 255.0F;
             this.field_78305_q = (float)(p_180455_4_ >> 24 & 0xFF) / 255.0F;
-            GlStateManager.func_179131_c(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
+            setColor(this.field_78291_n, this.field_78292_o, this.field_78306_p, this.field_78305_q);
             this.field_78295_j = p_180455_2_;
             this.field_78296_k = p_180455_3_;
             this.func_78255_a(p_180455_1_, p_180455_5_);
@@ -580,6 +597,7 @@
 
     public int func_78263_a(char p_78263_1_)
     {
+        if (p_78263_1_ == 160) return 4; // forge: display nbsp as space. MC-2595
         if (p_78263_1_ == 167)
         {
             return -1;
@@ -635,14 +653,17 @@
             {
                 flag = false;
 
-                if (c0 == 'l' || c0 == 'L')
+                if (c0 != 'l' && c0 != 'L')
+                {
+                    if (c0 == 'r' || c0 == 'R')
+                    {
+                        flag1 = false;
+                    }
+                }
+                else
                 {
                     flag1 = true;
                 }
-                else if (c0 == 'r' || c0 == 'R')
-                {
-                    flag1 = false;
-                }
             }
             else if (i1 < 0)
             {
@@ -678,7 +699,7 @@
 
     private String func_78273_d(String p_78273_1_)
     {
-        while (p_78273_1_ != null && p_78273_1_.endsWith("\n"))
+        while (p_78273_1_.endsWith("\n"))
         {
             p_78273_1_ = p_78273_1_.substring(0, p_78273_1_.length() - 1);
         }
@@ -725,9 +746,92 @@
 
     public List<String> func_78271_c(String p_78271_1_, int p_78271_2_)
     {
-        return Arrays.asList(this.func_78280_d(p_78271_1_, p_78271_2_).split("\n"));
+        if (p_78271_1_.isEmpty()){
+            return Collections.singletonList("");
+        }
+        BreakIteratorHolder.BREAK_ITERATOR.setText(p_78271_1_);
+        List<String> list = new ArrayList<>();
+        int lineWidth = 0, fed = 0, icui, d;
+        StringBuilder format = new StringBuilder(); // For next line's format since it should use format of previous line
+        HashMap<Integer, Pair<Integer, String>> map = new HashMap<>();
+        StringBuilder line = new StringBuilder();
+        String temp;
+        char[] chars = p_78271_1_.toCharArray();
+        char f;
+        boolean bold = false;
+        for (int i = 0; i < chars.length; i++) {
+            char current = chars[i];
+            switch (current) {
+                case '\n':
+                    list.add(line.toString());
+                    fed += line.length() + 1;
+                    line.delete(0, line.length()).append(format);
+                    lineWidth = 0;
+                    map.put(i, Pair.of(lineWidth, format.toString()));
+                    continue;
+                case '§':
+                    if (i + 1 < chars.length) { // Prevent out of bound
+                        f = chars[i + 1];
+                        if (f != 'l' && f != 'L') { // Check start of bold style
+                            if (f == 'r' || f == 'R' || func_78272_b(f)) { // Not Bold, check end of style
+                                bold = false;
+                                if (f == 'r' || f == 'R') {
+                                    format.delete(0, format.length()); // Clear the format
+                                } else {
+                                    format.append('§').append(f); // Add to current format code
+                                }
+                                line.append('§').append(f);
+                                map.put(i, Pair.of(lineWidth, format.toString()));
+                                map.put(++i, Pair.of(lineWidth, format.toString()));
+                                continue;
+                            }
+                            if (f >= 'k' && f <= 'o' || f >= 'K' && f <= 'O') {
+                                format.append('§').append(f); // Add to current format code
+                                line.append('§').append(f);
+                                map.put(i, Pair.of(lineWidth, format.toString()));
+                                map.put(++i, Pair.of(lineWidth, format.toString()));
+                                continue;
+                            }
+                        } else {
+                            bold = true;
+                            format.append('§').append(f); // Add to current format code
+                            line.append('§').append(f);
+                            map.put(i, Pair.of(lineWidth, format.toString()));
+                            map.put(++i, Pair.of(lineWidth, format.toString()));
+                            continue;
+                        }
+                    }
+                default:
+                    line.append(current);
+                    lineWidth += func_78263_a(current);
+                    if (bold) {
+                        lineWidth++; // Bold style is one pixel wider
+                    }
+                    break;
+            }
+            map.put(i, Pair.of(lineWidth, format.toString()));
+            if (lineWidth > p_78271_2_) {
+                icui = BreakIteratorHolder.BREAK_ITERATOR.preceding(i);
+                if (icui <= fed) {
+                    list.add(line.substring(0,line.length() - 1));
+                    fed += line.length() - 1;
+                    line.delete(0, line.length()).append(format).append(current);
+                    lineWidth = func_78263_a(current);
+                } else {
+                    d = icui - fed;
+                    list.add(line.substring(0, d));
+                    temp = line.substring(d);
+                    fed += d;
+                    line.delete(0, line.length()).append(map.get(icui).getRight()).append(temp);
+                    lineWidth = lineWidth - map.get(icui - 1).getLeft();
+                }
+            }
+        }
+        list.add(line.toString());
+        return list;
     }
 
+    @Deprecated
     String func_78280_d(String p_78280_1_, int p_78280_2_)
     {
         int i = this.func_78259_e(p_78280_1_, p_78280_2_);
@@ -746,6 +850,7 @@
         }
     }
 
+    @Deprecated
     private int func_78259_e(String p_78259_1_, int p_78259_2_)
     {
         int i = p_78259_1_.length();
@@ -844,6 +949,26 @@
     public boolean func_78260_a()
     {
         return this.field_78294_m;
+    }
+
+    protected void setColor(float r, float g, float b, float a)
+    {
+        GlStateManager.func_179131_c(r,g,b,a);
+    }
+
+    protected void enableAlpha()
+    {
+        GlStateManager.func_179141_d();
+    }
+
+    protected void bindTexture(ResourceLocation location)
+    {
+        field_78298_i.func_110577_a(location);
+    }
+
+    protected IResource getResource(ResourceLocation location) throws IOException
+    {
+        return Minecraft.func_71410_x().func_110442_L().func_110536_a(location);
     }
 
     public int func_175064_b(char p_175064_1_)
