--- before/net/minecraft/client/gui/FontRenderer.java
+++ after/net/minecraft/client/gui/FontRenderer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.gui;
 
+import com.cleanroommc.client.BreakIteratorHolder;
 import com.ibm.icu.text.ArabicShaping;
 import com.ibm.icu.text.ArabicShapingException;
 import com.ibm.icu.text.Bidi;
@@ -24,6 +25,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.io.IOUtils;
+import java.util.*;
 
 @SideOnly(Side.CLIENT)
 public class FontRenderer implements IResourceManagerReloadListener
@@ -56,7 +58,7 @@
         this.locationFontTexture = location;
         this.renderEngine = textureManagerIn;
         this.unicodeFlag = unicode;
-        textureManagerIn.bindTexture(this.locationFontTexture);
+        bindTexture(this.locationFontTexture);
 
         for (int i = 0; i < 32; i++)
         {
@@ -107,7 +109,7 @@
 
         try
         {
-            iresource = Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture);
+            iresource = getResource(this.locationFontTexture);
             bufferedimage = TextureUtil.readBufferedImage(iresource.getInputStream());
         }
         catch (IOException ioexception)
@@ -171,7 +173,7 @@
 
         try
         {
-            iresource = Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation("font/glyph_sizes.bin"));
+            iresource = getResource(new ResourceLocation("font/glyph_sizes.bin"));
             iresource.getInputStream().read(this.glyphWidth);
         }
         catch (IOException ioexception)
@@ -186,6 +188,7 @@
 
     private float renderChar(char ch, boolean italic)
     {
+        if (ch == 160) return 4.0F; // forge: display nbsp as space. MC-2595
         if (ch == ' ')
         {
             return 4.0F;
@@ -203,7 +206,7 @@
         int i = ch % 16 * 8;
         int j = ch / 16 * 8;
         int k = italic ? 1 : 0;
-        this.renderEngine.bindTexture(this.locationFontTexture);
+        bindTexture(this.locationFontTexture);
         int l = this.charWidth[ch];
         float f = (float)l - 0.01F;
         GlStateManager.glBegin(5);
@@ -231,7 +234,7 @@
 
     private void loadGlyphTexture(int page)
     {
-        this.renderEngine.bindTexture(this.getUnicodePageLocation(page));
+        bindTexture(this.getUnicodePageLocation(page));
     }
 
     protected float renderUnicodeChar(char ch, boolean italic)
@@ -280,7 +283,7 @@
 
     public int drawString(String text, float x, float y, int color, boolean dropShadow)
     {
-        GlStateManager.enableAlpha();
+        enableAlpha();
         this.resetStyles();
         int i;
 
@@ -326,7 +329,7 @@
         {
             char c0 = text.charAt(i);
 
-            if (c0 == 167 && i + 1 < text.length())
+            if (c0 == 167 && i + 1 < text.length() && (isFormatColor(text.charAt(i + 1)) || isFormatSpecial(text.charAt(i + 1))))
             {
                 int i1 = "0123456789abcdefklmnor".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
 
@@ -338,11 +341,6 @@
                     this.underlineStyle = false;
                     this.italicStyle = false;
 
-                    if (i1 < 0 || i1 > 15)
-                    {
-                        i1 = 15;
-                    }
-
                     if (shadow)
                     {
                         i1 += 16;
@@ -350,7 +348,7 @@
 
                     int j1 = this.colorCode[i1];
                     this.textColor = j1;
-                    GlStateManager.color((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 0xFF) / 255.0F, (float)(j1 & 0xFF) / 255.0F, this.alpha);
+                    setColor((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
                 }
                 else if (i1 == 16)
                 {
@@ -379,7 +377,7 @@
                     this.strikethroughStyle = false;
                     this.underlineStyle = false;
                     this.italicStyle = false;
-                    GlStateManager.color(this.red, this.blue, this.green, this.alpha);
+                    setColor(this.red, this.blue, this.green, this.alpha);
                 }
 
                 i++;
@@ -409,7 +407,7 @@
                     c0 = c1;
                 }
 
-                float f1 = this.unicodeFlag ? 0.5F : 1.0F;
+                float f1 = j == -1 || this.unicodeFlag ? 0.5f : 1f;
                 boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;
 
                 if (flag)
@@ -447,6 +445,15 @@
 
                     f++;
                 }
+                doDraw(f);
+            }
+        }
+    }
+
+    protected void doDraw(float f)
+    {
+        {
+            {
 
                 if (this.strikethroughStyle)
                 {
@@ -526,7 +533,7 @@
             this.blue = (float)(color >> 8 & 0xFF) / 255.0F;
             this.green = (float)(color & 0xFF) / 255.0F;
             this.alpha = (float)(color >> 24 & 0xFF) / 255.0F;
-            GlStateManager.color(this.red, this.blue, this.green, this.alpha);
+            setColor(this.red, this.blue, this.green, this.alpha);
             this.posX = x;
             this.posY = y;
             this.renderStringAtPos(text, dropShadow);
@@ -580,6 +587,7 @@
 
     public int getCharWidth(char character)
     {
+        if (character == 160) return 4; // forge: display nbsp as space. MC-2595
         if (character == 167)
         {
             return -1;
@@ -678,7 +686,7 @@
 
     private String trimStringNewline(String text)
     {
-        while (text != null && text.endsWith("\n"))
+        while (text.endsWith("\n"))
         {
             text = text.substring(0, text.length() - 1);
         }
@@ -725,9 +733,96 @@
 
     public List<String> listFormattedStringToWidth(String str, int wrapWidth)
     {
-        return Arrays.asList(this.wrapFormattedStringToWidth(str, wrapWidth).split("\n"));
+        if (str.isEmpty()){
+            return Collections.singletonList("");
+        }
+        BreakIteratorHolder.BREAK_ITERATOR.setText(str);
+        List<String> list = new ArrayList<>();
+        int lineWidth = 0, fed = 0, icui, d, prevFormat = 0;
+        StringBuilder format = new StringBuilder(); // For next line's format since it should use format of previous line
+        int[] widths = new int[str.length()];
+        String[] formats = new String[str.length()];
+        StringBuilder line = new StringBuilder();
+        String temp;
+        char[] chars = str.toCharArray();
+        char f;
+        boolean bold = false;
+        for (int i = 0; i < chars.length; i++) {
+            char current = chars[i];
+            switch (current) {
+                case '\n':
+                    list.add(line.toString());
+                    fed = i + 1;
+                    line.delete(0, line.length()).append(format);
+                    prevFormat = format.length();
+                    lineWidth = 0;
+                    widths[0] = lineWidth;
+                    formats[0] = format.toString();
+                    continue;
+                case 'ยง':
+                    if (i + 1 < chars.length) { // Prevent out of bound
+                        f = chars[i + 1];
+                        boolean isC = isFormatColor(f);
+                        if (isC || isFormatSpecial(f)) {
+                            if (f != 'l' && f != 'L') { // Check start of bold style
+                                if (f == 'r' || f == 'R') { // Not Bold, check end of style
+                                    bold = false;
+                                    format.delete(0, format.length()); // Clear the format
+                                } else if (isC) {
+                                    bold = false;
+                                }
+                            } else {
+                                bold = true;
+                            }
+                            format.append('ยง').append(f); // Add to current format code
+                            line.append('ยง').append(f);
+                            widths[i - fed] = lineWidth;
+                            widths[i - fed + 1] = lineWidth;
+                            formats[i - fed] = format.toString();
+                            formats[i - fed + 1] = format.toString();
+                            i++;
+                            continue;
+                        }
+                    }
+                default:
+                    line.append(current);
+                    lineWidth += getCharWidth(current);
+                    if (bold) {
+                        lineWidth++; // Bold style is one pixel wider
+                    }
+                    break;
+            }
+            widths[i - fed] = lineWidth;
+            formats[i - fed] = format.toString();
+            if (lineWidth > wrapWidth) {
+                if (BreakIteratorHolder.BREAK_ITERATOR.isBoundary(i)) {
+                    icui = i;
+                } else {
+                    icui = BreakIteratorHolder.BREAK_ITERATOR.preceding(i);
+                }
+                if (icui <= fed + 1 || i == icui) {
+                    list.add(line.substring(0,line.length() - 1));
+                    fed = i;
+                    line.delete(0, line.length()).append(format).append(current);
+                    prevFormat = format.length();
+                    lineWidth = getCharWidth(current);
+                } else {
+                    d = icui - fed;
+                    if (line.charAt(d + prevFormat - 2) == 'ยง') d++;
+                    list.add(line.substring(0, d + prevFormat));
+                    temp = line.substring(d + prevFormat);
+                    fed += d;
+                    line.delete(0, line.length()).append(formats[d]).append(temp);
+                    prevFormat = formats[d].length();
+                    lineWidth = lineWidth - widths[d - 1];
+                }
+            }
+        }
+        list.add(line.toString());
+        return list;
     }
 
+    @Deprecated
     String wrapFormattedStringToWidth(String str, int wrapWidth)
     {
         int i = this.sizeStringToWidth(str, wrapWidth);
@@ -746,6 +841,7 @@
         }
     }
 
+    @Deprecated
     private int sizeStringToWidth(String str, int wrapWidth)
     {
         int i = str.length();
@@ -844,6 +940,26 @@
     public boolean getBidiFlag()
     {
         return this.bidiFlag;
+    }
+
+    protected void setColor(float r, float g, float b, float a)
+    {
+        GlStateManager.color(r,g,b,a);
+    }
+
+    protected void enableAlpha()
+    {
+        GlStateManager.enableAlpha();
+    }
+
+    protected void bindTexture(ResourceLocation location)
+    {
+        renderEngine.bindTexture(location);
+    }
+
+    protected IResource getResource(ResourceLocation location) throws IOException
+    {
+        return Minecraft.getMinecraft().getResourceManager().getResource(location);
     }
 
     public int getColorCode(char character)
