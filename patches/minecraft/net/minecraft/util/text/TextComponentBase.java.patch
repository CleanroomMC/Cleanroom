--- before/net/minecraft/util/text/TextComponentBase.java
+++ after/net/minecraft/util/text/TextComponentBase.java
@@ -11,10 +11,9 @@
 
 public abstract class TextComponentBase implements ITextComponent
 {
-    protected List<ITextComponent> siblings = Lists.newArrayList();
+    protected List<ITextComponent> siblings = Lists.<ITextComponent>newArrayList();
     private Style style;
 
-    @Override
     public ITextComponent appendSibling(ITextComponent component)
     {
         component.getStyle().setParentStyle(this.getStyle());
@@ -22,19 +21,16 @@
         return this;
     }
 
-    @Override
     public List<ITextComponent> getSiblings()
     {
         return this.siblings;
     }
 
-    @Override
     public ITextComponent appendText(String text)
     {
         return this.appendSibling(new TextComponentString(text));
     }
 
-    @Override
     public ITextComponent setStyle(Style style)
     {
         this.style = style;
@@ -47,7 +43,6 @@
         return this;
     }
 
-    @Override
     public Style getStyle()
     {
         if (this.style == null)
@@ -63,13 +58,11 @@
         return this.style;
     }
 
-    @Override
     public Iterator<ITextComponent> iterator()
     {
-        return Iterators.concat(Iterators.forArray(this), createDeepCopyIterator(this.siblings));
+        return Iterators.<ITextComponent>concat(Iterators.forArray(this), createDeepCopyIterator(this.siblings));
     }
 
-    @Override
     public final String getUnformattedText()
     {
         StringBuilder stringbuilder = new StringBuilder();
@@ -82,8 +75,6 @@
         return stringbuilder.toString();
     }
 
-    @SideOnly(Side.CLIENT)
-    @Override
     public final String getFormattedText()
     {
         StringBuilder stringbuilder = new StringBuilder();
@@ -96,7 +87,7 @@
             {
                 stringbuilder.append(itextcomponent.getStyle().getFormattingCode());
                 stringbuilder.append(s);
-                stringbuilder.append(TextFormatting.RESET);
+                stringbuilder.append((Object)TextFormatting.RESET);
             }
         }
 
@@ -105,16 +96,14 @@
 
     public static Iterator<ITextComponent> createDeepCopyIterator(Iterable<ITextComponent> components)
     {
-        Iterator<ITextComponent> iterator = Iterators.concat(
-                                                Iterators.transform(components.iterator(), new Function<ITextComponent, Iterator<ITextComponent>>()
+        Iterator<ITextComponent> iterator = Iterators.concat(Iterators.transform(components.iterator(), new Function<ITextComponent, Iterator<ITextComponent>>()
         {
             public Iterator<ITextComponent> apply(@Nullable ITextComponent p_apply_1_)
             {
                 return p_apply_1_.iterator();
             }
-        })
-                                            );
-        return Iterators.transform(iterator, new Function<ITextComponent, ITextComponent>()
+        }));
+        iterator = Iterators.transform(iterator, new Function<ITextComponent, ITextComponent>()
         {
             public ITextComponent apply(@Nullable ITextComponent p_apply_1_)
             {
@@ -123,9 +112,9 @@
                 return itextcomponent;
             }
         });
+        return iterator;
     }
 
-    @Override
     public boolean equals(Object p_equals_1_)
     {
         if (this == p_equals_1_)
@@ -143,13 +132,11 @@
         }
     }
 
-    @Override
     public int hashCode()
     {
         return 31 * this.style.hashCode() + this.siblings.hashCode();
     }
 
-    @Override
     public String toString()
     {
         return "BaseComponent{style=" + this.style + ", siblings=" + this.siblings + '}';
