--- before/net/minecraft/util/IntIdentityHashBiMap.java
+++ after/net/minecraft/util/IntIdentityHashBiMap.java
@@ -34,7 +34,7 @@
     @Nullable
     public K get(int idIn)
     {
-        return idIn >= 0 && idIn < this.byId.length ? this.byId[idIn] : null;
+        return (K)(idIn >= 0 && idIn < this.byId.length ? this.byId[idIn] : null);
     }
 
     private int getValue(int p_186805_1_)
@@ -53,7 +53,7 @@
     {
         while (this.nextFreeIndex < this.byId.length && this.byId[this.nextFreeIndex] != null)
         {
-            this.nextFreeIndex++;
+            ++this.nextFreeIndex;
         }
 
         return this.nextFreeIndex;
@@ -69,7 +69,7 @@
         this.nextFreeIndex = 0;
         this.mapSize = 0;
 
-        for (int i = 0; i < ak.length; i++)
+        for (int i = 0; i < ak.length; ++i)
         {
             if (ak[i] != null)
             {
@@ -84,11 +84,11 @@
 
         if ((float)i >= (float)this.values.length * 0.8F)
         {
-            int j = this.values.length << 1;
+            int j;
 
-            while (j < intKey)
+            for (j = this.values.length << 1; j < intKey; j <<= 1)
             {
-                j <<= 1;
+                ;
             }
 
             this.grow(j);
@@ -98,22 +98,22 @@
         this.values[k] = objectIn;
         this.intKeys[k] = intKey;
         this.byId[intKey] = objectIn;
-        this.mapSize++;
+        ++this.mapSize;
 
         if (intKey == this.nextFreeIndex)
         {
-            this.nextFreeIndex++;
+            ++this.nextFreeIndex;
         }
     }
 
     private int hashObject(@Nullable K obectIn)
     {
-        return (MathHelper.hash(System.identityHashCode(obectIn)) & 2147483647) % this.values.length;
+        return (MathHelper.hash(System.identityHashCode(obectIn)) & Integer.MAX_VALUE) % this.values.length;
     }
 
     private int getIndex(@Nullable K objectIn, int p_186816_2_)
     {
-        for (int i = p_186816_2_; i < this.values.length; i++)
+        for (int i = p_186816_2_; i < this.values.length; ++i)
         {
             if (this.values[i] == objectIn)
             {
@@ -126,7 +126,7 @@
             }
         }
 
-        for (int j = 0; j < p_186816_2_; j++)
+        for (int j = 0; j < p_186816_2_; ++j)
         {
             if (this.values[j] == objectIn)
             {
@@ -144,7 +144,7 @@
 
     private int findEmpty(int p_186806_1_)
     {
-        for (int i = p_186806_1_; i < this.values.length; i++)
+        for (int i = p_186806_1_; i < this.values.length; ++i)
         {
             if (this.values[i] == EMPTY)
             {
@@ -152,7 +152,7 @@
             }
         }
 
-        for (int j = 0; j < p_186806_1_; j++)
+        for (int j = 0; j < p_186806_1_; ++j)
         {
             if (this.values[j] == EMPTY)
             {
@@ -163,17 +163,15 @@
         throw new RuntimeException("Overflowed :(");
     }
 
-    @Override
     public Iterator<K> iterator()
     {
         return Iterators.filter(Iterators.forArray(this.byId), Predicates.notNull());
     }
 
-    @SideOnly(Side.CLIENT)
     public void clear()
     {
-        Arrays.fill(this.values, null);
-        Arrays.fill(this.byId, null);
+        Arrays.fill(this.values, (Object)null);
+        Arrays.fill(this.byId, (Object)null);
         this.nextFreeIndex = 0;
         this.mapSize = 0;
     }
