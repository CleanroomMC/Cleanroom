--- before/net/minecraft/inventory/Container.java
+++ after/net/minecraft/inventory/Container.java
@@ -21,16 +21,16 @@
 
 public abstract class Container
 {
-    public NonNullList<ItemStack> inventoryItemStacks = NonNullList.create();
-    public List<Slot> inventorySlots = Lists.newArrayList();
+    public NonNullList<ItemStack> inventoryItemStacks = NonNullList.<ItemStack>create();
+    public List<Slot> inventorySlots = Lists.<Slot>newArrayList();
     public int windowId;
     @SideOnly(Side.CLIENT)
     private short transactionID;
     private int dragMode = -1;
     private int dragEvent;
-    private final Set<Slot> dragSlots = Sets.newHashSet();
-    protected List<IContainerListener> listeners = Lists.newArrayList();
-    private final Set<EntityPlayer> playerList = Sets.newHashSet();
+    private final Set<Slot> dragSlots = Sets.<Slot>newHashSet();
+    protected List<IContainerListener> listeners = Lists.<IContainerListener>newArrayList();
+    private final Set<EntityPlayer> playerList = Sets.<EntityPlayer>newHashSet();
 
     protected Slot addSlotToContainer(Slot slotIn)
     {
@@ -54,39 +54,41 @@
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public void removeListener(IContainerListener listener)
-    {
-        this.listeners.remove(listener);
-    }
-
     public NonNullList<ItemStack> getInventory()
     {
-        NonNullList<ItemStack> nonnulllist = NonNullList.create();
+        NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>create();
 
-        for (int i = 0; i < this.inventorySlots.size(); i++)
+        for (int i = 0; i < this.inventorySlots.size(); ++i)
         {
-            nonnulllist.add(this.inventorySlots.get(i).getStack());
+            nonnulllist.add(((Slot)this.inventorySlots.get(i)).getStack());
         }
 
         return nonnulllist;
     }
 
+    @SideOnly(Side.CLIENT)
+    public void removeListener(IContainerListener listener)
+    {
+        this.listeners.remove(listener);
+    }
+
     public void detectAndSendChanges()
     {
-        for (int i = 0; i < this.inventorySlots.size(); i++)
+        for (int i = 0; i < this.inventorySlots.size(); ++i)
         {
-            ItemStack itemstack = this.inventorySlots.get(i).getStack();
+            ItemStack itemstack = ((Slot)this.inventorySlots.get(i)).getStack();
             ItemStack itemstack1 = this.inventoryItemStacks.get(i);
 
             if (!ItemStack.areItemStacksEqual(itemstack1, itemstack))
             {
+                boolean clientStackChanged = !ItemStack.areItemStacksEqualUsingNBTShareTag(itemstack1, itemstack);
                 itemstack1 = itemstack.isEmpty() ? ItemStack.EMPTY : itemstack.copy();
                 this.inventoryItemStacks.set(i, itemstack1);
 
-                for (int j = 0; j < this.listeners.size(); j++)
+                if (clientStackChanged)
+                for (int j = 0; j < this.listeners.size(); ++j)
                 {
-                    this.listeners.get(j).sendSlotContents(this, i, itemstack1);
+                    ((IContainerListener)this.listeners.get(j)).sendSlotContents(this, i, itemstack1);
                 }
             }
         }
@@ -100,7 +102,7 @@
     @Nullable
     public Slot getSlotFromInventory(IInventory inv, int slotIn)
     {
-        for (int i = 0; i < this.inventorySlots.size(); i++)
+        for (int i = 0; i < this.inventorySlots.size(); ++i)
         {
             Slot slot = this.inventorySlots.get(i);
 
@@ -161,11 +163,7 @@
                 Slot slot7 = this.inventorySlots.get(slotId);
                 ItemStack itemstack12 = inventoryplayer.getItemStack();
 
-                if (slot7 != null
-                        && canAddItemToSlot(slot7, itemstack12, true)
-                        && slot7.isItemValid(itemstack12)
-                        && (this.dragMode == 2 || itemstack12.getCount() > this.dragSlots.size())
-                        && this.canDragIntoSlot(slot7))
+                if (slot7 != null && canAddItemToSlot(slot7, itemstack12, true) && slot7.isItemValid(itemstack12) && (this.dragMode == 2 || itemstack12.getCount() > this.dragSlots.size()) && this.canDragIntoSlot(slot7))
                 {
                     this.dragSlots.add(slot7);
                 }
@@ -181,11 +179,7 @@
                     {
                         ItemStack itemstack13 = inventoryplayer.getItemStack();
 
-                        if (slot8 != null
-                                && canAddItemToSlot(slot8, itemstack13, true)
-                                && slot8.isItemValid(itemstack13)
-                                && (this.dragMode == 2 || itemstack13.getCount() >= this.dragSlots.size())
-                                && this.canDragIntoSlot(slot8))
+                        if (slot8 != null && canAddItemToSlot(slot8, itemstack13, true) && slot8.isItemValid(itemstack13) && (this.dragMode == 2 || itemstack13.getCount() >= this.dragSlots.size()) && this.canDragIntoSlot(slot8))
                         {
                             ItemStack itemstack14 = itemstack9.copy();
                             int j3 = slot8.getHasStack() ? slot8.getStack().getCount() : 0;
@@ -249,10 +243,7 @@
                     return ItemStack.EMPTY;
                 }
 
-                for (ItemStack itemstack7 = this.transferStackInSlot(player, slotId);
-                        !itemstack7.isEmpty() && ItemStack.areItemsEqual(slot5.getStack(), itemstack7);
-                        itemstack7 = this.transferStackInSlot(player, slotId)
-                    )
+                for (ItemStack itemstack7 = this.transferStackInSlot(player, slotId); !itemstack7.isEmpty() && ItemStack.areItemsEqual(slot5.getStack(), itemstack7); itemstack7 = this.transferStackInSlot(player, slotId))
                 {
                     itemstack = itemstack7.copy();
                 }
@@ -314,9 +305,7 @@
                         }
                         else if (slot6.isItemValid(itemstack11))
                         {
-                            if (itemstack8.getItem() == itemstack11.getItem()
-                                    && itemstack8.getMetadata() == itemstack11.getMetadata()
-                                    && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11))
+                            if (itemstack8.getItem() == itemstack11.getItem() && itemstack8.getMetadata() == itemstack11.getMetadata() && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11))
                             {
                                 int k2 = dragType == 0 ? itemstack11.getCount() : 1;
 
@@ -339,11 +328,7 @@
                                 inventoryplayer.setItemStack(itemstack8);
                             }
                         }
-                        else if (itemstack8.getItem() == itemstack11.getItem()
-                                 && itemstack11.getMaxStackSize() > 1
-                                 && (!itemstack8.getHasSubtypes() || itemstack8.getMetadata() == itemstack11.getMetadata())
-                                 && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11)
-                                 && !itemstack8.isEmpty())
+                        else if (itemstack8.getItem() == itemstack11.getItem() && itemstack11.getMaxStackSize() > 1 && (!itemstack8.getHasSubtypes() || itemstack8.getMetadata() == itemstack11.getMetadata()) && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11) && !itemstack8.isEmpty())
                         {
                             int j2 = itemstack8.getCount();
 
@@ -424,10 +409,7 @@
                 }
             }
         }
-        else if (clickTypeIn == ClickType.CLONE
-                 && player.capabilities.isCreativeMode
-                 && inventoryplayer.getItemStack().isEmpty()
-                 && slotId >= 0)
+        else if (clickTypeIn == ClickType.CLONE && player.capabilities.isCreativeMode && inventoryplayer.getItemStack().isEmpty() && slotId >= 0)
         {
             Slot slot3 = this.inventorySlots.get(slotId);
 
@@ -459,7 +441,7 @@
                 int i = dragType == 0 ? 0 : this.inventorySlots.size() - 1;
                 int j = dragType == 0 ? 1 : -1;
 
-                for (int k = 0; k < 2; k++)
+                for (int k = 0; k < 2; ++k)
                 {
                     for (int l = i; l >= 0 && l < this.inventorySlots.size() && itemstack1.getCount() < itemstack1.getMaxStackSize(); l += j)
                     {
@@ -513,14 +495,14 @@
     {
         if (!playerIn.isEntityAlive() || playerIn instanceof EntityPlayerMP && ((EntityPlayerMP)playerIn).hasDisconnected())
         {
-            for (int j = 0; j < inventoryIn.getSizeInventory(); j++)
+            for (int j = 0; j < inventoryIn.getSizeInventory(); ++j)
             {
                 playerIn.dropItem(inventoryIn.removeStackFromSlot(j), false);
             }
         }
         else
         {
-            for (int i = 0; i < inventoryIn.getSizeInventory(); i++)
+            for (int i = 0; i < inventoryIn.getSizeInventory(); ++i)
             {
                 playerIn.inventory.placeItemBackInInventory(worldIn, inventoryIn.removeStackFromSlot(i));
             }
@@ -540,7 +522,7 @@
     @SideOnly(Side.CLIENT)
     public void setAll(List<ItemStack> p_190896_1_)
     {
-        for (int i = 0; i < p_190896_1_.size(); i++)
+        for (int i = 0; i < p_190896_1_.size(); ++i)
         {
             this.getSlot(i).putStack(p_190896_1_.get(i));
         }
@@ -554,7 +536,7 @@
     @SideOnly(Side.CLIENT)
     public short getNextTransactionID(InventoryPlayer invPlayer)
     {
-        this.transactionID++;
+        ++this.transactionID;
         return this.transactionID;
     }
 
@@ -589,29 +571,39 @@
 
         if (stack.isStackable())
         {
-            while (!stack.isEmpty() && (reverseDirection ? i >= startIndex : i < endIndex))
+            while (!stack.isEmpty())
             {
+                if (reverseDirection)
+                {
+                    if (i < startIndex)
+                    {
+                        break;
+                    }
+                }
+                else if (i >= endIndex)
+                {
+                    break;
+                }
+
                 Slot slot = this.inventorySlots.get(i);
                 ItemStack itemstack = slot.getStack();
 
-                if (!itemstack.isEmpty()
-                        && itemstack.getItem() == stack.getItem()
-                        && (!stack.getHasSubtypes() || stack.getMetadata() == itemstack.getMetadata())
-                        && ItemStack.areItemStackTagsEqual(stack, itemstack))
+                if (!itemstack.isEmpty() && itemstack.getItem() == stack.getItem() && (!stack.getHasSubtypes() || stack.getMetadata() == itemstack.getMetadata()) && ItemStack.areItemStackTagsEqual(stack, itemstack))
                 {
                     int j = itemstack.getCount() + stack.getCount();
+                    int maxSize = Math.min(slot.getSlotStackLimit(), stack.getMaxStackSize());
 
-                    if (j <= stack.getMaxStackSize())
+                    if (j <= maxSize)
                     {
                         stack.setCount(0);
                         itemstack.setCount(j);
                         slot.onSlotChanged();
                         flag = true;
                     }
-                    else if (itemstack.getCount() < stack.getMaxStackSize())
+                    else if (itemstack.getCount() < maxSize)
                     {
-                        stack.shrink(stack.getMaxStackSize() - itemstack.getCount());
-                        itemstack.setCount(stack.getMaxStackSize());
+                        stack.shrink(maxSize - itemstack.getCount());
+                        itemstack.setCount(maxSize);
                         slot.onSlotChanged();
                         flag = true;
                     }
@@ -619,11 +611,11 @@
 
                 if (reverseDirection)
                 {
-                    i--;
+                    --i;
                 }
                 else
                 {
-                    i++;
+                    ++i;
                 }
             }
         }
@@ -639,8 +631,20 @@
                 i = startIndex;
             }
 
-            while (reverseDirection ? i >= startIndex : i < endIndex)
+            while (true)
             {
+                if (reverseDirection)
+                {
+                    if (i < startIndex)
+                    {
+                        break;
+                    }
+                }
+                else if (i >= endIndex)
+                {
+                    break;
+                }
+
                 Slot slot1 = this.inventorySlots.get(i);
                 ItemStack itemstack1 = slot1.getStack();
 
@@ -662,11 +666,11 @@
 
                 if (reverseDirection)
                 {
-                    i--;
+                    --i;
                 }
                 else
                 {
-                    i++;
+                    ++i;
                 }
             }
         }
@@ -696,9 +700,13 @@
         {
             return true;
         }
+        else if (dragModeIn == 1)
+        {
+            return true;
+        }
         else
         {
-            return dragModeIn == 1 ? true : dragModeIn == 2 && player.capabilities.isCreativeMode;
+            return dragModeIn == 2 && player.capabilities.isCreativeMode;
         }
     }
 
@@ -711,9 +719,15 @@
     public static boolean canAddItemToSlot(@Nullable Slot slotIn, ItemStack stack, boolean stackSizeMatters)
     {
         boolean flag = slotIn == null || !slotIn.getHasStack();
-        return !flag && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack)
-               ? slotIn.getStack().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= stack.getMaxStackSize()
-               : flag;
+
+        if (!flag && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack))
+        {
+            return slotIn.getStack().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= stack.getMaxStackSize();
+        }
+        else
+        {
+            return flag;
+        }
     }
 
     public static void computeStackSize(Set<Slot> dragSlotsIn, int dragModeIn, ItemStack stack, int slotStackSize)
@@ -727,7 +741,7 @@
                 stack.setCount(1);
                 break;
             case 2:
-                stack.setCount(stack.getItem().getItemStackLimit());
+                stack.setCount(stack.getMaxStackSize());
         }
 
         stack.grow(slotStackSize);
@@ -754,18 +768,18 @@
             int i = 0;
             float f = 0.0F;
 
-            for (int j = 0; j < inv.getSizeInventory(); j++)
+            for (int j = 0; j < inv.getSizeInventory(); ++j)
             {
                 ItemStack itemstack = inv.getStackInSlot(j);
 
                 if (!itemstack.isEmpty())
                 {
                     f += (float)itemstack.getCount() / (float)Math.min(inv.getInventoryStackLimit(), itemstack.getMaxStackSize());
-                    i++;
+                    ++i;
                 }
             }
 
-            f /= (float)inv.getSizeInventory();
+            f = f / (float)inv.getSizeInventory();
             return MathHelper.floor(f * 14.0F) + (i > 0 ? 1 : 0);
         }
     }
@@ -778,12 +792,7 @@
             ItemStack itemstack = ItemStack.EMPTY;
             IRecipe irecipe = CraftingManager.findMatchingRecipe(p_192389_3_, p_192389_1_);
 
-            if (irecipe != null
-                    && (
-                        irecipe.isDynamic()
-                        || !p_192389_1_.getGameRules().getBoolean("doLimitedCrafting")
-                        || entityplayermp.getRecipeBook().isUnlocked(irecipe)
-                    ))
+            if (irecipe != null && (irecipe.isDynamic() || !p_192389_1_.getGameRules().getBoolean("doLimitedCrafting") || entityplayermp.getRecipeBook().isUnlocked(irecipe)))
             {
                 p_192389_4_.setRecipeUsed(irecipe);
                 itemstack = irecipe.getCraftingResult(p_192389_3_);
