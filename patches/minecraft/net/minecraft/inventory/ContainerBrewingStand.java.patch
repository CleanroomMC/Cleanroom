--- before/net/minecraft/inventory/ContainerBrewingStand.java
+++ after/net/minecraft/inventory/ContainerBrewingStand.java
@@ -29,33 +29,31 @@
         this.slot = this.addSlotToContainer(new ContainerBrewingStand.Ingredient(tileBrewingStandIn, 3, 79, 17));
         this.addSlotToContainer(new ContainerBrewingStand.Fuel(tileBrewingStandIn, 4, 17, 17));
 
-        for (int i = 0; i < 3; i++)
+        for (int i = 0; i < 3; ++i)
         {
-            for (int j = 0; j < 9; j++)
+            for (int j = 0; j < 9; ++j)
             {
                 this.addSlotToContainer(new Slot(playerInventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
             }
         }
 
-        for (int k = 0; k < 9; k++)
+        for (int k = 0; k < 9; ++k)
         {
             this.addSlotToContainer(new Slot(playerInventory, k, 8 + k * 18, 142));
         }
     }
 
-    @Override
     public void addListener(IContainerListener listener)
     {
         super.addListener(listener);
         listener.sendAllWindowProperties(this, this.tileBrewingStand);
     }
 
-    @Override
     public void detectAndSendChanges()
     {
         super.detectAndSendChanges();
 
-        for (int i = 0; i < this.listeners.size(); i++)
+        for (int i = 0; i < this.listeners.size(); ++i)
         {
             IContainerListener icontainerlistener = this.listeners.get(i);
 
@@ -75,19 +73,16 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void updateProgressBar(int id, int data)
     {
         this.tileBrewingStand.setField(id, data);
     }
 
-    @Override
     public boolean canInteractWith(EntityPlayer playerIn)
     {
         return this.tileBrewingStand.isUsableByPlayer(playerIn);
     }
 
-    @Override
     public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
     {
         ItemStack itemstack = ItemStack.EMPTY;
@@ -177,7 +172,6 @@
                 super(iInventoryIn, index, xPosition, yPosition);
             }
 
-            @Override
             public boolean isItemValid(ItemStack stack)
             {
                 return isValidBrewingFuel(stack);
@@ -188,7 +182,6 @@
                 return itemStackIn.getItem() == Items.BLAZE_POWDER;
             }
 
-            @Override
             public int getSlotStackLimit()
             {
                 return 64;
@@ -202,13 +195,11 @@
                 super(iInventoryIn, index, xPosition, yPosition);
             }
 
-            @Override
             public boolean isItemValid(ItemStack stack)
             {
-                return PotionHelper.isReagent(stack);
+                return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidIngredient(stack);
             }
 
-            @Override
             public int getSlotStackLimit()
             {
                 return 64;
@@ -222,25 +213,23 @@
                 super(p_i47598_1_, p_i47598_2_, p_i47598_3_, p_i47598_4_);
             }
 
-            @Override
             public boolean isItemValid(ItemStack stack)
             {
                 return canHoldPotion(stack);
             }
 
-            @Override
             public int getSlotStackLimit()
             {
                 return 1;
             }
 
-            @Override
             public ItemStack onTake(EntityPlayer thePlayer, ItemStack stack)
             {
                 PotionType potiontype = PotionUtils.getPotionFromItem(stack);
 
                 if (thePlayer instanceof EntityPlayerMP)
                 {
+                    net.minecraftforge.event.ForgeEventFactory.onPlayerBrewedPotion(thePlayer, stack);
                     CriteriaTriggers.BREWED_POTION.trigger((EntityPlayerMP)thePlayer, potiontype);
                 }
 
@@ -250,8 +239,7 @@
 
             public static boolean canHoldPotion(ItemStack stack)
             {
-                Item item = stack.getItem();
-                return item == Items.POTIONITEM || item == Items.SPLASH_POTION || item == Items.LINGERING_POTION || item == Items.GLASS_BOTTLE;
+                return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidInput(stack);
             }
         }
 }
