--- before/net/minecraft/inventory/ContainerPlayer.java
+++ after/net/minecraft/inventory/ContainerPlayer.java
@@ -12,10 +12,7 @@
 
 public class ContainerPlayer extends Container
 {
-    private static final EntityEquipmentSlot[] VALID_EQUIPMENT_SLOTS = new EntityEquipmentSlot[]
-        {
-            EntityEquipmentSlot.HEAD, EntityEquipmentSlot.CHEST, EntityEquipmentSlot.LEGS, EntityEquipmentSlot.FEET
-        };
+    private static final EntityEquipmentSlot[] VALID_EQUIPMENT_SLOTS = new EntityEquipmentSlot[] {EntityEquipmentSlot.HEAD, EntityEquipmentSlot.CHEST, EntityEquipmentSlot.LEGS, EntityEquipmentSlot.FEET};
     public InventoryCrafting craftMatrix = new InventoryCrafting(this, 2, 2);
     public InventoryCraftResult craftResult = new InventoryCraftResult();
     public boolean isLocalWorld;
@@ -27,58 +24,50 @@
         this.player = playerIn;
         this.addSlotToContainer(new SlotCrafting(playerInventory.player, this.craftMatrix, this.craftResult, 0, 154, 28));
 
-        for (int i = 0; i < 2; i++)
+        for (int i = 0; i < 2; ++i)
         {
-            for (int j = 0; j < 2; j++)
+            for (int j = 0; j < 2; ++j)
             {
                 this.addSlotToContainer(new Slot(this.craftMatrix, j + i * 2, 98 + j * 18, 18 + i * 18));
             }
         }
 
-        for (int k = 0; k < 4; k++)
+        for (int k = 0; k < 4; ++k)
         {
             final EntityEquipmentSlot entityequipmentslot = VALID_EQUIPMENT_SLOTS[k];
-            this.addSlotToContainer(
-                new Slot(playerInventory, 36 + (3 - k), 8, 8 + k * 18)
+            this.addSlotToContainer(new Slot(playerInventory, 36 + (3 - k), 8, 8 + k * 18)
             {
-                @Override
                 public int getSlotStackLimit()
                 {
                     return 1;
                 }
-                @Override
                 public boolean isItemValid(ItemStack stack)
                 {
-                    return entityequipmentslot == EntityLiving.getSlotForItemStack(stack);
+                    return stack.getItem().isValidArmor(stack, entityequipmentslot, player);
                 }
-                @Override
                 public boolean canTakeStack(EntityPlayer playerIn)
                 {
                     ItemStack itemstack = this.getStack();
-                    return !itemstack.isEmpty() && !playerIn.isCreative() && EnchantmentHelper.hasBindingCurse(itemstack)
-                           ? false
-                           : super.canTakeStack(playerIn);
+                    return !itemstack.isEmpty() && !playerIn.isCreative() && EnchantmentHelper.hasBindingCurse(itemstack) ? false : super.canTakeStack(playerIn);
                 }
                 @Nullable
                 @SideOnly(Side.CLIENT)
-                @Override
                 public String getSlotTexture()
                 {
                     return ItemArmor.EMPTY_SLOT_NAMES[entityequipmentslot.getIndex()];
                 }
-            }
-            );
+            });
         }
 
-        for (int l = 0; l < 3; l++)
+        for (int l = 0; l < 3; ++l)
         {
-            for (int j1 = 0; j1 < 9; j1++)
+            for (int j1 = 0; j1 < 9; ++j1)
             {
                 this.addSlotToContainer(new Slot(playerInventory, j1 + (l + 1) * 9, 8 + j1 * 18, 84 + l * 18));
             }
         }
 
-        for (int i1 = 0; i1 < 9; i1++)
+        for (int i1 = 0; i1 < 9; ++i1)
         {
             this.addSlotToContainer(new Slot(playerInventory, i1, 8 + i1 * 18, 142));
         }
@@ -87,7 +76,6 @@
         {
             @Nullable
             @SideOnly(Side.CLIENT)
-            @Override
             public String getSlotTexture()
             {
                 return "minecraft:items/empty_armor_slot_shield";
@@ -95,13 +83,11 @@
         });
     }
 
-    @Override
     public void onCraftMatrixChanged(IInventory inventoryIn)
     {
         this.slotChangedCraftingGrid(this.player.world, this.player, this.craftMatrix, this.craftResult);
     }
 
-    @Override
     public void onContainerClosed(EntityPlayer playerIn)
     {
         super.onContainerClosed(playerIn);
@@ -113,13 +99,11 @@
         }
     }
 
-    @Override
     public boolean canInteractWith(EntityPlayer playerIn)
     {
         return true;
     }
 
-    @Override
     public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
     {
         ItemStack itemstack = ItemStack.EMPTY;
@@ -154,8 +138,7 @@
                     return ItemStack.EMPTY;
                 }
             }
-            else if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR
-                     && !this.inventorySlots.get(8 - entityequipmentslot.getIndex()).getHasStack())
+            else if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR && !((Slot)this.inventorySlots.get(8 - entityequipmentslot.getIndex())).getHasStack())
             {
                 int i = 8 - entityequipmentslot.getIndex();
 
@@ -164,7 +147,7 @@
                     return ItemStack.EMPTY;
                 }
             }
-            else if (entityequipmentslot == EntityEquipmentSlot.OFFHAND && !this.inventorySlots.get(45).getHasStack())
+            else if (entityequipmentslot == EntityEquipmentSlot.OFFHAND && !((Slot)this.inventorySlots.get(45)).getHasStack())
             {
                 if (!this.mergeItemStack(itemstack1, 45, 46, false))
                 {
@@ -215,7 +198,6 @@
         return itemstack;
     }
 
-    @Override
     public boolean canMergeSlot(ItemStack stack, Slot slotIn)
     {
         return slotIn.inventory != this.craftResult && super.canMergeSlot(stack, slotIn);
