--- before/net/minecraft/inventory/ContainerEnchantment.java
+++ after/net/minecraft/inventory/ContainerEnchantment.java
@@ -24,27 +24,14 @@
 
 public class ContainerEnchantment extends Container
 {
-    public IInventory tableInventory = new InventoryBasic("Enchant", true, 2)
-    {
-        @Override
-        public int getInventoryStackLimit()
-        {
-            return 64;
-        }
-        @Override
-        public void markDirty()
-        {
-            super.markDirty();
-            ContainerEnchantment.this.onCraftMatrixChanged(this);
-        }
-    };
+    public IInventory tableInventory;
     private final World world;
     private final BlockPos position;
-    private final Random rand = new Random();
+    private final Random rand;
     public int xpSeed;
-    public int[] enchantLevels = new int[3];
-    public int[] enchantClue = new int[] { -1, -1, -1};
-    public int[] worldClue = new int[] { -1, -1, -1};
+    public int[] enchantLevels;
+    public int[] enchantClue;
+    public int[] worldClue;
 
     @SideOnly(Side.CLIENT)
     public ContainerEnchantment(InventoryPlayer playerInv, World worldIn)
@@ -54,17 +41,31 @@
 
     public ContainerEnchantment(InventoryPlayer playerInv, World worldIn, BlockPos pos)
     {
+        this.tableInventory = new InventoryBasic("Enchant", true, 2)
+        {
+            public int getInventoryStackLimit()
+            {
+                return 64;
+            }
+            public void markDirty()
+            {
+                super.markDirty();
+                ContainerEnchantment.this.onCraftMatrixChanged(this);
+            }
+        };
+        this.rand = new Random();
+        this.enchantLevels = new int[3];
+        this.enchantClue = new int[] { -1, -1, -1};
+        this.worldClue = new int[] { -1, -1, -1};
         this.world = worldIn;
         this.position = pos;
         this.xpSeed = playerInv.player.getXPSeed();
         this.addSlotToContainer(new Slot(this.tableInventory, 0, 15, 47)
         {
-            @Override
             public boolean isItemValid(ItemStack stack)
             {
                 return true;
             }
-            @Override
             public int getSlotStackLimit()
             {
                 return 1;
@@ -72,22 +73,24 @@
         });
         this.addSlotToContainer(new Slot(this.tableInventory, 1, 35, 47)
         {
-            @Override
+            java.util.List<ItemStack> ores = net.minecraftforge.oredict.OreDictionary.getOres("gemLapis");
             public boolean isItemValid(ItemStack stack)
             {
-                return stack.getItem() == Items.DYE && EnumDyeColor.byDyeDamage(stack.getMetadata()) == EnumDyeColor.BLUE;
+                for (ItemStack ore : ores)
+                    if (net.minecraftforge.oredict.OreDictionary.itemMatches(ore, stack, false)) return true;
+                return false;
             }
         });
 
-        for (int i = 0; i < 3; i++)
+        for (int i = 0; i < 3; ++i)
         {
-            for (int j = 0; j < 9; j++)
+            for (int j = 0; j < 9; ++j)
             {
                 this.addSlotToContainer(new Slot(playerInv, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
             }
         }
 
-        for (int k = 0; k < 9; k++)
+        for (int k = 0; k < 9; ++k)
         {
             this.addSlotToContainer(new Slot(playerInv, k, 8 + k * 18, 142));
         }
@@ -107,19 +110,17 @@
         crafting.sendWindowProperty(this, 9, this.worldClue[2]);
     }
 
-    @Override
     public void addListener(IContainerListener listener)
     {
         super.addListener(listener);
         this.broadcastData(listener);
     }
 
-    @Override
     public void detectAndSendChanges()
     {
         super.detectAndSendChanges();
 
-        for (int i = 0; i < this.listeners.size(); i++)
+        for (int i = 0; i < this.listeners.size(); ++i)
         {
             IContainerListener icontainerlistener = this.listeners.get(i);
             this.broadcastData(icontainerlistener);
@@ -127,7 +128,6 @@
     }
 
     @SideOnly(Side.CLIENT)
-    @Override
     public void updateProgressBar(int id, int data)
     {
         if (id >= 0 && id <= 2)
@@ -152,7 +152,6 @@
         }
     }
 
-    @Override
     public void onCraftMatrixChanged(IInventory inventoryIn)
     {
         if (inventoryIn == this.tableInventory)
@@ -164,46 +163,22 @@
                 if (!this.world.isRemote)
                 {
                     int l = 0;
+                    float power = 0;
 
-                    for (int j = -1; j <= 1; j++)
+                    for (int j = -1; j <= 1; ++j)
                     {
-                        for (int k = -1; k <= 1; k++)
+                        for (int k = -1; k <= 1; ++k)
                         {
-                            if ((j != 0 || k != 0)
-                                    && this.world.isAirBlock(this.position.add(k, 0, j))
-                                    && this.world.isAirBlock(this.position.add(k, 1, j)))
+                            if ((j != 0 || k != 0) && this.world.isAirBlock(this.position.add(k, 0, j)) && this.world.isAirBlock(this.position.add(k, 1, j)))
                             {
-                                if (this.world.getBlockState(this.position.add(k * 2, 0, j * 2)).getBlock() == Blocks.BOOKSHELF)
-                                {
-                                    l++;
-                                }
-
-                                if (this.world.getBlockState(this.position.add(k * 2, 1, j * 2)).getBlock() == Blocks.BOOKSHELF)
-                                {
-                                    l++;
-                                }
-
+                                power += net.minecraftforge.common.ForgeHooks.getEnchantPower(world, position.add(k * 2, 0, j * 2));
+                                power += net.minecraftforge.common.ForgeHooks.getEnchantPower(world, position.add(k * 2, 1, j * 2));
                                 if (k != 0 && j != 0)
                                 {
-                                    if (this.world.getBlockState(this.position.add(k * 2, 0, j)).getBlock() == Blocks.BOOKSHELF)
-                                    {
-                                        l++;
-                                    }
-
-                                    if (this.world.getBlockState(this.position.add(k * 2, 1, j)).getBlock() == Blocks.BOOKSHELF)
-                                    {
-                                        l++;
-                                    }
-
-                                    if (this.world.getBlockState(this.position.add(k, 0, j * 2)).getBlock() == Blocks.BOOKSHELF)
-                                    {
-                                        l++;
-                                    }
-
-                                    if (this.world.getBlockState(this.position.add(k, 1, j * 2)).getBlock() == Blocks.BOOKSHELF)
-                                    {
-                                        l++;
-                                    }
+                                    power += net.minecraftforge.common.ForgeHooks.getEnchantPower(world, position.add(k * 2, 0, j));
+                                    power += net.minecraftforge.common.ForgeHooks.getEnchantPower(world, position.add(k * 2, 1, j));
+                                    power += net.minecraftforge.common.ForgeHooks.getEnchantPower(world, position.add(k, 0, j * 2));
+                                    power += net.minecraftforge.common.ForgeHooks.getEnchantPower(world, position.add(k, 1, j * 2));
                                 }
                             }
                         }
@@ -211,9 +186,9 @@
 
                     this.rand.setSeed((long)this.xpSeed);
 
-                    for (int i1 = 0; i1 < 3; i1++)
+                    for (int i1 = 0; i1 < 3; ++i1)
                     {
-                        this.enchantLevels[i1] = EnchantmentHelper.calcItemStackEnchantability(this.rand, i1, l, itemstack);
+                        this.enchantLevels[i1] = EnchantmentHelper.calcItemStackEnchantability(this.rand, i1, (int)power, itemstack);
                         this.enchantClue[i1] = -1;
                         this.worldClue[i1] = -1;
 
@@ -221,9 +196,10 @@
                         {
                             this.enchantLevels[i1] = 0;
                         }
+                        this.enchantLevels[i1] = net.minecraftforge.event.ForgeEventFactory.onEnchantmentLevelSet(world, position, i1, (int)power, itemstack, enchantLevels[i1]);
                     }
 
-                    for (int j1 = 0; j1 < 3; j1++)
+                    for (int j1 = 0; j1 < 3; ++j1)
                     {
                         if (this.enchantLevels[j1] > 0)
                         {
@@ -243,7 +219,7 @@
             }
             else
             {
-                for (int i = 0; i < 3; i++)
+                for (int i = 0; i < 3; ++i)
                 {
                     this.enchantLevels[i] = 0;
                     this.enchantClue[i] = -1;
@@ -253,7 +229,6 @@
         }
     }
 
-    @Override
     public boolean enchantItem(EntityPlayer playerIn, int id)
     {
         ItemStack itemstack = this.tableInventory.getStackInSlot(0);
@@ -264,9 +239,7 @@
         {
             return false;
         }
-        else if (this.enchantLevels[id] > 0
-                 && !itemstack.isEmpty()
-                 && (playerIn.experienceLevel >= i && playerIn.experienceLevel >= this.enchantLevels[id] || playerIn.capabilities.isCreativeMode))
+        else if (this.enchantLevels[id] > 0 && !itemstack.isEmpty() && (playerIn.experienceLevel >= i && playerIn.experienceLevel >= this.enchantLevels[id] || playerIn.capabilities.isCreativeMode))
         {
             if (!this.world.isRemote)
             {
@@ -283,7 +256,7 @@
                         this.tableInventory.setInventorySlotContents(0, itemstack);
                     }
 
-                    for (int j = 0; j < list.size(); j++)
+                    for (int j = 0; j < list.size(); ++j)
                     {
                         EnchantmentData enchantmentdata = list.get(j);
 
@@ -317,15 +290,7 @@
                     this.tableInventory.markDirty();
                     this.xpSeed = playerIn.getXPSeed();
                     this.onCraftMatrixChanged(this.tableInventory);
-                    this.world
-                    .playSound(
-                        null,
-                        this.position,
-                        SoundEvents.BLOCK_ENCHANTMENT_TABLE_USE,
-                        SoundCategory.BLOCKS,
-                        1.0F,
-                        this.world.rand.nextFloat() * 0.1F + 0.9F
-                    );
+                    this.world.playSound((EntityPlayer)null, this.position, SoundEvents.BLOCK_ENCHANTMENT_TABLE_USE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F);
                 }
             }
 
@@ -357,7 +322,6 @@
         return itemstack.isEmpty() ? 0 : itemstack.getCount();
     }
 
-    @Override
     public void onContainerClosed(EntityPlayer playerIn)
     {
         super.onContainerClosed(playerIn);
@@ -368,22 +332,18 @@
         }
     }
 
-    @Override
     public boolean canInteractWith(EntityPlayer playerIn)
     {
-        return this.world.getBlockState(this.position).getBlock() != Blocks.ENCHANTING_TABLE
-               ? false
-               : !(
-                   playerIn.getDistanceSq(
-                       (double)this.position.getX() + 0.5,
-                       (double)this.position.getY() + 0.5,
-                       (double)this.position.getZ() + 0.5
-                   )
-                   > 64.0
-               );
+        if (this.world.getBlockState(this.position).getBlock() != Blocks.ENCHANTING_TABLE)
+        {
+            return false;
+        }
+        else
+        {
+            return playerIn.getDistanceSq((double)this.position.getX() + 0.5D, (double)this.position.getY() + 0.5D, (double)this.position.getZ() + 0.5D) <= 64.0D;
+        }
     }
 
-    @Override
     public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
     {
         ItemStack itemstack = ItemStack.EMPTY;
@@ -417,19 +377,18 @@
             }
             else
             {
-                if (this.inventorySlots.get(0).getHasStack() || !this.inventorySlots.get(0).isItemValid(itemstack1))
+                if (((Slot)this.inventorySlots.get(0)).getHasStack() || !((Slot)this.inventorySlots.get(0)).isItemValid(itemstack1))
                 {
                     return ItemStack.EMPTY;
                 }
 
-                if (itemstack1.hasTagCompound() && itemstack1.getCount() == 1)
+                if (itemstack1.hasTagCompound())// Forge: Fix MC-17431
                 {
-                    this.inventorySlots.get(0).putStack(itemstack1.copy());
-                    itemstack1.setCount(0);
+                    ((Slot)this.inventorySlots.get(0)).putStack(itemstack1.splitStack(1));
                 }
                 else if (!itemstack1.isEmpty())
                 {
-                    this.inventorySlots.get(0).putStack(new ItemStack(itemstack1.getItem(), 1, itemstack1.getMetadata()));
+                    ((Slot)this.inventorySlots.get(0)).putStack(new ItemStack(itemstack1.getItem(), 1, itemstack1.getMetadata()));
                     itemstack1.shrink(1);
                 }
             }
