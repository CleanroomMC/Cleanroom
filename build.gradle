buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name "MinecraftForge"
            url "https://maven.minecraftforge.net/"
        }
        maven {
            name "Outlands"
            url "https://maven.outlands.top/releases/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:6.0.+"
    }
}

plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.10"
    id "com.palantir.git-version" version "3.1.0"
}

import com.cleanroommc.gradle.helpers.ProjectConstants
import com.cleanroommc.gradle.helpers.tasks.Util


def props = project.properties
def sysProps = System.getProperties()
def details = versionDetails()

group 'com.cleanroommc'

version details.lastTag + (project.hasProperty("release") ?
        "" : ("+build." + details.commitDistance + (project.hasProperty("run_number") ?
                (".run." + props.run_number) : "")))

def version_txt = new File(project.projectDir, "version.txt")
version_txt.write(version.toString())
def spec_version = details.lastTag

println "Setting up Cleanroom $version"
if (project.hasProperty("run_number")) println("On GitHub runs #" + props.run_number)
println "Java: ${ -> sysProps['java.version']} | JVM: ${ -> sysProps['java.vm.version']} | Vendor: ${ -> sysProps['java.vendor']} | Architecture: ${ -> sysProps['os.arch']}"

// Initialize buildSrc
Util.init()

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ProjectConstants.COMPILER_JVM_ARGUMENTS
    options.encoding = 'UTF-8'
}

idea.project.settings.compiler.javac.javacAdditionalOptions = ProjectConstants.COMPILER_JVM_ARGUMENTS.join(' ')

tasks.register('setup') {
    group 'setup'
    // These must be strings so that we can do lazy resolution. Else we need evaluationDependsOnChildren above
    dependsOn ':minecraft:extractMapped'
    dependsOn ':cleanroom:extractMapped'
}

subprojects {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs += ProjectConstants.COMPILER_JVM_ARGUMENTS
            options.encoding = 'UTF-8'
        }
    }
}
